
RobodogV1.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ddc  08016dc8  08016dc8  00026dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017ba4  08017ba4  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  08017ba4  08017ba4  00027ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017bac  08017bac  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017bac  08017bac  00027bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017bb4  08017bb4  00027bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08017bb8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e8  2**0
                  CONTENTS
 10 .bss          00014980  200001e8  200001e8  000301e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014b68  20014b68  000301e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a943  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005636  00000000  00000000  0005ab5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d30  00000000  00000000  00060198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b48  00000000  00000000  00061ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029e7f  00000000  00000000  00063a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025c52  00000000  00000000  0008d88f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ecef7  00000000  00000000  000b34e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a03d8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009744  00000000  00000000  001a0428  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08016dac 	.word	0x08016dac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08016dac 	.word	0x08016dac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <MPUInit>:
 */

#include "MPU6050.h"


void MPUInit(MPU6050_t *mpu6050, I2C_HandleTypeDef *hi2c,uint8_t rate, uint8_t AccelerometerSensitivity, uint8_t GyroscopeSensitivity, float sample_time, float alpha){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af02      	add	r7, sp, #8
 8000ffe:	6178      	str	r0, [r7, #20]
 8001000:	6139      	str	r1, [r7, #16]
 8001002:	4611      	mov	r1, r2
 8001004:	461a      	mov	r2, r3
 8001006:	ed87 0a02 	vstr	s0, [r7, #8]
 800100a:	edc7 0a01 	vstr	s1, [r7, #4]
 800100e:	460b      	mov	r3, r1
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	4613      	mov	r3, r2
 8001014:	73bb      	strb	r3, [r7, #14]

	uint8_t data[2];
	uint8_t temp;
	mpu6050->hi2c = hi2c;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	601a      	str	r2, [r3, #0]
	mpu6050->alpha = alpha;
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	651a      	str	r2, [r3, #80]	; 0x50
	mpu6050->sample_time = sample_time;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	64da      	str	r2, [r3, #76]	; 0x4c


	data[0] = MPU6050_PWR_MGMT_1;
 8001028:	236b      	movs	r3, #107	; 0x6b
 800102a:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 800102c:	2300      	movs	r3, #0
 800102e:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(mpu6050->hi2c,(uint16_t)0xD0 , (uint8_t *)data, 2, 1000);
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	f107 021c 	add.w	r2, r7, #28
 8001038:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2302      	movs	r3, #2
 8001040:	21d0      	movs	r1, #208	; 0xd0
 8001042:	f005 fe59 	bl	8006cf8 <HAL_I2C_Master_Transmit>

	/* Set sample rate to 1kHz */
	data[0] = MPU6050_SMPLRT_DIV;
 8001046:	2319      	movs	r3, #25
 8001048:	773b      	strb	r3, [r7, #28]
	data[1] = rate;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(mpu6050->hi2c,(uint16_t)0xD0,(uint8_t *)data, 2,1000);
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	6818      	ldr	r0, [r3, #0]
 8001052:	f107 021c 	add.w	r2, r7, #28
 8001056:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105a:	9300      	str	r3, [sp, #0]
 800105c:	2302      	movs	r3, #2
 800105e:	21d0      	movs	r1, #208	; 0xd0
 8001060:	f005 fe4a 	bl	8006cf8 <HAL_I2C_Master_Transmit>

	/* Config accelerometer */
	uint8_t reg = MPU6050_ACCEL_CONFIG;
 8001064:	231c      	movs	r3, #28
 8001066:	76bb      	strb	r3, [r7, #26]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0, &reg, 1, 1000);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	6818      	ldr	r0, [r3, #0]
 800106c:	f107 021a 	add.w	r2, r7, #26
 8001070:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2301      	movs	r3, #1
 8001078:	21d0      	movs	r1, #208	; 0xd0
 800107a:	f005 fe3d 	bl	8006cf8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(mpu6050->hi2c, (uint16_t)0xD0, &temp, 1, 1000);
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	6818      	ldr	r0, [r3, #0]
 8001082:	f107 021b 	add.w	r2, r7, #27
 8001086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	21d0      	movs	r1, #208	; 0xd0
 8001090:	f005 ff30 	bl	8006ef4 <HAL_I2C_Master_Receive>
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 8001094:	7efb      	ldrb	r3, [r7, #27]
 8001096:	b25b      	sxtb	r3, r3
 8001098:	f023 0318 	bic.w	r3, r3, #24
 800109c:	b25a      	sxtb	r2, r3
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	00db      	lsls	r3, r3, #3
 80010a2:	b25b      	sxtb	r3, r3
 80010a4:	4313      	orrs	r3, r2
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0,&temp, 1, 1000);
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	6818      	ldr	r0, [r3, #0]
 80010b0:	f107 021b 	add.w	r2, r7, #27
 80010b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	21d0      	movs	r1, #208	; 0xd0
 80010be:	f005 fe1b 	bl	8006cf8 <HAL_I2C_Master_Transmit>

	switch (AccelerometerSensitivity) {
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d81f      	bhi.n	8001108 <MPUInit+0x110>
 80010c8:	a201      	add	r2, pc, #4	; (adr r2, 80010d0 <MPUInit+0xd8>)
 80010ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ce:	bf00      	nop
 80010d0:	080010e1 	.word	0x080010e1
 80010d4:	080010eb 	.word	0x080010eb
 80010d8:	080010f5 	.word	0x080010f5
 80010dc:	080010ff 	.word	0x080010ff
	case MPU6050_Accelerometer_2G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 80010e8:	e00f      	b.n	800110a <MPUInit+0x112>
	case MPU6050_Accelerometer_4G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 80010f0:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 80010f2:	e00a      	b.n	800110a <MPUInit+0x112>
	case MPU6050_Accelerometer_8G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80010fa:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 80010fc:	e005      	b.n	800110a <MPUInit+0x112>
	case MPU6050_Accelerometer_16G:
		mpu6050->Acc_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 8001104:	631a      	str	r2, [r3, #48]	; 0x30
		break;
 8001106:	e000      	b.n	800110a <MPUInit+0x112>
	default:
		break;
 8001108:	bf00      	nop
	}

	/* Config Gyroscope */
	reg = MPU6050_GYRO_CONFIG;
 800110a:	231b      	movs	r3, #27
 800110c:	76bb      	strb	r3, [r7, #26]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0, &reg, 1, 1000);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	6818      	ldr	r0, [r3, #0]
 8001112:	f107 021a 	add.w	r2, r7, #26
 8001116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	2301      	movs	r3, #1
 800111e:	21d0      	movs	r1, #208	; 0xd0
 8001120:	f005 fdea 	bl	8006cf8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(mpu6050->hi2c, (uint16_t)0xD0, &temp, 1, 1000);
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	f107 021b 	add.w	r2, r7, #27
 800112c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	21d0      	movs	r1, #208	; 0xd0
 8001136:	f005 fedd 	bl	8006ef4 <HAL_I2C_Master_Receive>
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity  << 3;
 800113a:	7efb      	ldrb	r3, [r7, #27]
 800113c:	b25b      	sxtb	r3, r3
 800113e:	f023 0318 	bic.w	r3, r3, #24
 8001142:	b25a      	sxtb	r2, r3
 8001144:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	b25b      	sxtb	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b25b      	sxtb	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0,&temp, 1, 1000);
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	6818      	ldr	r0, [r3, #0]
 8001158:	f107 021b 	add.w	r2, r7, #27
 800115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	21d0      	movs	r1, #208	; 0xd0
 8001166:	f005 fdc7 	bl	8006cf8 <HAL_I2C_Master_Transmit>

	switch (GyroscopeSensitivity) {
 800116a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800116e:	2b03      	cmp	r3, #3
 8001170:	d81a      	bhi.n	80011a8 <MPUInit+0x1b0>
 8001172:	a201      	add	r2, pc, #4	; (adr r2, 8001178 <MPUInit+0x180>)
 8001174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001178:	08001189 	.word	0x08001189
 800117c:	08001191 	.word	0x08001191
 8001180:	08001199 	.word	0x08001199
 8001184:	080011a1 	.word	0x080011a1
	case MPU6050_Gyroscope_250s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	4a0a      	ldr	r2, [pc, #40]	; (80011b4 <MPUInit+0x1bc>)
 800118c:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 800118e:	e00c      	b.n	80011aa <MPUInit+0x1b2>
	case MPU6050_Gyroscope_500s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	4a09      	ldr	r2, [pc, #36]	; (80011b8 <MPUInit+0x1c0>)
 8001194:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 8001196:	e008      	b.n	80011aa <MPUInit+0x1b2>
	case MPU6050_Gyroscope_1000s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <MPUInit+0x1c4>)
 800119c:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 800119e:	e004      	b.n	80011aa <MPUInit+0x1b2>
	case MPU6050_Gyroscope_2000s:
		mpu6050->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <MPUInit+0x1c8>)
 80011a4:	62da      	str	r2, [r3, #44]	; 0x2c
		break;
 80011a6:	e000      	b.n	80011aa <MPUInit+0x1b2>
	default:
		break;
 80011a8:	bf00      	nop
	}

}
 80011aa:	bf00      	nop
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	3bfa232d 	.word	0x3bfa232d
 80011b8:	3c7a232d 	.word	0x3c7a232d
 80011bc:	3cf9c190 	.word	0x3cf9c190
 80011c0:	3d79c190 	.word	0x3d79c190

080011c4 <MPUSetOffsets>:

void MPUSetOffsets(MPU6050_t *mpu6050, int16_t ACCx, int16_t ACCy, int16_t ACCz, int16_t GYROx, int16_t GYROy, int16_t GYROz){
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	4608      	mov	r0, r1
 80011ce:	4611      	mov	r1, r2
 80011d0:	461a      	mov	r2, r3
 80011d2:	4603      	mov	r3, r0
 80011d4:	817b      	strh	r3, [r7, #10]
 80011d6:	460b      	mov	r3, r1
 80011d8:	813b      	strh	r3, [r7, #8]
 80011da:	4613      	mov	r3, r2
 80011dc:	80fb      	strh	r3, [r7, #6]

	mpu6050->Acc_offsets[0] = ACCx;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	897a      	ldrh	r2, [r7, #10]
 80011e2:	82da      	strh	r2, [r3, #22]
	mpu6050->Acc_offsets[1] = ACCy;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	893a      	ldrh	r2, [r7, #8]
 80011e8:	831a      	strh	r2, [r3, #24]
	mpu6050->Acc_offsets[2] = ACCz;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	88fa      	ldrh	r2, [r7, #6]
 80011ee:	835a      	strh	r2, [r3, #26]

	mpu6050->Gyro_offsets[0] = GYROx;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	8b3a      	ldrh	r2, [r7, #24]
 80011f4:	821a      	strh	r2, [r3, #16]
	mpu6050->Gyro_offsets[1] = GYROy;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	8bba      	ldrh	r2, [r7, #28]
 80011fa:	825a      	strh	r2, [r3, #18]
	mpu6050->Gyro_offsets[2] = GYROz;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	8c3a      	ldrh	r2, [r7, #32]
 8001200:	829a      	strh	r2, [r3, #20]

}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <MPUReqAccGyro>:

void MPUReqAccGyro(MPU6050_t *mpu6050){
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af02      	add	r7, sp, #8
 8001214:	6078      	str	r0, [r7, #4]

	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8001216:	233b      	movs	r3, #59	; 0x3b
 8001218:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(mpu6050->hi2c, (uint16_t)0xD0, &reg, 1, 20);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6818      	ldr	r0, [r3, #0]
 800121e:	f107 020f 	add.w	r2, r7, #15
 8001222:	2314      	movs	r3, #20
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	21d0      	movs	r1, #208	; 0xd0
 800122a:	f005 fd65 	bl	8006cf8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive_IT(mpu6050->hi2c, (uint16_t)0xD0, mpu6050->buff, 14);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6818      	ldr	r0, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f103 021c 	add.w	r2, r3, #28
 8001238:	230e      	movs	r3, #14
 800123a:	21d0      	movs	r1, #208	; 0xd0
 800123c:	f006 f880 	bl	8007340 <HAL_I2C_Master_Receive_IT>

}
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <MPUHandlebuff>:

void MPUHandlebuff(MPU6050_t *mpu6050){
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]

	mpu6050->Acc[0] = (int16_t)(mpu6050->buff[0] << 8 | mpu6050->buff[1]);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7f1b      	ldrb	r3, [r3, #28]
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	7f5b      	ldrb	r3, [r3, #29]
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21a      	sxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	809a      	strh	r2, [r3, #4]
	mpu6050->Acc[1] = (int16_t)(mpu6050->buff[2] << 8 | mpu6050->buff[3]);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	7f9b      	ldrb	r3, [r3, #30]
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	b21a      	sxth	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7fdb      	ldrb	r3, [r3, #31]
 8001272:	b21b      	sxth	r3, r3
 8001274:	4313      	orrs	r3, r2
 8001276:	b21a      	sxth	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	80da      	strh	r2, [r3, #6]
	mpu6050->Acc[2] = (int16_t)(mpu6050->buff[4] << 8 | mpu6050->buff[5]);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	b21a      	sxth	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800128c:	b21b      	sxth	r3, r3
 800128e:	4313      	orrs	r3, r2
 8001290:	b21a      	sxth	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	811a      	strh	r2, [r3, #8]

	mpu6050->Acc_f[0] = (mpu6050->Acc[0] + mpu6050->Acc_offsets[0]) * mpu6050->Acc_Mult;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800129c:	461a      	mov	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80012a4:	4413      	add	r3, r2
 80012a6:	ee07 3a90 	vmov	s15, r3
 80012aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	mpu6050->Acc_f[1] = (mpu6050->Acc[1] + mpu6050->Acc_offsets[1]) * mpu6050->Acc_Mult;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80012cc:	4413      	add	r3, r2
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	mpu6050->Acc_f[2] = (mpu6050->Acc[2] + mpu6050->Acc_offsets[2]) * mpu6050->Acc_Mult;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80012ec:	461a      	mov	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80012f4:	4413      	add	r3, r2
 80012f6:	ee07 3a90 	vmov	s15, r3
 80012fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	mpu6050->Gyro[0] = (int16_t)(mpu6050->buff[8] << 8 | mpu6050->buff[9]);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800131e:	b21b      	sxth	r3, r3
 8001320:	4313      	orrs	r3, r2
 8001322:	b21a      	sxth	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	815a      	strh	r2, [r3, #10]
	mpu6050->Gyro[1] = (int16_t)(mpu6050->buff[10] << 8 | mpu6050->buff[11]);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	b21a      	sxth	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8001338:	b21b      	sxth	r3, r3
 800133a:	4313      	orrs	r3, r2
 800133c:	b21a      	sxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	819a      	strh	r2, [r3, #12]
	mpu6050->Gyro[2] = (int16_t)(mpu6050->buff[12] << 8 | mpu6050->buff[13]);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21a      	sxth	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	81da      	strh	r2, [r3, #14]

	mpu6050->Gyro_f[0] = (mpu6050->Gyro[0] + mpu6050->Gyro_offsets[0]) * mpu6050->Gyro_Mult;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001362:	461a      	mov	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800136a:	4413      	add	r3, r2
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	mpu6050->Gyro_f[1] = (mpu6050->Gyro[1] + mpu6050->Gyro_offsets[1]) * mpu6050->Gyro_Mult;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800138a:	461a      	mov	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001392:	4413      	add	r3, r2
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80013a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	mpu6050->Gyro_f[2] = (mpu6050->Gyro[2] + mpu6050->Gyro_offsets[2]) * mpu6050->Gyro_Mult;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80013b2:	461a      	mov	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80013ba:	4413      	add	r3, r2
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80013ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <CompPitchRoll>:

void CompPitchRoll(MPU6050_t *mpu6050){
 80013e0:	b5b0      	push	{r4, r5, r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

	float acc_pitch = atan ((mpu6050->Acc_f[1]) / (mpu6050->Acc_f[2])) *  57.3248;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80013f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013f8:	ee16 0a90 	vmov	r0, s13
 80013fc:	f7ff f8a4 	bl	8000548 <__aeabi_f2d>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	ec43 2b10 	vmov	d0, r2, r3
 8001408:	f00e f9c2 	bl	800f790 <atan>
 800140c:	ec51 0b10 	vmov	r0, r1, d0
 8001410:	a33d      	add	r3, pc, #244	; (adr r3, 8001508 <CompPitchRoll+0x128>)
 8001412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001416:	f7ff f8ef 	bl	80005f8 <__aeabi_dmul>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f7ff fbe1 	bl	8000be8 <__aeabi_d2f>
 8001426:	4603      	mov	r3, r0
 8001428:	60fb      	str	r3, [r7, #12]
	float acc_roll = - atan ((mpu6050->Acc_f[0]) / (mpu6050->Acc_f[2])) * 57.3248;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001436:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800143a:	ee16 0a90 	vmov	r0, s13
 800143e:	f7ff f883 	bl	8000548 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	ec43 2b10 	vmov	d0, r2, r3
 800144a:	f00e f9a1 	bl	800f790 <atan>
 800144e:	ec53 2b10 	vmov	r2, r3, d0
 8001452:	4614      	mov	r4, r2
 8001454:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001458:	a32b      	add	r3, pc, #172	; (adr r3, 8001508 <CompPitchRoll+0x128>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7ff f8c9 	bl	80005f8 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	f7ff fbbb 	bl	8000be8 <__aeabi_d2f>
 8001472:	4603      	mov	r3, r0
 8001474:	60bb      	str	r3, [r7, #8]

	mpu6050->pitch = (acc_pitch * mpu6050->alpha) + ((mpu6050->pitch + mpu6050->Gyro_f[0]*mpu6050->sample_time)*(1-mpu6050->alpha));
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800147c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001480:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001496:	ee66 7a27 	vmul.f32	s15, s12, s15
 800149a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80014a4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80014a8:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	mpu6050->roll = (acc_roll * mpu6050->alpha) + ((mpu6050->roll + mpu6050->Gyro_f[1]*mpu6050->sample_time)*(1-mpu6050->alpha));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80014c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80014c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80014da:	ee66 7a27 	vmul.f32	s15, s12, s15
 80014de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80014e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80014ec:	ee76 7a67 	vsub.f32	s15, s12, s15
 80014f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

}
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bdb0      	pop	{r4, r5, r7, pc}
 8001506:	bf00      	nop
 8001508:	0be0ded3 	.word	0x0be0ded3
 800150c:	404ca993 	.word	0x404ca993

08001510 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001516:	463b      	mov	r3, r7
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <MX_ADC1_Init+0xec>)
 8001524:	4a36      	ldr	r2, [pc, #216]	; (8001600 <MX_ADC1_Init+0xf0>)
 8001526:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001528:	4b34      	ldr	r3, [pc, #208]	; (80015fc <MX_ADC1_Init+0xec>)
 800152a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800152e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <MX_ADC1_Init+0xec>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <MX_ADC1_Init+0xec>)
 8001538:	2201      	movs	r2, #1
 800153a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <MX_ADC1_Init+0xec>)
 800153e:	2201      	movs	r2, #1
 8001540:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <MX_ADC1_Init+0xec>)
 8001544:	2200      	movs	r2, #0
 8001546:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800154a:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <MX_ADC1_Init+0xec>)
 800154c:	2200      	movs	r2, #0
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <MX_ADC1_Init+0xec>)
 8001552:	4a2c      	ldr	r2, [pc, #176]	; (8001604 <MX_ADC1_Init+0xf4>)
 8001554:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001556:	4b29      	ldr	r3, [pc, #164]	; (80015fc <MX_ADC1_Init+0xec>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800155c:	4b27      	ldr	r3, [pc, #156]	; (80015fc <MX_ADC1_Init+0xec>)
 800155e:	2204      	movs	r2, #4
 8001560:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001562:	4b26      	ldr	r3, [pc, #152]	; (80015fc <MX_ADC1_Init+0xec>)
 8001564:	2201      	movs	r2, #1
 8001566:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800156a:	4b24      	ldr	r3, [pc, #144]	; (80015fc <MX_ADC1_Init+0xec>)
 800156c:	2201      	movs	r2, #1
 800156e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001570:	4822      	ldr	r0, [pc, #136]	; (80015fc <MX_ADC1_Init+0xec>)
 8001572:	f003 ffa9 	bl	80054c8 <HAL_ADC_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800157c:	f001 fb40 	bl	8002c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001580:	2309      	movs	r3, #9
 8001582:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001584:	2301      	movs	r3, #1
 8001586:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158c:	463b      	mov	r3, r7
 800158e:	4619      	mov	r1, r3
 8001590:	481a      	ldr	r0, [pc, #104]	; (80015fc <MX_ADC1_Init+0xec>)
 8001592:	f004 f90b 	bl	80057ac <HAL_ADC_ConfigChannel>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800159c:	f001 fb30 	bl	8002c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80015a0:	230a      	movs	r3, #10
 80015a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015a4:	2302      	movs	r3, #2
 80015a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015a8:	463b      	mov	r3, r7
 80015aa:	4619      	mov	r1, r3
 80015ac:	4813      	ldr	r0, [pc, #76]	; (80015fc <MX_ADC1_Init+0xec>)
 80015ae:	f004 f8fd 	bl	80057ac <HAL_ADC_ConfigChannel>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015b8:	f001 fb22 	bl	8002c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80015bc:	230b      	movs	r3, #11
 80015be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80015c0:	2303      	movs	r3, #3
 80015c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c4:	463b      	mov	r3, r7
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	; (80015fc <MX_ADC1_Init+0xec>)
 80015ca:	f004 f8ef 	bl	80057ac <HAL_ADC_ConfigChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80015d4:	f001 fb14 	bl	8002c00 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80015d8:	230c      	movs	r3, #12
 80015da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80015dc:	2304      	movs	r3, #4
 80015de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e0:	463b      	mov	r3, r7
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_ADC1_Init+0xec>)
 80015e6:	f004 f8e1 	bl	80057ac <HAL_ADC_ConfigChannel>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80015f0:	f001 fb06 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	20000204 	.word	0x20000204
 8001600:	40012000 	.word	0x40012000
 8001604:	0f000001 	.word	0x0f000001

08001608 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a3c      	ldr	r2, [pc, #240]	; (8001718 <HAL_ADC_MspInit+0x110>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d171      	bne.n	800170e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_ADC_MspInit+0x114>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a3a      	ldr	r2, [pc, #232]	; (800171c <HAL_ADC_MspInit+0x114>)
 8001634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_ADC_MspInit+0x114>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b34      	ldr	r3, [pc, #208]	; (800171c <HAL_ADC_MspInit+0x114>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	4a33      	ldr	r2, [pc, #204]	; (800171c <HAL_ADC_MspInit+0x114>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6313      	str	r3, [r2, #48]	; 0x30
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_ADC_MspInit+0x114>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_ADC_MspInit+0x114>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a2c      	ldr	r2, [pc, #176]	; (800171c <HAL_ADC_MspInit+0x114>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_ADC_MspInit+0x114>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800167e:	2307      	movs	r3, #7
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001682:	2303      	movs	r3, #3
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4823      	ldr	r0, [pc, #140]	; (8001720 <HAL_ADC_MspInit+0x118>)
 8001692:	f005 f81d 	bl	80066d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001696:	2302      	movs	r3, #2
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169a:	2303      	movs	r3, #3
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	481e      	ldr	r0, [pc, #120]	; (8001724 <HAL_ADC_MspInit+0x11c>)
 80016aa:	f005 f811 	bl	80066d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016ae:	4b1e      	ldr	r3, [pc, #120]	; (8001728 <HAL_ADC_MspInit+0x120>)
 80016b0:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_ADC_MspInit+0x124>)
 80016b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016b4:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <HAL_ADC_MspInit+0x120>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_ADC_MspInit+0x120>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_ADC_MspInit+0x120>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <HAL_ADC_MspInit+0x120>)
 80016c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_ADC_MspInit+0x120>)
 80016d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_ADC_MspInit+0x120>)
 80016d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_ADC_MspInit+0x120>)
 80016e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_ADC_MspInit+0x120>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_ADC_MspInit+0x120>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016f2:	480d      	ldr	r0, [pc, #52]	; (8001728 <HAL_ADC_MspInit+0x120>)
 80016f4:	f004 fbdc 	bl	8005eb0 <HAL_DMA_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80016fe:	f001 fa7f 	bl	8002c00 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a08      	ldr	r2, [pc, #32]	; (8001728 <HAL_ADC_MspInit+0x120>)
 8001706:	639a      	str	r2, [r3, #56]	; 0x38
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_ADC_MspInit+0x120>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40012000 	.word	0x40012000
 800171c:	40023800 	.word	0x40023800
 8001720:	40020800 	.word	0x40020800
 8001724:	40020400 	.word	0x40020400
 8001728:	2000024c 	.word	0x2000024c
 800172c:	40026410 	.word	0x40026410

08001730 <SysInit>:
LEG_t legFL,legFR,legBL,legBR;
uint32_t step_time;
MPU6050_t imu;
QMC_t qmc;

void SysInit(){
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af04      	add	r7, sp, #16

	//Peripheral Initialization
	HAL_ADC_Start_DMA(&hadc1, ADCValue, 4);
 8001736:	2204      	movs	r2, #4
 8001738:	4923      	ldr	r1, [pc, #140]	; (80017c8 <SysInit+0x98>)
 800173a:	4824      	ldr	r0, [pc, #144]	; (80017cc <SysInit+0x9c>)
 800173c:	f003 ff08 	bl	8005550 <HAL_ADC_Start_DMA>
	LegInit(&legFL, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2100      	movs	r1, #0
 8001744:	4822      	ldr	r0, [pc, #136]	; (80017d0 <SysInit+0xa0>)
 8001746:	f000 fd3b 	bl	80021c0 <LegInit>
	height = 0.16;
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <SysInit+0xa4>)
 800174c:	4a22      	ldr	r2, [pc, #136]	; (80017d8 <SysInit+0xa8>)
 800174e:	601a      	str	r2, [r3, #0]
	step_time = 500;
 8001750:	4b22      	ldr	r3, [pc, #136]	; (80017dc <SysInit+0xac>)
 8001752:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001756:	601a      	str	r2, [r3, #0]
	step_length= 0.04;
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <SysInit+0xb0>)
 800175a:	4a22      	ldr	r2, [pc, #136]	; (80017e4 <SysInit+0xb4>)
 800175c:	601a      	str	r2, [r3, #0]
	step_height = 0.04;
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <SysInit+0xb8>)
 8001760:	4a20      	ldr	r2, [pc, #128]	; (80017e4 <SysInit+0xb4>)
 8001762:	601a      	str	r2, [r3, #0]
	//	legFL.hip_angle = 60.0;
	//	legFL.knee_angle = 71.0;

	HAL_Delay(50);
 8001764:	2032      	movs	r0, #50	; 0x32
 8001766:	f003 fe8b 	bl	8005480 <HAL_Delay>
	ServoDriverInit(&servodriver, &hi2c3, 0x40);
 800176a:	2240      	movs	r2, #64	; 0x40
 800176c:	491f      	ldr	r1, [pc, #124]	; (80017ec <SysInit+0xbc>)
 800176e:	4820      	ldr	r0, [pc, #128]	; (80017f0 <SysInit+0xc0>)
 8001770:	f003 f89a 	bl	80048a8 <ServoDriverInit>
	MPUInit(&imu, &hi2c2, MPU6050_DataRate_1KHz, MPU6050_Accelerometer_2G, MPU6050_Gyroscope_250s, 0.005, 0.5);
 8001774:	2300      	movs	r3, #0
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800177c:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 80017f4 <SysInit+0xc4>
 8001780:	2300      	movs	r3, #0
 8001782:	2207      	movs	r2, #7
 8001784:	491c      	ldr	r1, [pc, #112]	; (80017f8 <SysInit+0xc8>)
 8001786:	481d      	ldr	r0, [pc, #116]	; (80017fc <SysInit+0xcc>)
 8001788:	f7ff fc36 	bl	8000ff8 <MPUInit>
	MPUSetOffsets(&imu, -4600, 14900, 10154, 1150, 160, 920);
 800178c:	f44f 7366 	mov.w	r3, #920	; 0x398
 8001790:	9302      	str	r3, [sp, #8]
 8001792:	23a0      	movs	r3, #160	; 0xa0
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	f240 437e 	movw	r3, #1150	; 0x47e
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	f242 73aa 	movw	r3, #10154	; 0x27aa
 80017a0:	f643 2234 	movw	r2, #14900	; 0x3a34
 80017a4:	4916      	ldr	r1, [pc, #88]	; (8001800 <SysInit+0xd0>)
 80017a6:	4815      	ldr	r0, [pc, #84]	; (80017fc <SysInit+0xcc>)
 80017a8:	f7ff fd0c 	bl	80011c4 <MPUSetOffsets>
//	QMC_init(&qmc, &hi2c, 50);

	SetSmoothSpeed(0.01);
 80017ac:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8001804 <SysInit+0xd4>
 80017b0:	f000 fdb8 	bl	8002324 <SetSmoothSpeed>
	HAL_TIM_Base_Start_IT(&htim6);
 80017b4:	4814      	ldr	r0, [pc, #80]	; (8001808 <SysInit+0xd8>)
 80017b6:	f009 f827 	bl	800a808 <HAL_TIM_Base_Start_IT>
	MPUReqAccGyro(&imu);
 80017ba:	4810      	ldr	r0, [pc, #64]	; (80017fc <SysInit+0xcc>)
 80017bc:	f7ff fd27 	bl	800120e <MPUReqAccGyro>
	//	HAL_UART_Receive_IT(&huart3, &control, 1);


}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200002b4 	.word	0x200002b4
 80017cc:	20000204 	.word	0x20000204
 80017d0:	200002dc 	.word	0x200002dc
 80017d4:	200002c4 	.word	0x200002c4
 80017d8:	3e23d70a 	.word	0x3e23d70a
 80017dc:	200003fc 	.word	0x200003fc
 80017e0:	200002d8 	.word	0x200002d8
 80017e4:	3d23d70a 	.word	0x3d23d70a
 80017e8:	200002d4 	.word	0x200002d4
 80017ec:	200004c0 	.word	0x200004c0
 80017f0:	200002ac 	.word	0x200002ac
 80017f4:	3ba3d70a 	.word	0x3ba3d70a
 80017f8:	2000046c 	.word	0x2000046c
 80017fc:	20000400 	.word	0x20000400
 8001800:	ffffee08 	.word	0xffffee08
 8001804:	3c23d70a 	.word	0x3c23d70a
 8001808:	200016bc 	.word	0x200016bc

0800180c <MAP_Angle2Pulse>:

uint16_t MAP_Angle2Pulse(float input, float AngleMin, float AngleMax, int PulseMin, int PulseMax)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	; 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	ed87 0a05 	vstr	s0, [r7, #20]
 8001816:	edc7 0a04 	vstr	s1, [r7, #16]
 800181a:	ed87 1a03 	vstr	s2, [r7, #12]
 800181e:	60b8      	str	r0, [r7, #8]
 8001820:	6079      	str	r1, [r7, #4]
	uint16_t result = ((((input - AngleMin)*(float)(PulseMax - PulseMin))/(AngleMax - AngleMin)) + PulseMin);
 8001822:	ed97 7a05 	vldr	s14, [r7, #20]
 8001826:	edd7 7a04 	vldr	s15, [r7, #16]
 800182a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001840:	ed97 7a03 	vldr	s14, [r7, #12]
 8001844:	edd7 7a04 	vldr	s15, [r7, #16]
 8001848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	ee07 3a90 	vmov	s15, r3
 8001856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800185a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001862:	ee17 3a90 	vmov	r3, s15
 8001866:	83fb      	strh	r3, [r7, #30]

	if(result > PulseMax)
 8001868:	8bfb      	ldrh	r3, [r7, #30]
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	da02      	bge.n	8001876 <MAP_Angle2Pulse+0x6a>
		result = PulseMax;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	83fb      	strh	r3, [r7, #30]
 8001874:	e005      	b.n	8001882 <MAP_Angle2Pulse+0x76>
	else if(result < PulseMin)
 8001876:	8bfb      	ldrh	r3, [r7, #30]
 8001878:	68ba      	ldr	r2, [r7, #8]
 800187a:	429a      	cmp	r2, r3
 800187c:	dd01      	ble.n	8001882 <MAP_Angle2Pulse+0x76>
		result = PulseMin;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	83fb      	strh	r3, [r7, #30]

	return result;
 8001882:	8bfb      	ldrh	r3, [r7, #30]
}
 8001884:	4618      	mov	r0, r3
 8001886:	3724      	adds	r7, #36	; 0x24
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <ControlLoop>:

void ControlLoop(){
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

	LegUpdate(&legFL,legFL.x_offset, legFL.y_offset, height + legFL.z_offset, legFL.roll_offset, legFL.pitch_offset, legFL.yaw_offset);
 8001894:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <ControlLoop+0x138>)
 8001896:	edd3 6a06 	vldr	s13, [r3, #24]
 800189a:	4b4b      	ldr	r3, [pc, #300]	; (80019c8 <ControlLoop+0x138>)
 800189c:	ed93 6a07 	vldr	s12, [r3, #28]
 80018a0:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <ControlLoop+0x138>)
 80018a2:	ed93 7a08 	vldr	s14, [r3, #32]
 80018a6:	4b49      	ldr	r3, [pc, #292]	; (80019cc <ControlLoop+0x13c>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018b0:	4b45      	ldr	r3, [pc, #276]	; (80019c8 <ControlLoop+0x138>)
 80018b2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80018b6:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <ControlLoop+0x138>)
 80018b8:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 80018bc:	4b42      	ldr	r3, [pc, #264]	; (80019c8 <ControlLoop+0x138>)
 80018be:	ed93 5a0b 	vldr	s10, [r3, #44]	; 0x2c
 80018c2:	eef0 2a45 	vmov.f32	s5, s10
 80018c6:	eeb0 2a65 	vmov.f32	s4, s11
 80018ca:	eef0 1a47 	vmov.f32	s3, s14
 80018ce:	eeb0 1a67 	vmov.f32	s2, s15
 80018d2:	eef0 0a46 	vmov.f32	s1, s12
 80018d6:	eeb0 0a66 	vmov.f32	s0, s13
 80018da:	483b      	ldr	r0, [pc, #236]	; (80019c8 <ControlLoop+0x138>)
 80018dc:	f000 f880 	bl	80019e0 <LegUpdate>
	LegUpdate(&legFR,legFR.x_offset, legFR.y_offset, height + legFR.z_offset, legFR.roll_offset, legFR.pitch_offset, legFR.yaw_offset);
 80018e0:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <ControlLoop+0x140>)
 80018e2:	edd3 6a06 	vldr	s13, [r3, #24]
 80018e6:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <ControlLoop+0x140>)
 80018e8:	ed93 6a07 	vldr	s12, [r3, #28]
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <ControlLoop+0x140>)
 80018ee:	ed93 7a08 	vldr	s14, [r3, #32]
 80018f2:	4b36      	ldr	r3, [pc, #216]	; (80019cc <ControlLoop+0x13c>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fc:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <ControlLoop+0x140>)
 80018fe:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001902:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <ControlLoop+0x140>)
 8001904:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <ControlLoop+0x140>)
 800190a:	ed93 5a0b 	vldr	s10, [r3, #44]	; 0x2c
 800190e:	eef0 2a45 	vmov.f32	s5, s10
 8001912:	eeb0 2a65 	vmov.f32	s4, s11
 8001916:	eef0 1a47 	vmov.f32	s3, s14
 800191a:	eeb0 1a67 	vmov.f32	s2, s15
 800191e:	eef0 0a46 	vmov.f32	s1, s12
 8001922:	eeb0 0a66 	vmov.f32	s0, s13
 8001926:	482a      	ldr	r0, [pc, #168]	; (80019d0 <ControlLoop+0x140>)
 8001928:	f000 f85a 	bl	80019e0 <LegUpdate>
	LegUpdate(&legBL,legBL.x_offset, legBL.y_offset, height + legBL.z_offset, legBL.roll_offset, legBL.pitch_offset, legBL.yaw_offset);
 800192c:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <ControlLoop+0x144>)
 800192e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001932:	4b28      	ldr	r3, [pc, #160]	; (80019d4 <ControlLoop+0x144>)
 8001934:	ed93 6a07 	vldr	s12, [r3, #28]
 8001938:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <ControlLoop+0x144>)
 800193a:	ed93 7a08 	vldr	s14, [r3, #32]
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <ControlLoop+0x13c>)
 8001940:	edd3 7a00 	vldr	s15, [r3]
 8001944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <ControlLoop+0x144>)
 800194a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800194e:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <ControlLoop+0x144>)
 8001950:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 8001954:	4b1f      	ldr	r3, [pc, #124]	; (80019d4 <ControlLoop+0x144>)
 8001956:	ed93 5a0b 	vldr	s10, [r3, #44]	; 0x2c
 800195a:	eef0 2a45 	vmov.f32	s5, s10
 800195e:	eeb0 2a65 	vmov.f32	s4, s11
 8001962:	eef0 1a47 	vmov.f32	s3, s14
 8001966:	eeb0 1a67 	vmov.f32	s2, s15
 800196a:	eef0 0a46 	vmov.f32	s1, s12
 800196e:	eeb0 0a66 	vmov.f32	s0, s13
 8001972:	4818      	ldr	r0, [pc, #96]	; (80019d4 <ControlLoop+0x144>)
 8001974:	f000 f834 	bl	80019e0 <LegUpdate>
	LegUpdate(&legBR,legBR.x_offset, legBR.y_offset, height + legBR.z_offset, legBR.roll_offset, legBR.pitch_offset, legBR.yaw_offset);
 8001978:	4b17      	ldr	r3, [pc, #92]	; (80019d8 <ControlLoop+0x148>)
 800197a:	edd3 6a06 	vldr	s13, [r3, #24]
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <ControlLoop+0x148>)
 8001980:	ed93 6a07 	vldr	s12, [r3, #28]
 8001984:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <ControlLoop+0x148>)
 8001986:	ed93 7a08 	vldr	s14, [r3, #32]
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <ControlLoop+0x13c>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <ControlLoop+0x148>)
 8001996:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800199a:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <ControlLoop+0x148>)
 800199c:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 80019a0:	4b0d      	ldr	r3, [pc, #52]	; (80019d8 <ControlLoop+0x148>)
 80019a2:	ed93 5a0b 	vldr	s10, [r3, #44]	; 0x2c
 80019a6:	eef0 2a45 	vmov.f32	s5, s10
 80019aa:	eeb0 2a65 	vmov.f32	s4, s11
 80019ae:	eef0 1a47 	vmov.f32	s3, s14
 80019b2:	eeb0 1a67 	vmov.f32	s2, s15
 80019b6:	eef0 0a46 	vmov.f32	s1, s12
 80019ba:	eeb0 0a66 	vmov.f32	s0, s13
 80019be:	4806      	ldr	r0, [pc, #24]	; (80019d8 <ControlLoop+0x148>)
 80019c0:	f000 f80e 	bl	80019e0 <LegUpdate>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200002dc 	.word	0x200002dc
 80019cc:	200002c4 	.word	0x200002c4
 80019d0:	20000324 	.word	0x20000324
 80019d4:	2000036c 	.word	0x2000036c
 80019d8:	200003b4 	.word	0x200003b4
 80019dc:	00000000 	.word	0x00000000

080019e0 <LegUpdate>:

void LegUpdate(LEG_t *leg,float x_dist, float y_dist, float heightz, float roll, float pitch, float yaw){
 80019e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019e4:	ed2d 8b02 	vpush	{d8}
 80019e8:	b0a4      	sub	sp, #144	; 0x90
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	61f8      	str	r0, [r7, #28]
 80019ee:	ed87 0a06 	vstr	s0, [r7, #24]
 80019f2:	edc7 0a05 	vstr	s1, [r7, #20]
 80019f6:	ed87 1a04 	vstr	s2, [r7, #16]
 80019fa:	edc7 1a03 	vstr	s3, [r7, #12]
 80019fe:	ed87 2a02 	vstr	s4, [r7, #8]
 8001a02:	edc7 2a01 	vstr	s5, [r7, #4]

//	Yaw Calculations
	float y_origin,x_origin;
	if(leg->side == 0)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d112      	bne.n	8001a36 <LegUpdate+0x56>
		y_origin = y_dist + Robotwidth/2.0;
 8001a10:	6978      	ldr	r0, [r7, #20]
 8001a12:	f7fe fd99 	bl	8000548 <__aeabi_f2d>
 8001a16:	f20f 4348 	addw	r3, pc, #1096	; 0x448
 8001a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1e:	f7fe fc35 	bl	800028c <__adddf3>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4610      	mov	r0, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f7ff f8dd 	bl	8000be8 <__aeabi_d2f>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001a34:	e011      	b.n	8001a5a <LegUpdate+0x7a>
	else
		y_origin =  y_dist - Robotwidth/2.0;
 8001a36:	6978      	ldr	r0, [r7, #20]
 8001a38:	f7fe fd86 	bl	8000548 <__aeabi_f2d>
 8001a3c:	f20f 4320 	addw	r3, pc, #1056	; 0x420
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fc20 	bl	8000288 <__aeabi_dsub>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f7ff f8ca 	bl	8000be8 <__aeabi_d2f>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	if(leg->front == 0)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d111      	bne.n	8001a88 <LegUpdate+0xa8>
		x_origin = x_dist + Robotlength/2.0;
 8001a64:	69b8      	ldr	r0, [r7, #24]
 8001a66:	f7fe fd6f 	bl	8000548 <__aeabi_f2d>
 8001a6a:	a3fd      	add	r3, pc, #1012	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a70:	f7fe fc0c 	bl	800028c <__adddf3>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f7ff f8b4 	bl	8000be8 <__aeabi_d2f>
 8001a80:	4603      	mov	r3, r0
 8001a82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001a86:	e010      	b.n	8001aaa <LegUpdate+0xca>
	else
		x_origin = x_dist - Robotlength/2.0;
 8001a88:	69b8      	ldr	r0, [r7, #24]
 8001a8a:	f7fe fd5d 	bl	8000548 <__aeabi_f2d>
 8001a8e:	a3f4      	add	r3, pc, #976	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fbf8 	bl	8000288 <__aeabi_dsub>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4610      	mov	r0, r2
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f7ff f8a2 	bl	8000be8 <__aeabi_d2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	float original_yaw = atan2f(y_origin,x_origin);
 8001aaa:	edd7 0a22 	vldr	s1, [r7, #136]	; 0x88
 8001aae:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8001ab2:	f00e fa57 	bl	800ff64 <atan2f>
 8001ab6:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
	float radius = sqrtf(powf(y_origin,2) + powf(x_origin,2));
 8001aba:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001abe:	ed97 0a23 	vldr	s0, [r7, #140]	; 0x8c
 8001ac2:	f00e fa51 	bl	800ff68 <powf>
 8001ac6:	eeb0 8a40 	vmov.f32	s16, s0
 8001aca:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001ace:	ed97 0a22 	vldr	s0, [r7, #136]	; 0x88
 8001ad2:	f00e fa49 	bl	800ff68 <powf>
 8001ad6:	eef0 7a40 	vmov.f32	s15, s0
 8001ada:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001ade:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae2:	f00e fa99 	bl	8010018 <sqrtf>
 8001ae6:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68

	float new_yaw = original_yaw + DEGTORAD(yaw);
 8001aea:	ed97 7a01 	vldr	s14, [r7, #4]
 8001aee:	eddf 6ade 	vldr	s13, [pc, #888]	; 8001e68 <LegUpdate+0x488>
 8001af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001af6:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8001afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afe:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
	float y_yaw = radius * sinf(new_yaw);
 8001b02:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8001b06:	f00e f9bb 	bl	800fe80 <sinf>
 8001b0a:	eeb0 7a40 	vmov.f32	s14, s0
 8001b0e:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b16:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	float x_yaw = radius * cosf(new_yaw);
 8001b1a:	ed97 0a19 	vldr	s0, [r7, #100]	; 0x64
 8001b1e:	f00e f963 	bl	800fde8 <cosf>
 8001b22:	eeb0 7a40 	vmov.f32	s14, s0
 8001b26:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8001b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

	if(leg->side == 0)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d112      	bne.n	8001b62 <LegUpdate+0x182>
		y_yaw = y_yaw - Robotwidth/2.0;
 8001b3c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001b40:	f7fe fd02 	bl	8000548 <__aeabi_f2d>
 8001b44:	a3c6      	add	r3, pc, #792	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b4a:	f7fe fb9d 	bl	8000288 <__aeabi_dsub>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f7ff f847 	bl	8000be8 <__aeabi_d2f>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b60:	e011      	b.n	8001b86 <LegUpdate+0x1a6>
	else
		y_yaw =  y_yaw + Robotwidth/2.0;
 8001b62:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001b66:	f7fe fcef 	bl	8000548 <__aeabi_f2d>
 8001b6a:	a3bd      	add	r3, pc, #756	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fb8c 	bl	800028c <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f834 	bl	8000be8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	if(leg->front == 0)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d112      	bne.n	8001bb6 <LegUpdate+0x1d6>
		x_yaw = x_yaw - Robotlength/2.0;
 8001b90:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001b94:	f7fe fcd8 	bl	8000548 <__aeabi_f2d>
 8001b98:	a3b1      	add	r3, pc, #708	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9e:	f7fe fb73 	bl	8000288 <__aeabi_dsub>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f7ff f81d 	bl	8000be8 <__aeabi_d2f>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001bb4:	e011      	b.n	8001bda <LegUpdate+0x1fa>
	else
		x_yaw = x_yaw + Robotlength/2.0;
 8001bb6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001bba:	f7fe fcc5 	bl	8000548 <__aeabi_f2d>
 8001bbe:	a3a8      	add	r3, pc, #672	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc4:	f7fe fb62 	bl	800028c <__adddf3>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	460b      	mov	r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	4619      	mov	r1, r3
 8001bd0:	f7ff f80a 	bl	8000be8 <__aeabi_d2f>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	//Pitch Calculations
	float height_offset_pitch = sinf(DEGTORAD(pitch)) * (Robotlength/2.0);
 8001bda:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bde:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8001e68 <LegUpdate+0x488>
 8001be2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001be6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bea:	f00e f949 	bl	800fe80 <sinf>
 8001bee:	ee10 3a10 	vmov	r3, s0
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7fe fca8 	bl	8000548 <__aeabi_f2d>
 8001bf8:	a399      	add	r3, pc, #612	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfe:	f7fe fcfb 	bl	80005f8 <__aeabi_dmul>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe ffed 	bl	8000be8 <__aeabi_d2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	663b      	str	r3, [r7, #96]	; 0x60
	float cal_width_pitch = cosf(DEGTORAD(pitch)) * (Robotlength/2.0);
 8001c12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c16:	eddf 6a94 	vldr	s13, [pc, #592]	; 8001e68 <LegUpdate+0x488>
 8001c1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001c22:	f00e f8e1 	bl	800fde8 <cosf>
 8001c26:	ee10 3a10 	vmov	r3, s0
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc8c 	bl	8000548 <__aeabi_f2d>
 8001c30:	a38b      	add	r3, pc, #556	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fcdf 	bl	80005f8 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7fe ffd1 	bl	8000be8 <__aeabi_d2f>
 8001c46:	4603      	mov	r3, r0
 8001c48:	65fb      	str	r3, [r7, #92]	; 0x5c

	float dst_tognd_pitch, deltax;
	if (leg->front == 0){
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d126      	bne.n	8001ca2 <LegUpdate+0x2c2>
		dst_tognd_pitch = heightz + height_offset_pitch;
 8001c54:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c58:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c60:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		deltax = (Robotlength/2.0 + x_yaw) - cal_width_pitch;
 8001c64:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001c68:	f7fe fc6e 	bl	8000548 <__aeabi_f2d>
 8001c6c:	a37c      	add	r3, pc, #496	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fb0b 	bl	800028c <__adddf3>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4690      	mov	r8, r2
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001c80:	f7fe fc62 	bl	8000548 <__aeabi_f2d>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4640      	mov	r0, r8
 8001c8a:	4649      	mov	r1, r9
 8001c8c:	f7fe fafc 	bl	8000288 <__aeabi_dsub>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe ffa6 	bl	8000be8 <__aeabi_d2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001ca0:	e025      	b.n	8001cee <LegUpdate+0x30e>
	}else{
		dst_tognd_pitch = heightz - height_offset_pitch;
 8001ca2:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ca6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cae:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
		deltax = cal_width_pitch - (Robotlength/2.0 - x_yaw);
 8001cb2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001cb4:	f7fe fc48 	bl	8000548 <__aeabi_f2d>
 8001cb8:	4680      	mov	r8, r0
 8001cba:	4689      	mov	r9, r1
 8001cbc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001cc0:	f7fe fc42 	bl	8000548 <__aeabi_f2d>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	a165      	add	r1, pc, #404	; (adr r1, 8001e60 <LegUpdate+0x480>)
 8001cca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cce:	f7fe fadb 	bl	8000288 <__aeabi_dsub>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4640      	mov	r0, r8
 8001cd8:	4649      	mov	r1, r9
 8001cda:	f7fe fad5 	bl	8000288 <__aeabi_dsub>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7fe ff7f 	bl	8000be8 <__aeabi_d2f>
 8001cea:	4603      	mov	r3, r0
 8001cec:	67bb      	str	r3, [r7, #120]	; 0x78
	}

	float x_angle_offset = atanf(deltax/dst_tognd_pitch);
 8001cee:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 8001cf2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8001cf6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001cfa:	eeb0 0a66 	vmov.f32	s0, s13
 8001cfe:	f00d ff9f 	bl	800fc40 <atanf>
 8001d02:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
	float dst_tognd_pitch_x = sqrtf(powf(deltax,2) + powf(dst_tognd_pitch,2));
 8001d06:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d0a:	ed97 0a1e 	vldr	s0, [r7, #120]	; 0x78
 8001d0e:	f00e f92b 	bl	800ff68 <powf>
 8001d12:	eeb0 8a40 	vmov.f32	s16, s0
 8001d16:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001d1a:	ed97 0a1f 	vldr	s0, [r7, #124]	; 0x7c
 8001d1e:	f00e f923 	bl	800ff68 <powf>
 8001d22:	eef0 7a40 	vmov.f32	s15, s0
 8001d26:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2e:	f00e f973 	bl	8010018 <sqrtf>
 8001d32:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54

	float pitch_x = -sinf(DEGTORAD(pitch) - x_angle_offset) * dst_tognd_pitch_x;
 8001d36:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d3a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8001e68 <LegUpdate+0x488>
 8001d3e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d42:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4e:	f00e f897 	bl	800fe80 <sinf>
 8001d52:	eef0 7a40 	vmov.f32	s15, s0
 8001d56:	eef1 7a67 	vneg.f32	s15, s15
 8001d5a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d62:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	float pitch_z = cosf(DEGTORAD(pitch) - x_angle_offset) * dst_tognd_pitch_x;
 8001d66:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d6a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001e68 <LegUpdate+0x488>
 8001d6e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d72:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001d76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7e:	f00e f833 	bl	800fde8 <cosf>
 8001d82:	eeb0 7a40 	vmov.f32	s14, s0
 8001d86:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8e:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c


	//Roll Calculations
	float height_offset_roll = sinf(DEGTORAD(roll)) * (Robotwidth/2.0);
 8001d92:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d96:	eddf 6a34 	vldr	s13, [pc, #208]	; 8001e68 <LegUpdate+0x488>
 8001d9a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d9e:	eeb0 0a47 	vmov.f32	s0, s14
 8001da2:	f00e f86d 	bl	800fe80 <sinf>
 8001da6:	ee10 3a10 	vmov	r3, s0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbcc 	bl	8000548 <__aeabi_f2d>
 8001db0:	a32b      	add	r3, pc, #172	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fc1f 	bl	80005f8 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe ff11 	bl	8000be8 <__aeabi_d2f>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	64bb      	str	r3, [r7, #72]	; 0x48
	float cal_width_roll = cosf(DEGTORAD(roll)) * (Robotwidth/2.0);
 8001dca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001e68 <LegUpdate+0x488>
 8001dd2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dd6:	eeb0 0a47 	vmov.f32	s0, s14
 8001dda:	f00e f805 	bl	800fde8 <cosf>
 8001dde:	ee10 3a10 	vmov	r3, s0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe fbb0 	bl	8000548 <__aeabi_f2d>
 8001de8:	a31d      	add	r3, pc, #116	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	f7fe fc03 	bl	80005f8 <__aeabi_dmul>
 8001df2:	4602      	mov	r2, r0
 8001df4:	460b      	mov	r3, r1
 8001df6:	4610      	mov	r0, r2
 8001df8:	4619      	mov	r1, r3
 8001dfa:	f7fe fef5 	bl	8000be8 <__aeabi_d2f>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	647b      	str	r3, [r7, #68]	; 0x44

	float dst_tognd_roll, deltay;
	if (leg->side == 0){
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d12f      	bne.n	8001e6c <LegUpdate+0x48c>
		dst_tognd_roll = pitch_z + height_offset_roll;
 8001e0c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e10:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e18:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		deltay = (Robotwidth/2.0 + y_yaw) - cal_width_roll;
 8001e1c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001e20:	f7fe fb92 	bl	8000548 <__aeabi_f2d>
 8001e24:	a30e      	add	r3, pc, #56	; (adr r3, 8001e60 <LegUpdate+0x480>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fa2f 	bl	800028c <__adddf3>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4690      	mov	r8, r2
 8001e34:	4699      	mov	r9, r3
 8001e36:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001e38:	f7fe fb86 	bl	8000548 <__aeabi_f2d>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4640      	mov	r0, r8
 8001e42:	4649      	mov	r1, r9
 8001e44:	f7fe fa20 	bl	8000288 <__aeabi_dsub>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f7fe feca 	bl	8000be8 <__aeabi_d2f>
 8001e54:	4603      	mov	r3, r0
 8001e56:	673b      	str	r3, [r7, #112]	; 0x70
 8001e58:	e02e      	b.n	8001eb8 <LegUpdate+0x4d8>
 8001e5a:	bf00      	nop
 8001e5c:	f3af 8000 	nop.w
 8001e60:	0a3d70a4 	.word	0x0a3d70a4
 8001e64:	3fc0a3d7 	.word	0x3fc0a3d7
 8001e68:	42652b85 	.word	0x42652b85
	}else{
		dst_tognd_roll = pitch_z - height_offset_roll;
 8001e6c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001e70:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e78:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
		deltay = cal_width_roll - (Robotwidth/2.0 - y_yaw);
 8001e7c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001e7e:	f7fe fb63 	bl	8000548 <__aeabi_f2d>
 8001e82:	4680      	mov	r8, r0
 8001e84:	4689      	mov	r9, r1
 8001e86:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001e8a:	f7fe fb5d 	bl	8000548 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	a1c9      	add	r1, pc, #804	; (adr r1, 80021b8 <LegUpdate+0x7d8>)
 8001e94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e98:	f7fe f9f6 	bl	8000288 <__aeabi_dsub>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4640      	mov	r0, r8
 8001ea2:	4649      	mov	r1, r9
 8001ea4:	f7fe f9f0 	bl	8000288 <__aeabi_dsub>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f7fe fe9a 	bl	8000be8 <__aeabi_d2f>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	673b      	str	r3, [r7, #112]	; 0x70
	}

	float y_angle_offset = atanf(deltay/dst_tognd_roll);
 8001eb8:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 8001ebc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8001ec0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ec4:	eeb0 0a66 	vmov.f32	s0, s13
 8001ec8:	f00d feba 	bl	800fc40 <atanf>
 8001ecc:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
	float dst_tognd_roll_y = sqrtf(powf(deltay,2) + powf(dst_tognd_roll,2));
 8001ed0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001ed4:	ed97 0a1c 	vldr	s0, [r7, #112]	; 0x70
 8001ed8:	f00e f846 	bl	800ff68 <powf>
 8001edc:	eeb0 8a40 	vmov.f32	s16, s0
 8001ee0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001ee4:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8001ee8:	f00e f83e 	bl	800ff68 <powf>
 8001eec:	eef0 7a40 	vmov.f32	s15, s0
 8001ef0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef8:	f00e f88e 	bl	8010018 <sqrtf>
 8001efc:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c

	float roll_y = -sin(DEGTORAD(roll) - y_angle_offset) * dst_tognd_roll_y;
 8001f00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f04:	eddf 6aa6 	vldr	s13, [pc, #664]	; 80021a0 <LegUpdate+0x7c0>
 8001f08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f0c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f14:	ee17 0a90 	vmov	r0, s15
 8001f18:	f7fe fb16 	bl	8000548 <__aeabi_f2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	ec43 2b10 	vmov	d0, r2, r3
 8001f24:	f00d fe34 	bl	800fb90 <sin>
 8001f28:	ec53 2b10 	vmov	r2, r3, d0
 8001f2c:	4614      	mov	r4, r2
 8001f2e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f34:	f7fe fb08 	bl	8000548 <__aeabi_f2d>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4620      	mov	r0, r4
 8001f3e:	4629      	mov	r1, r5
 8001f40:	f7fe fb5a 	bl	80005f8 <__aeabi_dmul>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7fe fe4c 	bl	8000be8 <__aeabi_d2f>
 8001f50:	4603      	mov	r3, r0
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
	float roll_z = cos(DEGTORAD(roll) - y_angle_offset) * dst_tognd_roll_y;
 8001f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f58:	eddf 6a91 	vldr	s13, [pc, #580]	; 80021a0 <LegUpdate+0x7c0>
 8001f5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f60:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f68:	ee17 0a90 	vmov	r0, s15
 8001f6c:	f7fe faec 	bl	8000548 <__aeabi_f2d>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	ec43 2b10 	vmov	d0, r2, r3
 8001f78:	f00d fdaa 	bl	800fad0 <cos>
 8001f7c:	ec55 4b10 	vmov	r4, r5, d0
 8001f80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f82:	f7fe fae1 	bl	8000548 <__aeabi_f2d>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe fb33 	bl	80005f8 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4610      	mov	r0, r2
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f7fe fe25 	bl	8000be8 <__aeabi_d2f>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	637b      	str	r3, [r7, #52]	; 0x34

	 //Final Angle Calculations
	float y_angle = atanf(roll_y/roll_z);
 8001fa2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001fa6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001faa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001fae:	eeb0 0a66 	vmov.f32	s0, s13
 8001fb2:	f00d fe45 	bl	800fc40 <atanf>
 8001fb6:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
	float y_height = sqrtf(powf(roll_y,2) + powf(roll_z,2));
 8001fba:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001fbe:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8001fc2:	f00d ffd1 	bl	800ff68 <powf>
 8001fc6:	eeb0 8a40 	vmov.f32	s16, s0
 8001fca:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8001fce:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8001fd2:	f00d ffc9 	bl	800ff68 <powf>
 8001fd6:	eef0 7a40 	vmov.f32	s15, s0
 8001fda:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001fde:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe2:	f00e f819 	bl	8010018 <sqrtf>
 8001fe6:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	float x_angle = atanf(pitch_x/y_height);
 8001fea:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001fee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ff2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ff6:	eeb0 0a66 	vmov.f32	s0, s13
 8001ffa:	f00d fe21 	bl	800fc40 <atanf>
 8001ffe:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28
	float x_height = sqrtf(powf(pitch_x,2) + powf(y_height,2));
 8002002:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002006:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 800200a:	f00d ffad 	bl	800ff68 <powf>
 800200e:	eeb0 8a40 	vmov.f32	s16, s0
 8002012:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002016:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 800201a:	f00d ffa5 	bl	800ff68 <powf>
 800201e:	eef0 7a40 	vmov.f32	s15, s0
 8002022:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002026:	eeb0 0a67 	vmov.f32	s0, s15
 800202a:	f00d fff5 	bl	8010018 <sqrtf>
 800202e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24

	if (leg->side == 0)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10d      	bne.n	8002058 <LegUpdate+0x678>
		leg->des_shoulder_angle = 90.0 + RADTODEG(y_angle);
 800203c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002040:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80021a0 <LegUpdate+0x7c0>
 8002044:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002048:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80021a4 <LegUpdate+0x7c4>
 800204c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	edc3 7a02 	vstr	s15, [r3, #8]
 8002056:	e00c      	b.n	8002072 <LegUpdate+0x692>
	else
		leg->des_shoulder_angle = 90.0 - RADTODEG(y_angle);
 8002058:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800205c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80021a0 <LegUpdate+0x7c0>
 8002060:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002064:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80021a4 <LegUpdate+0x7c4>
 8002068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	edc3 7a02 	vstr	s15, [r3, #8]

	leg->des_hip_angle = 90.0 - RADTODEG(acosf((powf(x_height,2)+powf(UpperLeg,2)-powf(LowerLeg,2))/(2.0*UpperLeg*x_height))) + RADTODEG(x_angle);
 8002072:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002076:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800207a:	f00d ff75 	bl	800ff68 <powf>
 800207e:	eef0 7a40 	vmov.f32	s15, s0
 8002082:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80021a8 <LegUpdate+0x7c8>
 8002086:	ee77 7a87 	vadd.f32	s15, s15, s14
 800208a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80021ac <LegUpdate+0x7cc>
 800208e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002092:	ee17 0a90 	vmov	r0, s15
 8002096:	f7fe fa57 	bl	8000548 <__aeabi_f2d>
 800209a:	4604      	mov	r4, r0
 800209c:	460d      	mov	r5, r1
 800209e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80020a0:	f7fe fa52 	bl	8000548 <__aeabi_f2d>
 80020a4:	a33a      	add	r3, pc, #232	; (adr r3, 8002190 <LegUpdate+0x7b0>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	f7fe faa5 	bl	80005f8 <__aeabi_dmul>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe fbc9 	bl	800084c <__aeabi_ddiv>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7fe fd91 	bl	8000be8 <__aeabi_d2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	ee00 3a10 	vmov	s0, r3
 80020cc:	f00d ff1e 	bl	800ff0c <acosf>
 80020d0:	eef0 7a40 	vmov.f32	s15, s0
 80020d4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80021a0 <LegUpdate+0x7c0>
 80020d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020dc:	ee17 0a90 	vmov	r0, s15
 80020e0:	f7fe fa32 	bl	8000548 <__aeabi_f2d>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	f04f 0000 	mov.w	r0, #0
 80020ec:	4930      	ldr	r1, [pc, #192]	; (80021b0 <LegUpdate+0x7d0>)
 80020ee:	f7fe f8cb 	bl	8000288 <__aeabi_dsub>
 80020f2:	4602      	mov	r2, r0
 80020f4:	460b      	mov	r3, r1
 80020f6:	4614      	mov	r4, r2
 80020f8:	461d      	mov	r5, r3
 80020fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80020fe:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80021a0 <LegUpdate+0x7c0>
 8002102:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002106:	ee17 0a90 	vmov	r0, s15
 800210a:	f7fe fa1d 	bl	8000548 <__aeabi_f2d>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4620      	mov	r0, r4
 8002114:	4629      	mov	r1, r5
 8002116:	f7fe f8b9 	bl	800028c <__adddf3>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f7fe fd61 	bl	8000be8 <__aeabi_d2f>
 8002126:	4602      	mov	r2, r0
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	601a      	str	r2, [r3, #0]
	leg->des_knee_angle =  RADTODEG(acosf((powf(LowerLeg,2)+powf(UpperLeg,2)-powf(x_height,2))/(2.0*UpperLeg*LowerLeg))) ;
 800212c:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8002130:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002134:	f00d ff18 	bl	800ff68 <powf>
 8002138:	eef0 7a40 	vmov.f32	s15, s0
 800213c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80021b4 <LegUpdate+0x7d4>
 8002140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002144:	ee17 0a90 	vmov	r0, s15
 8002148:	f7fe f9fe 	bl	8000548 <__aeabi_f2d>
 800214c:	a312      	add	r3, pc, #72	; (adr r3, 8002198 <LegUpdate+0x7b8>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe fb7b 	bl	800084c <__aeabi_ddiv>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe fd43 	bl	8000be8 <__aeabi_d2f>
 8002162:	4603      	mov	r3, r0
 8002164:	ee00 3a10 	vmov	s0, r3
 8002168:	f00d fed0 	bl	800ff0c <acosf>
 800216c:	eef0 7a40 	vmov.f32	s15, s0
 8002170:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80021a0 <LegUpdate+0x7c0>
 8002174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	edc3 7a01 	vstr	s15, [r3, #4]

}
 800217e:	bf00      	nop
 8002180:	3790      	adds	r7, #144	; 0x90
 8002182:	46bd      	mov	sp, r7
 8002184:	ecbd 8b02 	vpop	{d8}
 8002188:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800218c:	f3af 8000 	nop.w
 8002190:	5a1cac08 	.word	0x5a1cac08
 8002194:	3fcf3b64 	.word	0x3fcf3b64
 8002198:	cddd6e04 	.word	0xcddd6e04
 800219c:	3fa21d53 	.word	0x3fa21d53
 80021a0:	42652b85 	.word	0x42652b85
 80021a4:	42b40000 	.word	0x42b40000
 80021a8:	3c73dc06 	.word	0x3c73dc06
 80021ac:	3cac3c9e 	.word	0x3cac3c9e
 80021b0:	40568000 	.word	0x40568000
 80021b4:	3d131550 	.word	0x3d131550
 80021b8:	0a3d70a4 	.word	0x0a3d70a4
 80021bc:	3fc0a3d7 	.word	0x3fc0a3d7

080021c0 <LegInit>:

void LegInit(LEG_t *leg, uint8_t side, uint8_t front){
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	70fb      	strb	r3, [r7, #3]
 80021cc:	4613      	mov	r3, r2
 80021ce:	70bb      	strb	r3, [r7, #2]
	leg->des_hip_angle  =  60.0;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a1a      	ldr	r2, [pc, #104]	; (800223c <LegInit+0x7c>)
 80021d4:	601a      	str	r2, [r3, #0]
	leg->des_knee_angle  =  73.1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a19      	ldr	r2, [pc, #100]	; (8002240 <LegInit+0x80>)
 80021da:	605a      	str	r2, [r3, #4]
	leg->hip_angle = 60.0;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a17      	ldr	r2, [pc, #92]	; (800223c <LegInit+0x7c>)
 80021e0:	60da      	str	r2, [r3, #12]
	leg->knee_angle = 73.1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a16      	ldr	r2, [pc, #88]	; (8002240 <LegInit+0x80>)
 80021e6:	611a      	str	r2, [r3, #16]
	leg->comply_angle = 0.0;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f04f 0200 	mov.w	r2, #0
 80021ee:	645a      	str	r2, [r3, #68]	; 0x44
	leg->x_offset = 0.0;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	619a      	str	r2, [r3, #24]
	leg->y_offset = 0.0;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f04f 0200 	mov.w	r2, #0
 80021fe:	61da      	str	r2, [r3, #28]
	leg->z_offset = 0.0;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f04f 0200 	mov.w	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
	leg->roll_offset = 0.0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	625a      	str	r2, [r3, #36]	; 0x24
	leg->pitch_offset = 0.0;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f04f 0200 	mov.w	r2, #0
 8002216:	629a      	str	r2, [r3, #40]	; 0x28
	leg->yaw_offset = 0.0;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c
	leg->side = side;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	78fa      	ldrb	r2, [r7, #3]
 8002224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	leg->front = front;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	78ba      	ldrb	r2, [r7, #2]
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8002230:	bf00      	nop
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	42700000 	.word	0x42700000
 8002240:	42923333 	.word	0x42923333

08002244 <LegStepLoop>:

void LegStepLoop(LEG_t *leg){
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	StepLoop(leg->des_hip_angle, &(leg->hip_angle));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	edd3 7a00 	vldr	s15, [r3]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	330c      	adds	r3, #12
 8002256:	4618      	mov	r0, r3
 8002258:	eeb0 0a67 	vmov.f32	s0, s15
 800225c:	f000 f89a 	bl	8002394 <StepLoop>
	StepLoop(leg->des_knee_angle, &(leg->knee_angle));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edd3 7a01 	vldr	s15, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3310      	adds	r3, #16
 800226a:	4618      	mov	r0, r3
 800226c:	eeb0 0a67 	vmov.f32	s0, s15
 8002270:	f000 f890 	bl	8002394 <StepLoop>
	StepLoop(leg->des_shoulder_angle, &(leg->shoulder_angle));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	edd3 7a02 	vldr	s15, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3314      	adds	r3, #20
 800227e:	4618      	mov	r0, r3
 8002280:	eeb0 0a67 	vmov.f32	s0, s15
 8002284:	f000 f886 	bl	8002394 <StepLoop>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <LegComply>:
	leg->roll_offset = roll_offset;
	leg->pitch_offset = pitch_offset;
	leg->yaw_offset = yaw_offset;
}

void LegComply(LEG_t *leg, uint32_t force){
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]

	if(force < 400){
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80022a0:	d208      	bcs.n	80022b4 <LegComply+0x24>
		leg->onground = 0;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		leg->comply_angle = 0.0;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	645a      	str	r2, [r3, #68]	; 0x44
			leg->comply_angle = ((force - 650)/300.0)*15.0;
		}else{
			leg->comply_angle = 0.0;
		}
	}
}
 80022b2:	e02a      	b.n	800230a <LegComply+0x7a>
		leg->onground = 1;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		if(force > 650){
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	f240 228a 	movw	r2, #650	; 0x28a
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d91d      	bls.n	8002302 <LegComply+0x72>
			leg->comply_angle = ((force - 650)/300.0)*15.0;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f2a3 238a 	subw	r3, r3, #650	; 0x28a
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fe f919 	bl	8000504 <__aeabi_ui2d>
 80022d2:	a312      	add	r3, pc, #72	; (adr r3, 800231c <LegComply+0x8c>)
 80022d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d8:	f7fe fab8 	bl	800084c <__aeabi_ddiv>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <LegComply+0x88>)
 80022ea:	f7fe f985 	bl	80005f8 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	f7fe fc77 	bl	8000be8 <__aeabi_d2f>
 80022fa:	4602      	mov	r2, r0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002300:	e003      	b.n	800230a <LegComply+0x7a>
			leg->comply_angle = 0.0;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	f3af 8000 	nop.w
 8002318:	402e0000 	.word	0x402e0000
 800231c:	00000000 	.word	0x00000000
 8002320:	4072c000 	.word	0x4072c000

08002324 <SetSmoothSpeed>:

void SetSmoothSpeed(float SmoothSpeed){
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	ed87 0a01 	vstr	s0, [r7, #4]


	smoothdelay = (int) SmoothSpeed;
 800232e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002336:	ee17 2a90 	vmov	r2, s15
 800233a:	4b13      	ldr	r3, [pc, #76]	; (8002388 <SetSmoothSpeed+0x64>)
 800233c:	601a      	str	r2, [r3, #0]

	if(smoothdelay <= 0){
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <SetSmoothSpeed+0x64>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	dc02      	bgt.n	800234c <SetSmoothSpeed+0x28>
		smoothdelay = 1;
 8002346:	4b10      	ldr	r3, [pc, #64]	; (8002388 <SetSmoothSpeed+0x64>)
 8002348:	2201      	movs	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
	}

	servostep = (int)(1.0/SmoothSpeed);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7fe f8fb 	bl	8000548 <__aeabi_f2d>
 8002352:	4602      	mov	r2, r0
 8002354:	460b      	mov	r3, r1
 8002356:	f04f 0000 	mov.w	r0, #0
 800235a:	490c      	ldr	r1, [pc, #48]	; (800238c <SetSmoothSpeed+0x68>)
 800235c:	f7fe fa76 	bl	800084c <__aeabi_ddiv>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	4610      	mov	r0, r2
 8002366:	4619      	mov	r1, r3
 8002368:	f7fe fbf6 	bl	8000b58 <__aeabi_d2iz>
 800236c:	4603      	mov	r3, r0
 800236e:	4a08      	ldr	r2, [pc, #32]	; (8002390 <SetSmoothSpeed+0x6c>)
 8002370:	6013      	str	r3, [r2, #0]

	if(servostep <= 0){
 8002372:	4b07      	ldr	r3, [pc, #28]	; (8002390 <SetSmoothSpeed+0x6c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	dc02      	bgt.n	8002380 <SetSmoothSpeed+0x5c>
		servostep = 1;
 800237a:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SetSmoothSpeed+0x6c>)
 800237c:	2201      	movs	r2, #1
 800237e:	601a      	str	r2, [r3, #0]
	}

}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	200002cc 	.word	0x200002cc
 800238c:	3ff00000 	.word	0x3ff00000
 8002390:	200002d0 	.word	0x200002d0

08002394 <StepLoop>:


void StepLoop(float desired, float *current){
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	ed87 0a01 	vstr	s0, [r7, #4]
 800239e:	6038      	str	r0, [r7, #0]

	if(*current != desired){
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80023aa:	eeb4 7a67 	vcmp.f32	s14, s15
 80023ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023b2:	d04d      	beq.n	8002450 <StepLoop+0xbc>
		if(desired > *current){
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ed97 7a01 	vldr	s14, [r7, #4]
 80023be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c6:	dd1c      	ble.n	8002402 <StepLoop+0x6e>
			*current+=(float)servostep;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	ed93 7a00 	vldr	s14, [r3]
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <StepLoop+0xc8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	edc3 7a00 	vstr	s15, [r3]
			if(*current > desired){
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80023ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	d400      	bmi.n	80023fa <StepLoop+0x66>
				*current = desired;
			}
		}
	}

}
 80023f8:	e02a      	b.n	8002450 <StepLoop+0xbc>
				*current = desired;
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	601a      	str	r2, [r3, #0]
}
 8002400:	e026      	b.n	8002450 <StepLoop+0xbc>
		}else if (desired < *current){
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	edd3 7a00 	vldr	s15, [r3]
 8002408:	ed97 7a01 	vldr	s14, [r7, #4]
 800240c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002414:	d400      	bmi.n	8002418 <StepLoop+0x84>
}
 8002416:	e01b      	b.n	8002450 <StepLoop+0xbc>
			*current-=(float)servostep;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	ed93 7a00 	vldr	s14, [r3]
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <StepLoop+0xc8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	ee07 3a90 	vmov	s15, r3
 8002426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800242a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	edc3 7a00 	vstr	s15, [r3]
			if(*current < desired){
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	ed97 7a01 	vldr	s14, [r7, #4]
 800243e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002446:	dc00      	bgt.n	800244a <StepLoop+0xb6>
}
 8002448:	e002      	b.n	8002450 <StepLoop+0xbc>
				*current = desired;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	601a      	str	r2, [r3, #0]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	200002d0 	.word	0x200002d0

08002460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <MX_DMA_Init+0x78>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <MX_DMA_Init+0x78>)
 8002470:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <MX_DMA_Init+0x78>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <MX_DMA_Init+0x78>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a13      	ldr	r2, [pc, #76]	; (80024d8 <MX_DMA_Init+0x78>)
 800248c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <MX_DMA_Init+0x78>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2105      	movs	r1, #5
 80024a2:	2010      	movs	r0, #16
 80024a4:	f003 fcda 	bl	8005e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80024a8:	2010      	movs	r0, #16
 80024aa:	f003 fcf3 	bl	8005e94 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80024ae:	2200      	movs	r2, #0
 80024b0:	2105      	movs	r1, #5
 80024b2:	2011      	movs	r0, #17
 80024b4:	f003 fcd2 	bl	8005e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80024b8:	2011      	movs	r0, #17
 80024ba:	f003 fceb 	bl	8005e94 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2105      	movs	r1, #5
 80024c2:	2038      	movs	r0, #56	; 0x38
 80024c4:	f003 fcca 	bl	8005e5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024c8:	2038      	movs	r0, #56	; 0x38
 80024ca:	f003 fce3 	bl	8005e94 <HAL_NVIC_EnableIRQ>

}
 80024ce:	bf00      	nop
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023800 	.word	0x40023800

080024dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CalcSem */
  CalcSemHandle = osSemaphoreNew(1, 1, &CalcSem_attributes);
 80024e0:	4a10      	ldr	r2, [pc, #64]	; (8002524 <MX_FREERTOS_Init+0x48>)
 80024e2:	2101      	movs	r1, #1
 80024e4:	2001      	movs	r0, #1
 80024e6:	f009 ff76 	bl	800c3d6 <osSemaphoreNew>
 80024ea:	4603      	mov	r3, r0
 80024ec:	4a0e      	ldr	r2, [pc, #56]	; (8002528 <MX_FREERTOS_Init+0x4c>)
 80024ee:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of MainTask */
  MainTaskHandle = osThreadNew(MainFunc, NULL, &MainTask_attributes);
 80024f0:	4a0e      	ldr	r2, [pc, #56]	; (800252c <MX_FREERTOS_Init+0x50>)
 80024f2:	2100      	movs	r1, #0
 80024f4:	480e      	ldr	r0, [pc, #56]	; (8002530 <MX_FREERTOS_Init+0x54>)
 80024f6:	f009 fec1 	bl	800c27c <osThreadNew>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4a0d      	ldr	r2, [pc, #52]	; (8002534 <MX_FREERTOS_Init+0x58>)
 80024fe:	6013      	str	r3, [r2, #0]

  /* creation of CalcTask */
  CalcTaskHandle = osThreadNew(CalcFunc, NULL, &CalcTask_attributes);
 8002500:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <MX_FREERTOS_Init+0x5c>)
 8002502:	2100      	movs	r1, #0
 8002504:	480d      	ldr	r0, [pc, #52]	; (800253c <MX_FREERTOS_Init+0x60>)
 8002506:	f009 feb9 	bl	800c27c <osThreadNew>
 800250a:	4603      	mov	r3, r0
 800250c:	4a0c      	ldr	r2, [pc, #48]	; (8002540 <MX_FREERTOS_Init+0x64>)
 800250e:	6013      	str	r3, [r2, #0]

  /* creation of ServoTask */
  ServoTaskHandle = osThreadNew(ServoFunc, NULL, &ServoTask_attributes);
 8002510:	4a0c      	ldr	r2, [pc, #48]	; (8002544 <MX_FREERTOS_Init+0x68>)
 8002512:	2100      	movs	r1, #0
 8002514:	480c      	ldr	r0, [pc, #48]	; (8002548 <MX_FREERTOS_Init+0x6c>)
 8002516:	f009 feb1 	bl	800c27c <osThreadNew>
 800251a:	4603      	mov	r3, r0
 800251c:	4a0b      	ldr	r2, [pc, #44]	; (800254c <MX_FREERTOS_Init+0x70>)
 800251e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002520:	bf00      	nop
 8002522:	bd80      	pop	{r7, pc}
 8002524:	08016fc4 	.word	0x08016fc4
 8002528:	20000468 	.word	0x20000468
 800252c:	08016f58 	.word	0x08016f58
 8002530:	08002551 	.word	0x08002551
 8002534:	2000045c 	.word	0x2000045c
 8002538:	08016f7c 	.word	0x08016f7c
 800253c:	0800257d 	.word	0x0800257d
 8002540:	20000460 	.word	0x20000460
 8002544:	08016fa0 	.word	0x08016fa0
 8002548:	080025c9 	.word	0x080025c9
 800254c:	20000464 	.word	0x20000464

08002550 <MainFunc>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_MainFunc */
void MainFunc(void *argument)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MainFunc */
	/* Infinite loop */
	SysInit();
 8002558:	f7ff f8ea 	bl	8001730 <SysInit>
	int stage = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]
	uint32_t stage_update = HAL_GetTick();
 8002560:	f002 ff82 	bl	8005468 <HAL_GetTick>
 8002564:	60b8      	str	r0, [r7, #8]
	x_offset = 1.0;
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <MainFunc+0x28>)
 8002568:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800256c:	601a      	str	r2, [r3, #0]
//		}

//		sprintf(data,"value 1: %d \r\n",ADCValue[0]);
//		HAL_UART_Transmit(&huart3, data, strlen(data), 100);
//		LegSetOffsets(&legFL, 0.0, 0.0, -step_height, 0.0, 0.0, 0.0);
		osDelay(50);
 800256e:	2032      	movs	r0, #50	; 0x32
 8002570:	f009 ff16 	bl	800c3a0 <osDelay>
 8002574:	e7fb      	b.n	800256e <MainFunc+0x1e>
 8002576:	bf00      	nop
 8002578:	200002c8 	.word	0x200002c8

0800257c <CalcFunc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CalcFunc */
void CalcFunc(void *argument)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CalcFunc */
	/* Infinite loop */
	for(;;)
	{
		osSemaphoreAcquire(CalcSemHandle, osWaitForever);
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <CalcFunc+0x38>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f04f 31ff 	mov.w	r1, #4294967295
 800258c:	4618      	mov	r0, r3
 800258e:	f009 ffab 	bl	800c4e8 <osSemaphoreAcquire>
//		vTaskSuspendAll();
		ControlLoop();
 8002592:	f7ff f97d 	bl	8001890 <ControlLoop>
		LegComply(&legFL,ADCValue[0]);
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <CalcFunc+0x3c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	4807      	ldr	r0, [pc, #28]	; (80025bc <CalcFunc+0x40>)
 800259e:	f7ff fe77 	bl	8002290 <LegComply>
		CompPitchRoll(&imu);
 80025a2:	4807      	ldr	r0, [pc, #28]	; (80025c0 <CalcFunc+0x44>)
 80025a4:	f7fe ff1c 	bl	80013e0 <CompPitchRoll>
//		xTaskResumeAll();
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80025a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025ac:	4805      	ldr	r0, [pc, #20]	; (80025c4 <CalcFunc+0x48>)
 80025ae:	f004 fa44 	bl	8006a3a <HAL_GPIO_TogglePin>
		osSemaphoreAcquire(CalcSemHandle, osWaitForever);
 80025b2:	e7e7      	b.n	8002584 <CalcFunc+0x8>
 80025b4:	20000468 	.word	0x20000468
 80025b8:	200002b4 	.word	0x200002b4
 80025bc:	200002dc 	.word	0x200002dc
 80025c0:	20000400 	.word	0x20000400
 80025c4:	40020c00 	.word	0x40020c00

080025c8 <ServoFunc>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ServoFunc */
void ServoFunc(void *argument)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ServoFunc */
	/* Infinite loop */
	for(;;)
	{
		LegStepLoop(&legFL);
 80025d0:	4820      	ldr	r0, [pc, #128]	; (8002654 <ServoFunc+0x8c>)
 80025d2:	f7ff fe37 	bl	8002244 <LegStepLoop>
		//		LegStepLoop(&legFR);
		//		LegStepLoop(&legBL);
		//		LegStepLoop(&legBR);
		//
		vTaskSuspendAll();
 80025d6:	f00b fb6f 	bl	800dcb8 <vTaskSuspendAll>
		ServoDriverSetPWM(&servodriver, FLHip, MAP_Angle2Pulse(legFL.hip_angle - legFL.comply_angle,144.0,0.0,FLHipmin,FLHipmax),0);
 80025da:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <ServoFunc+0x8c>)
 80025dc:	ed93 7a03 	vldr	s14, [r3, #12]
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <ServoFunc+0x8c>)
 80025e2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80025e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80025ee:	206e      	movs	r0, #110	; 0x6e
 80025f0:	ed9f 1a19 	vldr	s2, [pc, #100]	; 8002658 <ServoFunc+0x90>
 80025f4:	eddf 0a19 	vldr	s1, [pc, #100]	; 800265c <ServoFunc+0x94>
 80025f8:	eeb0 0a67 	vmov.f32	s0, s15
 80025fc:	f7ff f906 	bl	800180c <MAP_Angle2Pulse>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	2300      	movs	r3, #0
 8002606:	2101      	movs	r1, #1
 8002608:	4815      	ldr	r0, [pc, #84]	; (8002660 <ServoFunc+0x98>)
 800260a:	f002 fa72 	bl	8004af2 <ServoDriverSetPWM>
		ServoDriverSetPWM(&servodriver, FLKnee, MAP_Angle2Pulse(legFL.knee_angle - legFL.comply_angle,23.0,97.0,FLKneemin,FLKneemax),0);
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <ServoFunc+0x8c>)
 8002610:	ed93 7a04 	vldr	s14, [r3, #16]
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <ServoFunc+0x8c>)
 8002616:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800261a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800261e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002622:	2082      	movs	r0, #130	; 0x82
 8002624:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 8002664 <ServoFunc+0x9c>
 8002628:	eef3 0a07 	vmov.f32	s1, #55	; 0x41b80000  23.0
 800262c:	eeb0 0a67 	vmov.f32	s0, s15
 8002630:	f7ff f8ec 	bl	800180c <MAP_Angle2Pulse>
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	2300      	movs	r3, #0
 800263a:	2102      	movs	r1, #2
 800263c:	4808      	ldr	r0, [pc, #32]	; (8002660 <ServoFunc+0x98>)
 800263e:	f002 fa58 	bl	8004af2 <ServoDriverSetPWM>
		xTaskResumeAll();
 8002642:	f00b fb47 	bl	800dcd4 <xTaskResumeAll>
		osDelay(smoothdelay);
 8002646:	4b08      	ldr	r3, [pc, #32]	; (8002668 <ServoFunc+0xa0>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4618      	mov	r0, r3
 800264c:	f009 fea8 	bl	800c3a0 <osDelay>
		LegStepLoop(&legFL);
 8002650:	e7be      	b.n	80025d0 <ServoFunc+0x8>
 8002652:	bf00      	nop
 8002654:	200002dc 	.word	0x200002dc
 8002658:	00000000 	.word	0x00000000
 800265c:	43100000 	.word	0x43100000
 8002660:	200002ac 	.word	0x200002ac
 8002664:	42c20000 	.word	0x42c20000
 8002668:	200002cc 	.word	0x200002cc

0800266c <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END ServoFunc */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM6){
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d105      	bne.n	800268a <HAL_TIM_PeriodElapsedCallback+0x1e>
		osSemaphoreRelease(CalcSemHandle);
 800267e:	4b09      	ldr	r3, [pc, #36]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f009 ff82 	bl	800c58c <osSemaphoreRelease>

	}else if (htim->Instance == TIM7) {
		HAL_IncTick();
	}
}
 8002688:	e006      	b.n	8002698 <HAL_TIM_PeriodElapsedCallback+0x2c>
	}else if (htim->Instance == TIM7) {
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a06      	ldr	r2, [pc, #24]	; (80026a8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d101      	bne.n	8002698 <HAL_TIM_PeriodElapsedCallback+0x2c>
		HAL_IncTick();
 8002694:	f002 fed4 	bl	8005440 <HAL_IncTick>
}
 8002698:	bf00      	nop
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40001000 	.word	0x40001000
 80026a4:	20000468 	.word	0x20000468
 80026a8:	40001400 	.word	0x40001400

080026ac <HAL_I2C_MasterRxCpltCallback>:
//{
//	HAL_UART_Receive_IT(&huart3, &control, 1);
//}

void HAL_I2C_MasterRxCpltCallback (I2C_HandleTypeDef * hi2c)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C2){
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a06      	ldr	r2, [pc, #24]	; (80026d4 <HAL_I2C_MasterRxCpltCallback+0x28>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d105      	bne.n	80026ca <HAL_I2C_MasterRxCpltCallback+0x1e>
		MPUHandlebuff(&imu);
 80026be:	4806      	ldr	r0, [pc, #24]	; (80026d8 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 80026c0:	f7fe fdc2 	bl	8001248 <MPUHandlebuff>
//		QMCGetYaw(&qmc,  imu->pitch, imu->roll);
		MPUReqAccGyro(&imu);
 80026c4:	4804      	ldr	r0, [pc, #16]	; (80026d8 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 80026c6:	f7fe fda2 	bl	800120e <MPUReqAccGyro>
	}
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40005800 	.word	0x40005800
 80026d8:	20000400 	.word	0x20000400

080026dc <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e2:	f107 0314 	add.w	r3, r7, #20
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	60da      	str	r2, [r3, #12]
 80026f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	4b73      	ldr	r3, [pc, #460]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a72      	ldr	r2, [pc, #456]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	6313      	str	r3, [r2, #48]	; 0x30
 8002702:	4b70      	ldr	r3, [pc, #448]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	4b6c      	ldr	r3, [pc, #432]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a6b      	ldr	r2, [pc, #428]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 8002718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b69      	ldr	r3, [pc, #420]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b65      	ldr	r3, [pc, #404]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002732:	4a64      	ldr	r2, [pc, #400]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6313      	str	r3, [r2, #48]	; 0x30
 800273a:	4b62      	ldr	r3, [pc, #392]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	4b5e      	ldr	r3, [pc, #376]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	4a5d      	ldr	r2, [pc, #372]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	6313      	str	r3, [r2, #48]	; 0x30
 8002756:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	603b      	str	r3, [r7, #0]
 8002766:	4b57      	ldr	r3, [pc, #348]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a56      	ldr	r2, [pc, #344]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 800276c:	f043 0308 	orr.w	r3, r3, #8
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b54      	ldr	r3, [pc, #336]	; (80028c4 <MX_GPIO_Init+0x1e8>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 800277e:	2200      	movs	r2, #0
 8002780:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002784:	4850      	ldr	r0, [pc, #320]	; (80028c8 <MX_GPIO_Init+0x1ec>)
 8002786:	f004 f93f 	bl	8006a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800278a:	2308      	movs	r3, #8
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800279a:	2305      	movs	r3, #5
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4619      	mov	r1, r3
 80027a4:	4849      	ldr	r0, [pc, #292]	; (80028cc <MX_GPIO_Init+0x1f0>)
 80027a6:	f003 ff93 	bl	80066d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027aa:	2301      	movs	r3, #1
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80027ae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80027b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	4844      	ldr	r0, [pc, #272]	; (80028d0 <MX_GPIO_Init+0x1f4>)
 80027c0:	f003 ff86 	bl	80066d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80027c4:	2310      	movs	r3, #16
 80027c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
 80027ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027d4:	2306      	movs	r3, #6
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	4619      	mov	r1, r3
 80027de:	483c      	ldr	r0, [pc, #240]	; (80028d0 <MX_GPIO_Init+0x1f4>)
 80027e0:	f003 ff76 	bl	80066d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80027e4:	23e0      	movs	r3, #224	; 0xe0
 80027e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e8:	2302      	movs	r3, #2
 80027ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027f4:	2305      	movs	r3, #5
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4619      	mov	r1, r3
 80027fe:	4834      	ldr	r0, [pc, #208]	; (80028d0 <MX_GPIO_Init+0x1f4>)
 8002800:	f003 ff66 	bl	80066d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002804:	2304      	movs	r3, #4
 8002806:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002808:	2300      	movs	r3, #0
 800280a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	4619      	mov	r1, r3
 8002816:	482f      	ldr	r0, [pc, #188]	; (80028d4 <MX_GPIO_Init+0x1f8>)
 8002818:	f003 ff5a 	bl	80066d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PD13 PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|GPIO_PIN_13|LD5_Pin|LD6_Pin;
 800281c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002822:	2301      	movs	r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	4824      	ldr	r0, [pc, #144]	; (80028c8 <MX_GPIO_Init+0x1ec>)
 8002836:	f003 ff4b 	bl	80066d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800283a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800283e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800284c:	2306      	movs	r3, #6
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	481d      	ldr	r0, [pc, #116]	; (80028cc <MX_GPIO_Init+0x1f0>)
 8002858:	f003 ff3a 	bl	80066d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800285c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800286a:	f107 0314 	add.w	r3, r7, #20
 800286e:	4619      	mov	r1, r3
 8002870:	4817      	ldr	r0, [pc, #92]	; (80028d0 <MX_GPIO_Init+0x1f4>)
 8002872:	f003 ff2d 	bl	80066d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002876:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800287a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002888:	230a      	movs	r3, #10
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288c:	f107 0314 	add.w	r3, r7, #20
 8002890:	4619      	mov	r1, r3
 8002892:	480f      	ldr	r0, [pc, #60]	; (80028d0 <MX_GPIO_Init+0x1f4>)
 8002894:	f003 ff1c 	bl	80066d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002898:	f44f 7310 	mov.w	r3, #576	; 0x240
 800289c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800289e:	2312      	movs	r3, #18
 80028a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028aa:	2304      	movs	r3, #4
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	4807      	ldr	r0, [pc, #28]	; (80028d4 <MX_GPIO_Init+0x1f8>)
 80028b6:	f003 ff0b 	bl	80066d0 <HAL_GPIO_Init>

}
 80028ba:	bf00      	nop
 80028bc:	3728      	adds	r7, #40	; 0x28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020c00 	.word	0x40020c00
 80028cc:	40020800 	.word	0x40020800
 80028d0:	40020000 	.word	0x40020000
 80028d4:	40020400 	.word	0x40020400

080028d8 <MX_I2C2_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <MX_I2C2_Init+0x50>)
 80028de:	4a13      	ldr	r2, [pc, #76]	; (800292c <MX_I2C2_Init+0x54>)
 80028e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80028e2:	4b11      	ldr	r3, [pc, #68]	; (8002928 <MX_I2C2_Init+0x50>)
 80028e4:	4a12      	ldr	r2, [pc, #72]	; (8002930 <MX_I2C2_Init+0x58>)
 80028e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80028e8:	4b0f      	ldr	r3, [pc, #60]	; (8002928 <MX_I2C2_Init+0x50>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80028ee:	4b0e      	ldr	r3, [pc, #56]	; (8002928 <MX_I2C2_Init+0x50>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028f4:	4b0c      	ldr	r3, [pc, #48]	; (8002928 <MX_I2C2_Init+0x50>)
 80028f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <MX_I2C2_Init+0x50>)
 80028fe:	2200      	movs	r2, #0
 8002900:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <MX_I2C2_Init+0x50>)
 8002904:	2200      	movs	r2, #0
 8002906:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002908:	4b07      	ldr	r3, [pc, #28]	; (8002928 <MX_I2C2_Init+0x50>)
 800290a:	2200      	movs	r2, #0
 800290c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <MX_I2C2_Init+0x50>)
 8002910:	2200      	movs	r2, #0
 8002912:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002914:	4804      	ldr	r0, [pc, #16]	; (8002928 <MX_I2C2_Init+0x50>)
 8002916:	f004 f8ab 	bl	8006a70 <HAL_I2C_Init>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002920:	f000 f96e 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000046c 	.word	0x2000046c
 800292c:	40005800 	.word	0x40005800
 8002930:	000186a0 	.word	0x000186a0

08002934 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002938:	4b12      	ldr	r3, [pc, #72]	; (8002984 <MX_I2C3_Init+0x50>)
 800293a:	4a13      	ldr	r2, [pc, #76]	; (8002988 <MX_I2C3_Init+0x54>)
 800293c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <MX_I2C3_Init+0x50>)
 8002940:	4a12      	ldr	r2, [pc, #72]	; (800298c <MX_I2C3_Init+0x58>)
 8002942:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002944:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <MX_I2C3_Init+0x50>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <MX_I2C3_Init+0x50>)
 800294c:	2200      	movs	r2, #0
 800294e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <MX_I2C3_Init+0x50>)
 8002952:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002956:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002958:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <MX_I2C3_Init+0x50>)
 800295a:	2200      	movs	r2, #0
 800295c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <MX_I2C3_Init+0x50>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <MX_I2C3_Init+0x50>)
 8002966:	2200      	movs	r2, #0
 8002968:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <MX_I2C3_Init+0x50>)
 800296c:	2200      	movs	r2, #0
 800296e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002970:	4804      	ldr	r0, [pc, #16]	; (8002984 <MX_I2C3_Init+0x50>)
 8002972:	f004 f87d 	bl	8006a70 <HAL_I2C_Init>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800297c:	f000 f940 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}
 8002984:	200004c0 	.word	0x200004c0
 8002988:	40005c00 	.word	0x40005c00
 800298c:	000186a0 	.word	0x000186a0

08002990 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08c      	sub	sp, #48	; 0x30
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 031c 	add.w	r3, r7, #28
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a4a      	ldr	r2, [pc, #296]	; (8002ad8 <HAL_I2C_MspInit+0x148>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d13d      	bne.n	8002a2e <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
 80029b6:	4b49      	ldr	r3, [pc, #292]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a48      	ldr	r2, [pc, #288]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 80029bc:	f043 0302 	orr.w	r3, r3, #2
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b46      	ldr	r3, [pc, #280]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029d4:	2312      	movs	r3, #18
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d8:	2300      	movs	r3, #0
 80029da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029dc:	2303      	movs	r3, #3
 80029de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029e0:	2304      	movs	r3, #4
 80029e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e4:	f107 031c 	add.w	r3, r7, #28
 80029e8:	4619      	mov	r1, r3
 80029ea:	483d      	ldr	r0, [pc, #244]	; (8002ae0 <HAL_I2C_MspInit+0x150>)
 80029ec:	f003 fe70 	bl	80066d0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	4b39      	ldr	r3, [pc, #228]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	4a38      	ldr	r2, [pc, #224]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 80029fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002a00:	4b36      	ldr	r3, [pc, #216]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	697b      	ldr	r3, [r7, #20]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	2105      	movs	r1, #5
 8002a10:	2021      	movs	r0, #33	; 0x21
 8002a12:	f003 fa23 	bl	8005e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002a16:	2021      	movs	r0, #33	; 0x21
 8002a18:	f003 fa3c 	bl	8005e94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2105      	movs	r1, #5
 8002a20:	2022      	movs	r0, #34	; 0x22
 8002a22:	f003 fa1b 	bl	8005e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002a26:	2022      	movs	r0, #34	; 0x22
 8002a28:	f003 fa34 	bl	8005e94 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002a2c:	e050      	b.n	8002ad0 <HAL_I2C_MspInit+0x140>
  else if(i2cHandle->Instance==I2C3)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2c      	ldr	r2, [pc, #176]	; (8002ae4 <HAL_I2C_MspInit+0x154>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d14b      	bne.n	8002ad0 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a38:	2300      	movs	r3, #0
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	4a26      	ldr	r2, [pc, #152]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 8002a42:	f043 0304 	orr.w	r3, r3, #4
 8002a46:	6313      	str	r3, [r2, #48]	; 0x30
 8002a48:	4b24      	ldr	r3, [pc, #144]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4c:	f003 0304 	and.w	r3, r3, #4
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	4b20      	ldr	r3, [pc, #128]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	4a1f      	ldr	r2, [pc, #124]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6313      	str	r3, [r2, #48]	; 0x30
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a76:	2312      	movs	r3, #18
 8002a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002a82:	2304      	movs	r3, #4
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a86:	f107 031c 	add.w	r3, r7, #28
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4816      	ldr	r0, [pc, #88]	; (8002ae8 <HAL_I2C_MspInit+0x158>)
 8002a8e:	f003 fe1f 	bl	80066d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a98:	2312      	movs	r3, #18
 8002a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	4619      	mov	r1, r3
 8002aae:	480f      	ldr	r0, [pc, #60]	; (8002aec <HAL_I2C_MspInit+0x15c>)
 8002ab0:	f003 fe0e 	bl	80066d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	4a07      	ldr	r2, [pc, #28]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 8002abe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ac2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <HAL_I2C_MspInit+0x14c>)
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	68bb      	ldr	r3, [r7, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	3730      	adds	r7, #48	; 0x30
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40005800 	.word	0x40005800
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40020400 	.word	0x40020400
 8002ae4:	40005c00 	.word	0x40005c00
 8002ae8:	40020800 	.word	0x40020800
 8002aec:	40020000 	.word	0x40020000

08002af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002af4:	f002 fc82 	bl	80053fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002af8:	f000 f818 	bl	8002b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002afc:	f7ff fdee 	bl	80026dc <MX_GPIO_Init>
  MX_DMA_Init();
 8002b00:	f7ff fcae 	bl	8002460 <MX_DMA_Init>
  MX_ADC1_Init();
 8002b04:	f7fe fd04 	bl	8001510 <MX_ADC1_Init>
  MX_I2C3_Init();
 8002b08:	f7ff ff14 	bl	8002934 <MX_I2C3_Init>
  MX_USART2_UART_Init();
 8002b0c:	f002 fb02 	bl	8005114 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002b10:	f002 fb2a 	bl	8005168 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002b14:	f002 fa74 	bl	8005000 <MX_TIM6_Init>
  MX_I2C2_Init();
 8002b18:	f7ff fede 	bl	80028d8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8002b1c:	f009 fb64 	bl	800c1e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002b20:	f7ff fcdc 	bl	80024dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002b24:	f009 fb84 	bl	800c230 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <main+0x38>
	...

08002b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b094      	sub	sp, #80	; 0x50
 8002b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b32:	f107 0320 	add.w	r3, r7, #32
 8002b36:	2230      	movs	r2, #48	; 0x30
 8002b38:	2100      	movs	r1, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f00f fd5f 	bl	80125fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b40:	f107 030c 	add.w	r3, r7, #12
 8002b44:	2200      	movs	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	605a      	str	r2, [r3, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	60da      	str	r2, [r3, #12]
 8002b4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b50:	2300      	movs	r3, #0
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	4b28      	ldr	r3, [pc, #160]	; (8002bf8 <SystemClock_Config+0xcc>)
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	4a27      	ldr	r2, [pc, #156]	; (8002bf8 <SystemClock_Config+0xcc>)
 8002b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8002b60:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <SystemClock_Config+0xcc>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <SystemClock_Config+0xd0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a21      	ldr	r2, [pc, #132]	; (8002bfc <SystemClock_Config+0xd0>)
 8002b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b7a:	6013      	str	r3, [r2, #0]
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <SystemClock_Config+0xd0>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b92:	2302      	movs	r3, #2
 8002b94:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ba0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ba4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002baa:	2307      	movs	r3, #7
 8002bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bae:	f107 0320 	add.w	r3, r7, #32
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f007 f90e 	bl	8009dd4 <HAL_RCC_OscConfig>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002bbe:	f000 f81f 	bl	8002c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bc2:	230f      	movs	r3, #15
 8002bc4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002bda:	f107 030c 	add.w	r3, r7, #12
 8002bde:	2105      	movs	r1, #5
 8002be0:	4618      	mov	r0, r3
 8002be2:	f007 fb6f 	bl	800a2c4 <HAL_RCC_ClockConfig>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002bec:	f000 f808 	bl	8002c00 <Error_Handler>
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3750      	adds	r7, #80	; 0x50
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40007000 	.word	0x40007000

08002c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c04:	b672      	cpsid	i
}
 8002c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <Error_Handler+0x8>

08002c0a <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4618      	mov	r0, r3
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <_ZN3ros3MsgC1Ev+0x1c>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	08017098 	.word	0x08017098

08002c4c <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
      data()
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ffe8 	bl	8002c2c <_ZN3ros3MsgC1Ev>
 8002c5c:	4a06      	ldr	r2, [pc, #24]	; (8002c78 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff ffcf 	bl	8002c0a <_ZN3ros4TimeC1Ev>
    {
    }
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	08017080 	.word	0x08017080

08002c7c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002c86:	2300      	movs	r3, #0
 8002c88:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6859      	ldr	r1, [r3, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	b2ca      	uxtb	r2, r1
 8002c96:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	0a19      	lsrs	r1, r3, #8
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	b2ca      	uxtb	r2, r1
 8002ca8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	0c19      	lsrs	r1, r3, #16
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	b2ca      	uxtb	r2, r1
 8002cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	0e19      	lsrs	r1, r3, #24
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	3303      	adds	r3, #3
 8002cc6:	683a      	ldr	r2, [r7, #0]
 8002cc8:	4413      	add	r3, r2
 8002cca:	b2ca      	uxtb	r2, r1
 8002ccc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6899      	ldr	r1, [r3, #8]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	b2ca      	uxtb	r2, r1
 8002ce0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	0a19      	lsrs	r1, r3, #8
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3301      	adds	r3, #1
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	4413      	add	r3, r2
 8002cf0:	b2ca      	uxtb	r2, r1
 8002cf2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	0c19      	lsrs	r1, r3, #16
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	4413      	add	r3, r2
 8002d02:	b2ca      	uxtb	r2, r1
 8002d04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	0e19      	lsrs	r1, r3, #24
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3303      	adds	r3, #3
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	4413      	add	r3, r2
 8002d14:	b2ca      	uxtb	r2, r1
 8002d16:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	3304      	adds	r3, #4
 8002d1c:	60fb      	str	r3, [r7, #12]
      return offset;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    }
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	4413      	add	r3, r2
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	461a      	mov	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	440b      	add	r3, r1
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	021b      	lsls	r3, r3, #8
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	3302      	adds	r3, #2
 8002d66:	6839      	ldr	r1, [r7, #0]
 8002d68:	440b      	add	r3, r1
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	041b      	lsls	r3, r3, #16
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3303      	adds	r3, #3
 8002d7c:	6839      	ldr	r1, [r7, #0]
 8002d7e:	440b      	add	r3, r1
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	061b      	lsls	r3, r3, #24
 8002d84:	431a      	orrs	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3304      	adds	r3, #4
 8002d8e:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3301      	adds	r3, #1
 8002da6:	6839      	ldr	r1, [r7, #0]
 8002da8:	440b      	add	r3, r1
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	3302      	adds	r3, #2
 8002dbc:	6839      	ldr	r1, [r7, #0]
 8002dbe:	440b      	add	r3, r1
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	041b      	lsls	r3, r3, #16
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	3303      	adds	r3, #3
 8002dd2:	6839      	ldr	r1, [r7, #0]
 8002dd4:	440b      	add	r3, r1
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	061b      	lsls	r3, r3, #24
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	3304      	adds	r3, #4
 8002de4:	60fb      	str	r3, [r7, #12]
     return offset;
 8002de6:	68fb      	ldr	r3, [r7, #12]
    }
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	4b03      	ldr	r3, [pc, #12]	; (8002e0c <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	08016df4 	.word	0x08016df4

08002e10 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	08016e04 	.word	0x08016e04

08002e2c <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fef8 	bl	8002c2c <_ZN3ros3MsgC1Ev>
 8002e3c:	4a0b      	ldr	r2, [pc, #44]	; (8002e6c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	809a      	strh	r2, [r3, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a09      	ldr	r2, [pc, #36]	; (8002e70 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002e52:	60da      	str	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a06      	ldr	r2, [pc, #24]	; (8002e70 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002e58:	611a      	str	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	615a      	str	r2, [r3, #20]
    {
    }
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	08017068 	.word	0x08017068
 8002e70:	08016e28 	.word	0x08016e28

08002e74 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	8899      	ldrh	r1, [r3, #4]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	b2ca      	uxtb	r2, r1
 8002e8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	889b      	ldrh	r3, [r3, #4]
 8002e94:	0a1b      	lsrs	r3, r3, #8
 8002e96:	b299      	uxth	r1, r3
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	b2ca      	uxtb	r2, r1
 8002ea2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f7fd f98e 	bl	80001d0 <strlen>
 8002eb4:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	69b9      	ldr	r1, [r7, #24]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 ff00 	bl	8003cc4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	18d0      	adds	r0, r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f00f fb83 	bl	80125e2 <memcpy>
      offset += length_topic_name;
 8002edc:	69fa      	ldr	r2, [r7, #28]
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd f971 	bl	80001d0 <strlen>
 8002eee:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	6979      	ldr	r1, [r7, #20]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fee3 	bl	8003cc4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	3304      	adds	r3, #4
 8002f02:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	18d0      	adds	r0, r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	4619      	mov	r1, r3
 8002f12:	f00f fb66 	bl	80125e2 <memcpy>
      offset += length_message_type;
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd f954 	bl	80001d0 <strlen>
 8002f28:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	4413      	add	r3, r2
 8002f30:	6939      	ldr	r1, [r7, #16]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fec6 	bl	8003cc4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	18d0      	adds	r0, r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f00f fb49 	bl	80125e2 <memcpy>
      offset += length_md5sum;
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4413      	add	r3, r2
 8002f56:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002f5e:	68f9      	ldr	r1, [r7, #12]
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	4413      	add	r3, r2
 8002f66:	b2ca      	uxtb	r2, r1
 8002f68:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	0a19      	lsrs	r1, r3, #8
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3301      	adds	r3, #1
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	b2ca      	uxtb	r2, r1
 8002f78:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	0c19      	lsrs	r1, r3, #16
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	3302      	adds	r3, #2
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	4413      	add	r3, r2
 8002f86:	b2ca      	uxtb	r2, r1
 8002f88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	0e19      	lsrs	r1, r3, #24
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	3303      	adds	r3, #3
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	b2ca      	uxtb	r2, r1
 8002f98:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	61fb      	str	r3, [r7, #28]
      return offset;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
    }
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08a      	sub	sp, #40	; 0x28
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
 8002fb2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	889b      	ldrh	r3, [r3, #4]
 8002fca:	b21a      	sxth	r2, r3
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	6839      	ldr	r1, [r7, #0]
 8002fd2:	440b      	add	r3, r1
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	021b      	lsls	r3, r3, #8
 8002fd8:	b21b      	sxth	r3, r3
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	b21b      	sxth	r3, r3
 8002fde:	b29a      	uxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	3302      	adds	r3, #2
 8002fe8:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	441a      	add	r2, r3
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fe82 	bl	8003d00 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	3304      	adds	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	627b      	str	r3, [r7, #36]	; 0x24
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	4413      	add	r3, r2
 800300c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300e:	429a      	cmp	r2, r3
 8003010:	d20c      	bcs.n	800302c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	441a      	add	r2, r3
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	3b01      	subs	r3, #1
 800301c:	6839      	ldr	r1, [r7, #0]
 800301e:	440b      	add	r3, r1
 8003020:	7812      	ldrb	r2, [r2, #0]
 8003022:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	3301      	adds	r3, #1
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
 800302a:	e7ec      	b.n	8003006 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	4413      	add	r3, r2
 8003032:	3b01      	subs	r3, #1
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	4413      	add	r3, r2
 8003038:	2200      	movs	r2, #0
 800303a:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	3b01      	subs	r3, #1
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	441a      	add	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	4413      	add	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	441a      	add	r2, r3
 8003056:	f107 0310 	add.w	r3, r7, #16
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fe4f 	bl	8003d00 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	3304      	adds	r3, #4
 8003066:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	623b      	str	r3, [r7, #32]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4413      	add	r3, r2
 8003072:	6a3a      	ldr	r2, [r7, #32]
 8003074:	429a      	cmp	r2, r3
 8003076:	d20c      	bcs.n	8003092 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	6a3b      	ldr	r3, [r7, #32]
 800307c:	441a      	add	r2, r3
 800307e:	6a3b      	ldr	r3, [r7, #32]
 8003080:	3b01      	subs	r3, #1
 8003082:	6839      	ldr	r1, [r7, #0]
 8003084:	440b      	add	r3, r1
 8003086:	7812      	ldrb	r2, [r2, #0]
 8003088:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	3301      	adds	r3, #1
 800308e:	623b      	str	r3, [r7, #32]
 8003090:	e7ec      	b.n	800306c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	4413      	add	r3, r2
 8003098:	3b01      	subs	r3, #1
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	4413      	add	r3, r2
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	441a      	add	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	441a      	add	r2, r3
 80030bc:	f107 030c 	add.w	r3, r7, #12
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fe1c 	bl	8003d00 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	3304      	adds	r3, #4
 80030cc:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	61fb      	str	r3, [r7, #28]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d20c      	bcs.n	80030f8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	441a      	add	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	6839      	ldr	r1, [r7, #0]
 80030ea:	440b      	add	r3, r1
 80030ec:	7812      	ldrb	r2, [r2, #0]
 80030ee:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	3301      	adds	r3, #1
 80030f4:	61fb      	str	r3, [r7, #28]
 80030f6:	e7ec      	b.n	80030d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	3b01      	subs	r3, #1
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	4413      	add	r3, r2
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	3b01      	subs	r3, #1
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	441a      	add	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4413      	add	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	6839      	ldr	r1, [r7, #0]
 8003126:	440a      	add	r2, r1
 8003128:	7812      	ldrb	r2, [r2, #0]
 800312a:	4313      	orrs	r3, r2
 800312c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	3301      	adds	r3, #1
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	440b      	add	r3, r1
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	4313      	orrs	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003140:	68ba      	ldr	r2, [r7, #8]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	3302      	adds	r3, #2
 8003146:	6839      	ldr	r1, [r7, #0]
 8003148:	440b      	add	r3, r1
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	041b      	lsls	r3, r3, #16
 800314e:	4313      	orrs	r3, r2
 8003150:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	3303      	adds	r3, #3
 8003158:	6839      	ldr	r1, [r7, #0]
 800315a:	440b      	add	r3, r1
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	061b      	lsls	r3, r3, #24
 8003160:	4313      	orrs	r3, r2
 8003162:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8003164:	68ba      	ldr	r2, [r7, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	3304      	adds	r3, #4
 800316e:	61bb      	str	r3, [r7, #24]
     return offset;
 8003170:	69bb      	ldr	r3, [r7, #24]
    }
 8003172:	4618      	mov	r0, r3
 8003174:	3728      	adds	r7, #40	; 0x28
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
	...

0800317c <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	4b03      	ldr	r3, [pc, #12]	; (8003194 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	08016e2c 	.word	0x08016e2c

08003198 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80031a2:	4618      	mov	r0, r3
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	08016e48 	.word	0x08016e48

080031b4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fd34 	bl	8002c2c <_ZN3ros3MsgC1Ev>
 80031c4:	4a06      	ldr	r2, [pc, #24]	; (80031e0 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	711a      	strb	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80031d4:	609a      	str	r2, [r3, #8]
    {
    }
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	08017050 	.word	0x08017050
 80031e4:	08016e28 	.word	0x08016e28

080031e8 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	4413      	add	r3, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	7912      	ldrb	r2, [r2, #4]
 8003200:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	3301      	adds	r3, #1
 8003206:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	4618      	mov	r0, r3
 800320e:	f7fc ffdf 	bl	80001d0 <strlen>
 8003212:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	4413      	add	r3, r2
 800321a:	68b9      	ldr	r1, [r7, #8]
 800321c:	4618      	mov	r0, r3
 800321e:	f000 fd51 	bl	8003cc4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	3304      	adds	r3, #4
 8003226:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	18d0      	adds	r0, r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	4619      	mov	r1, r3
 8003236:	f00f f9d4 	bl	80125e2 <memcpy>
      offset += length_msg;
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4413      	add	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]
      return offset;
 8003242:	68fb      	ldr	r3, [r7, #12]
    }
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	4413      	add	r3, r2
 8003260:	781a      	ldrb	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	3301      	adds	r3, #1
 800326a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	441a      	add	r2, r3
 8003272:	f107 030c 	add.w	r3, r7, #12
 8003276:	4611      	mov	r1, r2
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fd41 	bl	8003d00 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	3304      	adds	r3, #4
 8003282:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	4413      	add	r3, r2
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	d20c      	bcs.n	80032ae <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	441a      	add	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	3b01      	subs	r3, #1
 800329e:	6839      	ldr	r1, [r7, #0]
 80032a0:	440b      	add	r3, r1
 80032a2:	7812      	ldrb	r2, [r2, #0]
 80032a4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3301      	adds	r3, #1
 80032aa:	617b      	str	r3, [r7, #20]
 80032ac:	e7ec      	b.n	8003288 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4413      	add	r3, r2
 80032b4:	3b01      	subs	r3, #1
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	4413      	add	r3, r2
 80032ba:	2200      	movs	r2, #0
 80032bc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	3b01      	subs	r3, #1
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	441a      	add	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
     return offset;
 80032d2:	693b      	ldr	r3, [r7, #16]
    }
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	08016e6c 	.word	0x08016e6c

080032f8 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	08016e80 	.word	0x08016e80

08003314 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4618      	mov	r0, r3
 8003320:	f7ff fc84 	bl	8002c2c <_ZN3ros3MsgC1Ev>
 8003324:	4a0c      	ldr	r2, [pc, #48]	; (8003358 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	60da      	str	r2, [r3, #12]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	619a      	str	r2, [r3, #24]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	61da      	str	r2, [r3, #28]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	08017038 	.word	0x08017038

0800335c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800335c:	b580      	push	{r7, lr}
 800335e:	b08a      	sub	sp, #40	; 0x28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	4413      	add	r3, r2
 8003374:	b2ca      	uxtb	r2, r1
 8003376:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	0a19      	lsrs	r1, r3, #8
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	3301      	adds	r3, #1
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	4413      	add	r3, r2
 8003386:	b2ca      	uxtb	r2, r1
 8003388:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	0c19      	lsrs	r1, r3, #16
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	3302      	adds	r3, #2
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	4413      	add	r3, r2
 8003398:	b2ca      	uxtb	r2, r1
 800339a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	0e19      	lsrs	r1, r3, #24
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	3303      	adds	r3, #3
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	4413      	add	r3, r2
 80033aa:	b2ca      	uxtb	r2, r1
 80033ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80033ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b0:	3304      	adds	r3, #4
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80033b4:	2300      	movs	r3, #0
 80033b6:	623b      	str	r3, [r7, #32]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	6a3a      	ldr	r2, [r7, #32]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d22b      	bcs.n	800341a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80033d0:	6939      	ldr	r1, [r7, #16]
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	b2ca      	uxtb	r2, r1
 80033da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	0a19      	lsrs	r1, r3, #8
 80033e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e2:	3301      	adds	r3, #1
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	4413      	add	r3, r2
 80033e8:	b2ca      	uxtb	r2, r1
 80033ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	0c19      	lsrs	r1, r3, #16
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	3302      	adds	r3, #2
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	4413      	add	r3, r2
 80033f8:	b2ca      	uxtb	r2, r1
 80033fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	0e19      	lsrs	r1, r3, #24
 8003400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003402:	3303      	adds	r3, #3
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	4413      	add	r3, r2
 8003408:	b2ca      	uxtb	r2, r1
 800340a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	3304      	adds	r3, #4
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	3301      	adds	r3, #1
 8003416:	623b      	str	r3, [r7, #32]
 8003418:	e7ce      	b.n	80033b8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6919      	ldr	r1, [r3, #16]
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	4413      	add	r3, r2
 8003424:	b2ca      	uxtb	r2, r1
 8003426:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	0a19      	lsrs	r1, r3, #8
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	3301      	adds	r3, #1
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	4413      	add	r3, r2
 8003436:	b2ca      	uxtb	r2, r1
 8003438:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	0c19      	lsrs	r1, r3, #16
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	3302      	adds	r3, #2
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	4413      	add	r3, r2
 8003448:	b2ca      	uxtb	r2, r1
 800344a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	0e19      	lsrs	r1, r3, #24
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	3303      	adds	r3, #3
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	4413      	add	r3, r2
 800345a:	b2ca      	uxtb	r2, r1
 800345c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	3304      	adds	r3, #4
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	69fa      	ldr	r2, [r7, #28]
 800346e:	429a      	cmp	r2, r3
 8003470:	d22b      	bcs.n	80034ca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8003480:	68f9      	ldr	r1, [r7, #12]
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	4413      	add	r3, r2
 8003488:	b2ca      	uxtb	r2, r1
 800348a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	0a19      	lsrs	r1, r3, #8
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	3301      	adds	r3, #1
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	4413      	add	r3, r2
 8003498:	b2ca      	uxtb	r2, r1
 800349a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	0c19      	lsrs	r1, r3, #16
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	3302      	adds	r3, #2
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	4413      	add	r3, r2
 80034a8:	b2ca      	uxtb	r2, r1
 80034aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	0e19      	lsrs	r1, r3, #24
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	3303      	adds	r3, #3
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	4413      	add	r3, r2
 80034b8:	b2ca      	uxtb	r2, r1
 80034ba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	3304      	adds	r3, #4
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3301      	adds	r3, #1
 80034c6:	61fb      	str	r3, [r7, #28]
 80034c8:	e7ce      	b.n	8003468 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69d9      	ldr	r1, [r3, #28]
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	4413      	add	r3, r2
 80034d4:	b2ca      	uxtb	r2, r1
 80034d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	69db      	ldr	r3, [r3, #28]
 80034dc:	0a19      	lsrs	r1, r3, #8
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	3301      	adds	r3, #1
 80034e2:	683a      	ldr	r2, [r7, #0]
 80034e4:	4413      	add	r3, r2
 80034e6:	b2ca      	uxtb	r2, r1
 80034e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	0c19      	lsrs	r1, r3, #16
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	3302      	adds	r3, #2
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	4413      	add	r3, r2
 80034f8:	b2ca      	uxtb	r2, r1
 80034fa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	0e19      	lsrs	r1, r3, #24
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	3303      	adds	r3, #3
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	4413      	add	r3, r2
 800350a:	b2ca      	uxtb	r2, r1
 800350c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	3304      	adds	r3, #4
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8003514:	2300      	movs	r3, #0
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	429a      	cmp	r2, r3
 8003520:	d228      	bcs.n	8003574 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fc fe4e 	bl	80001d0 <strlen>
 8003534:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8003536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	4413      	add	r3, r2
 800353c:	6979      	ldr	r1, [r7, #20]
 800353e:	4618      	mov	r0, r3
 8003540:	f000 fbc0 	bl	8003cc4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003546:	3304      	adds	r3, #4
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	18d0      	adds	r0, r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4619      	mov	r1, r3
 8003560:	f00f f83f 	bl	80125e2 <memcpy>
      offset += length_stringsi;
 8003564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	4413      	add	r3, r2
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	3301      	adds	r3, #1
 8003570:	61bb      	str	r3, [r7, #24]
 8003572:	e7d1      	b.n	8003518 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8003574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003576:	4618      	mov	r0, r3
 8003578:	3728      	adds	r7, #40	; 0x28
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800357e:	b580      	push	{r7, lr}
 8003580:	b08e      	sub	sp, #56	; 0x38
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800358c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4413      	add	r3, r2
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003598:	3301      	adds	r3, #1
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	4413      	add	r3, r2
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	6a3a      	ldr	r2, [r7, #32]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	3302      	adds	r3, #2
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	4413      	add	r3, r2
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	041b      	lsls	r3, r3, #16
 80035b4:	6a3a      	ldr	r2, [r7, #32]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80035ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035bc:	3303      	adds	r3, #3
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	4413      	add	r3, r2
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	061b      	lsls	r3, r3, #24
 80035c6:	6a3a      	ldr	r2, [r7, #32]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 80035cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ce:	3304      	adds	r3, #4
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	6a3a      	ldr	r2, [r7, #32]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d90a      	bls.n	80035f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4619      	mov	r1, r3
 80035e6:	4610      	mov	r0, r2
 80035e8:	f00f ff20 	bl	801342c <realloc>
 80035ec:	4602      	mov	r2, r0
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a3a      	ldr	r2, [r7, #32]
 80035f6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80035f8:	2300      	movs	r3, #0
 80035fa:	633b      	str	r3, [r7, #48]	; 0x30
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003602:	429a      	cmp	r2, r3
 8003604:	d236      	bcs.n	8003674 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800360e:	6839      	ldr	r1, [r7, #0]
 8003610:	440a      	add	r2, r1
 8003612:	7812      	ldrb	r2, [r2, #0]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361c:	3301      	adds	r3, #1
 800361e:	6839      	ldr	r1, [r7, #0]
 8003620:	440b      	add	r3, r1
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	4313      	orrs	r3, r2
 8003628:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362e:	3302      	adds	r3, #2
 8003630:	6839      	ldr	r1, [r7, #0]
 8003632:	440b      	add	r3, r1
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	041b      	lsls	r3, r3, #16
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003640:	3303      	adds	r3, #3
 8003642:	6839      	ldr	r1, [r7, #0]
 8003644:	440b      	add	r3, r1
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8003654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003656:	3304      	adds	r3, #4
 8003658:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	3208      	adds	r2, #8
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 800366c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366e:	3301      	adds	r3, #1
 8003670:	633b      	str	r3, [r7, #48]	; 0x30
 8003672:	e7c3      	b.n	80035fc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8003674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	4413      	add	r3, r2
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800367e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003680:	3301      	adds	r3, #1
 8003682:	683a      	ldr	r2, [r7, #0]
 8003684:	4413      	add	r3, r2
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	69fa      	ldr	r2, [r7, #28]
 800368c:	4313      	orrs	r3, r2
 800368e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003692:	3302      	adds	r3, #2
 8003694:	683a      	ldr	r2, [r7, #0]
 8003696:	4413      	add	r3, r2
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	041b      	lsls	r3, r3, #16
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	4313      	orrs	r3, r2
 80036a0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80036a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a4:	3303      	adds	r3, #3
 80036a6:	683a      	ldr	r2, [r7, #0]
 80036a8:	4413      	add	r3, r2
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	061b      	lsls	r3, r3, #24
 80036ae:	69fa      	ldr	r2, [r7, #28]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	3304      	adds	r3, #4
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d90a      	bls.n	80036da <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699a      	ldr	r2, [r3, #24]
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f00f feac 	bl	801342c <realloc>
 80036d4:	4602      	mov	r2, r0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 80036e0:	2300      	movs	r3, #0
 80036e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d236      	bcs.n	800375c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f6:	6839      	ldr	r1, [r7, #0]
 80036f8:	440a      	add	r2, r1
 80036fa:	7812      	ldrb	r2, [r2, #0]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003704:	3301      	adds	r3, #1
 8003706:	6839      	ldr	r1, [r7, #0]
 8003708:	440b      	add	r3, r1
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	021b      	lsls	r3, r3, #8
 800370e:	4313      	orrs	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003716:	3302      	adds	r3, #2
 8003718:	6839      	ldr	r1, [r7, #0]
 800371a:	440b      	add	r3, r1
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	041b      	lsls	r3, r3, #16
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003728:	3303      	adds	r3, #3
 800372a:	6839      	ldr	r1, [r7, #0]
 800372c:	440b      	add	r3, r1
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	061b      	lsls	r3, r3, #24
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 800373c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800373e:	3304      	adds	r3, #4
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	3214      	adds	r2, #20
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	3301      	adds	r3, #1
 8003758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800375a:	e7c3      	b.n	80036e4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	4413      	add	r3, r2
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8003766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003768:	3301      	adds	r3, #1
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	4413      	add	r3, r2
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8003778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377a:	3302      	adds	r3, #2
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	4413      	add	r3, r2
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	041b      	lsls	r3, r3, #16
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	4313      	orrs	r3, r2
 8003788:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800378a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800378c:	3303      	adds	r3, #3
 800378e:	683a      	ldr	r2, [r7, #0]
 8003790:	4413      	add	r3, r2
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	061b      	lsls	r3, r3, #24
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4313      	orrs	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800379c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379e:	3304      	adds	r3, #4
 80037a0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d90a      	bls.n	80037c2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4619      	mov	r1, r3
 80037b6:	4610      	mov	r0, r2
 80037b8:	f00f fe38 	bl	801342c <realloc>
 80037bc:	4602      	mov	r2, r0
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 80037c8:	2300      	movs	r3, #0
 80037ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d23f      	bcs.n	8003856 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 80037d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	441a      	add	r2, r3
 80037dc:	f107 030c 	add.w	r3, r7, #12
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fa8c 	bl	8003d00 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80037e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ea:	3304      	adds	r3, #4
 80037ec:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80037ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4413      	add	r3, r2
 80037f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d20c      	bcs.n	8003818 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	441a      	add	r2, r3
 8003804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003806:	3b01      	subs	r3, #1
 8003808:	6839      	ldr	r1, [r7, #0]
 800380a:	440b      	add	r3, r1
 800380c:	7812      	ldrb	r2, [r2, #0]
 800380e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8003810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003812:	3301      	adds	r3, #1
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	e7ec      	b.n	80037f2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8003818:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4413      	add	r3, r2
 800381e:	3b01      	subs	r3, #1
 8003820:	683a      	ldr	r2, [r7, #0]
 8003822:	4413      	add	r3, r2
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8003828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800382a:	3b01      	subs	r3, #1
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	441a      	add	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8003834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4413      	add	r3, r2
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	3220      	adds	r2, #32
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 800384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003850:	3301      	adds	r3, #1
 8003852:	62bb      	str	r3, [r7, #40]	; 0x28
 8003854:	e7ba      	b.n	80037cc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8003856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003858:	4618      	mov	r0, r3
 800385a:	3738      	adds	r7, #56	; 0x38
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	08016fd4 	.word	0x08016fd4

0800387c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8003886:	4618      	mov	r0, r3
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	08016ea4 	.word	0x08016ea4

08003898 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8003898:	b480      	push	{r7}
 800389a:	b085      	sub	sp, #20
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
 80038a4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	601a      	str	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	611a      	str	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4618      	mov	r0, r3
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
  }
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 1024;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80038f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038f8:	4618      	mov	r0, r3
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <_ZN13STM32HardwareC1Ev+0x34>)
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
    }
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	20001704 	.word	0x20001704

0800393c <_ZN13STM32Hardware10reset_rbufEv>:
  
    void init(){
      reset_rbuf();
    }

    void reset_rbuf(void){
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003950:	4619      	mov	r1, r3
 8003952:	f007 faf5 	bl	800af40 <HAL_UART_Receive_DMA>
    }
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <_ZN13STM32Hardware4readEv>:

    int read(){
 800395e:	b590      	push	{r4, r7, lr}
 8003960:	b085      	sub	sp, #20
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
      int c = -1;
 8003966:	f04f 33ff 	mov.w	r3, #4294967295
 800396a:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8d3 4404 	ldr.w	r4, [r3, #1028]	; 0x404
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ffb3 	bl	80038de <_ZN13STM32Hardware10getRdmaIndEv>
 8003978:	4603      	mov	r3, r0
 800397a:	429c      	cmp	r4, r3
 800397c:	bf14      	ite	ne
 800397e:	2301      	movne	r3, #1
 8003980:	2300      	moveq	r3, #0
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d012      	beq.n	80039ae <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800398e:	1c59      	adds	r1, r3, #1
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	f8c2 1404 	str.w	r1, [r2, #1028]	; 0x404
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4413      	add	r3, r2
 800399a:	791b      	ldrb	r3, [r3, #4]
 800399c:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80039a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      }
      return c;
 80039ae:	68fb      	ldr	r3, [r7, #12]
    }
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd90      	pop	{r4, r7, pc}

080039b8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d108      	bne.n	80039e0 <_ZN13STM32Hardware5flushEv+0x28>
 80039ce:	4b33      	ldr	r3, [pc, #204]	; (8003a9c <_ZN13STM32Hardware5flushEv+0xe4>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	f083 0301 	eor.w	r3, r3, #1
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <_ZN13STM32Hardware5flushEv+0x28>
 80039dc:	2301      	movs	r3, #1
 80039de:	e000      	b.n	80039e2 <_ZN13STM32Hardware5flushEv+0x2a>
 80039e0:	2300      	movs	r3, #0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d055      	beq.n	8003a92 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 80039e6:	4b2d      	ldr	r3, [pc, #180]	; (8003a9c <_ZN13STM32Hardware5flushEv+0xe4>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d047      	beq.n	8003a8c <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8d3 280c 	ldr.w	r2, [r3, #2060]	; 0x80c
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d217      	bcs.n	8003a40 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6818      	ldr	r0, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003a2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	4413      	add	r3, r2
 8003a36:	89fa      	ldrh	r2, [r7, #14]
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f007 fa03 	bl	800ae44 <HAL_UART_Transmit_DMA>
 8003a3e:	e01f      	b.n	8003a80 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8003a4c:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 380c 	ldr.w	r3, [r3, #2060]	; 0x80c
 8003a58:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4413      	add	r3, r2
 8003a60:	89fa      	ldrh	r2, [r7, #14]
 8003a62:	4619      	mov	r1, r3
 8003a64:	f007 f9ee 	bl	800ae44 <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, (tbuf), twind);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f503 6181 	add.w	r1, r3, #1032	; 0x408
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f007 f9e2 	bl	800ae44 <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8c3 280c 	str.w	r2, [r3, #2060]	; 0x80c
        }
        mutex = false;
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <_ZN13STM32Hardware5flushEv+0xe4>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
      }
    }
 8003a92:	bf00      	nop
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000514 	.word	0x20000514

08003aa0 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
      int n = length;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab6:	bfa8      	it	ge
 8003ab8:	f44f 6380 	movge.w	r3, #1024	; 0x400
 8003abc:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003ac4:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	4293      	cmp	r3, r2
 8003acc:	bf28      	it	cs
 8003ace:	4613      	movcs	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8003ad8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	68b9      	ldr	r1, [r7, #8]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f00e fd7c 	bl	80125e2 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f8d3 2808 	ldr.w	r2, [r3, #2056]	; 0x808
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	4413      	add	r3, r2
 8003af4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808

      if(n != n_tail){
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d00b      	beq.n	8003b1e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f503 6081 	add.w	r0, r3, #1032	; 0x408
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	18d1      	adds	r1, r2, r3
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	461a      	mov	r2, r3
 8003b1a:	f00e fd62 	bl	80125e2 <memcpy>
      }

      flush();
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f7ff ff4a 	bl	80039b8 <_ZN13STM32Hardware5flushEv>
    }
 8003b24:	bf00      	nop
 8003b26:	3718      	adds	r7, #24
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	f001 fc98 	bl	8005468 <HAL_GetTick>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3708      	adds	r7, #8
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
      data("")
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f7ff f86c 	bl	8002c2c <_ZN3ros3MsgC1Ev>
 8003b54:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <_ZN8std_msgs6StringC1Ev+0x28>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8003b5e:	605a      	str	r2, [r3, #4]
    {
    }
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	0801700c 	.word	0x0801700c
 8003b70:	08016e28 	.word	0x08016e28

08003b74 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fc fb22 	bl	80001d0 <strlen>
 8003b8c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	4413      	add	r3, r2
 8003b94:	68b9      	ldr	r1, [r7, #8]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f894 	bl	8003cc4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	18d0      	adds	r0, r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	4619      	mov	r1, r3
 8003bb0:	f00e fd17 	bl	80125e2 <memcpy>
      offset += length_data;
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	4413      	add	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
      return offset;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
    }
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003bc6:	b580      	push	{r7, lr}
 8003bc8:	b086      	sub	sp, #24
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	441a      	add	r2, r3
 8003bda:	f107 030c 	add.w	r3, r7, #12
 8003bde:	4611      	mov	r1, r2
 8003be0:	4618      	mov	r0, r3
 8003be2:	f000 f88d 	bl	8003d00 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	3304      	adds	r3, #4
 8003bea:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d20c      	bcs.n	8003c16 <_ZN8std_msgs6String11deserializeEPh+0x50>
          inbuffer[k-1]=inbuffer[k];
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	441a      	add	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	3b01      	subs	r3, #1
 8003c06:	6839      	ldr	r1, [r7, #0]
 8003c08:	440b      	add	r3, r1
 8003c0a:	7812      	ldrb	r2, [r2, #0]
 8003c0c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	3301      	adds	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e7ec      	b.n	8003bf0 <_ZN8std_msgs6String11deserializeEPh+0x2a>
      }
      inbuffer[offset+length_data-1]=0;
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	4413      	add	r3, r2
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	441a      	add	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4413      	add	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
     return offset;
 8003c3a:	693b      	ldr	r3, [r7, #16]
    }
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3718      	adds	r7, #24
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <_ZN8std_msgs6String7getTypeEv>:

    const char * getType(){ return "std_msgs/String"; };
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	4b03      	ldr	r3, [pc, #12]	; (8003c5c <_ZN8std_msgs6String7getTypeEv+0x18>)
 8003c4e:	4618      	mov	r0, r3
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	08016ec8 	.word	0x08016ec8

08003c60 <_ZN8std_msgs6String6getMD5Ev>:
    const char * getMD5(){ return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <_ZN8std_msgs6String6getMD5Ev+0x18>)
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	08016ed8 	.word	0x08016ed8

08003c7c <HAL_UART_TxCpltCallback>:

std_msgs::String str_msg;
ros::Publisher chatter("chatter", &str_msg);
char hello[] = "Hello world!";

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  nh.getHardware()->flush();
 8003c84:	4805      	ldr	r0, [pc, #20]	; (8003c9c <HAL_UART_TxCpltCallback+0x20>)
 8003c86:	f000 f907 	bl	8003e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fe93 	bl	80039b8 <_ZN13STM32Hardware5flushEv>

}
 8003c92:	bf00      	nop
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000518 	.word	0x20000518

08003ca0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]

  nh.getHardware()->reset_rbuf();
 8003ca8:	4805      	ldr	r0, [pc, #20]	; (8003cc0 <HAL_UART_RxCpltCallback+0x20>)
 8003caa:	f000 f8f5 	bl	8003e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fe43 	bl	800393c <_ZN13STM32Hardware10reset_rbufEv>

}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20000518 	.word	0x20000518

08003cc4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d80d      	bhi.n	8003cf4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	fa22 f103 	lsr.w	r1, r2, r3
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	b2ca      	uxtb	r2, r1
 8003cea:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
 8003cf2:	e7ee      	b.n	8003cd2 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003cf4:	bf00      	nop
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d811      	bhi.n	8003d3e <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6839      	ldr	r1, [r7, #0]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	440a      	add	r2, r1
 8003d24:	7812      	ldrb	r2, [r2, #0]
 8003d26:	4611      	mov	r1, r2
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	00d2      	lsls	r2, r2, #3
 8003d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d30:	431a      	orrs	r2, r3
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	e7ea      	b.n	8003d14 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
	...

08003d4c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	4a04      	ldr	r2, [pc, #16]	; (8003d68 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	08017024 	.word	0x08017024

08003d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff ffe8 	bl	8003d4c <_ZN3ros15NodeHandleBase_C1Ev>
 8003d7c:	4a45      	ldr	r2, [pc, #276]	; (8003e94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x128>)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3304      	adds	r3, #4
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff fdbc 	bl	8003904 <_ZN13STM32HardwareC1Ev>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003d9e:	3314      	adds	r3, #20
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff fab7 	bl	8003314 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	2b18      	cmp	r3, #24
 8003dae:	d80b      	bhi.n	8003dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x5c>
      publishers[i] = 0;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	617b      	str	r3, [r7, #20]
 8003dc6:	e7f0      	b.n	8003daa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003dc8:	2300      	movs	r3, #0
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	2b18      	cmp	r3, #24
 8003dd0:	d80a      	bhi.n	8003de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3301      	adds	r3, #1
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	e7f1      	b.n	8003dcc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d20a      	bcs.n	8003e0a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x9e>
      message_in[i] = 0;
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	3301      	adds	r3, #1
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e7f0      	b.n	8003dec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60bb      	str	r3, [r7, #8]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e14:	d20a      	bcs.n	8003e2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xc0>
      message_out[i] = 0;
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3301      	adds	r3, #1
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	e7f0      	b.n	8003e0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev+0xa2>

    req_param_resp.ints_length = 0;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e32:	461a      	mov	r2, r3
 8003e34:	2300      	movs	r3, #0
 8003e36:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e40:	461a      	mov	r2, r3
 8003e42:	2300      	movs	r3, #0
 8003e44:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
    req_param_resp.floats_length = 0;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2300      	movs	r3, #0
 8003e52:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    req_param_resp.floats = NULL;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2300      	movs	r3, #0
 8003e60:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
    req_param_resp.ints_length = 0;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c2 3118 	str.w	r3, [r2, #280]	; 0x118
    req_param_resp.ints = NULL;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    spin_timeout_ = 0;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
  }
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	08016ff8 	.word	0x08016ff8

08003e98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE11getHardwareEv>:

  Hardware* getHardware()
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
  }
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv>:
  /* This function goes in your loop() function, it handles
   *  serial input and callbacks for subscribers.
   */


  virtual int spinOnce()
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  {
    /* restart if timed out */
    uint32_t c_time = hardware_.time();
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff fe35 	bl	8003b2c <_ZN13STM32Hardware4timeEv>
 8003ec2:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d905      	bls.n	8003ee6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x36>
    {
      configured_ = false;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
    }

    /* reset if message has timed out */
    if (mode_ != MODE_FIRST_FF)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00e      	beq.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
    {
      if (c_time > last_msg_timeout_time)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003efa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d906      	bls.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec

    /* while available buffer, read data */
    while (true)
    {
      // If a timeout has been specified, check how long spinOnce has been running.
      if (spin_timeout_ > 0)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d014      	beq.n	8003f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
      {
        // If the maximum processing timeout has been exceeded, exit with error.
        // The next spinOnce can continue where it left off, or optionally
        // based on the application in use, the hardware buffer could be flushed
        // and start fresh.
        if ((hardware_.time() - c_time) > spin_timeout_)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fe03 	bl	8003b2c <_ZN13STM32Hardware4timeEv>
 8003f26:	4602      	mov	r2, r0
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1ad2      	subs	r2, r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 3820 	ldr.w	r3, [r3, #2080]	; 0x820
 8003f32:	429a      	cmp	r2, r3
 8003f34:	bf8c      	ite	hi
 8003f36:	2301      	movhi	r3, #1
 8003f38:	2300      	movls	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x96>
        {
          // Exit the spin, processing timeout exceeded.
          return SPIN_TIMEOUT;
 8003f40:	f06f 0301 	mvn.w	r3, #1
 8003f44:	e221      	b.n	800438a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
        }
      }
      int data = hardware_.read();
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7ff fd07 	bl	800395e <_ZN13STM32Hardware4readEv>
 8003f50:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f2c0 81fa 	blt.w	800434e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x49e>
        break;
      checksum_ += data;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f60:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4413      	add	r3, r2
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f6e:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003f7c:	2b07      	cmp	r3, #7
 8003f7e:	d12b      	bne.n	8003fd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x128>
      {
        message_in[index_++] = data;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f86:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8003f92:	f8c1 20f8 	str.w	r2, [r1, #248]	; 0xf8
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	b2d1      	uxtb	r1, r2
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	460a      	mov	r2, r1
 8003fa0:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
        bytes_--;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1a4      	bne.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fce:	461a      	mov	r2, r3
 8003fd0:	2308      	movs	r3, #8
 8003fd2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003fd6:	e79c      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_FIRST_FF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fde:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d130      	bne.n	8004048 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x198>
      {
        if (data == 0xff)
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	2bff      	cmp	r3, #255	; 0xff
 8003fea:	d112      	bne.n	8004012 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x162>
        {
          mode_++;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ffe:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3314      	adds	r3, #20
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800400c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8004010:	e77f      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        }
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	3304      	adds	r3, #4
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fd88 	bl	8003b2c <_ZN13STM32Hardware4timeEv>
 800401c:	4602      	mov	r2, r0
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f241 3288 	movw	r2, #5000	; 0x1388
 8004026:	4293      	cmp	r3, r2
 8004028:	bf8c      	ite	hi
 800402a:	2301      	movhi	r3, #1
 800402c:	2300      	movls	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	2b00      	cmp	r3, #0
 8004032:	f43f af6e 	beq.w	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        {
          /* We have been stuck in spinOnce too long, return error */
          configured_ = false;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
          return SPIN_TIMEOUT;
 8004042:	f06f 0301 	mvn.w	r3, #1
 8004046:	e1a0      	b.n	800438a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
        }
      }
      else if (mode_ == MODE_PROTOCOL_VER)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800404e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004052:	2b01      	cmp	r3, #1
 8004054:	d121      	bne.n	800409a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1ea>
      {
        if (data == PROTOCOL_VER)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2bfe      	cmp	r3, #254	; 0xfe
 800405a:	d10b      	bne.n	8004074 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x1c4>
        {
          mode_++;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004062:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004066:	3301      	adds	r3, #1
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800406e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004072:	e74e      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        }
        else
        {
          mode_ = MODE_FIRST_FF;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407a:	461a      	mov	r2, r3
 800407c:	2300      	movs	r3, #0
 800407e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
          if (configured_ == false)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004088:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800408c:	2b00      	cmp	r3, #0
 800408e:	f47f af40 	bne.w	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f97d 	bl	8004392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
 8004098:	e73b      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        }
      }
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d120      	bne.n	80040ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x23a>
      {
        bytes_ = data;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ae:	461a      	mov	r2, r3
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        index_ = 0;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040bc:	461a      	mov	r2, r3
 80040be:	2300      	movs	r3, #0
 80040c0:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
        mode_++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80040ce:	3301      	adds	r3, #1
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040d6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte for calculating size checksum */
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040e0:	461a      	mov	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80040e8:	e713      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040f0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80040f4:	2b03      	cmp	r3, #3
 80040f6:	d118      	bne.n	800412a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x27a>
      {
        bytes_ += data << 8;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040fe:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	4413      	add	r3, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800410e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        mode_++;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004118:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800411c:	3301      	adds	r3, #1
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004124:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004128:	e6f3      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004130:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004134:	2b04      	cmp	r3, #4
 8004136:	d11f      	bne.n	8004178 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2c8>
      {
        if ((checksum_ % 256) == 255)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800413e:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004142:	425a      	negs	r2, r3
 8004144:	b2db      	uxtb	r3, r3
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	bf58      	it	pl
 800414a:	4253      	negpl	r3, r2
 800414c:	2bff      	cmp	r3, #255	; 0xff
 800414e:	d10b      	bne.n	8004168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x2b8>
          mode_++;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004156:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800415a:	3301      	adds	r3, #1
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004162:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004166:	e6d4      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        else
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416e:	461a      	mov	r2, r3
 8004170:	2300      	movs	r3, #0
 8004172:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004176:	e6cc      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004182:	2b05      	cmp	r3, #5
 8004184:	d119      	bne.n	80041ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x30a>
      {
        topic_ = data;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418c:	461a      	mov	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_++;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800419e:	3301      	adds	r3, #1
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041a6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        checksum_ = data;               /* first byte included in checksum */
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b0:	461a      	mov	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
 80041b8:	e6ab      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80041c4:	2b06      	cmp	r3, #6
 80041c6:	d123      	bne.n	8004210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x360>
      {
        topic_ += data << 8;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ce:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	4413      	add	r3, r2
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80041de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
        mode_ = MODE_MESSAGE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041e8:	461a      	mov	r2, r3
 80041ea:	2307      	movs	r3, #7
 80041ec:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if (bytes_ == 0)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	f47f ae89 	bne.w	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004206:	461a      	mov	r2, r3
 8004208:	2308      	movs	r3, #8
 800420a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800420e:	e680      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      }
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004216:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800421a:	2b08      	cmp	r3, #8
 800421c:	f47f ae79 	bne.w	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
      {
        mode_ = MODE_FIRST_FF;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004226:	461a      	mov	r2, r3
 8004228:	2300      	movs	r3, #0
 800422a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
        if ((checksum_ % 256) == 255)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004234:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8004238:	425a      	negs	r2, r3
 800423a:	b2db      	uxtb	r3, r3
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	bf58      	it	pl
 8004240:	4253      	negpl	r3, r2
 8004242:	2bff      	cmp	r3, #255	; 0xff
 8004244:	f47f ae65 	bne.w	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        {
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d116      	bne.n	8004284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3d4>
          {
            requestSyncTime();
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f89b 	bl	8004392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
            negotiateTopics();
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f8b6 	bl	80043ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004268:	461a      	mov	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
            last_sync_receive_time = c_time;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
            return SPIN_ERR;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	e082      	b.n	800438a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4da>
          }
          else if (topic_ == TopicInfo::ID_TIME)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800428e:	2b0a      	cmp	r3, #10
 8004290:	d107      	bne.n	80042a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x3f2>
          {
            syncTime(message_in);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004298:	4619      	mov	r1, r3
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f978 	bl	8004590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>
 80042a0:	e637      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042ac:	2b06      	cmp	r3, #6
 80042ae:	d111      	bne.n	80042d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x424>
          {
            req_param_resp.deserialize(message_in);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80042b6:	3314      	adds	r3, #20
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	f602 0224 	addw	r2, r2, #2084	; 0x824
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff f95c 	bl	800357e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80042d2:	e61e      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          }
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042de:	2b0b      	cmp	r3, #11
 80042e0:	d106      	bne.n	80042f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x440>
          {
            configured_ = false;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
 80042ee:	e610      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
          }
          else
          {
            if (subscribers[topic_ - 100])
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80042fa:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f43f ae02 	beq.w	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004314:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004318:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004322:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004330:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800433a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	f602 0224 	addw	r2, r2, #2084	; 0x824
 8004348:	4611      	mov	r1, r2
 800434a:	4798      	blx	r3
    while (true)
 800434c:	e5e1      	b.n	8003f12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x62>
        break;
 800434e:	bf00      	nop
        }
      }
    }

    /* occasionally sync time */
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004356:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 800435a:	2b00      	cmp	r3, #0
 800435c:	d014      	beq.n	8004388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004364:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004370:	4293      	cmp	r3, r2
 8004372:	d909      	bls.n	8004388 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8spinOnceEv+0x4d8>
    {
      requestSyncTime();
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 f80c 	bl	8004392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004380:	461a      	mov	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    }

    return SPIN_OK;
 8004388:	2300      	movs	r3, #0
  }
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15requestSyncTimeEv>:

  /********************************************************************
   * Time functions
   */

  void requestSyncTime()
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  {
    std_msgs::Time t;
 800439a:	f107 030c 	add.w	r3, r7, #12
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe fc54 	bl	8002c4c <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f107 020c 	add.w	r2, r7, #12
 80043ae:	210a      	movs	r1, #10
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
    rt_time = hardware_.time();
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3304      	adds	r3, #4
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fbb7 	bl	8003b2c <_ZN13STM32Hardware4timeEv>
 80043be:	4602      	mov	r2, r0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 80043c6:	bf00      	nop
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80043ce:	b590      	push	{r4, r7, lr}
 80043d0:	b08b      	sub	sp, #44	; 0x2c
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80043d6:	f107 030c 	add.w	r3, r7, #12
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fe fd26 	bl	8002e2c <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80043e0:	2300      	movs	r3, #0
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	2b18      	cmp	r3, #24
 80043e8:	dc63      	bgt.n	80044b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d056      	beq.n	80044aa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	b29b      	uxth	r3, r3
 800440e:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	6859      	ldr	r1, [r3, #4]
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4608      	mov	r0, r1
 800444a:	4798      	blx	r3
 800444c:	4603      	mov	r3, r0
 800444e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004454:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	4413      	add	r3, r2
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004464:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4608      	mov	r0, r1
 8004478:	4798      	blx	r3
 800447a:	4603      	mov	r3, r0
 800447c:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 800447e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004482:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681c      	ldr	r4, [r3, #0]
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4618      	mov	r0, r3
 800449a:	f7ff fa14 	bl	80038c6 <_ZN3ros9Publisher15getEndpointTypeEv>
 800449e:	4601      	mov	r1, r0
 80044a0:	f107 030c 	add.w	r3, r7, #12
 80044a4:	461a      	mov	r2, r3
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	3301      	adds	r3, #1
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
 80044b0:	e798      	b.n	80043e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	2b18      	cmp	r3, #24
 80044ba:	dc5f      	bgt.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c0:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80044c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d053      	beq.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d0:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80044d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80044e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	f202 4222 	addw	r2, r2, #1058	; 0x422
 80044f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3308      	adds	r3, #8
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4608      	mov	r0, r1
 800450e:	4798      	blx	r3
 8004510:	4603      	mov	r3, r0
 8004512:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004518:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800451c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004524:	f202 4222 	addw	r2, r2, #1058	; 0x422
 8004528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4608      	mov	r0, r1
 8004534:	4798      	blx	r3
 8004536:	4603      	mov	r3, r0
 8004538:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800453a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800453e:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681c      	ldr	r4, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454a:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800454e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004556:	f202 4222 	addw	r2, r2, #1058	; 0x422
 800455a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	3304      	adds	r3, #4
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4608      	mov	r0, r1
 8004566:	4798      	blx	r3
 8004568:	4601      	mov	r1, r0
 800456a:	f107 030c 	add.w	r3, r7, #12
 800456e:	461a      	mov	r2, r3
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	3301      	adds	r3, #1
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
 800457a:	e79c      	b.n	80044b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  }
 8004588:	bf00      	nop
 800458a:	372c      	adds	r7, #44	; 0x2c
 800458c:	46bd      	mov	sp, r7
 800458e:	bd90      	pop	{r4, r7, pc}

08004590 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800459a:	f107 0308 	add.w	r3, r7, #8
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe fb54 	bl	8002c4c <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff fabf 	bl	8003b2c <_ZN13STM32Hardware4timeEv>
 80045ae:	4602      	mov	r2, r0
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 3814 	ldr.w	r3, [r3, #2068]	; 0x814
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80045ba:	f107 0308 	add.w	r3, r7, #8
 80045be:	6839      	ldr	r1, [r7, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe fbb3 	bl	8002d2c <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4916      	ldr	r1, [pc, #88]	; (8004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 80045cc:	fba1 1303 	umull	r1, r3, r1, r3
 80045d0:	099b      	lsrs	r3, r3, #6
 80045d2:	4413      	add	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80045d6:	6939      	ldr	r1, [r7, #16]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x94>)
 80045dc:	fba3 0302 	umull	r0, r3, r3, r2
 80045e0:	099b      	lsrs	r3, r3, #6
 80045e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045e6:	fb00 f303 	mul.w	r3, r0, r3
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	4a0e      	ldr	r2, [pc, #56]	; (8004628 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8syncTimeEPh+0x98>)
 80045ee:	fb02 f303 	mul.w	r3, r2, r3
 80045f2:	440b      	add	r3, r1
 80045f4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80045f6:	f107 0308 	add.w	r3, r7, #8
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f000 f8aa 	bl	8004758 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fa8f 	bl	8003b2c <_ZN13STM32Hardware4timeEv>
 800460e:	4602      	mov	r2, r0
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004616:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  }
 800461a:	bf00      	nop
 800461c:	3718      	adds	r7, #24
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	10624dd3 	.word	0x10624dd3
 8004628:	000f4240 	.word	0x000f4240

0800462c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 800462c:	b580      	push	{r7, lr}
 800462e:	b088      	sub	sp, #32
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b63      	cmp	r3, #99	; 0x63
 800463c:	dd0b      	ble.n	8004656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004648:	f083 0301 	eor.w	r3, r3, #1
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004652:	2300      	movs	r3, #0
 8004654:	e079      	b.n	800474a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	f602 4224 	addw	r2, r2, #3108	; 0xc24
 8004662:	3207      	adds	r2, #7
 8004664:	4611      	mov	r1, r2
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	4798      	blx	r3
 800466a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	22ff      	movs	r2, #255	; 0xff
 8004670:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24
    message_out[1] = PROTOCOL_VER;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	22fe      	movs	r2, #254	; 0xfe
 8004678:	f883 2c25 	strb.w	r2, [r3, #3109]	; 0xc25
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	b2da      	uxtb	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f883 2c26 	strb.w	r2, [r3, #3110]	; 0xc26
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	b29b      	uxth	r3, r3
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	b29b      	uxth	r3, r3
 800468e:	b2da      	uxtb	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f883 2c27 	strb.w	r2, [r3, #3111]	; 0xc27
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f893 2c26 	ldrb.w	r2, [r3, #3110]	; 0xc26
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 3c27 	ldrb.w	r3, [r3, #3111]	; 0xc27
 80046a2:	4413      	add	r3, r2
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	43db      	mvns	r3, r3
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f883 2c28 	strb.w	r2, [r3, #3112]	; 0xc28
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f883 2c29 	strb.w	r2, [r3, #3113]	; 0xc29
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	b21b      	sxth	r3, r3
 80046be:	121b      	asrs	r3, r3, #8
 80046c0:	b21b      	sxth	r3, r3
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f883 2c2a 	strb.w	r2, [r3, #3114]	; 0xc2a

    /* calculate checksum */
    int chk = 0;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80046ce:	2305      	movs	r3, #5
 80046d0:	61bb      	str	r3, [r7, #24]
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	3306      	adds	r3, #6
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	429a      	cmp	r2, r3
 80046da:	dc0d      	bgt.n	80046f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	4413      	add	r3, r2
 80046e2:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	461a      	mov	r2, r3
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	4413      	add	r3, r2
 80046ee:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	3301      	adds	r3, #1
 80046f4:	61bb      	str	r3, [r7, #24]
 80046f6:	e7ec      	b.n	80046d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	3307      	adds	r3, #7
 80046fc:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	425a      	negs	r2, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	bf58      	it	pl
 8004708:	4253      	negpl	r3, r2
 800470a:	b2da      	uxtb	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	1c59      	adds	r1, r3, #1
 8004710:	6179      	str	r1, [r7, #20]
 8004712:	43d2      	mvns	r2, r2
 8004714:	b2d1      	uxtb	r1, r2
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4413      	add	r3, r2
 800471a:	460a      	mov	r2, r1
 800471c:	f883 2c24 	strb.w	r2, [r3, #3108]	; 0xc24

    if (l <= OUTPUT_SIZE)
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004726:	dc0a      	bgt.n	800473e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	1d18      	adds	r0, r3, #4
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f603 4324 	addw	r3, r3, #3108	; 0xc24
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4619      	mov	r1, r3
 8004736:	f7ff f9b3 	bl	8003aa0 <_ZN13STM32Hardware5writeEPhi>
      return l;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	e005      	b.n	800474a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800473e:	4905      	ldr	r1, [pc, #20]	; (8004754 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE7publishEiPKNS_3MsgE+0x128>)
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f849 	bl	80047d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>
      return -1;
 8004746:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 800474a:	4618      	mov	r0, r3
 800474c:	3720      	adds	r7, #32
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	08016efc 	.word	0x08016efc

08004758 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3304      	adds	r3, #4
 8004766:	4618      	mov	r0, r3
 8004768:	f7ff f9e0 	bl	8003b2c <_ZN13STM32Hardware4timeEv>
 800476c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	4915      	ldr	r1, [pc, #84]	; (80047cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 8004776:	fba1 1303 	umull	r1, r3, r1, r3
 800477a:	099b      	lsrs	r3, r3, #6
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	1e5a      	subs	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8c3 2818 	str.w	r2, [r3, #2072]	; 0x818
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6859      	ldr	r1, [r3, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4b0f      	ldr	r3, [pc, #60]	; (80047cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x74>)
 800478e:	fba3 0302 	umull	r0, r3, r3, r2
 8004792:	099b      	lsrs	r3, r3, #6
 8004794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004798:	fb00 f303 	mul.w	r3, r0, r3
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x78>)
 80047a0:	fb02 f303 	mul.w	r3, r2, r3
 80047a4:	1aca      	subs	r2, r1, r3
 80047a6:	4b0b      	ldr	r3, [pc, #44]	; (80047d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE6setNowERNS_4TimeE+0x7c>)
 80047a8:	4413      	add	r3, r2
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	f8c2 381c 	str.w	r3, [r2, #2076]	; 0x81c
    normalizeSecNSec(sec_offset, nsec_offset);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f603 0218 	addw	r2, r3, #2072	; 0x818
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 80047bc:	4619      	mov	r1, r3
 80047be:	4610      	mov	r0, r2
 80047c0:	f000 fc7c 	bl	80050bc <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	10624dd3 	.word	0x10624dd3
 80047d0:	000f4240 	.word	0x000f4240
 80047d4:	3b9aca00 	.word	0x3b9aca00

080047d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	2103      	movs	r1, #3
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f804 	bl	80047f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>
  }
 80047ec:	bf00      	nop
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE3logEcPKc>:
  void log(char byte, const char * msg)
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	460b      	mov	r3, r1
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004802:	f107 0314 	add.w	r3, r7, #20
 8004806:	4618      	mov	r0, r3
 8004808:	f7fe fcd4 	bl	80031b4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800480c:	7afb      	ldrb	r3, [r7, #11]
 800480e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f107 0214 	add.w	r2, r7, #20
 800481e:	2107      	movs	r1, #7
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	4798      	blx	r3
  }
 8004824:	bf00      	nop
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_Z41__static_initialization_and_destruction_0ii>:

  str_msg.data = hello;
  chatter.publish(&str_msg);
  nh.spinOnce();

}
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d110      	bne.n	800485e <_Z41__static_initialization_and_destruction_0ii+0x32>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004842:	4293      	cmp	r3, r2
 8004844:	d10b      	bne.n	800485e <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8004846:	4808      	ldr	r0, [pc, #32]	; (8004868 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004848:	f7ff fa90 	bl	8003d6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EEC1Ev>
std_msgs::String str_msg;
 800484c:	4807      	ldr	r0, [pc, #28]	; (800486c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800484e:	f7ff f979 	bl	8003b44 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8004852:	2300      	movs	r3, #0
 8004854:	4a05      	ldr	r2, [pc, #20]	; (800486c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004856:	4906      	ldr	r1, [pc, #24]	; (8004870 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004858:	4806      	ldr	r0, [pc, #24]	; (8004874 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 800485a:	f7ff f81d 	bl	8003898 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	20000518 	.word	0x20000518
 800486c:	20001654 	.word	0x20001654
 8004870:	08016f38 	.word	0x08016f38
 8004874:	2000165c 	.word	0x2000165c

08004878 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi1024ELi1024EE9connectedEv>:
  virtual bool connected()
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
    return configured_;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004886:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
  };
 800488a:	4618      	mov	r0, r3
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <_GLOBAL__sub_I_nh>:
 8004896:	b580      	push	{r7, lr}
 8004898:	af00      	add	r7, sp, #0
 800489a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800489e:	2001      	movs	r0, #1
 80048a0:	f7ff ffc4 	bl	800482c <_Z41__static_initialization_and_destruction_0ii>
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <ServoDriverInit>:
 * 						  hi2cx        				      Pointer to I2C handle
 * 						  _i2caddr				          Address of the Servo Driver
 * Function Return		: NONE
 * Function Example		:   ServoDriverInit(&srv_drv,&hi2c2,0x40);
 */
void ServoDriverInit(Srv_Drv_t *srv_drvx,I2C_HandleTypeDef *hi2cx,uint16_t _i2caddr){
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	80fb      	strh	r3, [r7, #6]

	srv_drvx->_i2caddr = _i2caddr;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	88fa      	ldrh	r2, [r7, #6]
 80048ba:	801a      	strh	r2, [r3, #0]
	srv_drvx->hi2cx = hi2cx;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	605a      	str	r2, [r3, #4]

	ServoDriverReset(srv_drvx);
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f8d0 	bl	8004a68 <ServoDriverReset>

	ServoDriverSetPWMFreq(srv_drvx,50);
 80048c8:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80048dc <ServoDriverInit+0x34>
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 f807 	bl	80048e0 <ServoDriverSetPWMFreq>
}
 80048d2:	bf00      	nop
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	42480000 	.word	0x42480000

080048e0 <ServoDriverSetPWMFreq>:
 *						  srv_drvx                         Pointer to Servo Driver struct
 * 						  freq        				      Frequency between 1 and 3500
 * Function Return		: NONE
 * Function Example		:  ServoDriverSetPWMFreq(&srv_drv,1000);
 */
void ServoDriverSetPWMFreq(Srv_Drv_t *srv_drvx,float freq){
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	ed87 0a02 	vstr	s0, [r7, #8]

	if(freq<1)
 80048ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80048f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fc:	d503      	bpl.n	8004906 <ServoDriverSetPWMFreq+0x26>
		freq=1;
 80048fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004902:	60bb      	str	r3, [r7, #8]
 8004904:	e00a      	b.n	800491c <ServoDriverSetPWMFreq+0x3c>
	else if(freq>3500)   // Datasheet limit is 3052=50MHz/(4*4096)
 8004906:	edd7 7a02 	vldr	s15, [r7, #8]
 800490a:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004a48 <ServoDriverSetPWMFreq+0x168>
 800490e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004916:	dd01      	ble.n	800491c <ServoDriverSetPWMFreq+0x3c>
		freq=3500;
 8004918:	4b4c      	ldr	r3, [pc, #304]	; (8004a4c <ServoDriverSetPWMFreq+0x16c>)
 800491a:	60bb      	str	r3, [r7, #8]

	float prescaleval = ((26000000 / (freq * 4096.0)) + 0.5) - 1;
 800491c:	68b8      	ldr	r0, [r7, #8]
 800491e:	f7fb fe13 	bl	8000548 <__aeabi_f2d>
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	4b4a      	ldr	r3, [pc, #296]	; (8004a50 <ServoDriverSetPWMFreq+0x170>)
 8004928:	f7fb fe66 	bl	80005f8 <__aeabi_dmul>
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	a143      	add	r1, pc, #268	; (adr r1, 8004a40 <ServoDriverSetPWMFreq+0x160>)
 8004932:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004936:	f7fb ff89 	bl	800084c <__aeabi_ddiv>
 800493a:	4602      	mov	r2, r0
 800493c:	460b      	mov	r3, r1
 800493e:	4610      	mov	r0, r2
 8004940:	4619      	mov	r1, r3
 8004942:	f04f 0200 	mov.w	r2, #0
 8004946:	4b43      	ldr	r3, [pc, #268]	; (8004a54 <ServoDriverSetPWMFreq+0x174>)
 8004948:	f7fb fca0 	bl	800028c <__adddf3>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4610      	mov	r0, r2
 8004952:	4619      	mov	r1, r3
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	4b3f      	ldr	r3, [pc, #252]	; (8004a58 <ServoDriverSetPWMFreq+0x178>)
 800495a:	f7fb fc95 	bl	8000288 <__aeabi_dsub>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	f7fc f93f 	bl	8000be8 <__aeabi_d2f>
 800496a:	4603      	mov	r3, r0
 800496c:	617b      	str	r3, [r7, #20]
	  if (prescaleval < PCA9685_PRESCALE_MIN)
 800496e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004972:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004976:	eef4 7ac7 	vcmpe.f32	s15, s14
 800497a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497e:	d501      	bpl.n	8004984 <ServoDriverSetPWMFreq+0xa4>
	    prescaleval = PCA9685_PRESCALE_MIN;
 8004980:	4b36      	ldr	r3, [pc, #216]	; (8004a5c <ServoDriverSetPWMFreq+0x17c>)
 8004982:	617b      	str	r3, [r7, #20]
	  if (prescaleval > PCA9685_PRESCALE_MAX)
 8004984:	edd7 7a05 	vldr	s15, [r7, #20]
 8004988:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004a60 <ServoDriverSetPWMFreq+0x180>
 800498c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004994:	dd01      	ble.n	800499a <ServoDriverSetPWMFreq+0xba>
	    prescaleval = PCA9685_PRESCALE_MAX;
 8004996:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <ServoDriverSetPWMFreq+0x184>)
 8004998:	617b      	str	r3, [r7, #20]
	  uint8_t prescale = (uint8_t)prescaleval;
 800499a:	edd7 7a05 	vldr	s15, [r7, #20]
 800499e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80049a6:	793b      	ldrb	r3, [r7, #4]
 80049a8:	74fb      	strb	r3, [r7, #19]

	  uint8_t oldmode = I2CReadReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6858      	ldr	r0, [r3, #4]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2200      	movs	r2, #0
 80049b6:	4619      	mov	r1, r3
 80049b8:	f000 f914 	bl	8004be4 <I2CReadReg8>
 80049bc:	4603      	mov	r3, r0
 80049be:	74bb      	strb	r3, [r7, #18]

	  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP;
 80049c0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80049c4:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80049c8:	b25b      	sxtb	r3, r3
 80049ca:	f043 0310 	orr.w	r3, r3, #16
 80049ce:	b25b      	sxtb	r3, r3
 80049d0:	747b      	strb	r3, [r7, #17]


	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,newmode);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6858      	ldr	r0, [r3, #4]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b2d9      	uxtb	r1, r3
 80049dc:	7c7b      	ldrb	r3, [r7, #17]
 80049de:	2200      	movs	r2, #0
 80049e0:	f000 f8df 	bl	8004ba2 <I2CWriteReg8>

	  HAL_Delay(5);
 80049e4:	2005      	movs	r0, #5
 80049e6:	f000 fd4b 	bl	8005480 <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_PRESCALE,prescale);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6858      	ldr	r0, [r3, #4]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b2d9      	uxtb	r1, r3
 80049f4:	7cfb      	ldrb	r3, [r7, #19]
 80049f6:	22fe      	movs	r2, #254	; 0xfe
 80049f8:	f000 f8d3 	bl	8004ba2 <I2CWriteReg8>

	  HAL_Delay(5);
 80049fc:	2005      	movs	r0, #5
 80049fe:	f000 fd3f 	bl	8005480 <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,oldmode);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6858      	ldr	r0, [r3, #4]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	b2d9      	uxtb	r1, r3
 8004a0c:	7cbb      	ldrb	r3, [r7, #18]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f000 f8c7 	bl	8004ba2 <I2CWriteReg8>

	  HAL_Delay(5);
 8004a14:	2005      	movs	r0, #5
 8004a16:	f000 fd33 	bl	8005480 <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,(oldmode | MODE1_RESTART | MODE1_AI));
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6858      	ldr	r0, [r3, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	881b      	ldrh	r3, [r3, #0]
 8004a22:	b2d9      	uxtb	r1, r3
 8004a24:	7cbb      	ldrb	r3, [r7, #18]
 8004a26:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f000 f8b8 	bl	8004ba2 <I2CWriteReg8>
}
 8004a32:	bf00      	nop
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	f3af 8000 	nop.w
 8004a40:	00000000 	.word	0x00000000
 8004a44:	4178cba8 	.word	0x4178cba8
 8004a48:	455ac000 	.word	0x455ac000
 8004a4c:	455ac000 	.word	0x455ac000
 8004a50:	40b00000 	.word	0x40b00000
 8004a54:	3fe00000 	.word	0x3fe00000
 8004a58:	3ff00000 	.word	0x3ff00000
 8004a5c:	40400000 	.word	0x40400000
 8004a60:	437f0000 	.word	0x437f0000
 8004a64:	437f0000 	.word	0x437f0000

08004a68 <ServoDriverReset>:
 *
 *						  srv_drvx                         Pointer to Servo Driver struct
 * Function Return		: NONE
 * Function Example		:  ServoDriverReset(&srv_drv);
 */
void ServoDriverReset(Srv_Drv_t *srv_drvx){
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
	I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,MODE1_RESTART);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6858      	ldr	r0, [r3, #4]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	881b      	ldrh	r3, [r3, #0]
 8004a78:	b2d9      	uxtb	r1, r3
 8004a7a:	2380      	movs	r3, #128	; 0x80
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f000 f890 	bl	8004ba2 <I2CWriteReg8>
//	I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE2,MODE2_OUTDRV);
}
 8004a82:	bf00      	nop
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <ServoDriverSetOnOff>:
 *						  on 							  Time to set the wave to high from (0 to 4095)
 *						  off                             Time to set the wave to low (0 to 4095)
 * Function Return		: NONE
 * Function Example		:  ServoDriverSetOnOff(&srv_drv,0,0,1024);  // 25% duty cycle
 */
void ServoDriverSetOnOff(Srv_Drv_t *srv_drvx,uint8_t num, uint16_t on, uint16_t off){
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b088      	sub	sp, #32
 8004a8e:	af02      	add	r7, sp, #8
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	4608      	mov	r0, r1
 8004a94:	4611      	mov	r1, r2
 8004a96:	461a      	mov	r2, r3
 8004a98:	4603      	mov	r3, r0
 8004a9a:	72fb      	strb	r3, [r7, #11]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	813b      	strh	r3, [r7, #8]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]

	uint8_t data[5];

	data[0] = 	PCA9685_LED0_ON_L + 4 * num;
 8004aa4:	7afb      	ldrb	r3, [r7, #11]
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	3306      	adds	r3, #6
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	743b      	strb	r3, [r7, #16]
	data[1] = on;
 8004ab0:	893b      	ldrh	r3, [r7, #8]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	747b      	strb	r3, [r7, #17]
	data[2] = on >> 8;
 8004ab6:	893b      	ldrh	r3, [r7, #8]
 8004ab8:	0a1b      	lsrs	r3, r3, #8
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	74bb      	strb	r3, [r7, #18]
	data[3] = off;
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	74fb      	strb	r3, [r7, #19]
	data[4] = off >> 8;
 8004ac6:	88fb      	ldrh	r3, [r7, #6]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	753b      	strb	r3, [r7, #20]

	HAL_I2C_Master_Transmit(srv_drvx->hi2cx,srv_drvx->_i2caddr<<1,data,5,100);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6858      	ldr	r0, [r3, #4]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	881b      	ldrh	r3, [r3, #0]
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	b299      	uxth	r1, r3
 8004adc:	f107 0210 	add.w	r2, r7, #16
 8004ae0:	2364      	movs	r3, #100	; 0x64
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	2305      	movs	r3, #5
 8004ae6:	f002 f907 	bl	8006cf8 <HAL_I2C_Master_Transmit>
}
 8004aea:	bf00      	nop
 8004aec:	3718      	adds	r7, #24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <ServoDriverSetPWM>:
 *						  val 							  Time to set active from (0 to 4095)
 *						  invert                          0 or 1 inverts the duty cycle
 * Function Return		: NONE
 * Function Example		: ServoDriverSetPWM(&srv_drv,0,1024,0);  // 25% duty cycle
 */
void ServoDriverSetPWM(Srv_Drv_t *srv_drvx,uint8_t num, uint16_t val, int invert) {
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b084      	sub	sp, #16
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	607b      	str	r3, [r7, #4]
 8004afc:	460b      	mov	r3, r1
 8004afe:	72fb      	strb	r3, [r7, #11]
 8004b00:	4613      	mov	r3, r2
 8004b02:	813b      	strh	r3, [r7, #8]

  // Clamp value between 0 and 4095 inclusive.
  if(val>4095)
 8004b04:	893b      	ldrh	r3, [r7, #8]
 8004b06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b0a:	d302      	bcc.n	8004b12 <ServoDriverSetPWM+0x20>
	  val=4095;
 8004b0c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004b10:	813b      	strh	r3, [r7, #8]
  else if(val<0)
	  val=0;

  if (invert) {
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d022      	beq.n	8004b5e <ServoDriverSetPWM+0x6c>
    if (val == 0) {
 8004b18:	893b      	ldrh	r3, [r7, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d107      	bne.n	8004b2e <ServoDriverSetPWM+0x3c>
      // Special value for signal fully on.
    	ServoDriverSetOnOff(srv_drvx,num, 4096, 0);
 8004b1e:	7af9      	ldrb	r1, [r7, #11]
 8004b20:	2300      	movs	r3, #0
 8004b22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b26:	68f8      	ldr	r0, [r7, #12]
 8004b28:	f7ff ffaf 	bl	8004a8a <ServoDriverSetOnOff>
    	ServoDriverSetOnOff(srv_drvx,num, 0, 4096);
    } else {
    	ServoDriverSetOnOff(srv_drvx,num, 0, val);
    }
  }
}
 8004b2c:	e035      	b.n	8004b9a <ServoDriverSetPWM+0xa8>
    } else if (val == 4095) {
 8004b2e:	893b      	ldrh	r3, [r7, #8]
 8004b30:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d107      	bne.n	8004b48 <ServoDriverSetPWM+0x56>
    	ServoDriverSetOnOff(srv_drvx,num, 0, 4096);
 8004b38:	7af9      	ldrb	r1, [r7, #11]
 8004b3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b3e:	2200      	movs	r2, #0
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff ffa2 	bl	8004a8a <ServoDriverSetOnOff>
}
 8004b46:	e028      	b.n	8004b9a <ServoDriverSetPWM+0xa8>
    	ServoDriverSetOnOff(srv_drvx,num, 0, 4095 - val);
 8004b48:	893b      	ldrh	r3, [r7, #8]
 8004b4a:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8004b4e:	330f      	adds	r3, #15
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	7af9      	ldrb	r1, [r7, #11]
 8004b54:	2200      	movs	r2, #0
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f7ff ff97 	bl	8004a8a <ServoDriverSetOnOff>
}
 8004b5c:	e01d      	b.n	8004b9a <ServoDriverSetPWM+0xa8>
    if (val == 4095) {
 8004b5e:	893b      	ldrh	r3, [r7, #8]
 8004b60:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d107      	bne.n	8004b78 <ServoDriverSetPWM+0x86>
    	ServoDriverSetOnOff(srv_drvx,num, 4096, 0);
 8004b68:	7af9      	ldrb	r1, [r7, #11]
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7ff ff8a 	bl	8004a8a <ServoDriverSetOnOff>
}
 8004b76:	e010      	b.n	8004b9a <ServoDriverSetPWM+0xa8>
    } else if (val == 0) {
 8004b78:	893b      	ldrh	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d107      	bne.n	8004b8e <ServoDriverSetPWM+0x9c>
    	ServoDriverSetOnOff(srv_drvx,num, 0, 4096);
 8004b7e:	7af9      	ldrb	r1, [r7, #11]
 8004b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b84:	2200      	movs	r2, #0
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f7ff ff7f 	bl	8004a8a <ServoDriverSetOnOff>
}
 8004b8c:	e005      	b.n	8004b9a <ServoDriverSetPWM+0xa8>
    	ServoDriverSetOnOff(srv_drvx,num, 0, val);
 8004b8e:	893b      	ldrh	r3, [r7, #8]
 8004b90:	7af9      	ldrb	r1, [r7, #11]
 8004b92:	2200      	movs	r2, #0
 8004b94:	68f8      	ldr	r0, [r7, #12]
 8004b96:	f7ff ff78 	bl	8004a8a <ServoDriverSetOnOff>
}
 8004b9a:	bf00      	nop
 8004b9c:	3710      	adds	r7, #16
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <I2CWriteReg8>:
  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE2,newmode);

}

void I2CWriteReg8(I2C_HandleTypeDef *hi2cx, uint8_t slave_addr,uint8_t register_pointer, uint8_t register_value)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af04      	add	r7, sp, #16
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	4608      	mov	r0, r1
 8004bac:	4611      	mov	r1, r2
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	70fb      	strb	r3, [r7, #3]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70bb      	strb	r3, [r7, #2]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	707b      	strb	r3, [r7, #1]

    if(HAL_I2C_Mem_Write(hi2cx,slave_addr<<1,(uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&register_value), 1, 10) != HAL_OK)
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	b299      	uxth	r1, r3
 8004bc4:	78bb      	ldrb	r3, [r7, #2]
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	230a      	movs	r3, #10
 8004bca:	9302      	str	r3, [sp, #8]
 8004bcc:	2301      	movs	r3, #1
 8004bce:	9301      	str	r3, [sp, #4]
 8004bd0:	1c7b      	adds	r3, r7, #1
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f002 fc60 	bl	800749c <HAL_I2C_Mem_Write>
    {
        // Error handling, for example re-initialization of the I2C peripheral
    }
}
 8004bdc:	bf00      	nop
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <I2CReadReg8>:

uint8_t I2CReadReg8(I2C_HandleTypeDef *hi2cx, uint8_t slave_addr,uint8_t register_pointer)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af04      	add	r7, sp, #16
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	70bb      	strb	r3, [r7, #2]
	    uint8_t return_value;

	    /* Check the communication status */
	    if(HAL_I2C_Mem_Read(hi2cx,slave_addr<<1, (uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 10) != HAL_OK)
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	b299      	uxth	r1, r3
 8004bfc:	78bb      	ldrb	r3, [r7, #2]
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	230a      	movs	r3, #10
 8004c02:	9302      	str	r3, [sp, #8]
 8004c04:	2301      	movs	r3, #1
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	f107 030f 	add.w	r3, r7, #15
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	2301      	movs	r3, #1
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f002 fd3d 	bl	8007690 <HAL_I2C_Mem_Read>
	    {
	    	//Error handling, for example re-initialization of the I2C peripheral
	    }

	    return return_value;
 8004c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c26:	2300      	movs	r3, #0
 8004c28:	607b      	str	r3, [r7, #4]
 8004c2a:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <HAL_MspInit+0x54>)
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	4a11      	ldr	r2, [pc, #68]	; (8004c74 <HAL_MspInit+0x54>)
 8004c30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c34:	6453      	str	r3, [r2, #68]	; 0x44
 8004c36:	4b0f      	ldr	r3, [pc, #60]	; (8004c74 <HAL_MspInit+0x54>)
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c3e:	607b      	str	r3, [r7, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c42:	2300      	movs	r3, #0
 8004c44:	603b      	str	r3, [r7, #0]
 8004c46:	4b0b      	ldr	r3, [pc, #44]	; (8004c74 <HAL_MspInit+0x54>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	4a0a      	ldr	r2, [pc, #40]	; (8004c74 <HAL_MspInit+0x54>)
 8004c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c50:	6413      	str	r3, [r2, #64]	; 0x40
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <HAL_MspInit+0x54>)
 8004c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c5e:	2200      	movs	r2, #0
 8004c60:	210f      	movs	r1, #15
 8004c62:	f06f 0001 	mvn.w	r0, #1
 8004c66:	f001 f8f9 	bl	8005e5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40023800 	.word	0x40023800

08004c78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b08e      	sub	sp, #56	; 0x38
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8004c80:	2300      	movs	r3, #0
 8004c82:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	4b33      	ldr	r3, [pc, #204]	; (8004d5c <HAL_InitTick+0xe4>)
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	4a32      	ldr	r2, [pc, #200]	; (8004d5c <HAL_InitTick+0xe4>)
 8004c92:	f043 0320 	orr.w	r3, r3, #32
 8004c96:	6413      	str	r3, [r2, #64]	; 0x40
 8004c98:	4b30      	ldr	r3, [pc, #192]	; (8004d5c <HAL_InitTick+0xe4>)
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004ca4:	f107 0210 	add.w	r2, r7, #16
 8004ca8:	f107 0314 	add.w	r3, r7, #20
 8004cac:	4611      	mov	r1, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f005 fd28 	bl	800a704 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004cbe:	f005 fcf9 	bl	800a6b4 <HAL_RCC_GetPCLK1Freq>
 8004cc2:	6378      	str	r0, [r7, #52]	; 0x34
 8004cc4:	e004      	b.n	8004cd0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004cc6:	f005 fcf5 	bl	800a6b4 <HAL_RCC_GetPCLK1Freq>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cd2:	4a23      	ldr	r2, [pc, #140]	; (8004d60 <HAL_InitTick+0xe8>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	0c9b      	lsrs	r3, r3, #18
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8004cde:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <HAL_InitTick+0xec>)
 8004ce0:	4a21      	ldr	r2, [pc, #132]	; (8004d68 <HAL_InitTick+0xf0>)
 8004ce2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <HAL_InitTick+0xec>)
 8004ce6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004cea:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <HAL_InitTick+0xec>)
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <HAL_InitTick+0xec>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cf8:	4b1a      	ldr	r3, [pc, #104]	; (8004d64 <HAL_InitTick+0xec>)
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cfe:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_InitTick+0xec>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8004d04:	4817      	ldr	r0, [pc, #92]	; (8004d64 <HAL_InitTick+0xec>)
 8004d06:	f005 fd2f 	bl	800a768 <HAL_TIM_Base_Init>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004d10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d11b      	bne.n	8004d50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8004d18:	4812      	ldr	r0, [pc, #72]	; (8004d64 <HAL_InitTick+0xec>)
 8004d1a:	f005 fd75 	bl	800a808 <HAL_TIM_Base_Start_IT>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004d24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d111      	bne.n	8004d50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004d2c:	2037      	movs	r0, #55	; 0x37
 8004d2e:	f001 f8b1 	bl	8005e94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b0f      	cmp	r3, #15
 8004d36:	d808      	bhi.n	8004d4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8004d38:	2200      	movs	r2, #0
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	2037      	movs	r0, #55	; 0x37
 8004d3e:	f001 f88d 	bl	8005e5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004d42:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <HAL_InitTick+0xf4>)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e002      	b.n	8004d50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004d50:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3738      	adds	r7, #56	; 0x38
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	431bde83 	.word	0x431bde83
 8004d64:	20001670 	.word	0x20001670
 8004d68:	40001400 	.word	0x40001400
 8004d6c:	20000004 	.word	0x20000004

08004d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d74:	e7fe      	b.n	8004d74 <NMI_Handler+0x4>

08004d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d76:	b480      	push	{r7}
 8004d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d7a:	e7fe      	b.n	8004d7a <HardFault_Handler+0x4>

08004d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d80:	e7fe      	b.n	8004d80 <MemManage_Handler+0x4>

08004d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d86:	e7fe      	b.n	8004d86 <BusFault_Handler+0x4>

08004d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d8c:	e7fe      	b.n	8004d8c <UsageFault_Handler+0x4>

08004d8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d92:	bf00      	nop
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004da0:	4802      	ldr	r0, [pc, #8]	; (8004dac <DMA1_Stream5_IRQHandler+0x10>)
 8004da2:	f001 fa1d 	bl	80061e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	2000178c 	.word	0x2000178c

08004db0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004db4:	4802      	ldr	r0, [pc, #8]	; (8004dc0 <DMA1_Stream6_IRQHandler+0x10>)
 8004db6:	f001 fa13 	bl	80061e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004dba:	bf00      	nop
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	200017ec 	.word	0x200017ec

08004dc4 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8004dc8:	4802      	ldr	r0, [pc, #8]	; (8004dd4 <I2C2_EV_IRQHandler+0x10>)
 8004dca:	f002 fe87 	bl	8007adc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8004dce:	bf00      	nop
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	2000046c 	.word	0x2000046c

08004dd8 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8004ddc:	4802      	ldr	r0, [pc, #8]	; (8004de8 <I2C2_ER_IRQHandler+0x10>)
 8004dde:	f002 ffee 	bl	8007dbe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	2000046c 	.word	0x2000046c

08004dec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004df0:	4802      	ldr	r0, [pc, #8]	; (8004dfc <USART2_IRQHandler+0x10>)
 8004df2:	f006 f8d5 	bl	800afa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	20001704 	.word	0x20001704

08004e00 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004e04:	4802      	ldr	r0, [pc, #8]	; (8004e10 <USART3_IRQHandler+0x10>)
 8004e06:	f006 f8cb 	bl	800afa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20001748 	.word	0x20001748

08004e14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004e18:	4802      	ldr	r0, [pc, #8]	; (8004e24 <TIM6_DAC_IRQHandler+0x10>)
 8004e1a:	f005 fd65 	bl	800a8e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004e1e:	bf00      	nop
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	200016bc 	.word	0x200016bc

08004e28 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004e2c:	4802      	ldr	r0, [pc, #8]	; (8004e38 <TIM7_IRQHandler+0x10>)
 8004e2e:	f005 fd5b 	bl	800a8e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	20001670 	.word	0x20001670

08004e3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e40:	4802      	ldr	r0, [pc, #8]	; (8004e4c <DMA2_Stream0_IRQHandler+0x10>)
 8004e42:	f001 f9cd 	bl	80061e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e46:	bf00      	nop
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	2000024c 	.word	0x2000024c

08004e50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
	return 1;
 8004e54:	2301      	movs	r3, #1
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <_kill>:

int _kill(int pid, int sig)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004e6a:	f00d fa97 	bl	801239c <__errno>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2216      	movs	r2, #22
 8004e72:	601a      	str	r2, [r3, #0]
	return -1;
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <_exit>:

void _exit (int status)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004e88:	f04f 31ff 	mov.w	r1, #4294967295
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f7ff ffe7 	bl	8004e60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004e92:	e7fe      	b.n	8004e92 <_exit+0x12>

08004e94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b086      	sub	sp, #24
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	e00a      	b.n	8004ebc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ea6:	f3af 8000 	nop.w
 8004eaa:	4601      	mov	r1, r0
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	1c5a      	adds	r2, r3, #1
 8004eb0:	60ba      	str	r2, [r7, #8]
 8004eb2:	b2ca      	uxtb	r2, r1
 8004eb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	dbf0      	blt.n	8004ea6 <_read+0x12>
	}

return len;
 8004ec4:	687b      	ldr	r3, [r7, #4]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b086      	sub	sp, #24
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	e009      	b.n	8004ef4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	1c5a      	adds	r2, r3, #1
 8004ee4:	60ba      	str	r2, [r7, #8]
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	dbf1      	blt.n	8004ee0 <_write+0x12>
	}
	return len;
 8004efc:	687b      	ldr	r3, [r7, #4]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <_close>:

int _close(int file)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
	return -1;
 8004f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	370c      	adds	r7, #12
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b083      	sub	sp, #12
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f2e:	605a      	str	r2, [r3, #4]
	return 0;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <_isatty>:

int _isatty(int file)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
	return 1;
 8004f46:	2301      	movs	r3, #1
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
	return 0;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
	...

08004f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f78:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <_sbrk+0x5c>)
 8004f7a:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <_sbrk+0x60>)
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f84:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <_sbrk+0x64>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f8c:	4b11      	ldr	r3, [pc, #68]	; (8004fd4 <_sbrk+0x64>)
 8004f8e:	4a12      	ldr	r2, [pc, #72]	; (8004fd8 <_sbrk+0x68>)
 8004f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f92:	4b10      	ldr	r3, [pc, #64]	; (8004fd4 <_sbrk+0x64>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d207      	bcs.n	8004fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fa0:	f00d f9fc 	bl	801239c <__errno>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	220c      	movs	r2, #12
 8004fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295
 8004fae:	e009      	b.n	8004fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fb0:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <_sbrk+0x64>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fb6:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <_sbrk+0x64>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	4a05      	ldr	r2, [pc, #20]	; (8004fd4 <_sbrk+0x64>)
 8004fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20020000 	.word	0x20020000
 8004fd0:	00000400 	.word	0x00000400
 8004fd4:	200016b8 	.word	0x200016b8
 8004fd8:	20014b68 	.word	0x20014b68

08004fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004fe0:	4b06      	ldr	r3, [pc, #24]	; (8004ffc <SystemInit+0x20>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	4a05      	ldr	r2, [pc, #20]	; (8004ffc <SystemInit+0x20>)
 8004fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004ff0:	bf00      	nop
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000ed00 	.word	0xe000ed00

08005000 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005006:	463b      	mov	r3, r7
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800500e:	4b15      	ldr	r3, [pc, #84]	; (8005064 <MX_TIM6_Init+0x64>)
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <MX_TIM6_Init+0x68>)
 8005012:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84;
 8005014:	4b13      	ldr	r3, [pc, #76]	; (8005064 <MX_TIM6_Init+0x64>)
 8005016:	2254      	movs	r2, #84	; 0x54
 8005018:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800501a:	4b12      	ldr	r3, [pc, #72]	; (8005064 <MX_TIM6_Init+0x64>)
 800501c:	2200      	movs	r2, #0
 800501e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8005020:	4b10      	ldr	r3, [pc, #64]	; (8005064 <MX_TIM6_Init+0x64>)
 8005022:	f241 3287 	movw	r2, #4999	; 0x1387
 8005026:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005028:	4b0e      	ldr	r3, [pc, #56]	; (8005064 <MX_TIM6_Init+0x64>)
 800502a:	2280      	movs	r2, #128	; 0x80
 800502c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800502e:	480d      	ldr	r0, [pc, #52]	; (8005064 <MX_TIM6_Init+0x64>)
 8005030:	f005 fb9a 	bl	800a768 <HAL_TIM_Base_Init>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800503a:	f7fd fde1 	bl	8002c00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800503e:	2300      	movs	r3, #0
 8005040:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005042:	2300      	movs	r3, #0
 8005044:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005046:	463b      	mov	r3, r7
 8005048:	4619      	mov	r1, r3
 800504a:	4806      	ldr	r0, [pc, #24]	; (8005064 <MX_TIM6_Init+0x64>)
 800504c:	f005 fe1c 	bl	800ac88 <HAL_TIMEx_MasterConfigSynchronization>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005056:	f7fd fdd3 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800505a:	bf00      	nop
 800505c:	3708      	adds	r7, #8
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	200016bc 	.word	0x200016bc
 8005068:	40001000 	.word	0x40001000

0800506c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a0e      	ldr	r2, [pc, #56]	; (80050b4 <HAL_TIM_Base_MspInit+0x48>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d115      	bne.n	80050aa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800507e:	2300      	movs	r3, #0
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <HAL_TIM_Base_MspInit+0x4c>)
 8005084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005086:	4a0c      	ldr	r2, [pc, #48]	; (80050b8 <HAL_TIM_Base_MspInit+0x4c>)
 8005088:	f043 0310 	orr.w	r3, r3, #16
 800508c:	6413      	str	r3, [r2, #64]	; 0x40
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <HAL_TIM_Base_MspInit+0x4c>)
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f003 0310 	and.w	r3, r3, #16
 8005096:	60fb      	str	r3, [r7, #12]
 8005098:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800509a:	2200      	movs	r2, #0
 800509c:	2105      	movs	r1, #5
 800509e:	2036      	movs	r0, #54	; 0x36
 80050a0:	f000 fedc 	bl	8005e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80050a4:	2036      	movs	r0, #54	; 0x36
 80050a6:	f000 fef5 	bl	8005e94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40001000 	.word	0x40001000
 80050b8:	40023800 	.word	0x40023800

080050bc <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	0a5a      	lsrs	r2, r3, #9
 80050cc:	490f      	ldr	r1, [pc, #60]	; (800510c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80050ce:	fba1 1202 	umull	r1, r2, r1, r2
 80050d2:	09d2      	lsrs	r2, r2, #7
 80050d4:	490e      	ldr	r1, [pc, #56]	; (8005110 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 80050d6:	fb01 f202 	mul.w	r2, r1, r2
 80050da:	1a9b      	subs	r3, r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	0a5b      	lsrs	r3, r3, #9
 80050e4:	4a09      	ldr	r2, [pc, #36]	; (800510c <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 80050e6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ea:	09db      	lsrs	r3, r3, #7
 80050ec:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	441a      	add	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	601a      	str	r2, [r3, #0]
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr
 800510c:	00044b83 	.word	0x00044b83
 8005110:	3b9aca00 	.word	0x3b9aca00

08005114 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005118:	4b11      	ldr	r3, [pc, #68]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 800511a:	4a12      	ldr	r2, [pc, #72]	; (8005164 <MX_USART2_UART_Init+0x50>)
 800511c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800511e:	4b10      	ldr	r3, [pc, #64]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 8005120:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005124:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005126:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 8005128:	2200      	movs	r2, #0
 800512a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800512c:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 800512e:	2200      	movs	r2, #0
 8005130:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 8005134:	2200      	movs	r2, #0
 8005136:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005138:	4b09      	ldr	r3, [pc, #36]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 800513a:	220c      	movs	r2, #12
 800513c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 8005140:	2200      	movs	r2, #0
 8005142:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005144:	4b06      	ldr	r3, [pc, #24]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 8005146:	2200      	movs	r2, #0
 8005148:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800514a:	4805      	ldr	r0, [pc, #20]	; (8005160 <MX_USART2_UART_Init+0x4c>)
 800514c:	f005 fe2c 	bl	800ada8 <HAL_UART_Init>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d001      	beq.n	800515a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005156:	f7fd fd53 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800515a:	bf00      	nop
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20001704 	.word	0x20001704
 8005164:	40004400 	.word	0x40004400

08005168 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800516c:	4b11      	ldr	r3, [pc, #68]	; (80051b4 <MX_USART3_UART_Init+0x4c>)
 800516e:	4a12      	ldr	r2, [pc, #72]	; (80051b8 <MX_USART3_UART_Init+0x50>)
 8005170:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005172:	4b10      	ldr	r3, [pc, #64]	; (80051b4 <MX_USART3_UART_Init+0x4c>)
 8005174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005178:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800517a:	4b0e      	ldr	r3, [pc, #56]	; (80051b4 <MX_USART3_UART_Init+0x4c>)
 800517c:	2200      	movs	r2, #0
 800517e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005180:	4b0c      	ldr	r3, [pc, #48]	; (80051b4 <MX_USART3_UART_Init+0x4c>)
 8005182:	2200      	movs	r2, #0
 8005184:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005186:	4b0b      	ldr	r3, [pc, #44]	; (80051b4 <MX_USART3_UART_Init+0x4c>)
 8005188:	2200      	movs	r2, #0
 800518a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800518c:	4b09      	ldr	r3, [pc, #36]	; (80051b4 <MX_USART3_UART_Init+0x4c>)
 800518e:	220c      	movs	r2, #12
 8005190:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005192:	4b08      	ldr	r3, [pc, #32]	; (80051b4 <MX_USART3_UART_Init+0x4c>)
 8005194:	2200      	movs	r2, #0
 8005196:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <MX_USART3_UART_Init+0x4c>)
 800519a:	2200      	movs	r2, #0
 800519c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800519e:	4805      	ldr	r0, [pc, #20]	; (80051b4 <MX_USART3_UART_Init+0x4c>)
 80051a0:	f005 fe02 	bl	800ada8 <HAL_UART_Init>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d001      	beq.n	80051ae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80051aa:	f7fd fd29 	bl	8002c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80051ae:	bf00      	nop
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20001748 	.word	0x20001748
 80051b8:	40004800 	.word	0x40004800

080051bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08c      	sub	sp, #48	; 0x30
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051c4:	f107 031c 	add.w	r3, r7, #28
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	609a      	str	r2, [r3, #8]
 80051d0:	60da      	str	r2, [r3, #12]
 80051d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a6a      	ldr	r2, [pc, #424]	; (8005384 <HAL_UART_MspInit+0x1c8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	f040 8093 	bne.w	8005306 <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051e0:	2300      	movs	r3, #0
 80051e2:	61bb      	str	r3, [r7, #24]
 80051e4:	4b68      	ldr	r3, [pc, #416]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	4a67      	ldr	r2, [pc, #412]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 80051ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051ee:	6413      	str	r3, [r2, #64]	; 0x40
 80051f0:	4b65      	ldr	r3, [pc, #404]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 80051f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	4b61      	ldr	r3, [pc, #388]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	4a60      	ldr	r2, [pc, #384]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	6313      	str	r3, [r2, #48]	; 0x30
 800520c:	4b5e      	ldr	r3, [pc, #376]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 800520e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	617b      	str	r3, [r7, #20]
 8005216:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005218:	230c      	movs	r3, #12
 800521a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800521c:	2302      	movs	r3, #2
 800521e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005220:	2300      	movs	r3, #0
 8005222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005224:	2303      	movs	r3, #3
 8005226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005228:	2307      	movs	r3, #7
 800522a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800522c:	f107 031c 	add.w	r3, r7, #28
 8005230:	4619      	mov	r1, r3
 8005232:	4856      	ldr	r0, [pc, #344]	; (800538c <HAL_UART_MspInit+0x1d0>)
 8005234:	f001 fa4c 	bl	80066d0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005238:	4b55      	ldr	r3, [pc, #340]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 800523a:	4a56      	ldr	r2, [pc, #344]	; (8005394 <HAL_UART_MspInit+0x1d8>)
 800523c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800523e:	4b54      	ldr	r3, [pc, #336]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 8005240:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005244:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005246:	4b52      	ldr	r3, [pc, #328]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 8005248:	2200      	movs	r2, #0
 800524a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800524c:	4b50      	ldr	r3, [pc, #320]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 800524e:	2200      	movs	r2, #0
 8005250:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005252:	4b4f      	ldr	r3, [pc, #316]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 8005254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005258:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800525a:	4b4d      	ldr	r3, [pc, #308]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 800525c:	2200      	movs	r2, #0
 800525e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005260:	4b4b      	ldr	r3, [pc, #300]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 8005262:	2200      	movs	r2, #0
 8005264:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005266:	4b4a      	ldr	r3, [pc, #296]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 8005268:	2200      	movs	r2, #0
 800526a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800526c:	4b48      	ldr	r3, [pc, #288]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 800526e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005272:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005274:	4b46      	ldr	r3, [pc, #280]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 8005276:	2200      	movs	r2, #0
 8005278:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800527a:	4845      	ldr	r0, [pc, #276]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 800527c:	f000 fe18 	bl	8005eb0 <HAL_DMA_Init>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005286:	f7fd fcbb 	bl	8002c00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a40      	ldr	r2, [pc, #256]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
 8005290:	4a3f      	ldr	r2, [pc, #252]	; (8005390 <HAL_UART_MspInit+0x1d4>)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005296:	4b40      	ldr	r3, [pc, #256]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 8005298:	4a40      	ldr	r2, [pc, #256]	; (800539c <HAL_UART_MspInit+0x1e0>)
 800529a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800529c:	4b3e      	ldr	r3, [pc, #248]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 800529e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80052a2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80052a4:	4b3c      	ldr	r3, [pc, #240]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 80052a6:	2240      	movs	r2, #64	; 0x40
 80052a8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052aa:	4b3b      	ldr	r3, [pc, #236]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80052b0:	4b39      	ldr	r3, [pc, #228]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 80052b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052b6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052b8:	4b37      	ldr	r3, [pc, #220]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052be:	4b36      	ldr	r3, [pc, #216]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80052c4:	4b34      	ldr	r3, [pc, #208]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80052ca:	4b33      	ldr	r3, [pc, #204]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 80052cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80052d0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052d2:	4b31      	ldr	r3, [pc, #196]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80052d8:	482f      	ldr	r0, [pc, #188]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 80052da:	f000 fde9 	bl	8005eb0 <HAL_DMA_Init>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80052e4:	f7fd fc8c 	bl	8002c00 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a2b      	ldr	r2, [pc, #172]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 80052ec:	635a      	str	r2, [r3, #52]	; 0x34
 80052ee:	4a2a      	ldr	r2, [pc, #168]	; (8005398 <HAL_UART_MspInit+0x1dc>)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80052f4:	2200      	movs	r2, #0
 80052f6:	2105      	movs	r1, #5
 80052f8:	2026      	movs	r0, #38	; 0x26
 80052fa:	f000 fdaf 	bl	8005e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80052fe:	2026      	movs	r0, #38	; 0x26
 8005300:	f000 fdc8 	bl	8005e94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005304:	e039      	b.n	800537a <HAL_UART_MspInit+0x1be>
  else if(uartHandle->Instance==USART3)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a25      	ldr	r2, [pc, #148]	; (80053a0 <HAL_UART_MspInit+0x1e4>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d134      	bne.n	800537a <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005310:	2300      	movs	r3, #0
 8005312:	613b      	str	r3, [r7, #16]
 8005314:	4b1c      	ldr	r3, [pc, #112]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 800531a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800531e:	6413      	str	r3, [r2, #64]	; 0x40
 8005320:	4b19      	ldr	r3, [pc, #100]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005328:	613b      	str	r3, [r7, #16]
 800532a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
 8005330:	4b15      	ldr	r3, [pc, #84]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 8005332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005334:	4a14      	ldr	r2, [pc, #80]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 8005336:	f043 0308 	orr.w	r3, r3, #8
 800533a:	6313      	str	r3, [r2, #48]	; 0x30
 800533c:	4b12      	ldr	r3, [pc, #72]	; (8005388 <HAL_UART_MspInit+0x1cc>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005348:	f44f 7340 	mov.w	r3, #768	; 0x300
 800534c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534e:	2302      	movs	r3, #2
 8005350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005356:	2303      	movs	r3, #3
 8005358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800535a:	2307      	movs	r3, #7
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800535e:	f107 031c 	add.w	r3, r7, #28
 8005362:	4619      	mov	r1, r3
 8005364:	480f      	ldr	r0, [pc, #60]	; (80053a4 <HAL_UART_MspInit+0x1e8>)
 8005366:	f001 f9b3 	bl	80066d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800536a:	2200      	movs	r2, #0
 800536c:	2105      	movs	r1, #5
 800536e:	2027      	movs	r0, #39	; 0x27
 8005370:	f000 fd74 	bl	8005e5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005374:	2027      	movs	r0, #39	; 0x27
 8005376:	f000 fd8d 	bl	8005e94 <HAL_NVIC_EnableIRQ>
}
 800537a:	bf00      	nop
 800537c:	3730      	adds	r7, #48	; 0x30
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40004400 	.word	0x40004400
 8005388:	40023800 	.word	0x40023800
 800538c:	40020000 	.word	0x40020000
 8005390:	2000178c 	.word	0x2000178c
 8005394:	40026088 	.word	0x40026088
 8005398:	200017ec 	.word	0x200017ec
 800539c:	400260a0 	.word	0x400260a0
 80053a0:	40004800 	.word	0x40004800
 80053a4:	40020c00 	.word	0x40020c00

080053a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80053a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80053e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80053ac:	480d      	ldr	r0, [pc, #52]	; (80053e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80053ae:	490e      	ldr	r1, [pc, #56]	; (80053e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80053b0:	4a0e      	ldr	r2, [pc, #56]	; (80053ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80053b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80053b4:	e002      	b.n	80053bc <LoopCopyDataInit>

080053b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80053b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80053b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80053ba:	3304      	adds	r3, #4

080053bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80053bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80053be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80053c0:	d3f9      	bcc.n	80053b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80053c2:	4a0b      	ldr	r2, [pc, #44]	; (80053f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80053c4:	4c0b      	ldr	r4, [pc, #44]	; (80053f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80053c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80053c8:	e001      	b.n	80053ce <LoopFillZerobss>

080053ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80053ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80053cc:	3204      	adds	r2, #4

080053ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80053ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80053d0:	d3fb      	bcc.n	80053ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80053d2:	f7ff fe03 	bl	8004fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80053d6:	f00d f8dd 	bl	8012594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80053da:	f7fd fb89 	bl	8002af0 <main>
  bx  lr    
 80053de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80053e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80053e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80053e8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80053ec:	08017bb8 	.word	0x08017bb8
  ldr r2, =_sbss
 80053f0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80053f4:	20014b68 	.word	0x20014b68

080053f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80053f8:	e7fe      	b.n	80053f8 <ADC_IRQHandler>
	...

080053fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005400:	4b0e      	ldr	r3, [pc, #56]	; (800543c <HAL_Init+0x40>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a0d      	ldr	r2, [pc, #52]	; (800543c <HAL_Init+0x40>)
 8005406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800540a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800540c:	4b0b      	ldr	r3, [pc, #44]	; (800543c <HAL_Init+0x40>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a0a      	ldr	r2, [pc, #40]	; (800543c <HAL_Init+0x40>)
 8005412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <HAL_Init+0x40>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a07      	ldr	r2, [pc, #28]	; (800543c <HAL_Init+0x40>)
 800541e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005424:	2003      	movs	r0, #3
 8005426:	f000 fd0e 	bl	8005e46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800542a:	200f      	movs	r0, #15
 800542c:	f7ff fc24 	bl	8004c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005430:	f7ff fbf6 	bl	8004c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005434:	2300      	movs	r3, #0
}
 8005436:	4618      	mov	r0, r3
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40023c00 	.word	0x40023c00

08005440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <HAL_IncTick+0x20>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	4b06      	ldr	r3, [pc, #24]	; (8005464 <HAL_IncTick+0x24>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4413      	add	r3, r2
 8005450:	4a04      	ldr	r2, [pc, #16]	; (8005464 <HAL_IncTick+0x24>)
 8005452:	6013      	str	r3, [r2, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	20000008 	.word	0x20000008
 8005464:	2000184c 	.word	0x2000184c

08005468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0
  return uwTick;
 800546c:	4b03      	ldr	r3, [pc, #12]	; (800547c <HAL_GetTick+0x14>)
 800546e:	681b      	ldr	r3, [r3, #0]
}
 8005470:	4618      	mov	r0, r3
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	2000184c 	.word	0x2000184c

08005480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005488:	f7ff ffee 	bl	8005468 <HAL_GetTick>
 800548c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d005      	beq.n	80054a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800549a:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <HAL_Delay+0x44>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	461a      	mov	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80054a6:	bf00      	nop
 80054a8:	f7ff ffde 	bl	8005468 <HAL_GetTick>
 80054ac:	4602      	mov	r2, r0
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	1ad3      	subs	r3, r2, r3
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d8f7      	bhi.n	80054a8 <HAL_Delay+0x28>
  {
  }
}
 80054b8:	bf00      	nop
 80054ba:	bf00      	nop
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000008 	.word	0x20000008

080054c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054d0:	2300      	movs	r3, #0
 80054d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e033      	b.n	8005546 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d109      	bne.n	80054fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fc f88e 	bl	8001608 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d118      	bne.n	8005538 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800550e:	f023 0302 	bic.w	r3, r3, #2
 8005512:	f043 0202 	orr.w	r2, r3, #2
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa68 	bl	80059f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f023 0303 	bic.w	r3, r3, #3
 800552e:	f043 0201 	orr.w	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	641a      	str	r2, [r3, #64]	; 0x40
 8005536:	e001      	b.n	800553c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005544:	7bfb      	ldrb	r3, [r7, #15]
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_ADC_Start_DMA+0x1e>
 800556a:	2302      	movs	r3, #2
 800556c:	e0e9      	b.n	8005742 <HAL_ADC_Start_DMA+0x1f2>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 0301 	and.w	r3, r3, #1
 8005580:	2b01      	cmp	r3, #1
 8005582:	d018      	beq.n	80055b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005594:	4b6d      	ldr	r3, [pc, #436]	; (800574c <HAL_ADC_Start_DMA+0x1fc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a6d      	ldr	r2, [pc, #436]	; (8005750 <HAL_ADC_Start_DMA+0x200>)
 800559a:	fba2 2303 	umull	r2, r3, r2, r3
 800559e:	0c9a      	lsrs	r2, r3, #18
 80055a0:	4613      	mov	r3, r2
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	4413      	add	r3, r2
 80055a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80055a8:	e002      	b.n	80055b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	3b01      	subs	r3, #1
 80055ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f9      	bne.n	80055aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055c4:	d107      	bne.n	80055d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	f040 80a1 	bne.w	8005728 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005610:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005624:	d106      	bne.n	8005634 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562a:	f023 0206 	bic.w	r2, r3, #6
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	645a      	str	r2, [r3, #68]	; 0x44
 8005632:	e002      	b.n	800563a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2200      	movs	r2, #0
 8005638:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005642:	4b44      	ldr	r3, [pc, #272]	; (8005754 <HAL_ADC_Start_DMA+0x204>)
 8005644:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564a:	4a43      	ldr	r2, [pc, #268]	; (8005758 <HAL_ADC_Start_DMA+0x208>)
 800564c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	4a42      	ldr	r2, [pc, #264]	; (800575c <HAL_ADC_Start_DMA+0x20c>)
 8005654:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800565a:	4a41      	ldr	r2, [pc, #260]	; (8005760 <HAL_ADC_Start_DMA+0x210>)
 800565c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005666:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005676:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005686:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	334c      	adds	r3, #76	; 0x4c
 8005692:	4619      	mov	r1, r3
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f000 fcb8 	bl	800600c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f003 031f 	and.w	r3, r3, #31
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d12a      	bne.n	80056fe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a2d      	ldr	r2, [pc, #180]	; (8005764 <HAL_ADC_Start_DMA+0x214>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d015      	beq.n	80056de <HAL_ADC_Start_DMA+0x18e>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a2c      	ldr	r2, [pc, #176]	; (8005768 <HAL_ADC_Start_DMA+0x218>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d105      	bne.n	80056c8 <HAL_ADC_Start_DMA+0x178>
 80056bc:	4b25      	ldr	r3, [pc, #148]	; (8005754 <HAL_ADC_Start_DMA+0x204>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a27      	ldr	r2, [pc, #156]	; (800576c <HAL_ADC_Start_DMA+0x21c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d136      	bne.n	8005740 <HAL_ADC_Start_DMA+0x1f0>
 80056d2:	4b20      	ldr	r3, [pc, #128]	; (8005754 <HAL_ADC_Start_DMA+0x204>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 0310 	and.w	r3, r3, #16
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d130      	bne.n	8005740 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d129      	bne.n	8005740 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056fa:	609a      	str	r2, [r3, #8]
 80056fc:	e020      	b.n	8005740 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a18      	ldr	r2, [pc, #96]	; (8005764 <HAL_ADC_Start_DMA+0x214>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d11b      	bne.n	8005740 <HAL_ADC_Start_DMA+0x1f0>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d114      	bne.n	8005740 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005724:	609a      	str	r2, [r3, #8]
 8005726:	e00b      	b.n	8005740 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572c:	f043 0210 	orr.w	r2, r3, #16
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005738:	f043 0201 	orr.w	r2, r3, #1
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000000 	.word	0x20000000
 8005750:	431bde83 	.word	0x431bde83
 8005754:	40012300 	.word	0x40012300
 8005758:	08005be9 	.word	0x08005be9
 800575c:	08005ca3 	.word	0x08005ca3
 8005760:	08005cbf 	.word	0x08005cbf
 8005764:	40012000 	.word	0x40012000
 8005768:	40012100 	.word	0x40012100
 800576c:	40012200 	.word	0x40012200

08005770 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d101      	bne.n	80057c8 <HAL_ADC_ConfigChannel+0x1c>
 80057c4:	2302      	movs	r3, #2
 80057c6:	e105      	b.n	80059d4 <HAL_ADC_ConfigChannel+0x228>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b09      	cmp	r3, #9
 80057d6:	d925      	bls.n	8005824 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68d9      	ldr	r1, [r3, #12]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	4613      	mov	r3, r2
 80057e8:	005b      	lsls	r3, r3, #1
 80057ea:	4413      	add	r3, r2
 80057ec:	3b1e      	subs	r3, #30
 80057ee:	2207      	movs	r2, #7
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	43da      	mvns	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	400a      	ands	r2, r1
 80057fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68d9      	ldr	r1, [r3, #12]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	b29b      	uxth	r3, r3
 800580e:	4618      	mov	r0, r3
 8005810:	4603      	mov	r3, r0
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	4403      	add	r3, r0
 8005816:	3b1e      	subs	r3, #30
 8005818:	409a      	lsls	r2, r3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	60da      	str	r2, [r3, #12]
 8005822:	e022      	b.n	800586a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6919      	ldr	r1, [r3, #16]
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	461a      	mov	r2, r3
 8005832:	4613      	mov	r3, r2
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	4413      	add	r3, r2
 8005838:	2207      	movs	r2, #7
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43da      	mvns	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	400a      	ands	r2, r1
 8005846:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6919      	ldr	r1, [r3, #16]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	b29b      	uxth	r3, r3
 8005858:	4618      	mov	r0, r3
 800585a:	4603      	mov	r3, r0
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	4403      	add	r3, r0
 8005860:	409a      	lsls	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2b06      	cmp	r3, #6
 8005870:	d824      	bhi.n	80058bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4413      	add	r3, r2
 8005882:	3b05      	subs	r3, #5
 8005884:	221f      	movs	r2, #31
 8005886:	fa02 f303 	lsl.w	r3, r2, r3
 800588a:	43da      	mvns	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	400a      	ands	r2, r1
 8005892:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	4618      	mov	r0, r3
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	3b05      	subs	r3, #5
 80058ae:	fa00 f203 	lsl.w	r2, r0, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	635a      	str	r2, [r3, #52]	; 0x34
 80058ba:	e04c      	b.n	8005956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	2b0c      	cmp	r3, #12
 80058c2:	d824      	bhi.n	800590e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	4613      	mov	r3, r2
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	3b23      	subs	r3, #35	; 0x23
 80058d6:	221f      	movs	r2, #31
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	43da      	mvns	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	400a      	ands	r2, r1
 80058e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	4618      	mov	r0, r3
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	3b23      	subs	r3, #35	; 0x23
 8005900:	fa00 f203 	lsl.w	r2, r0, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
 800590c:	e023      	b.n	8005956 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	3b41      	subs	r3, #65	; 0x41
 8005920:	221f      	movs	r2, #31
 8005922:	fa02 f303 	lsl.w	r3, r2, r3
 8005926:	43da      	mvns	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	400a      	ands	r2, r1
 800592e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	b29b      	uxth	r3, r3
 800593c:	4618      	mov	r0, r3
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	4613      	mov	r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	3b41      	subs	r3, #65	; 0x41
 800594a:	fa00 f203 	lsl.w	r2, r0, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005956:	4b22      	ldr	r3, [pc, #136]	; (80059e0 <HAL_ADC_ConfigChannel+0x234>)
 8005958:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a21      	ldr	r2, [pc, #132]	; (80059e4 <HAL_ADC_ConfigChannel+0x238>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d109      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x1cc>
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b12      	cmp	r3, #18
 800596a:	d105      	bne.n	8005978 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a19      	ldr	r2, [pc, #100]	; (80059e4 <HAL_ADC_ConfigChannel+0x238>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d123      	bne.n	80059ca <HAL_ADC_ConfigChannel+0x21e>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2b10      	cmp	r3, #16
 8005988:	d003      	beq.n	8005992 <HAL_ADC_ConfigChannel+0x1e6>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b11      	cmp	r3, #17
 8005990:	d11b      	bne.n	80059ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b10      	cmp	r3, #16
 80059a4:	d111      	bne.n	80059ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80059a6:	4b10      	ldr	r3, [pc, #64]	; (80059e8 <HAL_ADC_ConfigChannel+0x23c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a10      	ldr	r2, [pc, #64]	; (80059ec <HAL_ADC_ConfigChannel+0x240>)
 80059ac:	fba2 2303 	umull	r2, r3, r2, r3
 80059b0:	0c9a      	lsrs	r2, r3, #18
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80059bc:	e002      	b.n	80059c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f9      	bne.n	80059be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	40012300 	.word	0x40012300
 80059e4:	40012000 	.word	0x40012000
 80059e8:	20000000 	.word	0x20000000
 80059ec:	431bde83 	.word	0x431bde83

080059f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059f8:	4b79      	ldr	r3, [pc, #484]	; (8005be0 <ADC_Init+0x1f0>)
 80059fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	685a      	ldr	r2, [r3, #4]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685a      	ldr	r2, [r3, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6859      	ldr	r1, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	021a      	lsls	r2, r3, #8
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005a48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6859      	ldr	r1, [r3, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6899      	ldr	r1, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a82:	4a58      	ldr	r2, [pc, #352]	; (8005be4 <ADC_Init+0x1f4>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d022      	beq.n	8005ace <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	6899      	ldr	r1, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ab8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6899      	ldr	r1, [r3, #8]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	609a      	str	r2, [r3, #8]
 8005acc:	e00f      	b.n	8005aee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005adc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005aec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0202 	bic.w	r2, r2, #2
 8005afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6899      	ldr	r1, [r3, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	7e1b      	ldrb	r3, [r3, #24]
 8005b08:	005a      	lsls	r2, r3, #1
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01b      	beq.n	8005b54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685a      	ldr	r2, [r3, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005b3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6859      	ldr	r1, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	3b01      	subs	r3, #1
 8005b48:	035a      	lsls	r2, r3, #13
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	430a      	orrs	r2, r1
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	e007      	b.n	8005b64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685a      	ldr	r2, [r3, #4]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	051a      	lsls	r2, r3, #20
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6899      	ldr	r1, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ba6:	025a      	lsls	r2, r3, #9
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	430a      	orrs	r2, r1
 8005bae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	689a      	ldr	r2, [r3, #8]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6899      	ldr	r1, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	029a      	lsls	r2, r3, #10
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	430a      	orrs	r2, r1
 8005bd2:	609a      	str	r2, [r3, #8]
}
 8005bd4:	bf00      	nop
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	40012300 	.word	0x40012300
 8005be4:	0f000001 	.word	0x0f000001

08005be8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d13c      	bne.n	8005c7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d12b      	bne.n	8005c74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d127      	bne.n	8005c74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d006      	beq.n	8005c40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d119      	bne.n	8005c74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0220 	bic.w	r2, r2, #32
 8005c4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	f043 0201 	orr.w	r2, r3, #1
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7ff fd7b 	bl	8005770 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c7a:	e00e      	b.n	8005c9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	f003 0310 	and.w	r3, r3, #16
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff fd85 	bl	8005798 <HAL_ADC_ErrorCallback>
}
 8005c8e:	e004      	b.n	8005c9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	4798      	blx	r3
}
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f7ff fd67 	bl	8005784 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2240      	movs	r2, #64	; 0x40
 8005cd0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd6:	f043 0204 	orr.w	r2, r3, #4
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7ff fd5a 	bl	8005798 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ce4:	bf00      	nop
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cfc:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <__NVIC_SetPriorityGrouping+0x44>)
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d08:	4013      	ands	r3, r2
 8005d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d1e:	4a04      	ldr	r2, [pc, #16]	; (8005d30 <__NVIC_SetPriorityGrouping+0x44>)
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	60d3      	str	r3, [r2, #12]
}
 8005d24:	bf00      	nop
 8005d26:	3714      	adds	r7, #20
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr
 8005d30:	e000ed00 	.word	0xe000ed00

08005d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d38:	4b04      	ldr	r3, [pc, #16]	; (8005d4c <__NVIC_GetPriorityGrouping+0x18>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	0a1b      	lsrs	r3, r3, #8
 8005d3e:	f003 0307 	and.w	r3, r3, #7
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	e000ed00 	.word	0xe000ed00

08005d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	4603      	mov	r3, r0
 8005d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	db0b      	blt.n	8005d7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d62:	79fb      	ldrb	r3, [r7, #7]
 8005d64:	f003 021f 	and.w	r2, r3, #31
 8005d68:	4907      	ldr	r1, [pc, #28]	; (8005d88 <__NVIC_EnableIRQ+0x38>)
 8005d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6e:	095b      	lsrs	r3, r3, #5
 8005d70:	2001      	movs	r0, #1
 8005d72:	fa00 f202 	lsl.w	r2, r0, r2
 8005d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	e000e100 	.word	0xe000e100

08005d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	4603      	mov	r3, r0
 8005d94:	6039      	str	r1, [r7, #0]
 8005d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	db0a      	blt.n	8005db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	490c      	ldr	r1, [pc, #48]	; (8005dd8 <__NVIC_SetPriority+0x4c>)
 8005da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005daa:	0112      	lsls	r2, r2, #4
 8005dac:	b2d2      	uxtb	r2, r2
 8005dae:	440b      	add	r3, r1
 8005db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005db4:	e00a      	b.n	8005dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	4908      	ldr	r1, [pc, #32]	; (8005ddc <__NVIC_SetPriority+0x50>)
 8005dbc:	79fb      	ldrb	r3, [r7, #7]
 8005dbe:	f003 030f 	and.w	r3, r3, #15
 8005dc2:	3b04      	subs	r3, #4
 8005dc4:	0112      	lsls	r2, r2, #4
 8005dc6:	b2d2      	uxtb	r2, r2
 8005dc8:	440b      	add	r3, r1
 8005dca:	761a      	strb	r2, [r3, #24]
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr
 8005dd8:	e000e100 	.word	0xe000e100
 8005ddc:	e000ed00 	.word	0xe000ed00

08005de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b089      	sub	sp, #36	; 0x24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	60b9      	str	r1, [r7, #8]
 8005dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f1c3 0307 	rsb	r3, r3, #7
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	bf28      	it	cs
 8005dfe:	2304      	movcs	r3, #4
 8005e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	3304      	adds	r3, #4
 8005e06:	2b06      	cmp	r3, #6
 8005e08:	d902      	bls.n	8005e10 <NVIC_EncodePriority+0x30>
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	3b03      	subs	r3, #3
 8005e0e:	e000      	b.n	8005e12 <NVIC_EncodePriority+0x32>
 8005e10:	2300      	movs	r3, #0
 8005e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e14:	f04f 32ff 	mov.w	r2, #4294967295
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1e:	43da      	mvns	r2, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	401a      	ands	r2, r3
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e28:	f04f 31ff 	mov.w	r1, #4294967295
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e32:	43d9      	mvns	r1, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e38:	4313      	orrs	r3, r2
         );
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3724      	adds	r7, #36	; 0x24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7ff ff4c 	bl	8005cec <__NVIC_SetPriorityGrouping>
}
 8005e54:	bf00      	nop
 8005e56:	3708      	adds	r7, #8
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	bd80      	pop	{r7, pc}

08005e5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005e6e:	f7ff ff61 	bl	8005d34 <__NVIC_GetPriorityGrouping>
 8005e72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	68b9      	ldr	r1, [r7, #8]
 8005e78:	6978      	ldr	r0, [r7, #20]
 8005e7a:	f7ff ffb1 	bl	8005de0 <NVIC_EncodePriority>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e84:	4611      	mov	r1, r2
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff ff80 	bl	8005d8c <__NVIC_SetPriority>
}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7ff ff54 	bl	8005d50 <__NVIC_EnableIRQ>
}
 8005ea8:	bf00      	nop
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005ebc:	f7ff fad4 	bl	8005468 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d101      	bne.n	8005ecc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e099      	b.n	8006000 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2202      	movs	r2, #2
 8005ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 0201 	bic.w	r2, r2, #1
 8005eea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005eec:	e00f      	b.n	8005f0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eee:	f7ff fabb 	bl	8005468 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	2b05      	cmp	r3, #5
 8005efa:	d908      	bls.n	8005f0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2203      	movs	r2, #3
 8005f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e078      	b.n	8006000 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e8      	bne.n	8005eee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f24:	697a      	ldr	r2, [r7, #20]
 8005f26:	4b38      	ldr	r3, [pc, #224]	; (8006008 <HAL_DMA_Init+0x158>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005f5a:	697a      	ldr	r2, [r7, #20]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	d107      	bne.n	8005f78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f70:	4313      	orrs	r3, r2
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	695b      	ldr	r3, [r3, #20]
 8005f86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f023 0307 	bic.w	r3, r3, #7
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	d117      	bne.n	8005fd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fb0f 	bl	80065d8 <DMA_CheckFifoParam>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d008      	beq.n	8005fd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2240      	movs	r2, #64	; 0x40
 8005fc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e016      	b.n	8006000 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fac6 	bl	800656c <DMA_CalcBaseAndBitshift>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe8:	223f      	movs	r2, #63	; 0x3f
 8005fea:	409a      	lsls	r2, r3
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	f010803f 	.word	0xf010803f

0800600c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
 8006018:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006022:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_DMA_Start_IT+0x26>
 800602e:	2302      	movs	r3, #2
 8006030:	e040      	b.n	80060b4 <HAL_DMA_Start_IT+0xa8>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b01      	cmp	r3, #1
 8006044:	d12f      	bne.n	80060a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2202      	movs	r2, #2
 800604a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fa58 	bl	8006510 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006064:	223f      	movs	r2, #63	; 0x3f
 8006066:	409a      	lsls	r2, r3
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0216 	orr.w	r2, r2, #22
 800607a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d007      	beq.n	8006094 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0208 	orr.w	r2, r2, #8
 8006092:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	e005      	b.n	80060b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80060ae:	2302      	movs	r3, #2
 80060b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3718      	adds	r7, #24
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}

080060bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80060ca:	f7ff f9cd 	bl	8005468 <HAL_GetTick>
 80060ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b02      	cmp	r3, #2
 80060da:	d008      	beq.n	80060ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2280      	movs	r2, #128	; 0x80
 80060e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e052      	b.n	8006194 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0216 	bic.w	r2, r2, #22
 80060fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800610c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d103      	bne.n	800611e <HAL_DMA_Abort+0x62>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611a:	2b00      	cmp	r3, #0
 800611c:	d007      	beq.n	800612e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0208 	bic.w	r2, r2, #8
 800612c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0201 	bic.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800613e:	e013      	b.n	8006168 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006140:	f7ff f992 	bl	8005468 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b05      	cmp	r3, #5
 800614c:	d90c      	bls.n	8006168 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2220      	movs	r2, #32
 8006152:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2203      	movs	r2, #3
 8006158:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e015      	b.n	8006194 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e4      	bne.n	8006140 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617a:	223f      	movs	r2, #63	; 0x3f
 800617c:	409a      	lsls	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d004      	beq.n	80061ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2280      	movs	r2, #128	; 0x80
 80061b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e00c      	b.n	80061d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2205      	movs	r2, #5
 80061be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80061ec:	4b8e      	ldr	r3, [pc, #568]	; (8006428 <HAL_DMA_IRQHandler+0x248>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a8e      	ldr	r2, [pc, #568]	; (800642c <HAL_DMA_IRQHandler+0x24c>)
 80061f2:	fba2 2303 	umull	r2, r3, r2, r3
 80061f6:	0a9b      	lsrs	r3, r3, #10
 80061f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620a:	2208      	movs	r2, #8
 800620c:	409a      	lsls	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4013      	ands	r3, r2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d01a      	beq.n	800624c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d013      	beq.n	800624c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f022 0204 	bic.w	r2, r2, #4
 8006232:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006238:	2208      	movs	r2, #8
 800623a:	409a      	lsls	r2, r3
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006244:	f043 0201 	orr.w	r2, r3, #1
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006250:	2201      	movs	r2, #1
 8006252:	409a      	lsls	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4013      	ands	r3, r2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d012      	beq.n	8006282 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00b      	beq.n	8006282 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626e:	2201      	movs	r2, #1
 8006270:	409a      	lsls	r2, r3
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	f043 0202 	orr.w	r2, r3, #2
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006286:	2204      	movs	r2, #4
 8006288:	409a      	lsls	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4013      	ands	r3, r2
 800628e:	2b00      	cmp	r3, #0
 8006290:	d012      	beq.n	80062b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0302 	and.w	r3, r3, #2
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00b      	beq.n	80062b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a4:	2204      	movs	r2, #4
 80062a6:	409a      	lsls	r2, r3
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b0:	f043 0204 	orr.w	r2, r3, #4
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062bc:	2210      	movs	r2, #16
 80062be:	409a      	lsls	r2, r3
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4013      	ands	r3, r2
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d043      	beq.n	8006350 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 0308 	and.w	r3, r3, #8
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d03c      	beq.n	8006350 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062da:	2210      	movs	r2, #16
 80062dc:	409a      	lsls	r2, r3
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d018      	beq.n	8006322 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d108      	bne.n	8006310 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006302:	2b00      	cmp	r3, #0
 8006304:	d024      	beq.n	8006350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	4798      	blx	r3
 800630e:	e01f      	b.n	8006350 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006314:	2b00      	cmp	r3, #0
 8006316:	d01b      	beq.n	8006350 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	4798      	blx	r3
 8006320:	e016      	b.n	8006350 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632c:	2b00      	cmp	r3, #0
 800632e:	d107      	bne.n	8006340 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f022 0208 	bic.w	r2, r2, #8
 800633e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006354:	2220      	movs	r2, #32
 8006356:	409a      	lsls	r2, r3
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4013      	ands	r3, r2
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 808f 	beq.w	8006480 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0310 	and.w	r3, r3, #16
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8087 	beq.w	8006480 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006376:	2220      	movs	r2, #32
 8006378:	409a      	lsls	r2, r3
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b05      	cmp	r3, #5
 8006388:	d136      	bne.n	80063f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0216 	bic.w	r2, r2, #22
 8006398:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695a      	ldr	r2, [r3, #20]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d103      	bne.n	80063ba <HAL_DMA_IRQHandler+0x1da>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d007      	beq.n	80063ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681a      	ldr	r2, [r3, #0]
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f022 0208 	bic.w	r2, r2, #8
 80063c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ce:	223f      	movs	r2, #63	; 0x3f
 80063d0:	409a      	lsls	r2, r3
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d07e      	beq.n	80064ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
        }
        return;
 80063f6:	e079      	b.n	80064ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006402:	2b00      	cmp	r3, #0
 8006404:	d01d      	beq.n	8006442 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10d      	bne.n	8006430 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006418:	2b00      	cmp	r3, #0
 800641a:	d031      	beq.n	8006480 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
 8006424:	e02c      	b.n	8006480 <HAL_DMA_IRQHandler+0x2a0>
 8006426:	bf00      	nop
 8006428:	20000000 	.word	0x20000000
 800642c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d023      	beq.n	8006480 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	4798      	blx	r3
 8006440:	e01e      	b.n	8006480 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10f      	bne.n	8006470 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0210 	bic.w	r2, r2, #16
 800645e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006484:	2b00      	cmp	r3, #0
 8006486:	d032      	beq.n	80064ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800648c:	f003 0301 	and.w	r3, r3, #1
 8006490:	2b00      	cmp	r3, #0
 8006492:	d022      	beq.n	80064da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2205      	movs	r2, #5
 8006498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	3301      	adds	r3, #1
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d307      	bcc.n	80064c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f2      	bne.n	80064ac <HAL_DMA_IRQHandler+0x2cc>
 80064c6:	e000      	b.n	80064ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80064c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
 80064ea:	e000      	b.n	80064ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80064ec:	bf00      	nop
    }
  }
}
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006502:	b2db      	uxtb	r3, r3
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800652c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b40      	cmp	r3, #64	; 0x40
 800653c:	d108      	bne.n	8006550 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800654e:	e007      	b.n	8006560 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68ba      	ldr	r2, [r7, #8]
 8006556:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	60da      	str	r2, [r3, #12]
}
 8006560:	bf00      	nop
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	b2db      	uxtb	r3, r3
 800657a:	3b10      	subs	r3, #16
 800657c:	4a14      	ldr	r2, [pc, #80]	; (80065d0 <DMA_CalcBaseAndBitshift+0x64>)
 800657e:	fba2 2303 	umull	r2, r3, r2, r3
 8006582:	091b      	lsrs	r3, r3, #4
 8006584:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006586:	4a13      	ldr	r2, [pc, #76]	; (80065d4 <DMA_CalcBaseAndBitshift+0x68>)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4413      	add	r3, r2
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b03      	cmp	r3, #3
 8006598:	d909      	bls.n	80065ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	1d1a      	adds	r2, r3, #4
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	659a      	str	r2, [r3, #88]	; 0x58
 80065ac:	e007      	b.n	80065be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80065b6:	f023 0303 	bic.w	r3, r3, #3
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	aaaaaaab 	.word	0xaaaaaaab
 80065d4:	080170c0 	.word	0x080170c0

080065d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d11f      	bne.n	8006632 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	2b03      	cmp	r3, #3
 80065f6:	d856      	bhi.n	80066a6 <DMA_CheckFifoParam+0xce>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <DMA_CheckFifoParam+0x28>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006611 	.word	0x08006611
 8006604:	08006623 	.word	0x08006623
 8006608:	08006611 	.word	0x08006611
 800660c:	080066a7 	.word	0x080066a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d046      	beq.n	80066aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006620:	e043      	b.n	80066aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800662a:	d140      	bne.n	80066ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006630:	e03d      	b.n	80066ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800663a:	d121      	bne.n	8006680 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b03      	cmp	r3, #3
 8006640:	d837      	bhi.n	80066b2 <DMA_CheckFifoParam+0xda>
 8006642:	a201      	add	r2, pc, #4	; (adr r2, 8006648 <DMA_CheckFifoParam+0x70>)
 8006644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006648:	08006659 	.word	0x08006659
 800664c:	0800665f 	.word	0x0800665f
 8006650:	08006659 	.word	0x08006659
 8006654:	08006671 	.word	0x08006671
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
      break;
 800665c:	e030      	b.n	80066c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006662:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d025      	beq.n	80066b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800666e:	e022      	b.n	80066b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006674:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006678:	d11f      	bne.n	80066ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800667e:	e01c      	b.n	80066ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	2b02      	cmp	r3, #2
 8006684:	d903      	bls.n	800668e <DMA_CheckFifoParam+0xb6>
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	2b03      	cmp	r3, #3
 800668a:	d003      	beq.n	8006694 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800668c:	e018      	b.n	80066c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	73fb      	strb	r3, [r7, #15]
      break;
 8006692:	e015      	b.n	80066c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00e      	beq.n	80066be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
      break;
 80066a4:	e00b      	b.n	80066be <DMA_CheckFifoParam+0xe6>
      break;
 80066a6:	bf00      	nop
 80066a8:	e00a      	b.n	80066c0 <DMA_CheckFifoParam+0xe8>
      break;
 80066aa:	bf00      	nop
 80066ac:	e008      	b.n	80066c0 <DMA_CheckFifoParam+0xe8>
      break;
 80066ae:	bf00      	nop
 80066b0:	e006      	b.n	80066c0 <DMA_CheckFifoParam+0xe8>
      break;
 80066b2:	bf00      	nop
 80066b4:	e004      	b.n	80066c0 <DMA_CheckFifoParam+0xe8>
      break;
 80066b6:	bf00      	nop
 80066b8:	e002      	b.n	80066c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80066ba:	bf00      	nop
 80066bc:	e000      	b.n	80066c0 <DMA_CheckFifoParam+0xe8>
      break;
 80066be:	bf00      	nop
    }
  } 
  
  return status; 
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop

080066d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b089      	sub	sp, #36	; 0x24
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80066da:	2300      	movs	r3, #0
 80066dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80066de:	2300      	movs	r3, #0
 80066e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
 80066ea:	e16b      	b.n	80069c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80066ec:	2201      	movs	r2, #1
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	fa02 f303 	lsl.w	r3, r2, r3
 80066f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	4013      	ands	r3, r2
 80066fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	429a      	cmp	r2, r3
 8006706:	f040 815a 	bne.w	80069be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	f003 0303 	and.w	r3, r3, #3
 8006712:	2b01      	cmp	r3, #1
 8006714:	d005      	beq.n	8006722 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800671e:	2b02      	cmp	r3, #2
 8006720:	d130      	bne.n	8006784 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	2203      	movs	r2, #3
 800672e:	fa02 f303 	lsl.w	r3, r2, r3
 8006732:	43db      	mvns	r3, r3
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	4013      	ands	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	69ba      	ldr	r2, [r7, #24]
 8006748:	4313      	orrs	r3, r2
 800674a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	69ba      	ldr	r2, [r7, #24]
 8006750:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006758:	2201      	movs	r2, #1
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	fa02 f303 	lsl.w	r3, r2, r3
 8006760:	43db      	mvns	r3, r3
 8006762:	69ba      	ldr	r2, [r7, #24]
 8006764:	4013      	ands	r3, r2
 8006766:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	091b      	lsrs	r3, r3, #4
 800676e:	f003 0201 	and.w	r2, r3, #1
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	fa02 f303 	lsl.w	r3, r2, r3
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	4313      	orrs	r3, r2
 800677c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	69ba      	ldr	r2, [r7, #24]
 8006782:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	2b03      	cmp	r3, #3
 800678e:	d017      	beq.n	80067c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	2203      	movs	r2, #3
 800679c:	fa02 f303 	lsl.w	r3, r2, r3
 80067a0:	43db      	mvns	r3, r3
 80067a2:	69ba      	ldr	r2, [r7, #24]
 80067a4:	4013      	ands	r3, r2
 80067a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	fa02 f303 	lsl.w	r3, r2, r3
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	2b02      	cmp	r3, #2
 80067ca:	d123      	bne.n	8006814 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	08da      	lsrs	r2, r3, #3
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3208      	adds	r2, #8
 80067d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	f003 0307 	and.w	r3, r3, #7
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	220f      	movs	r2, #15
 80067e4:	fa02 f303 	lsl.w	r3, r2, r3
 80067e8:	43db      	mvns	r3, r3
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	4013      	ands	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	691a      	ldr	r2, [r3, #16]
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	4313      	orrs	r3, r2
 8006804:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	08da      	lsrs	r2, r3, #3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3208      	adds	r2, #8
 800680e:	69b9      	ldr	r1, [r7, #24]
 8006810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800681a:	69fb      	ldr	r3, [r7, #28]
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	2203      	movs	r2, #3
 8006820:	fa02 f303 	lsl.w	r3, r2, r3
 8006824:	43db      	mvns	r3, r3
 8006826:	69ba      	ldr	r2, [r7, #24]
 8006828:	4013      	ands	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	f003 0203 	and.w	r2, r3, #3
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	fa02 f303 	lsl.w	r3, r2, r3
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	4313      	orrs	r3, r2
 8006840:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	69ba      	ldr	r2, [r7, #24]
 8006846:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006850:	2b00      	cmp	r3, #0
 8006852:	f000 80b4 	beq.w	80069be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	4b60      	ldr	r3, [pc, #384]	; (80069dc <HAL_GPIO_Init+0x30c>)
 800685c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800685e:	4a5f      	ldr	r2, [pc, #380]	; (80069dc <HAL_GPIO_Init+0x30c>)
 8006860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006864:	6453      	str	r3, [r2, #68]	; 0x44
 8006866:	4b5d      	ldr	r3, [pc, #372]	; (80069dc <HAL_GPIO_Init+0x30c>)
 8006868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800686a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006872:	4a5b      	ldr	r2, [pc, #364]	; (80069e0 <HAL_GPIO_Init+0x310>)
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	089b      	lsrs	r3, r3, #2
 8006878:	3302      	adds	r3, #2
 800687a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800687e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	f003 0303 	and.w	r3, r3, #3
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	220f      	movs	r2, #15
 800688a:	fa02 f303 	lsl.w	r3, r2, r3
 800688e:	43db      	mvns	r3, r3
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	4013      	ands	r3, r2
 8006894:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a52      	ldr	r2, [pc, #328]	; (80069e4 <HAL_GPIO_Init+0x314>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d02b      	beq.n	80068f6 <HAL_GPIO_Init+0x226>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a51      	ldr	r2, [pc, #324]	; (80069e8 <HAL_GPIO_Init+0x318>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d025      	beq.n	80068f2 <HAL_GPIO_Init+0x222>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a50      	ldr	r2, [pc, #320]	; (80069ec <HAL_GPIO_Init+0x31c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d01f      	beq.n	80068ee <HAL_GPIO_Init+0x21e>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a4f      	ldr	r2, [pc, #316]	; (80069f0 <HAL_GPIO_Init+0x320>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d019      	beq.n	80068ea <HAL_GPIO_Init+0x21a>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a4e      	ldr	r2, [pc, #312]	; (80069f4 <HAL_GPIO_Init+0x324>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d013      	beq.n	80068e6 <HAL_GPIO_Init+0x216>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a4d      	ldr	r2, [pc, #308]	; (80069f8 <HAL_GPIO_Init+0x328>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00d      	beq.n	80068e2 <HAL_GPIO_Init+0x212>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a4c      	ldr	r2, [pc, #304]	; (80069fc <HAL_GPIO_Init+0x32c>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d007      	beq.n	80068de <HAL_GPIO_Init+0x20e>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a4b      	ldr	r2, [pc, #300]	; (8006a00 <HAL_GPIO_Init+0x330>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d101      	bne.n	80068da <HAL_GPIO_Init+0x20a>
 80068d6:	2307      	movs	r3, #7
 80068d8:	e00e      	b.n	80068f8 <HAL_GPIO_Init+0x228>
 80068da:	2308      	movs	r3, #8
 80068dc:	e00c      	b.n	80068f8 <HAL_GPIO_Init+0x228>
 80068de:	2306      	movs	r3, #6
 80068e0:	e00a      	b.n	80068f8 <HAL_GPIO_Init+0x228>
 80068e2:	2305      	movs	r3, #5
 80068e4:	e008      	b.n	80068f8 <HAL_GPIO_Init+0x228>
 80068e6:	2304      	movs	r3, #4
 80068e8:	e006      	b.n	80068f8 <HAL_GPIO_Init+0x228>
 80068ea:	2303      	movs	r3, #3
 80068ec:	e004      	b.n	80068f8 <HAL_GPIO_Init+0x228>
 80068ee:	2302      	movs	r3, #2
 80068f0:	e002      	b.n	80068f8 <HAL_GPIO_Init+0x228>
 80068f2:	2301      	movs	r3, #1
 80068f4:	e000      	b.n	80068f8 <HAL_GPIO_Init+0x228>
 80068f6:	2300      	movs	r3, #0
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	f002 0203 	and.w	r2, r2, #3
 80068fe:	0092      	lsls	r2, r2, #2
 8006900:	4093      	lsls	r3, r2
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	4313      	orrs	r3, r2
 8006906:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006908:	4935      	ldr	r1, [pc, #212]	; (80069e0 <HAL_GPIO_Init+0x310>)
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	089b      	lsrs	r3, r3, #2
 800690e:	3302      	adds	r3, #2
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006916:	4b3b      	ldr	r3, [pc, #236]	; (8006a04 <HAL_GPIO_Init+0x334>)
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	43db      	mvns	r3, r3
 8006920:	69ba      	ldr	r2, [r7, #24]
 8006922:	4013      	ands	r3, r2
 8006924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d003      	beq.n	800693a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800693a:	4a32      	ldr	r2, [pc, #200]	; (8006a04 <HAL_GPIO_Init+0x334>)
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006940:	4b30      	ldr	r3, [pc, #192]	; (8006a04 <HAL_GPIO_Init+0x334>)
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	43db      	mvns	r3, r3
 800694a:	69ba      	ldr	r2, [r7, #24]
 800694c:	4013      	ands	r3, r2
 800694e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006964:	4a27      	ldr	r2, [pc, #156]	; (8006a04 <HAL_GPIO_Init+0x334>)
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800696a:	4b26      	ldr	r3, [pc, #152]	; (8006a04 <HAL_GPIO_Init+0x334>)
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	43db      	mvns	r3, r3
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	4013      	ands	r3, r2
 8006978:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006986:	69ba      	ldr	r2, [r7, #24]
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800698e:	4a1d      	ldr	r2, [pc, #116]	; (8006a04 <HAL_GPIO_Init+0x334>)
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006994:	4b1b      	ldr	r3, [pc, #108]	; (8006a04 <HAL_GPIO_Init+0x334>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	43db      	mvns	r3, r3
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	4013      	ands	r3, r2
 80069a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80069b8:	4a12      	ldr	r2, [pc, #72]	; (8006a04 <HAL_GPIO_Init+0x334>)
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	3301      	adds	r3, #1
 80069c2:	61fb      	str	r3, [r7, #28]
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	2b0f      	cmp	r3, #15
 80069c8:	f67f ae90 	bls.w	80066ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80069cc:	bf00      	nop
 80069ce:	bf00      	nop
 80069d0:	3724      	adds	r7, #36	; 0x24
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40023800 	.word	0x40023800
 80069e0:	40013800 	.word	0x40013800
 80069e4:	40020000 	.word	0x40020000
 80069e8:	40020400 	.word	0x40020400
 80069ec:	40020800 	.word	0x40020800
 80069f0:	40020c00 	.word	0x40020c00
 80069f4:	40021000 	.word	0x40021000
 80069f8:	40021400 	.word	0x40021400
 80069fc:	40021800 	.word	0x40021800
 8006a00:	40021c00 	.word	0x40021c00
 8006a04:	40013c00 	.word	0x40013c00

08006a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	807b      	strh	r3, [r7, #2]
 8006a14:	4613      	mov	r3, r2
 8006a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006a18:	787b      	ldrb	r3, [r7, #1]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d003      	beq.n	8006a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006a1e:	887a      	ldrh	r2, [r7, #2]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006a24:	e003      	b.n	8006a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006a26:	887b      	ldrh	r3, [r7, #2]
 8006a28:	041a      	lsls	r2, r3, #16
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	619a      	str	r2, [r3, #24]
}
 8006a2e:	bf00      	nop
 8006a30:	370c      	adds	r7, #12
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	460b      	mov	r3, r1
 8006a44:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006a4c:	887a      	ldrh	r2, [r7, #2]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4013      	ands	r3, r2
 8006a52:	041a      	lsls	r2, r3, #16
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	43d9      	mvns	r1, r3
 8006a58:	887b      	ldrh	r3, [r7, #2]
 8006a5a:	400b      	ands	r3, r1
 8006a5c:	431a      	orrs	r2, r3
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	619a      	str	r2, [r3, #24]
}
 8006a62:	bf00      	nop
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
	...

08006a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e12b      	b.n	8006cda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d106      	bne.n	8006a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f7fb ff7a 	bl	8002990 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2224      	movs	r2, #36	; 0x24
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f022 0201 	bic.w	r2, r2, #1
 8006ab2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681a      	ldr	r2, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ac2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ad2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006ad4:	f003 fdee 	bl	800a6b4 <HAL_RCC_GetPCLK1Freq>
 8006ad8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	4a81      	ldr	r2, [pc, #516]	; (8006ce4 <HAL_I2C_Init+0x274>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d807      	bhi.n	8006af4 <HAL_I2C_Init+0x84>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	4a80      	ldr	r2, [pc, #512]	; (8006ce8 <HAL_I2C_Init+0x278>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	bf94      	ite	ls
 8006aec:	2301      	movls	r3, #1
 8006aee:	2300      	movhi	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	e006      	b.n	8006b02 <HAL_I2C_Init+0x92>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4a7d      	ldr	r2, [pc, #500]	; (8006cec <HAL_I2C_Init+0x27c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	bf94      	ite	ls
 8006afc:	2301      	movls	r3, #1
 8006afe:	2300      	movhi	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e0e7      	b.n	8006cda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	4a78      	ldr	r2, [pc, #480]	; (8006cf0 <HAL_I2C_Init+0x280>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	0c9b      	lsrs	r3, r3, #18
 8006b14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	4a6a      	ldr	r2, [pc, #424]	; (8006ce4 <HAL_I2C_Init+0x274>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d802      	bhi.n	8006b44 <HAL_I2C_Init+0xd4>
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	3301      	adds	r3, #1
 8006b42:	e009      	b.n	8006b58 <HAL_I2C_Init+0xe8>
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006b4a:	fb02 f303 	mul.w	r3, r2, r3
 8006b4e:	4a69      	ldr	r2, [pc, #420]	; (8006cf4 <HAL_I2C_Init+0x284>)
 8006b50:	fba2 2303 	umull	r2, r3, r2, r3
 8006b54:	099b      	lsrs	r3, r3, #6
 8006b56:	3301      	adds	r3, #1
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	6812      	ldr	r2, [r2, #0]
 8006b5c:	430b      	orrs	r3, r1
 8006b5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006b6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	495c      	ldr	r1, [pc, #368]	; (8006ce4 <HAL_I2C_Init+0x274>)
 8006b74:	428b      	cmp	r3, r1
 8006b76:	d819      	bhi.n	8006bac <HAL_I2C_Init+0x13c>
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	1e59      	subs	r1, r3, #1
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b86:	1c59      	adds	r1, r3, #1
 8006b88:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006b8c:	400b      	ands	r3, r1
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00a      	beq.n	8006ba8 <HAL_I2C_Init+0x138>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	1e59      	subs	r1, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ba6:	e051      	b.n	8006c4c <HAL_I2C_Init+0x1dc>
 8006ba8:	2304      	movs	r3, #4
 8006baa:	e04f      	b.n	8006c4c <HAL_I2C_Init+0x1dc>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d111      	bne.n	8006bd8 <HAL_I2C_Init+0x168>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	1e58      	subs	r0, r3, #1
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6859      	ldr	r1, [r3, #4]
 8006bbc:	460b      	mov	r3, r1
 8006bbe:	005b      	lsls	r3, r3, #1
 8006bc0:	440b      	add	r3, r1
 8006bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bf0c      	ite	eq
 8006bd0:	2301      	moveq	r3, #1
 8006bd2:	2300      	movne	r3, #0
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	e012      	b.n	8006bfe <HAL_I2C_Init+0x18e>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	1e58      	subs	r0, r3, #1
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6859      	ldr	r1, [r3, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	0099      	lsls	r1, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8006bee:	3301      	adds	r3, #1
 8006bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	bf0c      	ite	eq
 8006bf8:	2301      	moveq	r3, #1
 8006bfa:	2300      	movne	r3, #0
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <HAL_I2C_Init+0x196>
 8006c02:	2301      	movs	r3, #1
 8006c04:	e022      	b.n	8006c4c <HAL_I2C_Init+0x1dc>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10e      	bne.n	8006c2c <HAL_I2C_Init+0x1bc>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	1e58      	subs	r0, r3, #1
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6859      	ldr	r1, [r3, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	005b      	lsls	r3, r3, #1
 8006c1a:	440b      	add	r3, r1
 8006c1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c20:	3301      	adds	r3, #1
 8006c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c2a:	e00f      	b.n	8006c4c <HAL_I2C_Init+0x1dc>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	1e58      	subs	r0, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6859      	ldr	r1, [r3, #4]
 8006c34:	460b      	mov	r3, r1
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	440b      	add	r3, r1
 8006c3a:	0099      	lsls	r1, r3, #2
 8006c3c:	440b      	add	r3, r1
 8006c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c42:	3301      	adds	r3, #1
 8006c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	6809      	ldr	r1, [r1, #0]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	69da      	ldr	r2, [r3, #28]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	431a      	orrs	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006c7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	6911      	ldr	r1, [r2, #16]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	68d2      	ldr	r2, [r2, #12]
 8006c86:	4311      	orrs	r1, r2
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	6812      	ldr	r2, [r2, #0]
 8006c8c:	430b      	orrs	r3, r1
 8006c8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	695a      	ldr	r2, [r3, #20]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	000186a0 	.word	0x000186a0
 8006ce8:	001e847f 	.word	0x001e847f
 8006cec:	003d08ff 	.word	0x003d08ff
 8006cf0:	431bde83 	.word	0x431bde83
 8006cf4:	10624dd3 	.word	0x10624dd3

08006cf8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b088      	sub	sp, #32
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	607a      	str	r2, [r7, #4]
 8006d02:	461a      	mov	r2, r3
 8006d04:	460b      	mov	r3, r1
 8006d06:	817b      	strh	r3, [r7, #10]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d0c:	f7fe fbac 	bl	8005468 <HAL_GetTick>
 8006d10:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	f040 80e0 	bne.w	8006ee0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	9300      	str	r3, [sp, #0]
 8006d24:	2319      	movs	r3, #25
 8006d26:	2201      	movs	r2, #1
 8006d28:	4970      	ldr	r1, [pc, #448]	; (8006eec <HAL_I2C_Master_Transmit+0x1f4>)
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f002 fe28 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d001      	beq.n	8006d3a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006d36:	2302      	movs	r3, #2
 8006d38:	e0d3      	b.n	8006ee2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d101      	bne.n	8006d48 <HAL_I2C_Master_Transmit+0x50>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e0cc      	b.n	8006ee2 <HAL_I2C_Master_Transmit+0x1ea>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d007      	beq.n	8006d6e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0201 	orr.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2221      	movs	r2, #33	; 0x21
 8006d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2210      	movs	r2, #16
 8006d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2200      	movs	r2, #0
 8006d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	893a      	ldrh	r2, [r7, #8]
 8006d9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4a50      	ldr	r2, [pc, #320]	; (8006ef0 <HAL_I2C_Master_Transmit+0x1f8>)
 8006dae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006db0:	8979      	ldrh	r1, [r7, #10]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	6a3a      	ldr	r2, [r7, #32]
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f002 fa6c 	bl	8009294 <I2C_MasterRequestWrite>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d001      	beq.n	8006dc6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e08d      	b.n	8006ee2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
 8006dd0:	613b      	str	r3, [r7, #16]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006ddc:	e066      	b.n	8006eac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006dde:	697a      	ldr	r2, [r7, #20]
 8006de0:	6a39      	ldr	r1, [r7, #32]
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f002 fea2 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00d      	beq.n	8006e0a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df2:	2b04      	cmp	r3, #4
 8006df4:	d107      	bne.n	8006e06 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e04:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e06b      	b.n	8006ee2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0e:	781a      	ldrb	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d11b      	bne.n	8006e80 <HAL_I2C_Master_Transmit+0x188>
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d017      	beq.n	8006e80 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	781a      	ldrb	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	6a39      	ldr	r1, [r7, #32]
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f002 fe92 	bl	8009bae <I2C_WaitOnBTFFlagUntilTimeout>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00d      	beq.n	8006eac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	2b04      	cmp	r3, #4
 8006e96:	d107      	bne.n	8006ea8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ea6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e01a      	b.n	8006ee2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d194      	bne.n	8006dde <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ec2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	e000      	b.n	8006ee2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006ee0:	2302      	movs	r3, #2
  }
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	00100002 	.word	0x00100002
 8006ef0:	ffff0000 	.word	0xffff0000

08006ef4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b08c      	sub	sp, #48	; 0x30
 8006ef8:	af02      	add	r7, sp, #8
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	461a      	mov	r2, r3
 8006f00:	460b      	mov	r3, r1
 8006f02:	817b      	strh	r3, [r7, #10]
 8006f04:	4613      	mov	r3, r2
 8006f06:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006f08:	f7fe faae 	bl	8005468 <HAL_GetTick>
 8006f0c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b20      	cmp	r3, #32
 8006f18:	f040 820b 	bne.w	8007332 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	2319      	movs	r3, #25
 8006f22:	2201      	movs	r2, #1
 8006f24:	497c      	ldr	r1, [pc, #496]	; (8007118 <HAL_I2C_Master_Receive+0x224>)
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f002 fd2a 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006f32:	2302      	movs	r3, #2
 8006f34:	e1fe      	b.n	8007334 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_I2C_Master_Receive+0x50>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e1f7      	b.n	8007334 <HAL_I2C_Master_Receive+0x440>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d007      	beq.n	8006f6a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0201 	orr.w	r2, r2, #1
 8006f68:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f78:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2222      	movs	r2, #34	; 0x22
 8006f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2210      	movs	r2, #16
 8006f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	893a      	ldrh	r2, [r7, #8]
 8006f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4a5c      	ldr	r2, [pc, #368]	; (800711c <HAL_I2C_Master_Receive+0x228>)
 8006faa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006fac:	8979      	ldrh	r1, [r7, #10]
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f002 f9f0 	bl	8009398 <I2C_MasterRequestRead>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e1b8      	b.n	8007334 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d113      	bne.n	8006ff2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006fca:	2300      	movs	r3, #0
 8006fcc:	623b      	str	r3, [r7, #32]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	623b      	str	r3, [r7, #32]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	623b      	str	r3, [r7, #32]
 8006fde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	e18c      	b.n	800730c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff6:	2b01      	cmp	r3, #1
 8006ff8:	d11b      	bne.n	8007032 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800700a:	2300      	movs	r3, #0
 800700c:	61fb      	str	r3, [r7, #28]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	695b      	ldr	r3, [r3, #20]
 8007014:	61fb      	str	r3, [r7, #28]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	61fb      	str	r3, [r7, #28]
 800701e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800702e:	601a      	str	r2, [r3, #0]
 8007030:	e16c      	b.n	800730c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007036:	2b02      	cmp	r3, #2
 8007038:	d11b      	bne.n	8007072 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007048:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007058:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800705a:	2300      	movs	r3, #0
 800705c:	61bb      	str	r3, [r7, #24]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	695b      	ldr	r3, [r3, #20]
 8007064:	61bb      	str	r3, [r7, #24]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	61bb      	str	r3, [r7, #24]
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	e14c      	b.n	800730c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007082:	2300      	movs	r3, #0
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	617b      	str	r3, [r7, #20]
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	617b      	str	r3, [r7, #20]
 8007096:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007098:	e138      	b.n	800730c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800709e:	2b03      	cmp	r3, #3
 80070a0:	f200 80f1 	bhi.w	8007286 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d123      	bne.n	80070f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070b0:	68f8      	ldr	r0, [r7, #12]
 80070b2:	f002 fdef 	bl	8009c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d001      	beq.n	80070c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e139      	b.n	8007334 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	691a      	ldr	r2, [r3, #16]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070dc:	3b01      	subs	r3, #1
 80070de:	b29a      	uxth	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	3b01      	subs	r3, #1
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070f2:	e10b      	b.n	800730c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d14e      	bne.n	800719a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007102:	2200      	movs	r2, #0
 8007104:	4906      	ldr	r1, [pc, #24]	; (8007120 <HAL_I2C_Master_Receive+0x22c>)
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f002 fc3a 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d008      	beq.n	8007124 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e10e      	b.n	8007334 <HAL_I2C_Master_Receive+0x440>
 8007116:	bf00      	nop
 8007118:	00100002 	.word	0x00100002
 800711c:	ffff0000 	.word	0xffff0000
 8007120:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007132:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800715c:	b29b      	uxth	r3, r3
 800715e:	3b01      	subs	r3, #1
 8007160:	b29a      	uxth	r2, r3
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	1c5a      	adds	r2, r3, #1
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007198:	e0b8      	b.n	800730c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a0:	2200      	movs	r2, #0
 80071a2:	4966      	ldr	r1, [pc, #408]	; (800733c <HAL_I2C_Master_Receive+0x448>)
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f002 fbeb 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e0bf      	b.n	8007334 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	691a      	ldr	r2, [r3, #16]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071e0:	3b01      	subs	r3, #1
 80071e2:	b29a      	uxth	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fc:	2200      	movs	r2, #0
 80071fe:	494f      	ldr	r1, [pc, #316]	; (800733c <HAL_I2C_Master_Receive+0x448>)
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f002 fbbd 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e091      	b.n	8007334 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800721e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	691a      	ldr	r2, [r3, #16]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	b2d2      	uxtb	r2, r2
 800722c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800723c:	3b01      	subs	r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007248:	b29b      	uxth	r3, r3
 800724a:	3b01      	subs	r3, #1
 800724c:	b29a      	uxth	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	691a      	ldr	r2, [r3, #16]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	b2d2      	uxtb	r2, r2
 800725e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007264:	1c5a      	adds	r2, r3, #1
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800726e:	3b01      	subs	r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800727a:	b29b      	uxth	r3, r3
 800727c:	3b01      	subs	r3, #1
 800727e:	b29a      	uxth	r2, r3
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007284:	e042      	b.n	800730c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f002 fd02 	bl	8009c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e04c      	b.n	8007334 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	691a      	ldr	r2, [r3, #16]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	b2d2      	uxtb	r2, r2
 80072a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b6:	3b01      	subs	r3, #1
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695b      	ldr	r3, [r3, #20]
 80072d2:	f003 0304 	and.w	r3, r3, #4
 80072d6:	2b04      	cmp	r3, #4
 80072d8:	d118      	bne.n	800730c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	691a      	ldr	r2, [r3, #16]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e4:	b2d2      	uxtb	r2, r2
 80072e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ec:	1c5a      	adds	r2, r3, #1
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f6:	3b01      	subs	r3, #1
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007302:	b29b      	uxth	r3, r3
 8007304:	3b01      	subs	r3, #1
 8007306:	b29a      	uxth	r2, r3
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007310:	2b00      	cmp	r3, #0
 8007312:	f47f aec2 	bne.w	800709a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2220      	movs	r2, #32
 800731a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	e000      	b.n	8007334 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007332:	2302      	movs	r3, #2
  }
}
 8007334:	4618      	mov	r0, r3
 8007336:	3728      	adds	r7, #40	; 0x28
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	00010004 	.word	0x00010004

08007340 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	607a      	str	r2, [r7, #4]
 800734a:	461a      	mov	r2, r3
 800734c:	460b      	mov	r3, r1
 800734e:	817b      	strh	r3, [r7, #10]
 8007350:	4613      	mov	r3, r2
 8007352:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800735e:	b2db      	uxtb	r3, r3
 8007360:	2b20      	cmp	r3, #32
 8007362:	f040 808d 	bne.w	8007480 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8007366:	4b4a      	ldr	r3, [pc, #296]	; (8007490 <HAL_I2C_Master_Receive_IT+0x150>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	08db      	lsrs	r3, r3, #3
 800736c:	4a49      	ldr	r2, [pc, #292]	; (8007494 <HAL_I2C_Master_Receive_IT+0x154>)
 800736e:	fba2 2303 	umull	r2, r3, r2, r3
 8007372:	0a1a      	lsrs	r2, r3, #8
 8007374:	4613      	mov	r3, r2
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	4413      	add	r3, r2
 800737a:	009a      	lsls	r2, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	3b01      	subs	r3, #1
 8007384:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d116      	bne.n	80073ba <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	2200      	movs	r2, #0
 8007390:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a6:	f043 0220 	orr.w	r2, r3, #32
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e063      	b.n	8007482 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	f003 0302 	and.w	r3, r3, #2
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d0db      	beq.n	8007380 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d101      	bne.n	80073d6 <HAL_I2C_Master_Receive_IT+0x96>
 80073d2:	2302      	movs	r3, #2
 80073d4:	e055      	b.n	8007482 <HAL_I2C_Master_Receive_IT+0x142>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2201      	movs	r2, #1
 80073da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 0301 	and.w	r3, r3, #1
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d007      	beq.n	80073fc <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0201 	orr.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800740a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2222      	movs	r2, #34	; 0x22
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2210      	movs	r2, #16
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	893a      	ldrh	r2, [r7, #8]
 800742c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007432:	b29a      	uxth	r2, r3
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a17      	ldr	r2, [pc, #92]	; (8007498 <HAL_I2C_Master_Receive_IT+0x158>)
 800743c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800743e:	897a      	ldrh	r2, [r7, #10]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800745a:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800746a:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800747a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	e000      	b.n	8007482 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8007480:	2302      	movs	r3, #2
  }
}
 8007482:	4618      	mov	r0, r3
 8007484:	371c      	adds	r7, #28
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	20000000 	.word	0x20000000
 8007494:	14f8b589 	.word	0x14f8b589
 8007498:	ffff0000 	.word	0xffff0000

0800749c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b088      	sub	sp, #32
 80074a0:	af02      	add	r7, sp, #8
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	4608      	mov	r0, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	461a      	mov	r2, r3
 80074aa:	4603      	mov	r3, r0
 80074ac:	817b      	strh	r3, [r7, #10]
 80074ae:	460b      	mov	r3, r1
 80074b0:	813b      	strh	r3, [r7, #8]
 80074b2:	4613      	mov	r3, r2
 80074b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074b6:	f7fd ffd7 	bl	8005468 <HAL_GetTick>
 80074ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b20      	cmp	r3, #32
 80074c6:	f040 80d9 	bne.w	800767c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	2319      	movs	r3, #25
 80074d0:	2201      	movs	r2, #1
 80074d2:	496d      	ldr	r1, [pc, #436]	; (8007688 <HAL_I2C_Mem_Write+0x1ec>)
 80074d4:	68f8      	ldr	r0, [r7, #12]
 80074d6:	f002 fa53 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d001      	beq.n	80074e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80074e0:	2302      	movs	r3, #2
 80074e2:	e0cc      	b.n	800767e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_I2C_Mem_Write+0x56>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e0c5      	b.n	800767e <HAL_I2C_Mem_Write+0x1e2>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b01      	cmp	r3, #1
 8007506:	d007      	beq.n	8007518 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0201 	orr.w	r2, r2, #1
 8007516:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007526:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2221      	movs	r2, #33	; 0x21
 800752c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2240      	movs	r2, #64	; 0x40
 8007534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a3a      	ldr	r2, [r7, #32]
 8007542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	4a4d      	ldr	r2, [pc, #308]	; (800768c <HAL_I2C_Mem_Write+0x1f0>)
 8007558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800755a:	88f8      	ldrh	r0, [r7, #6]
 800755c:	893a      	ldrh	r2, [r7, #8]
 800755e:	8979      	ldrh	r1, [r7, #10]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	9301      	str	r3, [sp, #4]
 8007564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	4603      	mov	r3, r0
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f001 ffe2 	bl	8009534 <I2C_RequestMemoryWrite>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d052      	beq.n	800761c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e081      	b.n	800767e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f002 fad4 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00d      	beq.n	80075a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	2b04      	cmp	r3, #4
 8007590:	d107      	bne.n	80075a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e06b      	b.n	800767e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b6:	1c5a      	adds	r2, r3, #1
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	3b01      	subs	r3, #1
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b04      	cmp	r3, #4
 80075e2:	d11b      	bne.n	800761c <HAL_I2C_Mem_Write+0x180>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d017      	beq.n	800761c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f0:	781a      	ldrb	r2, [r3, #0]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007606:	3b01      	subs	r3, #1
 8007608:	b29a      	uxth	r2, r3
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007612:	b29b      	uxth	r3, r3
 8007614:	3b01      	subs	r3, #1
 8007616:	b29a      	uxth	r2, r3
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007620:	2b00      	cmp	r3, #0
 8007622:	d1aa      	bne.n	800757a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f002 fac0 	bl	8009bae <I2C_WaitOnBTFFlagUntilTimeout>
 800762e:	4603      	mov	r3, r0
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00d      	beq.n	8007650 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	2b04      	cmp	r3, #4
 800763a:	d107      	bne.n	800764c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800764a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e016      	b.n	800767e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800765e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2220      	movs	r2, #32
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	e000      	b.n	800767e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800767c:	2302      	movs	r3, #2
  }
}
 800767e:	4618      	mov	r0, r3
 8007680:	3718      	adds	r7, #24
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	00100002 	.word	0x00100002
 800768c:	ffff0000 	.word	0xffff0000

08007690 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b08c      	sub	sp, #48	; 0x30
 8007694:	af02      	add	r7, sp, #8
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	4608      	mov	r0, r1
 800769a:	4611      	mov	r1, r2
 800769c:	461a      	mov	r2, r3
 800769e:	4603      	mov	r3, r0
 80076a0:	817b      	strh	r3, [r7, #10]
 80076a2:	460b      	mov	r3, r1
 80076a4:	813b      	strh	r3, [r7, #8]
 80076a6:	4613      	mov	r3, r2
 80076a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076aa:	f7fd fedd 	bl	8005468 <HAL_GetTick>
 80076ae:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b20      	cmp	r3, #32
 80076ba:	f040 8208 	bne.w	8007ace <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	9300      	str	r3, [sp, #0]
 80076c2:	2319      	movs	r3, #25
 80076c4:	2201      	movs	r2, #1
 80076c6:	497b      	ldr	r1, [pc, #492]	; (80078b4 <HAL_I2C_Mem_Read+0x224>)
 80076c8:	68f8      	ldr	r0, [r7, #12]
 80076ca:	f002 f959 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80076d4:	2302      	movs	r3, #2
 80076d6:	e1fb      	b.n	8007ad0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d101      	bne.n	80076e6 <HAL_I2C_Mem_Read+0x56>
 80076e2:	2302      	movs	r3, #2
 80076e4:	e1f4      	b.n	8007ad0 <HAL_I2C_Mem_Read+0x440>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0301 	and.w	r3, r3, #1
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d007      	beq.n	800770c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f042 0201 	orr.w	r2, r2, #1
 800770a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800771a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2222      	movs	r2, #34	; 0x22
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2240      	movs	r2, #64	; 0x40
 8007728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007736:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800773c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007742:	b29a      	uxth	r2, r3
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	4a5b      	ldr	r2, [pc, #364]	; (80078b8 <HAL_I2C_Mem_Read+0x228>)
 800774c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800774e:	88f8      	ldrh	r0, [r7, #6]
 8007750:	893a      	ldrh	r2, [r7, #8]
 8007752:	8979      	ldrh	r1, [r7, #10]
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	9301      	str	r3, [sp, #4]
 8007758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	4603      	mov	r3, r0
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f001 ff7e 	bl	8009660 <I2C_RequestMemoryRead>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e1b0      	b.n	8007ad0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007772:	2b00      	cmp	r3, #0
 8007774:	d113      	bne.n	800779e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007776:	2300      	movs	r3, #0
 8007778:	623b      	str	r3, [r7, #32]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	623b      	str	r3, [r7, #32]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	623b      	str	r3, [r7, #32]
 800778a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	e184      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d11b      	bne.n	80077de <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077b6:	2300      	movs	r3, #0
 80077b8:	61fb      	str	r3, [r7, #28]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	695b      	ldr	r3, [r3, #20]
 80077c0:	61fb      	str	r3, [r7, #28]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	61fb      	str	r3, [r7, #28]
 80077ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077da:	601a      	str	r2, [r3, #0]
 80077dc:	e164      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d11b      	bne.n	800781e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007804:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007806:	2300      	movs	r3, #0
 8007808:	61bb      	str	r3, [r7, #24]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	699b      	ldr	r3, [r3, #24]
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	e144      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800781e:	2300      	movs	r3, #0
 8007820:	617b      	str	r3, [r7, #20]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	617b      	str	r3, [r7, #20]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	617b      	str	r3, [r7, #20]
 8007832:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007834:	e138      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783a:	2b03      	cmp	r3, #3
 800783c:	f200 80f1 	bhi.w	8007a22 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007844:	2b01      	cmp	r3, #1
 8007846:	d123      	bne.n	8007890 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800784a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800784c:	68f8      	ldr	r0, [r7, #12]
 800784e:	f002 fa21 	bl	8009c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d001      	beq.n	800785c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e139      	b.n	8007ad0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691a      	ldr	r2, [r3, #16]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	b2d2      	uxtb	r2, r2
 8007868:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786e:	1c5a      	adds	r2, r3, #1
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007884:	b29b      	uxth	r3, r3
 8007886:	3b01      	subs	r3, #1
 8007888:	b29a      	uxth	r2, r3
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800788e:	e10b      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007894:	2b02      	cmp	r3, #2
 8007896:	d14e      	bne.n	8007936 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	9300      	str	r3, [sp, #0]
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	2200      	movs	r2, #0
 80078a0:	4906      	ldr	r1, [pc, #24]	; (80078bc <HAL_I2C_Mem_Read+0x22c>)
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f002 f86c 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d008      	beq.n	80078c0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80078ae:	2301      	movs	r3, #1
 80078b0:	e10e      	b.n	8007ad0 <HAL_I2C_Mem_Read+0x440>
 80078b2:	bf00      	nop
 80078b4:	00100002 	.word	0x00100002
 80078b8:	ffff0000 	.word	0xffff0000
 80078bc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	691a      	ldr	r2, [r3, #16]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	b2d2      	uxtb	r2, r2
 80078dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ec:	3b01      	subs	r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	3b01      	subs	r3, #1
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	691a      	ldr	r2, [r3, #16]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790c:	b2d2      	uxtb	r2, r2
 800790e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	1c5a      	adds	r2, r3, #1
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800791e:	3b01      	subs	r3, #1
 8007920:	b29a      	uxth	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800792a:	b29b      	uxth	r3, r3
 800792c:	3b01      	subs	r3, #1
 800792e:	b29a      	uxth	r2, r3
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007934:	e0b8      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793c:	2200      	movs	r2, #0
 800793e:	4966      	ldr	r1, [pc, #408]	; (8007ad8 <HAL_I2C_Mem_Read+0x448>)
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f002 f81d 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e0bf      	b.n	8007ad0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800795e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800797c:	3b01      	subs	r3, #1
 800797e:	b29a      	uxth	r2, r3
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007988:	b29b      	uxth	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	b29a      	uxth	r2, r3
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	2200      	movs	r2, #0
 800799a:	494f      	ldr	r1, [pc, #316]	; (8007ad8 <HAL_I2C_Mem_Read+0x448>)
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f001 ffef 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d001      	beq.n	80079ac <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e091      	b.n	8007ad0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d8:	3b01      	subs	r3, #1
 80079da:	b29a      	uxth	r2, r3
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	691a      	ldr	r2, [r3, #16]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f8:	b2d2      	uxtb	r2, r2
 80079fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0a:	3b01      	subs	r3, #1
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a20:	e042      	b.n	8007aa8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a24:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f002 f934 	bl	8009c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e04c      	b.n	8007ad0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	b2d2      	uxtb	r2, r2
 8007a42:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a52:	3b01      	subs	r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	3b01      	subs	r3, #1
 8007a62:	b29a      	uxth	r2, r3
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	f003 0304 	and.w	r3, r3, #4
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d118      	bne.n	8007aa8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	b2d2      	uxtb	r2, r2
 8007a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	1c5a      	adds	r2, r3, #1
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	3b01      	subs	r3, #1
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f47f aec2 	bne.w	8007836 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	e000      	b.n	8007ad0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007ace:	2302      	movs	r3, #2
  }
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3728      	adds	r7, #40	; 0x28
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	00010004 	.word	0x00010004

08007adc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b088      	sub	sp, #32
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007afc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b04:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d003      	beq.n	8007b14 <HAL_I2C_EV_IRQHandler+0x38>
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	2b40      	cmp	r3, #64	; 0x40
 8007b10:	f040 80c1 	bne.w	8007c96 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	699b      	ldr	r3, [r3, #24]
 8007b1a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695b      	ldr	r3, [r3, #20]
 8007b22:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10d      	bne.n	8007b4a <HAL_I2C_EV_IRQHandler+0x6e>
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007b34:	d003      	beq.n	8007b3e <HAL_I2C_EV_IRQHandler+0x62>
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007b3c:	d101      	bne.n	8007b42 <HAL_I2C_EV_IRQHandler+0x66>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <HAL_I2C_EV_IRQHandler+0x68>
 8007b42:	2300      	movs	r3, #0
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	f000 8132 	beq.w	8007dae <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d00c      	beq.n	8007b6e <HAL_I2C_EV_IRQHandler+0x92>
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	0a5b      	lsrs	r3, r3, #9
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d006      	beq.n	8007b6e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f002 f91c 	bl	8009d9e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fd79 	bl	800865e <I2C_Master_SB>
 8007b6c:	e092      	b.n	8007c94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	08db      	lsrs	r3, r3, #3
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d009      	beq.n	8007b8e <HAL_I2C_EV_IRQHandler+0xb2>
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	0a5b      	lsrs	r3, r3, #9
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fdef 	bl	800876a <I2C_Master_ADD10>
 8007b8c:	e082      	b.n	8007c94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	085b      	lsrs	r3, r3, #1
 8007b92:	f003 0301 	and.w	r3, r3, #1
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <HAL_I2C_EV_IRQHandler+0xd2>
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	0a5b      	lsrs	r3, r3, #9
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 fe09 	bl	80087be <I2C_Master_ADDR>
 8007bac:	e072      	b.n	8007c94 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	089b      	lsrs	r3, r3, #2
 8007bb2:	f003 0301 	and.w	r3, r3, #1
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d03b      	beq.n	8007c32 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bc8:	f000 80f3 	beq.w	8007db2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	09db      	lsrs	r3, r3, #7
 8007bd0:	f003 0301 	and.w	r3, r3, #1
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00f      	beq.n	8007bf8 <HAL_I2C_EV_IRQHandler+0x11c>
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	0a9b      	lsrs	r3, r3, #10
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d009      	beq.n	8007bf8 <HAL_I2C_EV_IRQHandler+0x11c>
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	089b      	lsrs	r3, r3, #2
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d103      	bne.n	8007bf8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 f9e9 	bl	8007fc8 <I2C_MasterTransmit_TXE>
 8007bf6:	e04d      	b.n	8007c94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	089b      	lsrs	r3, r3, #2
 8007bfc:	f003 0301 	and.w	r3, r3, #1
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 80d6 	beq.w	8007db2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	0a5b      	lsrs	r3, r3, #9
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 80cf 	beq.w	8007db2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	2b21      	cmp	r3, #33	; 0x21
 8007c18:	d103      	bne.n	8007c22 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fa70 	bl	8008100 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c20:	e0c7      	b.n	8007db2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
 8007c24:	2b40      	cmp	r3, #64	; 0x40
 8007c26:	f040 80c4 	bne.w	8007db2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fade 	bl	80081ec <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c30:	e0bf      	b.n	8007db2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c40:	f000 80b7 	beq.w	8007db2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	099b      	lsrs	r3, r3, #6
 8007c48:	f003 0301 	and.w	r3, r3, #1
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00f      	beq.n	8007c70 <HAL_I2C_EV_IRQHandler+0x194>
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	0a9b      	lsrs	r3, r3, #10
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d009      	beq.n	8007c70 <HAL_I2C_EV_IRQHandler+0x194>
 8007c5c:	69fb      	ldr	r3, [r7, #28]
 8007c5e:	089b      	lsrs	r3, r3, #2
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fb53 	bl	8008314 <I2C_MasterReceive_RXNE>
 8007c6e:	e011      	b.n	8007c94 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	089b      	lsrs	r3, r3, #2
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 809a 	beq.w	8007db2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	0a5b      	lsrs	r3, r3, #9
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 8093 	beq.w	8007db2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fbfc 	bl	800848a <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007c92:	e08e      	b.n	8007db2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8007c94:	e08d      	b.n	8007db2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d004      	beq.n	8007ca8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	e007      	b.n	8007cb8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	699b      	ldr	r3, [r3, #24]
 8007cae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	f003 0301 	and.w	r3, r3, #1
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d012      	beq.n	8007cea <HAL_I2C_EV_IRQHandler+0x20e>
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	0a5b      	lsrs	r3, r3, #9
 8007cc8:	f003 0301 	and.w	r3, r3, #1
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00c      	beq.n	8007cea <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007ce0:	69b9      	ldr	r1, [r7, #24]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 ffba 	bl	8008c5c <I2C_Slave_ADDR>
 8007ce8:	e066      	b.n	8007db8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	091b      	lsrs	r3, r3, #4
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d009      	beq.n	8007d0a <HAL_I2C_EV_IRQHandler+0x22e>
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	0a5b      	lsrs	r3, r3, #9
 8007cfa:	f003 0301 	and.w	r3, r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d003      	beq.n	8007d0a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 fff4 	bl	8008cf0 <I2C_Slave_STOPF>
 8007d08:	e056      	b.n	8007db8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b21      	cmp	r3, #33	; 0x21
 8007d0e:	d002      	beq.n	8007d16 <HAL_I2C_EV_IRQHandler+0x23a>
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b29      	cmp	r3, #41	; 0x29
 8007d14:	d125      	bne.n	8007d62 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	09db      	lsrs	r3, r3, #7
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00f      	beq.n	8007d42 <HAL_I2C_EV_IRQHandler+0x266>
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	0a9b      	lsrs	r3, r3, #10
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d009      	beq.n	8007d42 <HAL_I2C_EV_IRQHandler+0x266>
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	089b      	lsrs	r3, r3, #2
 8007d32:	f003 0301 	and.w	r3, r3, #1
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d103      	bne.n	8007d42 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fed0 	bl	8008ae0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d40:	e039      	b.n	8007db6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d42:	69fb      	ldr	r3, [r7, #28]
 8007d44:	089b      	lsrs	r3, r3, #2
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d033      	beq.n	8007db6 <HAL_I2C_EV_IRQHandler+0x2da>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	0a5b      	lsrs	r3, r3, #9
 8007d52:	f003 0301 	and.w	r3, r3, #1
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d02d      	beq.n	8007db6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fefd 	bl	8008b5a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d60:	e029      	b.n	8007db6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	099b      	lsrs	r3, r3, #6
 8007d66:	f003 0301 	and.w	r3, r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00f      	beq.n	8007d8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	0a9b      	lsrs	r3, r3, #10
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d009      	beq.n	8007d8e <HAL_I2C_EV_IRQHandler+0x2b2>
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	089b      	lsrs	r3, r3, #2
 8007d7e:	f003 0301 	and.w	r3, r3, #1
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d103      	bne.n	8007d8e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 ff08 	bl	8008b9c <I2C_SlaveReceive_RXNE>
 8007d8c:	e014      	b.n	8007db8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	089b      	lsrs	r3, r3, #2
 8007d92:	f003 0301 	and.w	r3, r3, #1
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00e      	beq.n	8007db8 <HAL_I2C_EV_IRQHandler+0x2dc>
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	0a5b      	lsrs	r3, r3, #9
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d008      	beq.n	8007db8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 ff36 	bl	8008c18 <I2C_SlaveReceive_BTF>
 8007dac:	e004      	b.n	8007db8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007dae:	bf00      	nop
 8007db0:	e002      	b.n	8007db8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007db2:	bf00      	nop
 8007db4:	e000      	b.n	8007db8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007db6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8007db8:	3720      	adds	r7, #32
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b08a      	sub	sp, #40	; 0x28
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007de0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	0a1b      	lsrs	r3, r3, #8
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00e      	beq.n	8007e0c <HAL_I2C_ER_IRQHandler+0x4e>
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	0a1b      	lsrs	r3, r3, #8
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d008      	beq.n	8007e0c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	f043 0301 	orr.w	r3, r3, #1
 8007e00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007e0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	0a5b      	lsrs	r3, r3, #9
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d00e      	beq.n	8007e36 <HAL_I2C_ER_IRQHandler+0x78>
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d008      	beq.n	8007e36 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	f043 0302 	orr.w	r3, r3, #2
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007e34:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	0a9b      	lsrs	r3, r3, #10
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d03f      	beq.n	8007ec2 <HAL_I2C_ER_IRQHandler+0x104>
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	0a1b      	lsrs	r3, r3, #8
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d039      	beq.n	8007ec2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007e4e:	7efb      	ldrb	r3, [r7, #27]
 8007e50:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e60:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e66:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007e68:	7ebb      	ldrb	r3, [r7, #26]
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d112      	bne.n	8007e94 <HAL_I2C_ER_IRQHandler+0xd6>
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10f      	bne.n	8007e94 <HAL_I2C_ER_IRQHandler+0xd6>
 8007e74:	7cfb      	ldrb	r3, [r7, #19]
 8007e76:	2b21      	cmp	r3, #33	; 0x21
 8007e78:	d008      	beq.n	8007e8c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007e7a:	7cfb      	ldrb	r3, [r7, #19]
 8007e7c:	2b29      	cmp	r3, #41	; 0x29
 8007e7e:	d005      	beq.n	8007e8c <HAL_I2C_ER_IRQHandler+0xce>
 8007e80:	7cfb      	ldrb	r3, [r7, #19]
 8007e82:	2b28      	cmp	r3, #40	; 0x28
 8007e84:	d106      	bne.n	8007e94 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b21      	cmp	r3, #33	; 0x21
 8007e8a:	d103      	bne.n	8007e94 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 f85f 	bl	8008f50 <I2C_Slave_AF>
 8007e92:	e016      	b.n	8007ec2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007e9c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea0:	f043 0304 	orr.w	r3, r3, #4
 8007ea4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8007ea6:	7efb      	ldrb	r3, [r7, #27]
 8007ea8:	2b10      	cmp	r3, #16
 8007eaa:	d002      	beq.n	8007eb2 <HAL_I2C_ER_IRQHandler+0xf4>
 8007eac:	7efb      	ldrb	r3, [r7, #27]
 8007eae:	2b40      	cmp	r3, #64	; 0x40
 8007eb0:	d107      	bne.n	8007ec2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ec0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	0adb      	lsrs	r3, r3, #11
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00e      	beq.n	8007eec <HAL_I2C_ER_IRQHandler+0x12e>
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	0a1b      	lsrs	r3, r3, #8
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	f043 0308 	orr.w	r3, r3, #8
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007eea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d008      	beq.n	8007f04 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f001 f896 	bl	8009030 <I2C_ITError>
  }
}
 8007f04:	bf00      	nop
 8007f06:	3728      	adds	r7, #40	; 0x28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	70fb      	strb	r3, [r7, #3]
 8007f54:	4613      	mov	r3, r2
 8007f56:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007f58:	bf00      	nop
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007f6c:	bf00      	nop
 8007f6e:	370c      	adds	r7, #12
 8007f70:	46bd      	mov	sp, r7
 8007f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f76:	4770      	bx	lr

08007f78 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8007f94:	bf00      	nop
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007fa8:	bf00      	nop
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b083      	sub	sp, #12
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fde:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fe4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d150      	bne.n	8008090 <I2C_MasterTransmit_TXE+0xc8>
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	2b21      	cmp	r3, #33	; 0x21
 8007ff2:	d14d      	bne.n	8008090 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b08      	cmp	r3, #8
 8007ff8:	d01d      	beq.n	8008036 <I2C_MasterTransmit_TXE+0x6e>
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b20      	cmp	r3, #32
 8007ffe:	d01a      	beq.n	8008036 <I2C_MasterTransmit_TXE+0x6e>
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008006:	d016      	beq.n	8008036 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008016:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2211      	movs	r2, #17
 800801c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2220      	movs	r2, #32
 800802a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f7ff ff6c 	bl	8007f0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8008034:	e060      	b.n	80080f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685a      	ldr	r2, [r3, #4]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008044:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008054:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b40      	cmp	r3, #64	; 0x40
 800806e:	d107      	bne.n	8008080 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff ff7d 	bl	8007f78 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800807e:	e03b      	b.n	80080f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f7ff ff3f 	bl	8007f0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800808e:	e033      	b.n	80080f8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8008090:	7bfb      	ldrb	r3, [r7, #15]
 8008092:	2b21      	cmp	r3, #33	; 0x21
 8008094:	d005      	beq.n	80080a2 <I2C_MasterTransmit_TXE+0xda>
 8008096:	7bbb      	ldrb	r3, [r7, #14]
 8008098:	2b40      	cmp	r3, #64	; 0x40
 800809a:	d12d      	bne.n	80080f8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800809c:	7bfb      	ldrb	r3, [r7, #15]
 800809e:	2b22      	cmp	r3, #34	; 0x22
 80080a0:	d12a      	bne.n	80080f8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d108      	bne.n	80080be <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	685a      	ldr	r2, [r3, #4]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080ba:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80080bc:	e01c      	b.n	80080f8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b40      	cmp	r3, #64	; 0x40
 80080c8:	d103      	bne.n	80080d2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80080ca:	6878      	ldr	r0, [r7, #4]
 80080cc:	f000 f88e 	bl	80081ec <I2C_MemoryTransmit_TXE_BTF>
}
 80080d0:	e012      	b.n	80080f8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	781a      	ldrb	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	1c5a      	adds	r2, r3, #1
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	3b01      	subs	r3, #1
 80080f0:	b29a      	uxth	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80080f6:	e7ff      	b.n	80080f8 <I2C_MasterTransmit_TXE+0x130>
 80080f8:	bf00      	nop
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b21      	cmp	r3, #33	; 0x21
 8008118:	d164      	bne.n	80081e4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800811e:	b29b      	uxth	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d012      	beq.n	800814a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008128:	781a      	ldrb	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	1c5a      	adds	r2, r3, #1
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800813e:	b29b      	uxth	r3, r3
 8008140:	3b01      	subs	r3, #1
 8008142:	b29a      	uxth	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8008148:	e04c      	b.n	80081e4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2b08      	cmp	r3, #8
 800814e:	d01d      	beq.n	800818c <I2C_MasterTransmit_BTF+0x8c>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2b20      	cmp	r3, #32
 8008154:	d01a      	beq.n	800818c <I2C_MasterTransmit_BTF+0x8c>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800815c:	d016      	beq.n	800818c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800816c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2211      	movs	r2, #17
 8008172:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff fec1 	bl	8007f0c <HAL_I2C_MasterTxCpltCallback>
}
 800818a:	e02b      	b.n	80081e4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	685a      	ldr	r2, [r3, #4]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800819a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081aa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2220      	movs	r2, #32
 80081b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b40      	cmp	r3, #64	; 0x40
 80081c4:	d107      	bne.n	80081d6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff fed2 	bl	8007f78 <HAL_I2C_MemTxCpltCallback>
}
 80081d4:	e006      	b.n	80081e4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff fe94 	bl	8007f0c <HAL_I2C_MasterTxCpltCallback>
}
 80081e4:	bf00      	nop
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081fa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008200:	2b00      	cmp	r3, #0
 8008202:	d11d      	bne.n	8008240 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008208:	2b01      	cmp	r3, #1
 800820a:	d10b      	bne.n	8008224 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008210:	b2da      	uxtb	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800821c:	1c9a      	adds	r2, r3, #2
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8008222:	e073      	b.n	800830c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008228:	b29b      	uxth	r3, r3
 800822a:	121b      	asrs	r3, r3, #8
 800822c:	b2da      	uxtb	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008238:	1c5a      	adds	r2, r3, #1
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800823e:	e065      	b.n	800830c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008244:	2b01      	cmp	r3, #1
 8008246:	d10b      	bne.n	8008260 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800824c:	b2da      	uxtb	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008258:	1c5a      	adds	r2, r3, #1
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800825e:	e055      	b.n	800830c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008264:	2b02      	cmp	r3, #2
 8008266:	d151      	bne.n	800830c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8008268:	7bfb      	ldrb	r3, [r7, #15]
 800826a:	2b22      	cmp	r3, #34	; 0x22
 800826c:	d10d      	bne.n	800828a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800827c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	651a      	str	r2, [r3, #80]	; 0x50
}
 8008288:	e040      	b.n	800830c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d015      	beq.n	80082c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8008294:	7bfb      	ldrb	r3, [r7, #15]
 8008296:	2b21      	cmp	r3, #33	; 0x21
 8008298:	d112      	bne.n	80082c0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	3b01      	subs	r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80082be:	e025      	b.n	800830c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d120      	bne.n	800830c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
 80082cc:	2b21      	cmp	r3, #33	; 0x21
 80082ce:	d11d      	bne.n	800830c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082de:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	681a      	ldr	r2, [r3, #0]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff fe36 	bl	8007f78 <HAL_I2C_MemTxCpltCallback>
}
 800830c:	bf00      	nop
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b22      	cmp	r3, #34	; 0x22
 8008326:	f040 80ac 	bne.w	8008482 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800832e:	b29b      	uxth	r3, r3
 8008330:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2b03      	cmp	r3, #3
 8008336:	d921      	bls.n	800837c <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691a      	ldr	r2, [r3, #16]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	b2d2      	uxtb	r2, r2
 8008344:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800834a:	1c5a      	adds	r2, r3, #1
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008362:	b29b      	uxth	r3, r3
 8008364:	2b03      	cmp	r3, #3
 8008366:	f040 808c 	bne.w	8008482 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008378:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800837a:	e082      	b.n	8008482 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008380:	2b02      	cmp	r3, #2
 8008382:	d075      	beq.n	8008470 <I2C_MasterReceive_RXNE+0x15c>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d002      	beq.n	8008390 <I2C_MasterReceive_RXNE+0x7c>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d16f      	bne.n	8008470 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 fc4d 	bl	8009c30 <I2C_WaitOnSTOPRequestThroughIT>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d142      	bne.n	8008422 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083aa:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80083ba:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	691a      	ldr	r2, [r3, #16]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	b2d2      	uxtb	r2, r2
 80083c8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ce:	1c5a      	adds	r2, r3, #1
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d8:	b29b      	uxth	r3, r3
 80083da:	3b01      	subs	r3, #1
 80083dc:	b29a      	uxth	r2, r3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2220      	movs	r2, #32
 80083e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b40      	cmp	r3, #64	; 0x40
 80083f4:	d10a      	bne.n	800840c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2200      	movs	r2, #0
 8008402:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f7ff fdc1 	bl	8007f8c <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800840a:	e03a      	b.n	8008482 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2212      	movs	r2, #18
 8008418:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f7fa f946 	bl	80026ac <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8008420:	e02f      	b.n	8008482 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	685a      	ldr	r2, [r3, #4]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008430:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	691a      	ldr	r2, [r3, #16]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843c:	b2d2      	uxtb	r2, r2
 800843e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29a      	uxth	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2220      	movs	r2, #32
 800845c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7ff fd99 	bl	8007fa0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800846e:	e008      	b.n	8008482 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800847e:	605a      	str	r2, [r3, #4]
}
 8008480:	e7ff      	b.n	8008482 <I2C_MasterReceive_RXNE+0x16e>
 8008482:	bf00      	nop
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008496:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800849c:	b29b      	uxth	r3, r3
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d11b      	bne.n	80084da <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	685a      	ldr	r2, [r3, #4]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	691a      	ldr	r2, [r3, #16]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084bc:	b2d2      	uxtb	r2, r2
 80084be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	1c5a      	adds	r2, r3, #1
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	3b01      	subs	r3, #1
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80084d8:	e0bd      	b.n	8008656 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084de:	b29b      	uxth	r3, r3
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d129      	bne.n	8008538 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	685a      	ldr	r2, [r3, #4]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d00a      	beq.n	8008510 <I2C_MasterReceive_BTF+0x86>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d007      	beq.n	8008510 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800850e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	691a      	ldr	r2, [r3, #16]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	b2d2      	uxtb	r2, r2
 800851c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008522:	1c5a      	adds	r2, r3, #1
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800852c:	b29b      	uxth	r3, r3
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008536:	e08e      	b.n	8008656 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853c:	b29b      	uxth	r3, r3
 800853e:	2b02      	cmp	r3, #2
 8008540:	d176      	bne.n	8008630 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d002      	beq.n	800854e <I2C_MasterReceive_BTF+0xc4>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2b10      	cmp	r3, #16
 800854c:	d108      	bne.n	8008560 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	e019      	b.n	8008594 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b04      	cmp	r3, #4
 8008564:	d002      	beq.n	800856c <I2C_MasterReceive_BTF+0xe2>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b02      	cmp	r3, #2
 800856a:	d108      	bne.n	800857e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	e00a      	b.n	8008594 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2b10      	cmp	r3, #16
 8008582:	d007      	beq.n	8008594 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008592:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	691a      	ldr	r2, [r3, #16]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800859e:	b2d2      	uxtb	r2, r2
 80085a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a6:	1c5a      	adds	r2, r3, #1
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	3b01      	subs	r3, #1
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c4:	b2d2      	uxtb	r2, r2
 80085c6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	3b01      	subs	r3, #1
 80085da:	b29a      	uxth	r2, r3
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80085ee:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b40      	cmp	r3, #64	; 0x40
 8008602:	d10a      	bne.n	800861a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2200      	movs	r2, #0
 8008610:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff fcba 	bl	8007f8c <HAL_I2C_MemRxCpltCallback>
}
 8008618:	e01d      	b.n	8008656 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2212      	movs	r2, #18
 8008626:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f7fa f83f 	bl	80026ac <HAL_I2C_MasterRxCpltCallback>
}
 800862e:	e012      	b.n	8008656 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	691a      	ldr	r2, [r3, #16]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	b2d2      	uxtb	r2, r2
 800863c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864c:	b29b      	uxth	r3, r3
 800864e:	3b01      	subs	r3, #1
 8008650:	b29a      	uxth	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800865e:	b480      	push	{r7}
 8008660:	b083      	sub	sp, #12
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b40      	cmp	r3, #64	; 0x40
 8008670:	d117      	bne.n	80086a2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008676:	2b00      	cmp	r3, #0
 8008678:	d109      	bne.n	800868e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867e:	b2db      	uxtb	r3, r3
 8008680:	461a      	mov	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800868a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800868c:	e067      	b.n	800875e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008692:	b2db      	uxtb	r3, r3
 8008694:	f043 0301 	orr.w	r3, r3, #1
 8008698:	b2da      	uxtb	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	611a      	str	r2, [r3, #16]
}
 80086a0:	e05d      	b.n	800875e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80086aa:	d133      	bne.n	8008714 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	2b21      	cmp	r3, #33	; 0x21
 80086b6:	d109      	bne.n	80086cc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	461a      	mov	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80086c8:	611a      	str	r2, [r3, #16]
 80086ca:	e008      	b.n	80086de <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	f043 0301 	orr.w	r3, r3, #1
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d004      	beq.n	80086f0 <I2C_Master_SB+0x92>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d108      	bne.n	8008702 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d032      	beq.n	800875e <I2C_Master_SB+0x100>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d02d      	beq.n	800875e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008710:	605a      	str	r2, [r3, #4]
}
 8008712:	e024      	b.n	800875e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10e      	bne.n	800873a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008720:	b29b      	uxth	r3, r3
 8008722:	11db      	asrs	r3, r3, #7
 8008724:	b2db      	uxtb	r3, r3
 8008726:	f003 0306 	and.w	r3, r3, #6
 800872a:	b2db      	uxtb	r3, r3
 800872c:	f063 030f 	orn	r3, r3, #15
 8008730:	b2da      	uxtb	r2, r3
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	611a      	str	r2, [r3, #16]
}
 8008738:	e011      	b.n	800875e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800873e:	2b01      	cmp	r3, #1
 8008740:	d10d      	bne.n	800875e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008746:	b29b      	uxth	r3, r3
 8008748:	11db      	asrs	r3, r3, #7
 800874a:	b2db      	uxtb	r3, r3
 800874c:	f003 0306 	and.w	r3, r3, #6
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f063 030e 	orn	r3, r3, #14
 8008756:	b2da      	uxtb	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	611a      	str	r2, [r3, #16]
}
 800875e:	bf00      	nop
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008776:	b2da      	uxtb	r2, r3
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008782:	2b00      	cmp	r3, #0
 8008784:	d004      	beq.n	8008790 <I2C_Master_ADD10+0x26>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878c:	2b00      	cmp	r3, #0
 800878e:	d108      	bne.n	80087a2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00c      	beq.n	80087b2 <I2C_Master_ADD10+0x48>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d007      	beq.n	80087b2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087b0:	605a      	str	r2, [r3, #4]
  }
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80087be:	b480      	push	{r7}
 80087c0:	b091      	sub	sp, #68	; 0x44
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087da:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b22      	cmp	r3, #34	; 0x22
 80087e6:	f040 8169 	bne.w	8008abc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10f      	bne.n	8008812 <I2C_Master_ADDR+0x54>
 80087f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80087f6:	2b40      	cmp	r3, #64	; 0x40
 80087f8:	d10b      	bne.n	8008812 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087fa:	2300      	movs	r3, #0
 80087fc:	633b      	str	r3, [r7, #48]	; 0x30
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	633b      	str	r3, [r7, #48]	; 0x30
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	633b      	str	r3, [r7, #48]	; 0x30
 800880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008810:	e160      	b.n	8008ad4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008816:	2b00      	cmp	r3, #0
 8008818:	d11d      	bne.n	8008856 <I2C_Master_ADDR+0x98>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008822:	d118      	bne.n	8008856 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008824:	2300      	movs	r3, #0
 8008826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	681a      	ldr	r2, [r3, #0]
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008848:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	651a      	str	r2, [r3, #80]	; 0x50
 8008854:	e13e      	b.n	8008ad4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885a:	b29b      	uxth	r3, r3
 800885c:	2b00      	cmp	r3, #0
 800885e:	d113      	bne.n	8008888 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008860:	2300      	movs	r3, #0
 8008862:	62bb      	str	r3, [r7, #40]	; 0x28
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	695b      	ldr	r3, [r3, #20]
 800886a:	62bb      	str	r3, [r7, #40]	; 0x28
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	699b      	ldr	r3, [r3, #24]
 8008872:	62bb      	str	r3, [r7, #40]	; 0x28
 8008874:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008884:	601a      	str	r2, [r3, #0]
 8008886:	e115      	b.n	8008ab4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b01      	cmp	r3, #1
 8008890:	f040 808a 	bne.w	80089a8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8008894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008896:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800889a:	d137      	bne.n	800890c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088aa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ba:	d113      	bne.n	80088e4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088ca:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088cc:	2300      	movs	r3, #0
 80088ce:	627b      	str	r3, [r7, #36]	; 0x24
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	627b      	str	r3, [r7, #36]	; 0x24
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	627b      	str	r3, [r7, #36]	; 0x24
 80088e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e2:	e0e7      	b.n	8008ab4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088e4:	2300      	movs	r3, #0
 80088e6:	623b      	str	r3, [r7, #32]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	623b      	str	r3, [r7, #32]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	623b      	str	r3, [r7, #32]
 80088f8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	e0d3      	b.n	8008ab4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800890c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890e:	2b08      	cmp	r3, #8
 8008910:	d02e      	beq.n	8008970 <I2C_Master_ADDR+0x1b2>
 8008912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008914:	2b20      	cmp	r3, #32
 8008916:	d02b      	beq.n	8008970 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800891a:	2b12      	cmp	r3, #18
 800891c:	d102      	bne.n	8008924 <I2C_Master_ADDR+0x166>
 800891e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008920:	2b01      	cmp	r3, #1
 8008922:	d125      	bne.n	8008970 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008926:	2b04      	cmp	r3, #4
 8008928:	d00e      	beq.n	8008948 <I2C_Master_ADDR+0x18a>
 800892a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800892c:	2b02      	cmp	r3, #2
 800892e:	d00b      	beq.n	8008948 <I2C_Master_ADDR+0x18a>
 8008930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008932:	2b10      	cmp	r3, #16
 8008934:	d008      	beq.n	8008948 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	e007      	b.n	8008958 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008956:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008958:	2300      	movs	r3, #0
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	61fb      	str	r3, [r7, #28]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	61fb      	str	r3, [r7, #28]
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	e0a1      	b.n	8008ab4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800897e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008980:	2300      	movs	r3, #0
 8008982:	61bb      	str	r3, [r7, #24]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	61bb      	str	r3, [r7, #24]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	61bb      	str	r3, [r7, #24]
 8008994:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	e085      	b.n	8008ab4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ac:	b29b      	uxth	r3, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d14d      	bne.n	8008a4e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80089b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b4:	2b04      	cmp	r3, #4
 80089b6:	d016      	beq.n	80089e6 <I2C_Master_ADDR+0x228>
 80089b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d013      	beq.n	80089e6 <I2C_Master_ADDR+0x228>
 80089be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c0:	2b10      	cmp	r3, #16
 80089c2:	d010      	beq.n	80089e6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089d2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	e007      	b.n	80089f6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	681a      	ldr	r2, [r3, #0]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80089f4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a04:	d117      	bne.n	8008a36 <I2C_Master_ADDR+0x278>
 8008a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a0c:	d00b      	beq.n	8008a26 <I2C_Master_ADDR+0x268>
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d008      	beq.n	8008a26 <I2C_Master_ADDR+0x268>
 8008a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a16:	2b08      	cmp	r3, #8
 8008a18:	d005      	beq.n	8008a26 <I2C_Master_ADDR+0x268>
 8008a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a1c:	2b10      	cmp	r3, #16
 8008a1e:	d002      	beq.n	8008a26 <I2C_Master_ADDR+0x268>
 8008a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a22:	2b20      	cmp	r3, #32
 8008a24:	d107      	bne.n	8008a36 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a34:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a36:	2300      	movs	r3, #0
 8008a38:	617b      	str	r3, [r7, #20]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	695b      	ldr	r3, [r3, #20]
 8008a40:	617b      	str	r3, [r7, #20]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	617b      	str	r3, [r7, #20]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	e032      	b.n	8008ab4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a5c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a6c:	d117      	bne.n	8008a9e <I2C_Master_ADDR+0x2e0>
 8008a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a74:	d00b      	beq.n	8008a8e <I2C_Master_ADDR+0x2d0>
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d008      	beq.n	8008a8e <I2C_Master_ADDR+0x2d0>
 8008a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7e:	2b08      	cmp	r3, #8
 8008a80:	d005      	beq.n	8008a8e <I2C_Master_ADDR+0x2d0>
 8008a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a84:	2b10      	cmp	r3, #16
 8008a86:	d002      	beq.n	8008a8e <I2C_Master_ADDR+0x2d0>
 8008a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a8a:	2b20      	cmp	r3, #32
 8008a8c:	d107      	bne.n	8008a9e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685a      	ldr	r2, [r3, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a9c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	613b      	str	r3, [r7, #16]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	695b      	ldr	r3, [r3, #20]
 8008aa8:	613b      	str	r3, [r7, #16]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	613b      	str	r3, [r7, #16]
 8008ab2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8008aba:	e00b      	b.n	8008ad4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	60fb      	str	r3, [r7, #12]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	699b      	ldr	r3, [r3, #24]
 8008ace:	60fb      	str	r3, [r7, #12]
 8008ad0:	68fb      	ldr	r3, [r7, #12]
}
 8008ad2:	e7ff      	b.n	8008ad4 <I2C_Master_ADDR+0x316>
 8008ad4:	bf00      	nop
 8008ad6:	3744      	adds	r7, #68	; 0x44
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr

08008ae0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008aee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d02b      	beq.n	8008b52 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	781a      	ldrb	r2, [r3, #0]
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	3b01      	subs	r3, #1
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d114      	bne.n	8008b52 <I2C_SlaveTransmit_TXE+0x72>
 8008b28:	7bfb      	ldrb	r3, [r7, #15]
 8008b2a:	2b29      	cmp	r3, #41	; 0x29
 8008b2c:	d111      	bne.n	8008b52 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	685a      	ldr	r2, [r3, #4]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b3c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2221      	movs	r2, #33	; 0x21
 8008b42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2228      	movs	r2, #40	; 0x28
 8008b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7ff f9e7 	bl	8007f20 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008b52:	bf00      	nop
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d011      	beq.n	8008b90 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b70:	781a      	ldrb	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	1c5a      	adds	r2, r3, #1
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008baa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb0:	b29b      	uxth	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d02c      	beq.n	8008c10 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	691a      	ldr	r2, [r3, #16]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc0:	b2d2      	uxtb	r2, r2
 8008bc2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	3b01      	subs	r3, #1
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d114      	bne.n	8008c10 <I2C_SlaveReceive_RXNE+0x74>
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	2b2a      	cmp	r3, #42	; 0x2a
 8008bea:	d111      	bne.n	8008c10 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685a      	ldr	r2, [r3, #4]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bfa:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2222      	movs	r2, #34	; 0x22
 8008c00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2228      	movs	r2, #40	; 0x28
 8008c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7ff f992 	bl	8007f34 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008c10:	bf00      	nop
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d012      	beq.n	8008c50 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	691a      	ldr	r2, [r3, #16]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c34:	b2d2      	uxtb	r2, r2
 8008c36:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008c50:	bf00      	nop
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b084      	sub	sp, #16
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8008c66:	2300      	movs	r3, #0
 8008c68:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008c76:	2b28      	cmp	r3, #40	; 0x28
 8008c78:	d127      	bne.n	8008cca <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	685a      	ldr	r2, [r3, #4]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c88:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	089b      	lsrs	r3, r3, #2
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8008c96:	2301      	movs	r3, #1
 8008c98:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	09db      	lsrs	r3, r3, #7
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d103      	bne.n	8008cae <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	81bb      	strh	r3, [r7, #12]
 8008cac:	e002      	b.n	8008cb4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8008cbc:	89ba      	ldrh	r2, [r7, #12]
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7ff f940 	bl	8007f48 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008cc8:	e00e      	b.n	8008ce8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60bb      	str	r3, [r7, #8]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	60bb      	str	r3, [r7, #8]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	60bb      	str	r3, [r7, #8]
 8008cde:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008ce8:	bf00      	nop
 8008cea:	3710      	adds	r7, #16
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cfe:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008d0e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008d10:	2300      	movs	r3, #0
 8008d12:	60bb      	str	r3, [r7, #8]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	60bb      	str	r3, [r7, #8]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f042 0201 	orr.w	r2, r2, #1
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d3c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008d4c:	d172      	bne.n	8008e34 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	2b22      	cmp	r3, #34	; 0x22
 8008d52:	d002      	beq.n	8008d5a <I2C_Slave_STOPF+0x6a>
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	2b2a      	cmp	r3, #42	; 0x2a
 8008d58:	d135      	bne.n	8008dc6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d005      	beq.n	8008d7e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d76:	f043 0204 	orr.w	r2, r3, #4
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d8c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fd fbae 	bl	80064f4 <HAL_DMA_GetState>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	d049      	beq.n	8008e32 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	4a69      	ldr	r2, [pc, #420]	; (8008f48 <I2C_Slave_STOPF+0x258>)
 8008da4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fd f9f6 	bl	800619c <HAL_DMA_Abort_IT>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d03d      	beq.n	8008e32 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008dc4:	e035      	b.n	8008e32 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	b29a      	uxth	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d005      	beq.n	8008dea <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f043 0204 	orr.w	r2, r3, #4
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008df8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fd fb78 	bl	80064f4 <HAL_DMA_GetState>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d014      	beq.n	8008e34 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e0e:	4a4e      	ldr	r2, [pc, #312]	; (8008f48 <I2C_Slave_STOPF+0x258>)
 8008e10:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fd f9c0 	bl	800619c <HAL_DMA_Abort_IT>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d008      	beq.n	8008e34 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008e2c:	4610      	mov	r0, r2
 8008e2e:	4798      	blx	r3
 8008e30:	e000      	b.n	8008e34 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008e32:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d03e      	beq.n	8008ebc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d112      	bne.n	8008e72 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	691a      	ldr	r2, [r3, #16]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e56:	b2d2      	uxtb	r2, r2
 8008e58:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	1c5a      	adds	r2, r3, #1
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7c:	2b40      	cmp	r3, #64	; 0x40
 8008e7e:	d112      	bne.n	8008ea6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	691a      	ldr	r2, [r3, #16]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	b2d2      	uxtb	r2, r2
 8008e8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eaa:	b29b      	uxth	r3, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d005      	beq.n	8008ebc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb4:	f043 0204 	orr.w	r2, r3, #4
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f8b3 	bl	8009030 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008eca:	e039      	b.n	8008f40 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008ecc:	7bfb      	ldrb	r3, [r7, #15]
 8008ece:	2b2a      	cmp	r3, #42	; 0x2a
 8008ed0:	d109      	bne.n	8008ee6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2228      	movs	r2, #40	; 0x28
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f7ff f827 	bl	8007f34 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b28      	cmp	r3, #40	; 0x28
 8008ef0:	d111      	bne.n	8008f16 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	4a15      	ldr	r2, [pc, #84]	; (8008f4c <I2C_Slave_STOPF+0x25c>)
 8008ef6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2220      	movs	r2, #32
 8008f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7ff f828 	bl	8007f64 <HAL_I2C_ListenCpltCallback>
}
 8008f14:	e014      	b.n	8008f40 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	2b22      	cmp	r3, #34	; 0x22
 8008f1c:	d002      	beq.n	8008f24 <I2C_Slave_STOPF+0x234>
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	2b22      	cmp	r3, #34	; 0x22
 8008f22:	d10d      	bne.n	8008f40 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2220      	movs	r2, #32
 8008f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7fe fffa 	bl	8007f34 <HAL_I2C_SlaveRxCpltCallback>
}
 8008f40:	bf00      	nop
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	08009831 	.word	0x08009831
 8008f4c:	ffff0000 	.word	0xffff0000

08008f50 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2b08      	cmp	r3, #8
 8008f6a:	d002      	beq.n	8008f72 <I2C_Slave_AF+0x22>
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b20      	cmp	r3, #32
 8008f70:	d129      	bne.n	8008fc6 <I2C_Slave_AF+0x76>
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
 8008f74:	2b28      	cmp	r3, #40	; 0x28
 8008f76:	d126      	bne.n	8008fc6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	4a2c      	ldr	r2, [pc, #176]	; (800902c <I2C_Slave_AF+0xdc>)
 8008f7c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008f8c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f96:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fa6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2220      	movs	r2, #32
 8008fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f7fe ffd0 	bl	8007f64 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8008fc4:	e02e      	b.n	8009024 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8008fc6:	7bfb      	ldrb	r3, [r7, #15]
 8008fc8:	2b21      	cmp	r3, #33	; 0x21
 8008fca:	d126      	bne.n	800901a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a17      	ldr	r2, [pc, #92]	; (800902c <I2C_Slave_AF+0xdc>)
 8008fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2221      	movs	r2, #33	; 0x21
 8008fd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2220      	movs	r2, #32
 8008fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	685a      	ldr	r2, [r3, #4]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008ff6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009000:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009010:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f7fe ff84 	bl	8007f20 <HAL_I2C_SlaveTxCpltCallback>
}
 8009018:	e004      	b.n	8009024 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009022:	615a      	str	r2, [r3, #20]
}
 8009024:	bf00      	nop
 8009026:	3710      	adds	r7, #16
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	ffff0000 	.word	0xffff0000

08009030 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800903e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009046:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	2b10      	cmp	r3, #16
 800904c:	d002      	beq.n	8009054 <I2C_ITError+0x24>
 800904e:	7bbb      	ldrb	r3, [r7, #14]
 8009050:	2b40      	cmp	r3, #64	; 0x40
 8009052:	d10a      	bne.n	800906a <I2C_ITError+0x3a>
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	2b22      	cmp	r3, #34	; 0x22
 8009058:	d107      	bne.n	800906a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	681a      	ldr	r2, [r3, #0]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009068:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800906a:	7bfb      	ldrb	r3, [r7, #15]
 800906c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009070:	2b28      	cmp	r3, #40	; 0x28
 8009072:	d107      	bne.n	8009084 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2228      	movs	r2, #40	; 0x28
 800907e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009082:	e015      	b.n	80090b0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800908e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009092:	d00a      	beq.n	80090aa <I2C_ITError+0x7a>
 8009094:	7bfb      	ldrb	r3, [r7, #15]
 8009096:	2b60      	cmp	r3, #96	; 0x60
 8009098:	d007      	beq.n	80090aa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2220      	movs	r2, #32
 800909e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80090ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090be:	d162      	bne.n	8009186 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	685a      	ldr	r2, [r3, #4]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090ce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d020      	beq.n	8009120 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e2:	4a6a      	ldr	r2, [pc, #424]	; (800928c <I2C_ITError+0x25c>)
 80090e4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fd f856 	bl	800619c <HAL_DMA_Abort_IT>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	f000 8089 	beq.w	800920a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f022 0201 	bic.w	r2, r2, #1
 8009106:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2220      	movs	r2, #32
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800911a:	4610      	mov	r0, r2
 800911c:	4798      	blx	r3
 800911e:	e074      	b.n	800920a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009124:	4a59      	ldr	r2, [pc, #356]	; (800928c <I2C_ITError+0x25c>)
 8009126:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912c:	4618      	mov	r0, r3
 800912e:	f7fd f835 	bl	800619c <HAL_DMA_Abort_IT>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d068      	beq.n	800920a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009142:	2b40      	cmp	r3, #64	; 0x40
 8009144:	d10b      	bne.n	800915e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	691a      	ldr	r2, [r3, #16]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009150:	b2d2      	uxtb	r2, r2
 8009152:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009158:	1c5a      	adds	r2, r3, #1
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	681a      	ldr	r2, [r3, #0]
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f022 0201 	bic.w	r2, r2, #1
 800916c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2220      	movs	r2, #32
 8009172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800917a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800917c:	687a      	ldr	r2, [r7, #4]
 800917e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009180:	4610      	mov	r0, r2
 8009182:	4798      	blx	r3
 8009184:	e041      	b.n	800920a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b60      	cmp	r3, #96	; 0x60
 8009190:	d125      	bne.n	80091de <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2220      	movs	r2, #32
 8009196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091aa:	2b40      	cmp	r3, #64	; 0x40
 80091ac:	d10b      	bne.n	80091c6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	691a      	ldr	r2, [r3, #16]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	b2d2      	uxtb	r2, r2
 80091ba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	1c5a      	adds	r2, r3, #1
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f022 0201 	bic.w	r2, r2, #1
 80091d4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7fe feec 	bl	8007fb4 <HAL_I2C_AbortCpltCallback>
 80091dc:	e015      	b.n	800920a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	695b      	ldr	r3, [r3, #20]
 80091e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e8:	2b40      	cmp	r3, #64	; 0x40
 80091ea:	d10b      	bne.n	8009204 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	691a      	ldr	r2, [r3, #16]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f6:	b2d2      	uxtb	r2, r2
 80091f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	1c5a      	adds	r2, r3, #1
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	f7fe fecb 	bl	8007fa0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	f003 0301 	and.w	r3, r3, #1
 8009216:	2b00      	cmp	r3, #0
 8009218:	d10e      	bne.n	8009238 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8009220:	2b00      	cmp	r3, #0
 8009222:	d109      	bne.n	8009238 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800922a:	2b00      	cmp	r3, #0
 800922c:	d104      	bne.n	8009238 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8009234:	2b00      	cmp	r3, #0
 8009236:	d007      	beq.n	8009248 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8009246:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800924e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b04      	cmp	r3, #4
 800925a:	d113      	bne.n	8009284 <I2C_ITError+0x254>
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	2b28      	cmp	r3, #40	; 0x28
 8009260:	d110      	bne.n	8009284 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a0a      	ldr	r2, [pc, #40]	; (8009290 <I2C_ITError+0x260>)
 8009266:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2220      	movs	r2, #32
 8009272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7fe fe70 	bl	8007f64 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009284:	bf00      	nop
 8009286:	3710      	adds	r7, #16
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	08009831 	.word	0x08009831
 8009290:	ffff0000 	.word	0xffff0000

08009294 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b088      	sub	sp, #32
 8009298:	af02      	add	r7, sp, #8
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	607a      	str	r2, [r7, #4]
 800929e:	603b      	str	r3, [r7, #0]
 80092a0:	460b      	mov	r3, r1
 80092a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	d006      	beq.n	80092be <I2C_MasterRequestWrite+0x2a>
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d003      	beq.n	80092be <I2C_MasterRequestWrite+0x2a>
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80092bc:	d108      	bne.n	80092d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092cc:	601a      	str	r2, [r3, #0]
 80092ce:	e00b      	b.n	80092e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d4:	2b12      	cmp	r3, #18
 80092d6:	d107      	bne.n	80092e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 fb43 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d00d      	beq.n	800931c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800930a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800930e:	d103      	bne.n	8009318 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009316:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e035      	b.n	8009388 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009324:	d108      	bne.n	8009338 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009326:	897b      	ldrh	r3, [r7, #10]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	461a      	mov	r2, r3
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009334:	611a      	str	r2, [r3, #16]
 8009336:	e01b      	b.n	8009370 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009338:	897b      	ldrh	r3, [r7, #10]
 800933a:	11db      	asrs	r3, r3, #7
 800933c:	b2db      	uxtb	r3, r3
 800933e:	f003 0306 	and.w	r3, r3, #6
 8009342:	b2db      	uxtb	r3, r3
 8009344:	f063 030f 	orn	r3, r3, #15
 8009348:	b2da      	uxtb	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	490e      	ldr	r1, [pc, #56]	; (8009390 <I2C_MasterRequestWrite+0xfc>)
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 fb69 	bl	8009a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e010      	b.n	8009388 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009366:	897b      	ldrh	r3, [r7, #10]
 8009368:	b2da      	uxtb	r2, r3
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	4907      	ldr	r1, [pc, #28]	; (8009394 <I2C_MasterRequestWrite+0x100>)
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f000 fb59 	bl	8009a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009382:	2301      	movs	r3, #1
 8009384:	e000      	b.n	8009388 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	00010008 	.word	0x00010008
 8009394:	00010002 	.word	0x00010002

08009398 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b088      	sub	sp, #32
 800939c:	af02      	add	r7, sp, #8
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	607a      	str	r2, [r7, #4]
 80093a2:	603b      	str	r3, [r7, #0]
 80093a4:	460b      	mov	r3, r1
 80093a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80093bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	2b08      	cmp	r3, #8
 80093c2:	d006      	beq.n	80093d2 <I2C_MasterRequestRead+0x3a>
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d003      	beq.n	80093d2 <I2C_MasterRequestRead+0x3a>
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80093d0:	d108      	bne.n	80093e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093e0:	601a      	str	r2, [r3, #0]
 80093e2:	e00b      	b.n	80093fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e8:	2b11      	cmp	r3, #17
 80093ea:	d107      	bne.n	80093fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	9300      	str	r3, [sp, #0]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009408:	68f8      	ldr	r0, [r7, #12]
 800940a:	f000 fab9 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00d      	beq.n	8009430 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800941e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009422:	d103      	bne.n	800942c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800942a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e079      	b.n	8009524 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009438:	d108      	bne.n	800944c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800943a:	897b      	ldrh	r3, [r7, #10]
 800943c:	b2db      	uxtb	r3, r3
 800943e:	f043 0301 	orr.w	r3, r3, #1
 8009442:	b2da      	uxtb	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	611a      	str	r2, [r3, #16]
 800944a:	e05f      	b.n	800950c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800944c:	897b      	ldrh	r3, [r7, #10]
 800944e:	11db      	asrs	r3, r3, #7
 8009450:	b2db      	uxtb	r3, r3
 8009452:	f003 0306 	and.w	r3, r3, #6
 8009456:	b2db      	uxtb	r3, r3
 8009458:	f063 030f 	orn	r3, r3, #15
 800945c:	b2da      	uxtb	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	4930      	ldr	r1, [pc, #192]	; (800952c <I2C_MasterRequestRead+0x194>)
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f000 fadf 	bl	8009a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e054      	b.n	8009524 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800947a:	897b      	ldrh	r3, [r7, #10]
 800947c:	b2da      	uxtb	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	4929      	ldr	r1, [pc, #164]	; (8009530 <I2C_MasterRequestRead+0x198>)
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 facf 	bl	8009a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e044      	b.n	8009524 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	613b      	str	r3, [r7, #16]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	613b      	str	r3, [r7, #16]
 80094ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 fa57 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00d      	beq.n	80094f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094e6:	d103      	bne.n	80094f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	e017      	b.n	8009524 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80094f4:	897b      	ldrh	r3, [r7, #10]
 80094f6:	11db      	asrs	r3, r3, #7
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	f003 0306 	and.w	r3, r3, #6
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	f063 030e 	orn	r3, r3, #14
 8009504:	b2da      	uxtb	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	4907      	ldr	r1, [pc, #28]	; (8009530 <I2C_MasterRequestRead+0x198>)
 8009512:	68f8      	ldr	r0, [r7, #12]
 8009514:	f000 fa8b 	bl	8009a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e000      	b.n	8009524 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3718      	adds	r7, #24
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}
 800952c:	00010008 	.word	0x00010008
 8009530:	00010002 	.word	0x00010002

08009534 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af02      	add	r7, sp, #8
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	4608      	mov	r0, r1
 800953e:	4611      	mov	r1, r2
 8009540:	461a      	mov	r2, r3
 8009542:	4603      	mov	r3, r0
 8009544:	817b      	strh	r3, [r7, #10]
 8009546:	460b      	mov	r3, r1
 8009548:	813b      	strh	r3, [r7, #8]
 800954a:	4613      	mov	r3, r2
 800954c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800955c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800955e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	2200      	movs	r2, #0
 8009566:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f000 fa08 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00d      	beq.n	8009592 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009584:	d103      	bne.n	800958e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f44f 7200 	mov.w	r2, #512	; 0x200
 800958c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800958e:	2303      	movs	r3, #3
 8009590:	e05f      	b.n	8009652 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009592:	897b      	ldrh	r3, [r7, #10]
 8009594:	b2db      	uxtb	r3, r3
 8009596:	461a      	mov	r2, r3
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80095a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	6a3a      	ldr	r2, [r7, #32]
 80095a6:	492d      	ldr	r1, [pc, #180]	; (800965c <I2C_RequestMemoryWrite+0x128>)
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fa40 	bl	8009a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e04c      	b.n	8009652 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095b8:	2300      	movs	r3, #0
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	617b      	str	r3, [r7, #20]
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	699b      	ldr	r3, [r3, #24]
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095d0:	6a39      	ldr	r1, [r7, #32]
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 faaa 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d00d      	beq.n	80095fa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d107      	bne.n	80095f6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e02b      	b.n	8009652 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095fa:	88fb      	ldrh	r3, [r7, #6]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d105      	bne.n	800960c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009600:	893b      	ldrh	r3, [r7, #8]
 8009602:	b2da      	uxtb	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	611a      	str	r2, [r3, #16]
 800960a:	e021      	b.n	8009650 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800960c:	893b      	ldrh	r3, [r7, #8]
 800960e:	0a1b      	lsrs	r3, r3, #8
 8009610:	b29b      	uxth	r3, r3
 8009612:	b2da      	uxtb	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800961a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800961c:	6a39      	ldr	r1, [r7, #32]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fa84 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00d      	beq.n	8009646 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962e:	2b04      	cmp	r3, #4
 8009630:	d107      	bne.n	8009642 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009640:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e005      	b.n	8009652 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009646:	893b      	ldrh	r3, [r7, #8]
 8009648:	b2da      	uxtb	r2, r3
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009650:	2300      	movs	r3, #0
}
 8009652:	4618      	mov	r0, r3
 8009654:	3718      	adds	r7, #24
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	00010002 	.word	0x00010002

08009660 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b088      	sub	sp, #32
 8009664:	af02      	add	r7, sp, #8
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	4608      	mov	r0, r1
 800966a:	4611      	mov	r1, r2
 800966c:	461a      	mov	r2, r3
 800966e:	4603      	mov	r3, r0
 8009670:	817b      	strh	r3, [r7, #10]
 8009672:	460b      	mov	r3, r1
 8009674:	813b      	strh	r3, [r7, #8]
 8009676:	4613      	mov	r3, r2
 8009678:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009688:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009698:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	6a3b      	ldr	r3, [r7, #32]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 f96a 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00d      	beq.n	80096ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096c0:	d103      	bne.n	80096ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096c8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80096ca:	2303      	movs	r3, #3
 80096cc:	e0aa      	b.n	8009824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80096ce:	897b      	ldrh	r3, [r7, #10]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	461a      	mov	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80096dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e0:	6a3a      	ldr	r2, [r7, #32]
 80096e2:	4952      	ldr	r1, [pc, #328]	; (800982c <I2C_RequestMemoryRead+0x1cc>)
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f000 f9a2 	bl	8009a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096ea:	4603      	mov	r3, r0
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e097      	b.n	8009824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096f4:	2300      	movs	r3, #0
 80096f6:	617b      	str	r3, [r7, #20]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	695b      	ldr	r3, [r3, #20]
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	617b      	str	r3, [r7, #20]
 8009708:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800970a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800970c:	6a39      	ldr	r1, [r7, #32]
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 fa0c 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00d      	beq.n	8009736 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	2b04      	cmp	r3, #4
 8009720:	d107      	bne.n	8009732 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009730:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e076      	b.n	8009824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009736:	88fb      	ldrh	r3, [r7, #6]
 8009738:	2b01      	cmp	r3, #1
 800973a:	d105      	bne.n	8009748 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800973c:	893b      	ldrh	r3, [r7, #8]
 800973e:	b2da      	uxtb	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	611a      	str	r2, [r3, #16]
 8009746:	e021      	b.n	800978c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009748:	893b      	ldrh	r3, [r7, #8]
 800974a:	0a1b      	lsrs	r3, r3, #8
 800974c:	b29b      	uxth	r3, r3
 800974e:	b2da      	uxtb	r2, r3
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009758:	6a39      	ldr	r1, [r7, #32]
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f000 f9e6 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d00d      	beq.n	8009782 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976a:	2b04      	cmp	r3, #4
 800976c:	d107      	bne.n	800977e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800977c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e050      	b.n	8009824 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009782:	893b      	ldrh	r3, [r7, #8]
 8009784:	b2da      	uxtb	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800978c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800978e:	6a39      	ldr	r1, [r7, #32]
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 f9cb 	bl	8009b2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00d      	beq.n	80097b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	2b04      	cmp	r3, #4
 80097a2:	d107      	bne.n	80097b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80097b4:	2301      	movs	r3, #1
 80097b6:	e035      	b.n	8009824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 f8d3 	bl	8009980 <I2C_WaitOnFlagUntilTimeout>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00d      	beq.n	80097fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097ee:	d103      	bne.n	80097f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80097f8:	2303      	movs	r3, #3
 80097fa:	e013      	b.n	8009824 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80097fc:	897b      	ldrh	r3, [r7, #10]
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	f043 0301 	orr.w	r3, r3, #1
 8009804:	b2da      	uxtb	r2, r3
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800980c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980e:	6a3a      	ldr	r2, [r7, #32]
 8009810:	4906      	ldr	r1, [pc, #24]	; (800982c <I2C_RequestMemoryRead+0x1cc>)
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 f90b 	bl	8009a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d001      	beq.n	8009822 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	00010002 	.word	0x00010002

08009830 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009840:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009848:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800984a:	4b4b      	ldr	r3, [pc, #300]	; (8009978 <I2C_DMAAbort+0x148>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	08db      	lsrs	r3, r3, #3
 8009850:	4a4a      	ldr	r2, [pc, #296]	; (800997c <I2C_DMAAbort+0x14c>)
 8009852:	fba2 2303 	umull	r2, r3, r2, r3
 8009856:	0a1a      	lsrs	r2, r3, #8
 8009858:	4613      	mov	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	00da      	lsls	r2, r3, #3
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d106      	bne.n	8009878 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986e:	f043 0220 	orr.w	r2, r3, #32
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8009876:	e00a      	b.n	800988e <I2C_DMAAbort+0x5e>
    }
    count--;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3b01      	subs	r3, #1
 800987c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800988c:	d0ea      	beq.n	8009864 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800989a:	2200      	movs	r2, #0
 800989c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d003      	beq.n	80098ae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098aa:	2200      	movs	r2, #0
 80098ac:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098bc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	2200      	movs	r2, #0
 80098c2:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d003      	beq.n	80098d4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098d0:	2200      	movs	r2, #0
 80098d2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d003      	beq.n	80098e4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098e0:	2200      	movs	r2, #0
 80098e2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f022 0201 	bic.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	2b60      	cmp	r3, #96	; 0x60
 80098fe:	d10e      	bne.n	800991e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	2220      	movs	r2, #32
 8009904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	2200      	movs	r2, #0
 800990c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	2200      	movs	r2, #0
 8009914:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8009916:	6978      	ldr	r0, [r7, #20]
 8009918:	f7fe fb4c 	bl	8007fb4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800991c:	e027      	b.n	800996e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800991e:	7cfb      	ldrb	r3, [r7, #19]
 8009920:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009924:	2b28      	cmp	r3, #40	; 0x28
 8009926:	d117      	bne.n	8009958 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f042 0201 	orr.w	r2, r2, #1
 8009936:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009946:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8009948:	697b      	ldr	r3, [r7, #20]
 800994a:	2200      	movs	r2, #0
 800994c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	2228      	movs	r2, #40	; 0x28
 8009952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009956:	e007      	b.n	8009968 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	2220      	movs	r2, #32
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	2200      	movs	r2, #0
 8009964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8009968:	6978      	ldr	r0, [r7, #20]
 800996a:	f7fe fb19 	bl	8007fa0 <HAL_I2C_ErrorCallback>
}
 800996e:	bf00      	nop
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	20000000 	.word	0x20000000
 800997c:	14f8b589 	.word	0x14f8b589

08009980 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	4613      	mov	r3, r2
 800998e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009990:	e025      	b.n	80099de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009998:	d021      	beq.n	80099de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800999a:	f7fb fd65 	bl	8005468 <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	69bb      	ldr	r3, [r7, #24]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	683a      	ldr	r2, [r7, #0]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d302      	bcc.n	80099b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d116      	bne.n	80099de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	2220      	movs	r2, #32
 80099ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	2200      	movs	r2, #0
 80099c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ca:	f043 0220 	orr.w	r2, r3, #32
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e023      	b.n	8009a26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	0c1b      	lsrs	r3, r3, #16
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d10d      	bne.n	8009a04 <I2C_WaitOnFlagUntilTimeout+0x84>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	43da      	mvns	r2, r3
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	4013      	ands	r3, r2
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	bf0c      	ite	eq
 80099fa:	2301      	moveq	r3, #1
 80099fc:	2300      	movne	r3, #0
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	461a      	mov	r2, r3
 8009a02:	e00c      	b.n	8009a1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	43da      	mvns	r2, r3
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bf0c      	ite	eq
 8009a16:	2301      	moveq	r3, #1
 8009a18:	2300      	movne	r3, #0
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	79fb      	ldrb	r3, [r7, #7]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d0b6      	beq.n	8009992 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b084      	sub	sp, #16
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	60f8      	str	r0, [r7, #12]
 8009a36:	60b9      	str	r1, [r7, #8]
 8009a38:	607a      	str	r2, [r7, #4]
 8009a3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009a3c:	e051      	b.n	8009ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	695b      	ldr	r3, [r3, #20]
 8009a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a4c:	d123      	bne.n	8009a96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009a66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	2220      	movs	r2, #32
 8009a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a82:	f043 0204 	orr.w	r2, r3, #4
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e046      	b.n	8009b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a9c:	d021      	beq.n	8009ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a9e:	f7fb fce3 	bl	8005468 <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d302      	bcc.n	8009ab4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d116      	bne.n	8009ae2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2220      	movs	r2, #32
 8009abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ace:	f043 0220 	orr.w	r2, r3, #32
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e020      	b.n	8009b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	0c1b      	lsrs	r3, r3, #16
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d10c      	bne.n	8009b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	43da      	mvns	r2, r3
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	4013      	ands	r3, r2
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	bf14      	ite	ne
 8009afe:	2301      	movne	r3, #1
 8009b00:	2300      	moveq	r3, #0
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	e00b      	b.n	8009b1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	699b      	ldr	r3, [r3, #24]
 8009b0c:	43da      	mvns	r2, r3
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	4013      	ands	r3, r2
 8009b12:	b29b      	uxth	r3, r3
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	bf14      	ite	ne
 8009b18:	2301      	movne	r3, #1
 8009b1a:	2300      	moveq	r3, #0
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d18d      	bne.n	8009a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b38:	e02d      	b.n	8009b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 f900 	bl	8009d40 <I2C_IsAcknowledgeFailed>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e02d      	b.n	8009ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b50:	d021      	beq.n	8009b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b52:	f7fb fc89 	bl	8005468 <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	1ad3      	subs	r3, r2, r3
 8009b5c:	68ba      	ldr	r2, [r7, #8]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d302      	bcc.n	8009b68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d116      	bne.n	8009b96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	2220      	movs	r2, #32
 8009b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	f043 0220 	orr.w	r2, r3, #32
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e007      	b.n	8009ba6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ba0:	2b80      	cmp	r3, #128	; 0x80
 8009ba2:	d1ca      	bne.n	8009b3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3710      	adds	r7, #16
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}

08009bae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bae:	b580      	push	{r7, lr}
 8009bb0:	b084      	sub	sp, #16
 8009bb2:	af00      	add	r7, sp, #0
 8009bb4:	60f8      	str	r0, [r7, #12]
 8009bb6:	60b9      	str	r1, [r7, #8]
 8009bb8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009bba:	e02d      	b.n	8009c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 f8bf 	bl	8009d40 <I2C_IsAcknowledgeFailed>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e02d      	b.n	8009c28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd2:	d021      	beq.n	8009c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bd4:	f7fb fc48 	bl	8005468 <HAL_GetTick>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d302      	bcc.n	8009bea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d116      	bne.n	8009c18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c04:	f043 0220 	orr.w	r2, r3, #32
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e007      	b.n	8009c28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	695b      	ldr	r3, [r3, #20]
 8009c1e:	f003 0304 	and.w	r3, r3, #4
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	d1ca      	bne.n	8009bbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8009c3c:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	08db      	lsrs	r3, r3, #3
 8009c42:	4a13      	ldr	r2, [pc, #76]	; (8009c90 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8009c44:	fba2 2303 	umull	r2, r3, r2, r3
 8009c48:	0a1a      	lsrs	r2, r3, #8
 8009c4a:	4613      	mov	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	4413      	add	r3, r2
 8009c50:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3b01      	subs	r3, #1
 8009c56:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d107      	bne.n	8009c6e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c62:	f043 0220 	orr.w	r2, r3, #32
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e008      	b.n	8009c80 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c7c:	d0e9      	beq.n	8009c52 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	20000000 	.word	0x20000000
 8009c90:	14f8b589 	.word	0x14f8b589

08009c94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ca0:	e042      	b.n	8009d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	695b      	ldr	r3, [r3, #20]
 8009ca8:	f003 0310 	and.w	r3, r3, #16
 8009cac:	2b10      	cmp	r3, #16
 8009cae:	d119      	bne.n	8009ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f06f 0210 	mvn.w	r2, #16
 8009cb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2220      	movs	r2, #32
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e029      	b.n	8009d38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ce4:	f7fb fbc0 	bl	8005468 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d302      	bcc.n	8009cfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d116      	bne.n	8009d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2220      	movs	r2, #32
 8009d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d14:	f043 0220 	orr.w	r2, r3, #32
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e007      	b.n	8009d38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d32:	2b40      	cmp	r3, #64	; 0x40
 8009d34:	d1b5      	bne.n	8009ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}

08009d40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d56:	d11b      	bne.n	8009d90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2220      	movs	r2, #32
 8009d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7c:	f043 0204 	orr.w	r2, r3, #4
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e000      	b.n	8009d92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009d90:	2300      	movs	r3, #0
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	370c      	adds	r7, #12
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr

08009d9e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8009d9e:	b480      	push	{r7}
 8009da0:	b083      	sub	sp, #12
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009daa:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009dae:	d103      	bne.n	8009db8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8009db6:	e007      	b.n	8009dc8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009dc0:	d102      	bne.n	8009dc8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2208      	movs	r2, #8
 8009dc6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d101      	bne.n	8009de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e267      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d075      	beq.n	8009ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009df2:	4b88      	ldr	r3, [pc, #544]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	f003 030c 	and.w	r3, r3, #12
 8009dfa:	2b04      	cmp	r3, #4
 8009dfc:	d00c      	beq.n	8009e18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009dfe:	4b85      	ldr	r3, [pc, #532]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009e06:	2b08      	cmp	r3, #8
 8009e08:	d112      	bne.n	8009e30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e0a:	4b82      	ldr	r3, [pc, #520]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e16:	d10b      	bne.n	8009e30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e18:	4b7e      	ldr	r3, [pc, #504]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d05b      	beq.n	8009edc <HAL_RCC_OscConfig+0x108>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d157      	bne.n	8009edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e242      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e38:	d106      	bne.n	8009e48 <HAL_RCC_OscConfig+0x74>
 8009e3a:	4b76      	ldr	r3, [pc, #472]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a75      	ldr	r2, [pc, #468]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	e01d      	b.n	8009e84 <HAL_RCC_OscConfig+0xb0>
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e50:	d10c      	bne.n	8009e6c <HAL_RCC_OscConfig+0x98>
 8009e52:	4b70      	ldr	r3, [pc, #448]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a6f      	ldr	r2, [pc, #444]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	4b6d      	ldr	r3, [pc, #436]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a6c      	ldr	r2, [pc, #432]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e68:	6013      	str	r3, [r2, #0]
 8009e6a:	e00b      	b.n	8009e84 <HAL_RCC_OscConfig+0xb0>
 8009e6c:	4b69      	ldr	r3, [pc, #420]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a68      	ldr	r2, [pc, #416]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	4b66      	ldr	r3, [pc, #408]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a65      	ldr	r2, [pc, #404]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d013      	beq.n	8009eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e8c:	f7fb faec 	bl	8005468 <HAL_GetTick>
 8009e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e92:	e008      	b.n	8009ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e94:	f7fb fae8 	bl	8005468 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	2b64      	cmp	r3, #100	; 0x64
 8009ea0:	d901      	bls.n	8009ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e207      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ea6:	4b5b      	ldr	r3, [pc, #364]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0f0      	beq.n	8009e94 <HAL_RCC_OscConfig+0xc0>
 8009eb2:	e014      	b.n	8009ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eb4:	f7fb fad8 	bl	8005468 <HAL_GetTick>
 8009eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eba:	e008      	b.n	8009ece <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ebc:	f7fb fad4 	bl	8005468 <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	2b64      	cmp	r3, #100	; 0x64
 8009ec8:	d901      	bls.n	8009ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e1f3      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ece:	4b51      	ldr	r3, [pc, #324]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d1f0      	bne.n	8009ebc <HAL_RCC_OscConfig+0xe8>
 8009eda:	e000      	b.n	8009ede <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d063      	beq.n	8009fb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009eea:	4b4a      	ldr	r3, [pc, #296]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	f003 030c 	and.w	r3, r3, #12
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00b      	beq.n	8009f0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ef6:	4b47      	ldr	r3, [pc, #284]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009efe:	2b08      	cmp	r3, #8
 8009f00:	d11c      	bne.n	8009f3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009f02:	4b44      	ldr	r3, [pc, #272]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d116      	bne.n	8009f3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f0e:	4b41      	ldr	r3, [pc, #260]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d005      	beq.n	8009f26 <HAL_RCC_OscConfig+0x152>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d001      	beq.n	8009f26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e1c7      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f26:	4b3b      	ldr	r3, [pc, #236]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	691b      	ldr	r3, [r3, #16]
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	4937      	ldr	r1, [pc, #220]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009f36:	4313      	orrs	r3, r2
 8009f38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f3a:	e03a      	b.n	8009fb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d020      	beq.n	8009f86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f44:	4b34      	ldr	r3, [pc, #208]	; (800a018 <HAL_RCC_OscConfig+0x244>)
 8009f46:	2201      	movs	r2, #1
 8009f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f4a:	f7fb fa8d 	bl	8005468 <HAL_GetTick>
 8009f4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f50:	e008      	b.n	8009f64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f52:	f7fb fa89 	bl	8005468 <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d901      	bls.n	8009f64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e1a8      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f64:	4b2b      	ldr	r3, [pc, #172]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 0302 	and.w	r3, r3, #2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d0f0      	beq.n	8009f52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f70:	4b28      	ldr	r3, [pc, #160]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	00db      	lsls	r3, r3, #3
 8009f7e:	4925      	ldr	r1, [pc, #148]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009f80:	4313      	orrs	r3, r2
 8009f82:	600b      	str	r3, [r1, #0]
 8009f84:	e015      	b.n	8009fb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f86:	4b24      	ldr	r3, [pc, #144]	; (800a018 <HAL_RCC_OscConfig+0x244>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f8c:	f7fb fa6c 	bl	8005468 <HAL_GetTick>
 8009f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f92:	e008      	b.n	8009fa6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f94:	f7fb fa68 	bl	8005468 <HAL_GetTick>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	d901      	bls.n	8009fa6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e187      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009fa6:	4b1b      	ldr	r3, [pc, #108]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0302 	and.w	r3, r3, #2
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d1f0      	bne.n	8009f94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f003 0308 	and.w	r3, r3, #8
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d036      	beq.n	800a02c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	695b      	ldr	r3, [r3, #20]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d016      	beq.n	8009ff4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fc6:	4b15      	ldr	r3, [pc, #84]	; (800a01c <HAL_RCC_OscConfig+0x248>)
 8009fc8:	2201      	movs	r2, #1
 8009fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fcc:	f7fb fa4c 	bl	8005468 <HAL_GetTick>
 8009fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fd2:	e008      	b.n	8009fe6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fd4:	f7fb fa48 	bl	8005468 <HAL_GetTick>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	693b      	ldr	r3, [r7, #16]
 8009fdc:	1ad3      	subs	r3, r2, r3
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d901      	bls.n	8009fe6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	e167      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fe6:	4b0b      	ldr	r3, [pc, #44]	; (800a014 <HAL_RCC_OscConfig+0x240>)
 8009fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d0f0      	beq.n	8009fd4 <HAL_RCC_OscConfig+0x200>
 8009ff2:	e01b      	b.n	800a02c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ff4:	4b09      	ldr	r3, [pc, #36]	; (800a01c <HAL_RCC_OscConfig+0x248>)
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ffa:	f7fb fa35 	bl	8005468 <HAL_GetTick>
 8009ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a000:	e00e      	b.n	800a020 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a002:	f7fb fa31 	bl	8005468 <HAL_GetTick>
 800a006:	4602      	mov	r2, r0
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	2b02      	cmp	r3, #2
 800a00e:	d907      	bls.n	800a020 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e150      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
 800a014:	40023800 	.word	0x40023800
 800a018:	42470000 	.word	0x42470000
 800a01c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a020:	4b88      	ldr	r3, [pc, #544]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a022:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a024:	f003 0302 	and.w	r3, r3, #2
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d1ea      	bne.n	800a002 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 0304 	and.w	r3, r3, #4
 800a034:	2b00      	cmp	r3, #0
 800a036:	f000 8097 	beq.w	800a168 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a03a:	2300      	movs	r3, #0
 800a03c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a03e:	4b81      	ldr	r3, [pc, #516]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a046:	2b00      	cmp	r3, #0
 800a048:	d10f      	bne.n	800a06a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a04a:	2300      	movs	r3, #0
 800a04c:	60bb      	str	r3, [r7, #8]
 800a04e:	4b7d      	ldr	r3, [pc, #500]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	4a7c      	ldr	r2, [pc, #496]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a058:	6413      	str	r3, [r2, #64]	; 0x40
 800a05a:	4b7a      	ldr	r3, [pc, #488]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a062:	60bb      	str	r3, [r7, #8]
 800a064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a066:	2301      	movs	r3, #1
 800a068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a06a:	4b77      	ldr	r3, [pc, #476]	; (800a248 <HAL_RCC_OscConfig+0x474>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a072:	2b00      	cmp	r3, #0
 800a074:	d118      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a076:	4b74      	ldr	r3, [pc, #464]	; (800a248 <HAL_RCC_OscConfig+0x474>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4a73      	ldr	r2, [pc, #460]	; (800a248 <HAL_RCC_OscConfig+0x474>)
 800a07c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a082:	f7fb f9f1 	bl	8005468 <HAL_GetTick>
 800a086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a088:	e008      	b.n	800a09c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a08a:	f7fb f9ed 	bl	8005468 <HAL_GetTick>
 800a08e:	4602      	mov	r2, r0
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	2b02      	cmp	r3, #2
 800a096:	d901      	bls.n	800a09c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e10c      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a09c:	4b6a      	ldr	r3, [pc, #424]	; (800a248 <HAL_RCC_OscConfig+0x474>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0f0      	beq.n	800a08a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	689b      	ldr	r3, [r3, #8]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d106      	bne.n	800a0be <HAL_RCC_OscConfig+0x2ea>
 800a0b0:	4b64      	ldr	r3, [pc, #400]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a0b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b4:	4a63      	ldr	r2, [pc, #396]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a0b6:	f043 0301 	orr.w	r3, r3, #1
 800a0ba:	6713      	str	r3, [r2, #112]	; 0x70
 800a0bc:	e01c      	b.n	800a0f8 <HAL_RCC_OscConfig+0x324>
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	2b05      	cmp	r3, #5
 800a0c4:	d10c      	bne.n	800a0e0 <HAL_RCC_OscConfig+0x30c>
 800a0c6:	4b5f      	ldr	r3, [pc, #380]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ca:	4a5e      	ldr	r2, [pc, #376]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a0cc:	f043 0304 	orr.w	r3, r3, #4
 800a0d0:	6713      	str	r3, [r2, #112]	; 0x70
 800a0d2:	4b5c      	ldr	r3, [pc, #368]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d6:	4a5b      	ldr	r2, [pc, #364]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a0d8:	f043 0301 	orr.w	r3, r3, #1
 800a0dc:	6713      	str	r3, [r2, #112]	; 0x70
 800a0de:	e00b      	b.n	800a0f8 <HAL_RCC_OscConfig+0x324>
 800a0e0:	4b58      	ldr	r3, [pc, #352]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a0e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e4:	4a57      	ldr	r2, [pc, #348]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	6713      	str	r3, [r2, #112]	; 0x70
 800a0ec:	4b55      	ldr	r3, [pc, #340]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a0ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0f0:	4a54      	ldr	r2, [pc, #336]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a0f2:	f023 0304 	bic.w	r3, r3, #4
 800a0f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d015      	beq.n	800a12c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a100:	f7fb f9b2 	bl	8005468 <HAL_GetTick>
 800a104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a106:	e00a      	b.n	800a11e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a108:	f7fb f9ae 	bl	8005468 <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	f241 3288 	movw	r2, #5000	; 0x1388
 800a116:	4293      	cmp	r3, r2
 800a118:	d901      	bls.n	800a11e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e0cb      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a11e:	4b49      	ldr	r3, [pc, #292]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a122:	f003 0302 	and.w	r3, r3, #2
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0ee      	beq.n	800a108 <HAL_RCC_OscConfig+0x334>
 800a12a:	e014      	b.n	800a156 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a12c:	f7fb f99c 	bl	8005468 <HAL_GetTick>
 800a130:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a132:	e00a      	b.n	800a14a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a134:	f7fb f998 	bl	8005468 <HAL_GetTick>
 800a138:	4602      	mov	r2, r0
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a142:	4293      	cmp	r3, r2
 800a144:	d901      	bls.n	800a14a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e0b5      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a14a:	4b3e      	ldr	r3, [pc, #248]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a14c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14e:	f003 0302 	and.w	r3, r3, #2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1ee      	bne.n	800a134 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a156:	7dfb      	ldrb	r3, [r7, #23]
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d105      	bne.n	800a168 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a15c:	4b39      	ldr	r3, [pc, #228]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a15e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a160:	4a38      	ldr	r2, [pc, #224]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a166:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 80a1 	beq.w	800a2b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a172:	4b34      	ldr	r3, [pc, #208]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f003 030c 	and.w	r3, r3, #12
 800a17a:	2b08      	cmp	r3, #8
 800a17c:	d05c      	beq.n	800a238 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	699b      	ldr	r3, [r3, #24]
 800a182:	2b02      	cmp	r3, #2
 800a184:	d141      	bne.n	800a20a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a186:	4b31      	ldr	r3, [pc, #196]	; (800a24c <HAL_RCC_OscConfig+0x478>)
 800a188:	2200      	movs	r2, #0
 800a18a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a18c:	f7fb f96c 	bl	8005468 <HAL_GetTick>
 800a190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a192:	e008      	b.n	800a1a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a194:	f7fb f968 	bl	8005468 <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d901      	bls.n	800a1a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e087      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1a6:	4b27      	ldr	r3, [pc, #156]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1f0      	bne.n	800a194 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	69da      	ldr	r2, [r3, #28]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c0:	019b      	lsls	r3, r3, #6
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c8:	085b      	lsrs	r3, r3, #1
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	041b      	lsls	r3, r3, #16
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d4:	061b      	lsls	r3, r3, #24
 800a1d6:	491b      	ldr	r1, [pc, #108]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1dc:	4b1b      	ldr	r3, [pc, #108]	; (800a24c <HAL_RCC_OscConfig+0x478>)
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1e2:	f7fb f941 	bl	8005468 <HAL_GetTick>
 800a1e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1e8:	e008      	b.n	800a1fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1ea:	f7fb f93d 	bl	8005468 <HAL_GetTick>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	1ad3      	subs	r3, r2, r3
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d901      	bls.n	800a1fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a1f8:	2303      	movs	r3, #3
 800a1fa:	e05c      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1fc:	4b11      	ldr	r3, [pc, #68]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a204:	2b00      	cmp	r3, #0
 800a206:	d0f0      	beq.n	800a1ea <HAL_RCC_OscConfig+0x416>
 800a208:	e054      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a20a:	4b10      	ldr	r3, [pc, #64]	; (800a24c <HAL_RCC_OscConfig+0x478>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a210:	f7fb f92a 	bl	8005468 <HAL_GetTick>
 800a214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a216:	e008      	b.n	800a22a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a218:	f7fb f926 	bl	8005468 <HAL_GetTick>
 800a21c:	4602      	mov	r2, r0
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	1ad3      	subs	r3, r2, r3
 800a222:	2b02      	cmp	r3, #2
 800a224:	d901      	bls.n	800a22a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a226:	2303      	movs	r3, #3
 800a228:	e045      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a22a:	4b06      	ldr	r3, [pc, #24]	; (800a244 <HAL_RCC_OscConfig+0x470>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1f0      	bne.n	800a218 <HAL_RCC_OscConfig+0x444>
 800a236:	e03d      	b.n	800a2b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	699b      	ldr	r3, [r3, #24]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d107      	bne.n	800a250 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a240:	2301      	movs	r3, #1
 800a242:	e038      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
 800a244:	40023800 	.word	0x40023800
 800a248:	40007000 	.word	0x40007000
 800a24c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a250:	4b1b      	ldr	r3, [pc, #108]	; (800a2c0 <HAL_RCC_OscConfig+0x4ec>)
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	2b01      	cmp	r3, #1
 800a25c:	d028      	beq.n	800a2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a268:	429a      	cmp	r2, r3
 800a26a:	d121      	bne.n	800a2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a276:	429a      	cmp	r2, r3
 800a278:	d11a      	bne.n	800a2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a280:	4013      	ands	r3, r2
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a286:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a288:	4293      	cmp	r3, r2
 800a28a:	d111      	bne.n	800a2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a296:	085b      	lsrs	r3, r3, #1
 800a298:	3b01      	subs	r3, #1
 800a29a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d107      	bne.n	800a2b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d001      	beq.n	800a2b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	e000      	b.n	800a2b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3718      	adds	r7, #24
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	40023800 	.word	0x40023800

0800a2c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b084      	sub	sp, #16
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d101      	bne.n	800a2d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e0cc      	b.n	800a472 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2d8:	4b68      	ldr	r3, [pc, #416]	; (800a47c <HAL_RCC_ClockConfig+0x1b8>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0307 	and.w	r3, r3, #7
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d90c      	bls.n	800a300 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2e6:	4b65      	ldr	r3, [pc, #404]	; (800a47c <HAL_RCC_ClockConfig+0x1b8>)
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	b2d2      	uxtb	r2, r2
 800a2ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ee:	4b63      	ldr	r3, [pc, #396]	; (800a47c <HAL_RCC_ClockConfig+0x1b8>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f003 0307 	and.w	r3, r3, #7
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d001      	beq.n	800a300 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a2fc:	2301      	movs	r3, #1
 800a2fe:	e0b8      	b.n	800a472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f003 0302 	and.w	r3, r3, #2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d020      	beq.n	800a34e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 0304 	and.w	r3, r3, #4
 800a314:	2b00      	cmp	r3, #0
 800a316:	d005      	beq.n	800a324 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a318:	4b59      	ldr	r3, [pc, #356]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	4a58      	ldr	r2, [pc, #352]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a31e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a322:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f003 0308 	and.w	r3, r3, #8
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d005      	beq.n	800a33c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a330:	4b53      	ldr	r3, [pc, #332]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a332:	689b      	ldr	r3, [r3, #8]
 800a334:	4a52      	ldr	r2, [pc, #328]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a336:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a33a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a33c:	4b50      	ldr	r3, [pc, #320]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689b      	ldr	r3, [r3, #8]
 800a348:	494d      	ldr	r1, [pc, #308]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0301 	and.w	r3, r3, #1
 800a356:	2b00      	cmp	r3, #0
 800a358:	d044      	beq.n	800a3e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d107      	bne.n	800a372 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a362:	4b47      	ldr	r3, [pc, #284]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d119      	bne.n	800a3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e07f      	b.n	800a472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d003      	beq.n	800a382 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a37e:	2b03      	cmp	r3, #3
 800a380:	d107      	bne.n	800a392 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a382:	4b3f      	ldr	r3, [pc, #252]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d109      	bne.n	800a3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a38e:	2301      	movs	r3, #1
 800a390:	e06f      	b.n	800a472 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a392:	4b3b      	ldr	r3, [pc, #236]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f003 0302 	and.w	r3, r3, #2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d101      	bne.n	800a3a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e067      	b.n	800a472 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a3a2:	4b37      	ldr	r3, [pc, #220]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f023 0203 	bic.w	r2, r3, #3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	4934      	ldr	r1, [pc, #208]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a3b4:	f7fb f858 	bl	8005468 <HAL_GetTick>
 800a3b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3ba:	e00a      	b.n	800a3d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3bc:	f7fb f854 	bl	8005468 <HAL_GetTick>
 800a3c0:	4602      	mov	r2, r0
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d901      	bls.n	800a3d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e04f      	b.n	800a472 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3d2:	4b2b      	ldr	r3, [pc, #172]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	f003 020c 	and.w	r2, r3, #12
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	429a      	cmp	r2, r3
 800a3e2:	d1eb      	bne.n	800a3bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3e4:	4b25      	ldr	r3, [pc, #148]	; (800a47c <HAL_RCC_ClockConfig+0x1b8>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0307 	and.w	r3, r3, #7
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d20c      	bcs.n	800a40c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3f2:	4b22      	ldr	r3, [pc, #136]	; (800a47c <HAL_RCC_ClockConfig+0x1b8>)
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	b2d2      	uxtb	r2, r2
 800a3f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3fa:	4b20      	ldr	r3, [pc, #128]	; (800a47c <HAL_RCC_ClockConfig+0x1b8>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 0307 	and.w	r3, r3, #7
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	429a      	cmp	r2, r3
 800a406:	d001      	beq.n	800a40c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e032      	b.n	800a472 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f003 0304 	and.w	r3, r3, #4
 800a414:	2b00      	cmp	r3, #0
 800a416:	d008      	beq.n	800a42a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a418:	4b19      	ldr	r3, [pc, #100]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	68db      	ldr	r3, [r3, #12]
 800a424:	4916      	ldr	r1, [pc, #88]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a426:	4313      	orrs	r3, r2
 800a428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f003 0308 	and.w	r3, r3, #8
 800a432:	2b00      	cmp	r3, #0
 800a434:	d009      	beq.n	800a44a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a436:	4b12      	ldr	r3, [pc, #72]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a438:	689b      	ldr	r3, [r3, #8]
 800a43a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	00db      	lsls	r3, r3, #3
 800a444:	490e      	ldr	r1, [pc, #56]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a446:	4313      	orrs	r3, r2
 800a448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a44a:	f000 f821 	bl	800a490 <HAL_RCC_GetSysClockFreq>
 800a44e:	4602      	mov	r2, r0
 800a450:	4b0b      	ldr	r3, [pc, #44]	; (800a480 <HAL_RCC_ClockConfig+0x1bc>)
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	091b      	lsrs	r3, r3, #4
 800a456:	f003 030f 	and.w	r3, r3, #15
 800a45a:	490a      	ldr	r1, [pc, #40]	; (800a484 <HAL_RCC_ClockConfig+0x1c0>)
 800a45c:	5ccb      	ldrb	r3, [r1, r3]
 800a45e:	fa22 f303 	lsr.w	r3, r2, r3
 800a462:	4a09      	ldr	r2, [pc, #36]	; (800a488 <HAL_RCC_ClockConfig+0x1c4>)
 800a464:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a466:	4b09      	ldr	r3, [pc, #36]	; (800a48c <HAL_RCC_ClockConfig+0x1c8>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fa fc04 	bl	8004c78 <HAL_InitTick>

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3710      	adds	r7, #16
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	40023c00 	.word	0x40023c00
 800a480:	40023800 	.word	0x40023800
 800a484:	080170a8 	.word	0x080170a8
 800a488:	20000000 	.word	0x20000000
 800a48c:	20000004 	.word	0x20000004

0800a490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a494:	b094      	sub	sp, #80	; 0x50
 800a496:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a498:	2300      	movs	r3, #0
 800a49a:	647b      	str	r3, [r7, #68]	; 0x44
 800a49c:	2300      	movs	r3, #0
 800a49e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4a8:	4b79      	ldr	r3, [pc, #484]	; (800a690 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4aa:	689b      	ldr	r3, [r3, #8]
 800a4ac:	f003 030c 	and.w	r3, r3, #12
 800a4b0:	2b08      	cmp	r3, #8
 800a4b2:	d00d      	beq.n	800a4d0 <HAL_RCC_GetSysClockFreq+0x40>
 800a4b4:	2b08      	cmp	r3, #8
 800a4b6:	f200 80e1 	bhi.w	800a67c <HAL_RCC_GetSysClockFreq+0x1ec>
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d002      	beq.n	800a4c4 <HAL_RCC_GetSysClockFreq+0x34>
 800a4be:	2b04      	cmp	r3, #4
 800a4c0:	d003      	beq.n	800a4ca <HAL_RCC_GetSysClockFreq+0x3a>
 800a4c2:	e0db      	b.n	800a67c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a4c4:	4b73      	ldr	r3, [pc, #460]	; (800a694 <HAL_RCC_GetSysClockFreq+0x204>)
 800a4c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a4c8:	e0db      	b.n	800a682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a4ca:	4b73      	ldr	r3, [pc, #460]	; (800a698 <HAL_RCC_GetSysClockFreq+0x208>)
 800a4cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a4ce:	e0d8      	b.n	800a682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4d0:	4b6f      	ldr	r3, [pc, #444]	; (800a690 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4da:	4b6d      	ldr	r3, [pc, #436]	; (800a690 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4dc:	685b      	ldr	r3, [r3, #4]
 800a4de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d063      	beq.n	800a5ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4e6:	4b6a      	ldr	r3, [pc, #424]	; (800a690 <HAL_RCC_GetSysClockFreq+0x200>)
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	099b      	lsrs	r3, r3, #6
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f8:	633b      	str	r3, [r7, #48]	; 0x30
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	637b      	str	r3, [r7, #52]	; 0x34
 800a4fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a502:	4622      	mov	r2, r4
 800a504:	462b      	mov	r3, r5
 800a506:	f04f 0000 	mov.w	r0, #0
 800a50a:	f04f 0100 	mov.w	r1, #0
 800a50e:	0159      	lsls	r1, r3, #5
 800a510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a514:	0150      	lsls	r0, r2, #5
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4621      	mov	r1, r4
 800a51c:	1a51      	subs	r1, r2, r1
 800a51e:	6139      	str	r1, [r7, #16]
 800a520:	4629      	mov	r1, r5
 800a522:	eb63 0301 	sbc.w	r3, r3, r1
 800a526:	617b      	str	r3, [r7, #20]
 800a528:	f04f 0200 	mov.w	r2, #0
 800a52c:	f04f 0300 	mov.w	r3, #0
 800a530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a534:	4659      	mov	r1, fp
 800a536:	018b      	lsls	r3, r1, #6
 800a538:	4651      	mov	r1, sl
 800a53a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a53e:	4651      	mov	r1, sl
 800a540:	018a      	lsls	r2, r1, #6
 800a542:	4651      	mov	r1, sl
 800a544:	ebb2 0801 	subs.w	r8, r2, r1
 800a548:	4659      	mov	r1, fp
 800a54a:	eb63 0901 	sbc.w	r9, r3, r1
 800a54e:	f04f 0200 	mov.w	r2, #0
 800a552:	f04f 0300 	mov.w	r3, #0
 800a556:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a55a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a55e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a562:	4690      	mov	r8, r2
 800a564:	4699      	mov	r9, r3
 800a566:	4623      	mov	r3, r4
 800a568:	eb18 0303 	adds.w	r3, r8, r3
 800a56c:	60bb      	str	r3, [r7, #8]
 800a56e:	462b      	mov	r3, r5
 800a570:	eb49 0303 	adc.w	r3, r9, r3
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	f04f 0200 	mov.w	r2, #0
 800a57a:	f04f 0300 	mov.w	r3, #0
 800a57e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a582:	4629      	mov	r1, r5
 800a584:	024b      	lsls	r3, r1, #9
 800a586:	4621      	mov	r1, r4
 800a588:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a58c:	4621      	mov	r1, r4
 800a58e:	024a      	lsls	r2, r1, #9
 800a590:	4610      	mov	r0, r2
 800a592:	4619      	mov	r1, r3
 800a594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a596:	2200      	movs	r2, #0
 800a598:	62bb      	str	r3, [r7, #40]	; 0x28
 800a59a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a59c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a5a0:	f7f6 fb72 	bl	8000c88 <__aeabi_uldivmod>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5ac:	e058      	b.n	800a660 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a5ae:	4b38      	ldr	r3, [pc, #224]	; (800a690 <HAL_RCC_GetSysClockFreq+0x200>)
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	099b      	lsrs	r3, r3, #6
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a5be:	623b      	str	r3, [r7, #32]
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24
 800a5c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a5c8:	4642      	mov	r2, r8
 800a5ca:	464b      	mov	r3, r9
 800a5cc:	f04f 0000 	mov.w	r0, #0
 800a5d0:	f04f 0100 	mov.w	r1, #0
 800a5d4:	0159      	lsls	r1, r3, #5
 800a5d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a5da:	0150      	lsls	r0, r2, #5
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4641      	mov	r1, r8
 800a5e2:	ebb2 0a01 	subs.w	sl, r2, r1
 800a5e6:	4649      	mov	r1, r9
 800a5e8:	eb63 0b01 	sbc.w	fp, r3, r1
 800a5ec:	f04f 0200 	mov.w	r2, #0
 800a5f0:	f04f 0300 	mov.w	r3, #0
 800a5f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a5f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a5fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a600:	ebb2 040a 	subs.w	r4, r2, sl
 800a604:	eb63 050b 	sbc.w	r5, r3, fp
 800a608:	f04f 0200 	mov.w	r2, #0
 800a60c:	f04f 0300 	mov.w	r3, #0
 800a610:	00eb      	lsls	r3, r5, #3
 800a612:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a616:	00e2      	lsls	r2, r4, #3
 800a618:	4614      	mov	r4, r2
 800a61a:	461d      	mov	r5, r3
 800a61c:	4643      	mov	r3, r8
 800a61e:	18e3      	adds	r3, r4, r3
 800a620:	603b      	str	r3, [r7, #0]
 800a622:	464b      	mov	r3, r9
 800a624:	eb45 0303 	adc.w	r3, r5, r3
 800a628:	607b      	str	r3, [r7, #4]
 800a62a:	f04f 0200 	mov.w	r2, #0
 800a62e:	f04f 0300 	mov.w	r3, #0
 800a632:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a636:	4629      	mov	r1, r5
 800a638:	028b      	lsls	r3, r1, #10
 800a63a:	4621      	mov	r1, r4
 800a63c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a640:	4621      	mov	r1, r4
 800a642:	028a      	lsls	r2, r1, #10
 800a644:	4610      	mov	r0, r2
 800a646:	4619      	mov	r1, r3
 800a648:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a64a:	2200      	movs	r2, #0
 800a64c:	61bb      	str	r3, [r7, #24]
 800a64e:	61fa      	str	r2, [r7, #28]
 800a650:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a654:	f7f6 fb18 	bl	8000c88 <__aeabi_uldivmod>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	4613      	mov	r3, r2
 800a65e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a660:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <HAL_RCC_GetSysClockFreq+0x200>)
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	0c1b      	lsrs	r3, r3, #16
 800a666:	f003 0303 	and.w	r3, r3, #3
 800a66a:	3301      	adds	r3, #1
 800a66c:	005b      	lsls	r3, r3, #1
 800a66e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a670:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a674:	fbb2 f3f3 	udiv	r3, r2, r3
 800a678:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a67a:	e002      	b.n	800a682 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a67c:	4b05      	ldr	r3, [pc, #20]	; (800a694 <HAL_RCC_GetSysClockFreq+0x204>)
 800a67e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a680:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a684:	4618      	mov	r0, r3
 800a686:	3750      	adds	r7, #80	; 0x50
 800a688:	46bd      	mov	sp, r7
 800a68a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a68e:	bf00      	nop
 800a690:	40023800 	.word	0x40023800
 800a694:	00f42400 	.word	0x00f42400
 800a698:	007a1200 	.word	0x007a1200

0800a69c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a69c:	b480      	push	{r7}
 800a69e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a6a0:	4b03      	ldr	r3, [pc, #12]	; (800a6b0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	20000000 	.word	0x20000000

0800a6b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a6b8:	f7ff fff0 	bl	800a69c <HAL_RCC_GetHCLKFreq>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	4b05      	ldr	r3, [pc, #20]	; (800a6d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	0a9b      	lsrs	r3, r3, #10
 800a6c4:	f003 0307 	and.w	r3, r3, #7
 800a6c8:	4903      	ldr	r1, [pc, #12]	; (800a6d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6ca:	5ccb      	ldrb	r3, [r1, r3]
 800a6cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	40023800 	.word	0x40023800
 800a6d8:	080170b8 	.word	0x080170b8

0800a6dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a6e0:	f7ff ffdc 	bl	800a69c <HAL_RCC_GetHCLKFreq>
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	4b05      	ldr	r3, [pc, #20]	; (800a6fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	0b5b      	lsrs	r3, r3, #13
 800a6ec:	f003 0307 	and.w	r3, r3, #7
 800a6f0:	4903      	ldr	r1, [pc, #12]	; (800a700 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a6f2:	5ccb      	ldrb	r3, [r1, r3]
 800a6f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	40023800 	.word	0x40023800
 800a700:	080170b8 	.word	0x080170b8

0800a704 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	220f      	movs	r2, #15
 800a712:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a714:	4b12      	ldr	r3, [pc, #72]	; (800a760 <HAL_RCC_GetClockConfig+0x5c>)
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f003 0203 	and.w	r2, r3, #3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a720:	4b0f      	ldr	r3, [pc, #60]	; (800a760 <HAL_RCC_GetClockConfig+0x5c>)
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a72c:	4b0c      	ldr	r3, [pc, #48]	; (800a760 <HAL_RCC_GetClockConfig+0x5c>)
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a738:	4b09      	ldr	r3, [pc, #36]	; (800a760 <HAL_RCC_GetClockConfig+0x5c>)
 800a73a:	689b      	ldr	r3, [r3, #8]
 800a73c:	08db      	lsrs	r3, r3, #3
 800a73e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a746:	4b07      	ldr	r3, [pc, #28]	; (800a764 <HAL_RCC_GetClockConfig+0x60>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0207 	and.w	r2, r3, #7
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	601a      	str	r2, [r3, #0]
}
 800a752:	bf00      	nop
 800a754:	370c      	adds	r7, #12
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	40023800 	.word	0x40023800
 800a764:	40023c00 	.word	0x40023c00

0800a768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e041      	b.n	800a7fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f7fa fc6c 	bl	800506c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f000 f9ce 	bl	800ab48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3708      	adds	r7, #8
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
	...

0800a808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a808:	b480      	push	{r7}
 800a80a:	b085      	sub	sp, #20
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a816:	b2db      	uxtb	r3, r3
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d001      	beq.n	800a820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e04e      	b.n	800a8be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2202      	movs	r2, #2
 800a824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	68da      	ldr	r2, [r3, #12]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f042 0201 	orr.w	r2, r2, #1
 800a836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	4a23      	ldr	r2, [pc, #140]	; (800a8cc <HAL_TIM_Base_Start_IT+0xc4>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d022      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x80>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a84a:	d01d      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x80>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a1f      	ldr	r2, [pc, #124]	; (800a8d0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d018      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x80>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a1e      	ldr	r2, [pc, #120]	; (800a8d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d013      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x80>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a1c      	ldr	r2, [pc, #112]	; (800a8d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d00e      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x80>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a1b      	ldr	r2, [pc, #108]	; (800a8dc <HAL_TIM_Base_Start_IT+0xd4>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d009      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x80>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a19      	ldr	r2, [pc, #100]	; (800a8e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d004      	beq.n	800a888 <HAL_TIM_Base_Start_IT+0x80>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a18      	ldr	r2, [pc, #96]	; (800a8e4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d111      	bne.n	800a8ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f003 0307 	and.w	r3, r3, #7
 800a892:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b06      	cmp	r3, #6
 800a898:	d010      	beq.n	800a8bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f042 0201 	orr.w	r2, r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8aa:	e007      	b.n	800a8bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f042 0201 	orr.w	r2, r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a8bc:	2300      	movs	r3, #0
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	40010000 	.word	0x40010000
 800a8d0:	40000400 	.word	0x40000400
 800a8d4:	40000800 	.word	0x40000800
 800a8d8:	40000c00 	.word	0x40000c00
 800a8dc:	40010400 	.word	0x40010400
 800a8e0:	40014000 	.word	0x40014000
 800a8e4:	40001800 	.word	0x40001800

0800a8e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	f003 0302 	and.w	r3, r3, #2
 800a8fa:	2b02      	cmp	r3, #2
 800a8fc:	d122      	bne.n	800a944 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	68db      	ldr	r3, [r3, #12]
 800a904:	f003 0302 	and.w	r3, r3, #2
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d11b      	bne.n	800a944 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f06f 0202 	mvn.w	r2, #2
 800a914:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	f003 0303 	and.w	r3, r3, #3
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a92a:	6878      	ldr	r0, [r7, #4]
 800a92c:	f000 f8ee 	bl	800ab0c <HAL_TIM_IC_CaptureCallback>
 800a930:	e005      	b.n	800a93e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f8e0 	bl	800aaf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 f8f1 	bl	800ab20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2200      	movs	r2, #0
 800a942:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	f003 0304 	and.w	r3, r3, #4
 800a94e:	2b04      	cmp	r3, #4
 800a950:	d122      	bne.n	800a998 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68db      	ldr	r3, [r3, #12]
 800a958:	f003 0304 	and.w	r3, r3, #4
 800a95c:	2b04      	cmp	r3, #4
 800a95e:	d11b      	bne.n	800a998 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f06f 0204 	mvn.w	r2, #4
 800a968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2202      	movs	r2, #2
 800a96e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d003      	beq.n	800a986 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f8c4 	bl	800ab0c <HAL_TIM_IC_CaptureCallback>
 800a984:	e005      	b.n	800a992 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f000 f8b6 	bl	800aaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 f8c7 	bl	800ab20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	f003 0308 	and.w	r3, r3, #8
 800a9a2:	2b08      	cmp	r3, #8
 800a9a4:	d122      	bne.n	800a9ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	f003 0308 	and.w	r3, r3, #8
 800a9b0:	2b08      	cmp	r3, #8
 800a9b2:	d11b      	bne.n	800a9ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f06f 0208 	mvn.w	r2, #8
 800a9bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2204      	movs	r2, #4
 800a9c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	f003 0303 	and.w	r3, r3, #3
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d003      	beq.n	800a9da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	f000 f89a 	bl	800ab0c <HAL_TIM_IC_CaptureCallback>
 800a9d8:	e005      	b.n	800a9e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f88c 	bl	800aaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f89d 	bl	800ab20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	f003 0310 	and.w	r3, r3, #16
 800a9f6:	2b10      	cmp	r3, #16
 800a9f8:	d122      	bne.n	800aa40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	f003 0310 	and.w	r3, r3, #16
 800aa04:	2b10      	cmp	r3, #16
 800aa06:	d11b      	bne.n	800aa40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f06f 0210 	mvn.w	r2, #16
 800aa10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2208      	movs	r2, #8
 800aa16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	69db      	ldr	r3, [r3, #28]
 800aa1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d003      	beq.n	800aa2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f870 	bl	800ab0c <HAL_TIM_IC_CaptureCallback>
 800aa2c:	e005      	b.n	800aa3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f862 	bl	800aaf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f000 f873 	bl	800ab20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d10e      	bne.n	800aa6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	68db      	ldr	r3, [r3, #12]
 800aa54:	f003 0301 	and.w	r3, r3, #1
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d107      	bne.n	800aa6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f06f 0201 	mvn.w	r2, #1
 800aa64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f7f7 fe00 	bl	800266c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa76:	2b80      	cmp	r3, #128	; 0x80
 800aa78:	d10e      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa84:	2b80      	cmp	r3, #128	; 0x80
 800aa86:	d107      	bne.n	800aa98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aa90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 f97e 	bl	800ad94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaa2:	2b40      	cmp	r3, #64	; 0x40
 800aaa4:	d10e      	bne.n	800aac4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab0:	2b40      	cmp	r3, #64	; 0x40
 800aab2:	d107      	bne.n	800aac4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aabc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 f838 	bl	800ab34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	f003 0320 	and.w	r3, r3, #32
 800aace:	2b20      	cmp	r3, #32
 800aad0:	d10e      	bne.n	800aaf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	f003 0320 	and.w	r3, r3, #32
 800aadc:	2b20      	cmp	r3, #32
 800aade:	d107      	bne.n	800aaf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f06f 0220 	mvn.w	r2, #32
 800aae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f948 	bl	800ad80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aaf0:	bf00      	nop
 800aaf2:	3708      	adds	r7, #8
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b083      	sub	sp, #12
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab00:	bf00      	nop
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b083      	sub	sp, #12
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab14:	bf00      	nop
 800ab16:	370c      	adds	r7, #12
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab28:	bf00      	nop
 800ab2a:	370c      	adds	r7, #12
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab32:	4770      	bx	lr

0800ab34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b083      	sub	sp, #12
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab3c:	bf00      	nop
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4a40      	ldr	r2, [pc, #256]	; (800ac5c <TIM_Base_SetConfig+0x114>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d013      	beq.n	800ab88 <TIM_Base_SetConfig+0x40>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab66:	d00f      	beq.n	800ab88 <TIM_Base_SetConfig+0x40>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4a3d      	ldr	r2, [pc, #244]	; (800ac60 <TIM_Base_SetConfig+0x118>)
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	d00b      	beq.n	800ab88 <TIM_Base_SetConfig+0x40>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	4a3c      	ldr	r2, [pc, #240]	; (800ac64 <TIM_Base_SetConfig+0x11c>)
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d007      	beq.n	800ab88 <TIM_Base_SetConfig+0x40>
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	4a3b      	ldr	r2, [pc, #236]	; (800ac68 <TIM_Base_SetConfig+0x120>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d003      	beq.n	800ab88 <TIM_Base_SetConfig+0x40>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a3a      	ldr	r2, [pc, #232]	; (800ac6c <TIM_Base_SetConfig+0x124>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d108      	bne.n	800ab9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	68fa      	ldr	r2, [r7, #12]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a2f      	ldr	r2, [pc, #188]	; (800ac5c <TIM_Base_SetConfig+0x114>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d02b      	beq.n	800abfa <TIM_Base_SetConfig+0xb2>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aba8:	d027      	beq.n	800abfa <TIM_Base_SetConfig+0xb2>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a2c      	ldr	r2, [pc, #176]	; (800ac60 <TIM_Base_SetConfig+0x118>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d023      	beq.n	800abfa <TIM_Base_SetConfig+0xb2>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a2b      	ldr	r2, [pc, #172]	; (800ac64 <TIM_Base_SetConfig+0x11c>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d01f      	beq.n	800abfa <TIM_Base_SetConfig+0xb2>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a2a      	ldr	r2, [pc, #168]	; (800ac68 <TIM_Base_SetConfig+0x120>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d01b      	beq.n	800abfa <TIM_Base_SetConfig+0xb2>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a29      	ldr	r2, [pc, #164]	; (800ac6c <TIM_Base_SetConfig+0x124>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d017      	beq.n	800abfa <TIM_Base_SetConfig+0xb2>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	4a28      	ldr	r2, [pc, #160]	; (800ac70 <TIM_Base_SetConfig+0x128>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d013      	beq.n	800abfa <TIM_Base_SetConfig+0xb2>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4a27      	ldr	r2, [pc, #156]	; (800ac74 <TIM_Base_SetConfig+0x12c>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d00f      	beq.n	800abfa <TIM_Base_SetConfig+0xb2>
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a26      	ldr	r2, [pc, #152]	; (800ac78 <TIM_Base_SetConfig+0x130>)
 800abde:	4293      	cmp	r3, r2
 800abe0:	d00b      	beq.n	800abfa <TIM_Base_SetConfig+0xb2>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4a25      	ldr	r2, [pc, #148]	; (800ac7c <TIM_Base_SetConfig+0x134>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d007      	beq.n	800abfa <TIM_Base_SetConfig+0xb2>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	4a24      	ldr	r2, [pc, #144]	; (800ac80 <TIM_Base_SetConfig+0x138>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d003      	beq.n	800abfa <TIM_Base_SetConfig+0xb2>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	4a23      	ldr	r2, [pc, #140]	; (800ac84 <TIM_Base_SetConfig+0x13c>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d108      	bne.n	800ac0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	4313      	orrs	r3, r2
 800ac18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	68fa      	ldr	r2, [r7, #12]
 800ac1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	689a      	ldr	r2, [r3, #8]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	4a0a      	ldr	r2, [pc, #40]	; (800ac5c <TIM_Base_SetConfig+0x114>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	d003      	beq.n	800ac40 <TIM_Base_SetConfig+0xf8>
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	4a0c      	ldr	r2, [pc, #48]	; (800ac6c <TIM_Base_SetConfig+0x124>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d103      	bne.n	800ac48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac40:	683b      	ldr	r3, [r7, #0]
 800ac42:	691a      	ldr	r2, [r3, #16]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	615a      	str	r2, [r3, #20]
}
 800ac4e:	bf00      	nop
 800ac50:	3714      	adds	r7, #20
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	40010000 	.word	0x40010000
 800ac60:	40000400 	.word	0x40000400
 800ac64:	40000800 	.word	0x40000800
 800ac68:	40000c00 	.word	0x40000c00
 800ac6c:	40010400 	.word	0x40010400
 800ac70:	40014000 	.word	0x40014000
 800ac74:	40014400 	.word	0x40014400
 800ac78:	40014800 	.word	0x40014800
 800ac7c:	40001800 	.word	0x40001800
 800ac80:	40001c00 	.word	0x40001c00
 800ac84:	40002000 	.word	0x40002000

0800ac88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d101      	bne.n	800aca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	e05a      	b.n	800ad56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2202      	movs	r2, #2
 800acac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68fa      	ldr	r2, [r7, #12]
 800acce:	4313      	orrs	r3, r2
 800acd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a21      	ldr	r2, [pc, #132]	; (800ad64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d022      	beq.n	800ad2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acec:	d01d      	beq.n	800ad2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a1d      	ldr	r2, [pc, #116]	; (800ad68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d018      	beq.n	800ad2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a1b      	ldr	r2, [pc, #108]	; (800ad6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d013      	beq.n	800ad2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a1a      	ldr	r2, [pc, #104]	; (800ad70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d00e      	beq.n	800ad2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a18      	ldr	r2, [pc, #96]	; (800ad74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d009      	beq.n	800ad2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a17      	ldr	r2, [pc, #92]	; (800ad78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d004      	beq.n	800ad2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a15      	ldr	r2, [pc, #84]	; (800ad7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d10c      	bne.n	800ad44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ad30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	685b      	ldr	r3, [r3, #4]
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68ba      	ldr	r2, [r7, #8]
 800ad42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2201      	movs	r2, #1
 800ad48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	40010000 	.word	0x40010000
 800ad68:	40000400 	.word	0x40000400
 800ad6c:	40000800 	.word	0x40000800
 800ad70:	40000c00 	.word	0x40000c00
 800ad74:	40010400 	.word	0x40010400
 800ad78:	40014000 	.word	0x40014000
 800ad7c:	40001800 	.word	0x40001800

0800ad80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad88:	bf00      	nop
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad9c:	bf00      	nop
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr

0800ada8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	b082      	sub	sp, #8
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d101      	bne.n	800adba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800adb6:	2301      	movs	r3, #1
 800adb8:	e03f      	b.n	800ae3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adc0:	b2db      	uxtb	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d106      	bne.n	800add4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7fa f9f4 	bl	80051bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2224      	movs	r2, #36	; 0x24
 800add8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	68da      	ldr	r2, [r3, #12]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 ff43 	bl	800bc78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	691a      	ldr	r2, [r3, #16]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ae00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	695a      	ldr	r2, [r3, #20]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ae10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	68da      	ldr	r2, [r3, #12]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2200      	movs	r2, #0
 800ae26:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2220      	movs	r2, #32
 800ae2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2220      	movs	r2, #32
 800ae34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3708      	adds	r7, #8
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
	...

0800ae44 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b08c      	sub	sp, #48	; 0x30
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	4613      	mov	r3, r2
 800ae50:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	2b20      	cmp	r3, #32
 800ae5c:	d165      	bne.n	800af2a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <HAL_UART_Transmit_DMA+0x26>
 800ae64:	88fb      	ldrh	r3, [r7, #6]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d101      	bne.n	800ae6e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e05e      	b.n	800af2c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d101      	bne.n	800ae7c <HAL_UART_Transmit_DMA+0x38>
 800ae78:	2302      	movs	r3, #2
 800ae7a:	e057      	b.n	800af2c <HAL_UART_Transmit_DMA+0xe8>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ae84:	68ba      	ldr	r2, [r7, #8]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	88fa      	ldrh	r2, [r7, #6]
 800ae8e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	88fa      	ldrh	r2, [r7, #6]
 800ae94:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2221      	movs	r2, #33	; 0x21
 800aea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aea8:	4a22      	ldr	r2, [pc, #136]	; (800af34 <HAL_UART_Transmit_DMA+0xf0>)
 800aeaa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb0:	4a21      	ldr	r2, [pc, #132]	; (800af38 <HAL_UART_Transmit_DMA+0xf4>)
 800aeb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb8:	4a20      	ldr	r2, [pc, #128]	; (800af3c <HAL_UART_Transmit_DMA+0xf8>)
 800aeba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aec0:	2200      	movs	r2, #0
 800aec2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800aec4:	f107 0308 	add.w	r3, r7, #8
 800aec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed0:	6819      	ldr	r1, [r3, #0]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	3304      	adds	r3, #4
 800aed8:	461a      	mov	r2, r3
 800aeda:	88fb      	ldrh	r3, [r7, #6]
 800aedc:	f7fb f896 	bl	800600c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aee8:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3314      	adds	r3, #20
 800aef8:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	e853 3f00 	ldrex	r3, [r3]
 800af00:	617b      	str	r3, [r7, #20]
   return(result);
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af08:	62bb      	str	r3, [r7, #40]	; 0x28
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	3314      	adds	r3, #20
 800af10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af12:	627a      	str	r2, [r7, #36]	; 0x24
 800af14:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af16:	6a39      	ldr	r1, [r7, #32]
 800af18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af1a:	e841 2300 	strex	r3, r2, [r1]
 800af1e:	61fb      	str	r3, [r7, #28]
   return(result);
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d1e5      	bne.n	800aef2 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800af26:	2300      	movs	r3, #0
 800af28:	e000      	b.n	800af2c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800af2a:	2302      	movs	r3, #2
  }
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3730      	adds	r7, #48	; 0x30
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}
 800af34:	0800b511 	.word	0x0800b511
 800af38:	0800b5ab 	.word	0x0800b5ab
 800af3c:	0800b723 	.word	0x0800b723

0800af40 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b084      	sub	sp, #16
 800af44:	af00      	add	r7, sp, #0
 800af46:	60f8      	str	r0, [r7, #12]
 800af48:	60b9      	str	r1, [r7, #8]
 800af4a:	4613      	mov	r3, r2
 800af4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b20      	cmp	r3, #32
 800af58:	d11d      	bne.n	800af96 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d002      	beq.n	800af66 <HAL_UART_Receive_DMA+0x26>
 800af60:	88fb      	ldrh	r3, [r7, #6]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800af66:	2301      	movs	r3, #1
 800af68:	e016      	b.n	800af98 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af70:	2b01      	cmp	r3, #1
 800af72:	d101      	bne.n	800af78 <HAL_UART_Receive_DMA+0x38>
 800af74:	2302      	movs	r3, #2
 800af76:	e00f      	b.n	800af98 <HAL_UART_Receive_DMA+0x58>
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2201      	movs	r2, #1
 800af7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2200      	movs	r2, #0
 800af84:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800af86:	88fb      	ldrh	r3, [r7, #6]
 800af88:	461a      	mov	r2, r3
 800af8a:	68b9      	ldr	r1, [r7, #8]
 800af8c:	68f8      	ldr	r0, [r7, #12]
 800af8e:	f000 fc13 	bl	800b7b8 <UART_Start_Receive_DMA>
 800af92:	4603      	mov	r3, r0
 800af94:	e000      	b.n	800af98 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800af96:	2302      	movs	r3, #2
  }
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3710      	adds	r7, #16
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b0ba      	sub	sp, #232	; 0xe8
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	695b      	ldr	r3, [r3, #20]
 800afc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800afc6:	2300      	movs	r3, #0
 800afc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800afcc:	2300      	movs	r3, #0
 800afce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800afd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afd6:	f003 030f 	and.w	r3, r3, #15
 800afda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800afde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d10f      	bne.n	800b006 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800afe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afea:	f003 0320 	and.w	r3, r3, #32
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d009      	beq.n	800b006 <HAL_UART_IRQHandler+0x66>
 800aff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aff6:	f003 0320 	and.w	r3, r3, #32
 800affa:	2b00      	cmp	r3, #0
 800affc:	d003      	beq.n	800b006 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fd7f 	bl	800bb02 <UART_Receive_IT>
      return;
 800b004:	e256      	b.n	800b4b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	f000 80de 	beq.w	800b1cc <HAL_UART_IRQHandler+0x22c>
 800b010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d106      	bne.n	800b02a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b020:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b024:	2b00      	cmp	r3, #0
 800b026:	f000 80d1 	beq.w	800b1cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b02e:	f003 0301 	and.w	r3, r3, #1
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00b      	beq.n	800b04e <HAL_UART_IRQHandler+0xae>
 800b036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b03a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d005      	beq.n	800b04e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b046:	f043 0201 	orr.w	r2, r3, #1
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b04e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b052:	f003 0304 	and.w	r3, r3, #4
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00b      	beq.n	800b072 <HAL_UART_IRQHandler+0xd2>
 800b05a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b05e:	f003 0301 	and.w	r3, r3, #1
 800b062:	2b00      	cmp	r3, #0
 800b064:	d005      	beq.n	800b072 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06a:	f043 0202 	orr.w	r2, r3, #2
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d00b      	beq.n	800b096 <HAL_UART_IRQHandler+0xf6>
 800b07e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b082:	f003 0301 	and.w	r3, r3, #1
 800b086:	2b00      	cmp	r3, #0
 800b088:	d005      	beq.n	800b096 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b08e:	f043 0204 	orr.w	r2, r3, #4
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b09a:	f003 0308 	and.w	r3, r3, #8
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d011      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x126>
 800b0a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0a6:	f003 0320 	and.w	r3, r3, #32
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d105      	bne.n	800b0ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b0ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0b2:	f003 0301 	and.w	r3, r3, #1
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d005      	beq.n	800b0c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0be:	f043 0208 	orr.w	r2, r3, #8
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	f000 81ed 	beq.w	800b4aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0d4:	f003 0320 	and.w	r3, r3, #32
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d008      	beq.n	800b0ee <HAL_UART_IRQHandler+0x14e>
 800b0dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0e0:	f003 0320 	and.w	r3, r3, #32
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d002      	beq.n	800b0ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fd0a 	bl	800bb02 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	695b      	ldr	r3, [r3, #20]
 800b0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f8:	2b40      	cmp	r3, #64	; 0x40
 800b0fa:	bf0c      	ite	eq
 800b0fc:	2301      	moveq	r3, #1
 800b0fe:	2300      	movne	r3, #0
 800b100:	b2db      	uxtb	r3, r3
 800b102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10a:	f003 0308 	and.w	r3, r3, #8
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d103      	bne.n	800b11a <HAL_UART_IRQHandler+0x17a>
 800b112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b116:	2b00      	cmp	r3, #0
 800b118:	d04f      	beq.n	800b1ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 fc12 	bl	800b944 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12a:	2b40      	cmp	r3, #64	; 0x40
 800b12c:	d141      	bne.n	800b1b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	3314      	adds	r3, #20
 800b134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b138:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b13c:	e853 3f00 	ldrex	r3, [r3]
 800b140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b14c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	3314      	adds	r3, #20
 800b156:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b15a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b15e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b162:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b166:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b16a:	e841 2300 	strex	r3, r2, [r1]
 800b16e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1d9      	bne.n	800b12e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d013      	beq.n	800b1aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b186:	4a7d      	ldr	r2, [pc, #500]	; (800b37c <HAL_UART_IRQHandler+0x3dc>)
 800b188:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fb f804 	bl	800619c <HAL_DMA_Abort_IT>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d016      	beq.n	800b1c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b19e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b1a4:	4610      	mov	r0, r2
 800b1a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1a8:	e00e      	b.n	800b1c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1aa:	6878      	ldr	r0, [r7, #4]
 800b1ac:	f000 f99a 	bl	800b4e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b0:	e00a      	b.n	800b1c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f996 	bl	800b4e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b8:	e006      	b.n	800b1c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 f992 	bl	800b4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b1c6:	e170      	b.n	800b4aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1c8:	bf00      	nop
    return;
 800b1ca:	e16e      	b.n	800b4aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	f040 814a 	bne.w	800b46a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1da:	f003 0310 	and.w	r3, r3, #16
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	f000 8143 	beq.w	800b46a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1e8:	f003 0310 	and.w	r3, r3, #16
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 813c 	beq.w	800b46a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60bb      	str	r3, [r7, #8]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	60bb      	str	r3, [r7, #8]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	60bb      	str	r3, [r7, #8]
 800b206:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b212:	2b40      	cmp	r3, #64	; 0x40
 800b214:	f040 80b4 	bne.w	800b380 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b224:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 8140 	beq.w	800b4ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b236:	429a      	cmp	r2, r3
 800b238:	f080 8139 	bcs.w	800b4ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b242:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b248:	69db      	ldr	r3, [r3, #28]
 800b24a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b24e:	f000 8088 	beq.w	800b362 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	330c      	adds	r3, #12
 800b258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b260:	e853 3f00 	ldrex	r3, [r3]
 800b264:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b268:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b26c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b270:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	330c      	adds	r3, #12
 800b27a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b27e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b282:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b286:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b28a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b28e:	e841 2300 	strex	r3, r2, [r1]
 800b292:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b296:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d1d9      	bne.n	800b252 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	3314      	adds	r3, #20
 800b2a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2a8:	e853 3f00 	ldrex	r3, [r3]
 800b2ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b2ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2b0:	f023 0301 	bic.w	r3, r3, #1
 800b2b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3314      	adds	r3, #20
 800b2be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b2c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b2c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b2ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b2ce:	e841 2300 	strex	r3, r2, [r1]
 800b2d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b2d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1e1      	bne.n	800b29e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	3314      	adds	r3, #20
 800b2e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2e4:	e853 3f00 	ldrex	r3, [r3]
 800b2e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b2ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	3314      	adds	r3, #20
 800b2fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b2fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b300:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b302:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b304:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b306:	e841 2300 	strex	r3, r2, [r1]
 800b30a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b30c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d1e3      	bne.n	800b2da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2220      	movs	r2, #32
 800b316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	330c      	adds	r3, #12
 800b326:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b32a:	e853 3f00 	ldrex	r3, [r3]
 800b32e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b332:	f023 0310 	bic.w	r3, r3, #16
 800b336:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	330c      	adds	r3, #12
 800b340:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b344:	65ba      	str	r2, [r7, #88]	; 0x58
 800b346:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b348:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b34a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b34c:	e841 2300 	strex	r3, r2, [r1]
 800b350:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b352:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e3      	bne.n	800b320 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fa fead 	bl	80060bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	b29b      	uxth	r3, r3
 800b370:	4619      	mov	r1, r3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 f8c0 	bl	800b4f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b378:	e099      	b.n	800b4ae <HAL_UART_IRQHandler+0x50e>
 800b37a:	bf00      	nop
 800b37c:	0800ba0b 	.word	0x0800ba0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b388:	b29b      	uxth	r3, r3
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b394:	b29b      	uxth	r3, r3
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 808b 	beq.w	800b4b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b39c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f000 8086 	beq.w	800b4b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	330c      	adds	r3, #12
 800b3ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b0:	e853 3f00 	ldrex	r3, [r3]
 800b3b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b3b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	330c      	adds	r3, #12
 800b3c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b3ca:	647a      	str	r2, [r7, #68]	; 0x44
 800b3cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b3d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e3      	bne.n	800b3a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	3314      	adds	r3, #20
 800b3e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e8:	e853 3f00 	ldrex	r3, [r3]
 800b3ec:	623b      	str	r3, [r7, #32]
   return(result);
 800b3ee:	6a3b      	ldr	r3, [r7, #32]
 800b3f0:	f023 0301 	bic.w	r3, r3, #1
 800b3f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	3314      	adds	r3, #20
 800b3fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b402:	633a      	str	r2, [r7, #48]	; 0x30
 800b404:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b40a:	e841 2300 	strex	r3, r2, [r1]
 800b40e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	2b00      	cmp	r3, #0
 800b414:	d1e3      	bne.n	800b3de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2220      	movs	r2, #32
 800b41a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	330c      	adds	r3, #12
 800b42a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	e853 3f00 	ldrex	r3, [r3]
 800b432:	60fb      	str	r3, [r7, #12]
   return(result);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f023 0310 	bic.w	r3, r3, #16
 800b43a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	330c      	adds	r3, #12
 800b444:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b448:	61fa      	str	r2, [r7, #28]
 800b44a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b44c:	69b9      	ldr	r1, [r7, #24]
 800b44e:	69fa      	ldr	r2, [r7, #28]
 800b450:	e841 2300 	strex	r3, r2, [r1]
 800b454:	617b      	str	r3, [r7, #20]
   return(result);
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1e3      	bne.n	800b424 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b45c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 f848 	bl	800b4f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b468:	e023      	b.n	800b4b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b472:	2b00      	cmp	r3, #0
 800b474:	d009      	beq.n	800b48a <HAL_UART_IRQHandler+0x4ea>
 800b476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d003      	beq.n	800b48a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fad5 	bl	800ba32 <UART_Transmit_IT>
    return;
 800b488:	e014      	b.n	800b4b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b48a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b48e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b492:	2b00      	cmp	r3, #0
 800b494:	d00e      	beq.n	800b4b4 <HAL_UART_IRQHandler+0x514>
 800b496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d008      	beq.n	800b4b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fb15 	bl	800bad2 <UART_EndTransmit_IT>
    return;
 800b4a8:	e004      	b.n	800b4b4 <HAL_UART_IRQHandler+0x514>
    return;
 800b4aa:	bf00      	nop
 800b4ac:	e002      	b.n	800b4b4 <HAL_UART_IRQHandler+0x514>
      return;
 800b4ae:	bf00      	nop
 800b4b0:	e000      	b.n	800b4b4 <HAL_UART_IRQHandler+0x514>
      return;
 800b4b2:	bf00      	nop
  }
}
 800b4b4:	37e8      	adds	r7, #232	; 0xe8
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop

0800b4bc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b4c4:	bf00      	nop
 800b4c6:	370c      	adds	r7, #12
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ce:	4770      	bx	lr

0800b4d0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b083      	sub	sp, #12
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b083      	sub	sp, #12
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b4ec:	bf00      	nop
 800b4ee:	370c      	adds	r7, #12
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	460b      	mov	r3, r1
 800b502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b504:	bf00      	nop
 800b506:	370c      	adds	r7, #12
 800b508:	46bd      	mov	sp, r7
 800b50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50e:	4770      	bx	lr

0800b510 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b090      	sub	sp, #64	; 0x40
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b51c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d137      	bne.n	800b59c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b52c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b52e:	2200      	movs	r2, #0
 800b530:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3314      	adds	r3, #20
 800b538:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	623b      	str	r3, [r7, #32]
   return(result);
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b548:	63bb      	str	r3, [r7, #56]	; 0x38
 800b54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3314      	adds	r3, #20
 800b550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b552:	633a      	str	r2, [r7, #48]	; 0x30
 800b554:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e5      	bne.n	800b532 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	330c      	adds	r3, #12
 800b56c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	693b      	ldr	r3, [r7, #16]
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	60fb      	str	r3, [r7, #12]
   return(result);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b57c:	637b      	str	r3, [r7, #52]	; 0x34
 800b57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	330c      	adds	r3, #12
 800b584:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b586:	61fa      	str	r2, [r7, #28]
 800b588:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	69b9      	ldr	r1, [r7, #24]
 800b58c:	69fa      	ldr	r2, [r7, #28]
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	617b      	str	r3, [r7, #20]
   return(result);
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e5      	bne.n	800b566 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b59a:	e002      	b.n	800b5a2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b59c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b59e:	f7f8 fb6d 	bl	8003c7c <HAL_UART_TxCpltCallback>
}
 800b5a2:	bf00      	nop
 800b5a4:	3740      	adds	r7, #64	; 0x40
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}

0800b5aa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b5aa:	b580      	push	{r7, lr}
 800b5ac:	b084      	sub	sp, #16
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff ff7f 	bl	800b4bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5be:	bf00      	nop
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b09c      	sub	sp, #112	; 0x70
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d172      	bne.n	800b6c8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b5e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b5e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	330c      	adds	r3, #12
 800b5ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5f2:	e853 3f00 	ldrex	r3, [r3]
 800b5f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b5f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800b600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	330c      	adds	r3, #12
 800b606:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b608:	65ba      	str	r2, [r7, #88]	; 0x58
 800b60a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b60e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e5      	bne.n	800b5e8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b61c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	3314      	adds	r3, #20
 800b622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b626:	e853 3f00 	ldrex	r3, [r3]
 800b62a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b62c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62e:	f023 0301 	bic.w	r3, r3, #1
 800b632:	667b      	str	r3, [r7, #100]	; 0x64
 800b634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3314      	adds	r3, #20
 800b63a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b63c:	647a      	str	r2, [r7, #68]	; 0x44
 800b63e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b640:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b644:	e841 2300 	strex	r3, r2, [r1]
 800b648:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e5      	bne.n	800b61c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	3314      	adds	r3, #20
 800b656:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	e853 3f00 	ldrex	r3, [r3]
 800b65e:	623b      	str	r3, [r7, #32]
   return(result);
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b666:	663b      	str	r3, [r7, #96]	; 0x60
 800b668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3314      	adds	r3, #20
 800b66e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b670:	633a      	str	r2, [r7, #48]	; 0x30
 800b672:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b674:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b678:	e841 2300 	strex	r3, r2, [r1]
 800b67c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1e5      	bne.n	800b650 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b686:	2220      	movs	r2, #32
 800b688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b68c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b690:	2b01      	cmp	r3, #1
 800b692:	d119      	bne.n	800b6c8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b694:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	330c      	adds	r3, #12
 800b69a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	e853 3f00 	ldrex	r3, [r3]
 800b6a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f023 0310 	bic.w	r3, r3, #16
 800b6aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b6ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	330c      	adds	r3, #12
 800b6b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b6b4:	61fa      	str	r2, [r7, #28]
 800b6b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b8:	69b9      	ldr	r1, [r7, #24]
 800b6ba:	69fa      	ldr	r2, [r7, #28]
 800b6bc:	e841 2300 	strex	r3, r2, [r1]
 800b6c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e5      	bne.n	800b694 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6cc:	2b01      	cmp	r3, #1
 800b6ce:	d106      	bne.n	800b6de <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b6d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b6d8:	f7ff ff0e 	bl	800b4f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b6dc:	e002      	b.n	800b6e4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800b6de:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b6e0:	f7f8 fade 	bl	8003ca0 <HAL_UART_RxCpltCallback>
}
 800b6e4:	bf00      	nop
 800b6e6:	3770      	adds	r7, #112	; 0x70
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d108      	bne.n	800b714 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b706:	085b      	lsrs	r3, r3, #1
 800b708:	b29b      	uxth	r3, r3
 800b70a:	4619      	mov	r1, r3
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f7ff fef3 	bl	800b4f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b712:	e002      	b.n	800b71a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f7ff fedb 	bl	800b4d0 <HAL_UART_RxHalfCpltCallback>
}
 800b71a:	bf00      	nop
 800b71c:	3710      	adds	r7, #16
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}

0800b722 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b722:	b580      	push	{r7, lr}
 800b724:	b084      	sub	sp, #16
 800b726:	af00      	add	r7, sp, #0
 800b728:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b732:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	695b      	ldr	r3, [r3, #20]
 800b73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b73e:	2b80      	cmp	r3, #128	; 0x80
 800b740:	bf0c      	ite	eq
 800b742:	2301      	moveq	r3, #1
 800b744:	2300      	movne	r3, #0
 800b746:	b2db      	uxtb	r3, r3
 800b748:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b21      	cmp	r3, #33	; 0x21
 800b754:	d108      	bne.n	800b768 <UART_DMAError+0x46>
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d005      	beq.n	800b768 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	2200      	movs	r2, #0
 800b760:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b762:	68b8      	ldr	r0, [r7, #8]
 800b764:	f000 f8c6 	bl	800b8f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	695b      	ldr	r3, [r3, #20]
 800b76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b772:	2b40      	cmp	r3, #64	; 0x40
 800b774:	bf0c      	ite	eq
 800b776:	2301      	moveq	r3, #1
 800b778:	2300      	movne	r3, #0
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b22      	cmp	r3, #34	; 0x22
 800b788:	d108      	bne.n	800b79c <UART_DMAError+0x7a>
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d005      	beq.n	800b79c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2200      	movs	r2, #0
 800b794:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b796:	68b8      	ldr	r0, [r7, #8]
 800b798:	f000 f8d4 	bl	800b944 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a0:	f043 0210 	orr.w	r2, r3, #16
 800b7a4:	68bb      	ldr	r3, [r7, #8]
 800b7a6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7a8:	68b8      	ldr	r0, [r7, #8]
 800b7aa:	f7ff fe9b 	bl	800b4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7ae:	bf00      	nop
 800b7b0:	3710      	adds	r7, #16
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
	...

0800b7b8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b098      	sub	sp, #96	; 0x60
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	88fa      	ldrh	r2, [r7, #6]
 800b7d0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2222      	movs	r2, #34	; 0x22
 800b7dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e4:	4a40      	ldr	r2, [pc, #256]	; (800b8e8 <UART_Start_Receive_DMA+0x130>)
 800b7e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ec:	4a3f      	ldr	r2, [pc, #252]	; (800b8ec <UART_Start_Receive_DMA+0x134>)
 800b7ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f4:	4a3e      	ldr	r2, [pc, #248]	; (800b8f0 <UART_Start_Receive_DMA+0x138>)
 800b7f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b800:	f107 0308 	add.w	r3, r7, #8
 800b804:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	3304      	adds	r3, #4
 800b810:	4619      	mov	r1, r3
 800b812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b814:	681a      	ldr	r2, [r3, #0]
 800b816:	88fb      	ldrh	r3, [r7, #6]
 800b818:	f7fa fbf8 	bl	800600c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b81c:	2300      	movs	r3, #0
 800b81e:	613b      	str	r3, [r7, #16]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	613b      	str	r3, [r7, #16]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	613b      	str	r3, [r7, #16]
 800b830:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2200      	movs	r2, #0
 800b836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	691b      	ldr	r3, [r3, #16]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d019      	beq.n	800b876 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	330c      	adds	r3, #12
 800b848:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b84c:	e853 3f00 	ldrex	r3, [r3]
 800b850:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b858:	65bb      	str	r3, [r7, #88]	; 0x58
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	330c      	adds	r3, #12
 800b860:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b862:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b864:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b866:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b86a:	e841 2300 	strex	r3, r2, [r1]
 800b86e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1e5      	bne.n	800b842 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3314      	adds	r3, #20
 800b87c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b880:	e853 3f00 	ldrex	r3, [r3]
 800b884:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b888:	f043 0301 	orr.w	r3, r3, #1
 800b88c:	657b      	str	r3, [r7, #84]	; 0x54
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	3314      	adds	r3, #20
 800b894:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b896:	63ba      	str	r2, [r7, #56]	; 0x38
 800b898:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b89c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e5      	bne.n	800b876 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	3314      	adds	r3, #20
 800b8b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	e853 3f00 	ldrex	r3, [r3]
 800b8b8:	617b      	str	r3, [r7, #20]
   return(result);
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8c0:	653b      	str	r3, [r7, #80]	; 0x50
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	3314      	adds	r3, #20
 800b8c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8ca:	627a      	str	r2, [r7, #36]	; 0x24
 800b8cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	6a39      	ldr	r1, [r7, #32]
 800b8d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e5      	bne.n	800b8aa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3760      	adds	r7, #96	; 0x60
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	0800b5c7 	.word	0x0800b5c7
 800b8ec:	0800b6ed 	.word	0x0800b6ed
 800b8f0:	0800b723 	.word	0x0800b723

0800b8f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b089      	sub	sp, #36	; 0x24
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	330c      	adds	r3, #12
 800b902:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	e853 3f00 	ldrex	r3, [r3]
 800b90a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b90c:	68bb      	ldr	r3, [r7, #8]
 800b90e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b912:	61fb      	str	r3, [r7, #28]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	330c      	adds	r3, #12
 800b91a:	69fa      	ldr	r2, [r7, #28]
 800b91c:	61ba      	str	r2, [r7, #24]
 800b91e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b920:	6979      	ldr	r1, [r7, #20]
 800b922:	69ba      	ldr	r2, [r7, #24]
 800b924:	e841 2300 	strex	r3, r2, [r1]
 800b928:	613b      	str	r3, [r7, #16]
   return(result);
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1e5      	bne.n	800b8fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2220      	movs	r2, #32
 800b934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b938:	bf00      	nop
 800b93a:	3724      	adds	r7, #36	; 0x24
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr

0800b944 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b944:	b480      	push	{r7}
 800b946:	b095      	sub	sp, #84	; 0x54
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	330c      	adds	r3, #12
 800b952:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b956:	e853 3f00 	ldrex	r3, [r3]
 800b95a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b962:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	330c      	adds	r3, #12
 800b96a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b96c:	643a      	str	r2, [r7, #64]	; 0x40
 800b96e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b970:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b974:	e841 2300 	strex	r3, r2, [r1]
 800b978:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1e5      	bne.n	800b94c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	3314      	adds	r3, #20
 800b986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b988:	6a3b      	ldr	r3, [r7, #32]
 800b98a:	e853 3f00 	ldrex	r3, [r3]
 800b98e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	f023 0301 	bic.w	r3, r3, #1
 800b996:	64bb      	str	r3, [r7, #72]	; 0x48
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3314      	adds	r3, #20
 800b99e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b9a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9a8:	e841 2300 	strex	r3, r2, [r1]
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d1e5      	bne.n	800b980 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d119      	bne.n	800b9f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	330c      	adds	r3, #12
 800b9c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	e853 3f00 	ldrex	r3, [r3]
 800b9ca:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	f023 0310 	bic.w	r3, r3, #16
 800b9d2:	647b      	str	r3, [r7, #68]	; 0x44
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	330c      	adds	r3, #12
 800b9da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b9dc:	61ba      	str	r2, [r7, #24]
 800b9de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e0:	6979      	ldr	r1, [r7, #20]
 800b9e2:	69ba      	ldr	r2, [r7, #24]
 800b9e4:	e841 2300 	strex	r3, r2, [r1]
 800b9e8:	613b      	str	r3, [r7, #16]
   return(result);
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1e5      	bne.n	800b9bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2220      	movs	r2, #32
 800b9f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b9fe:	bf00      	nop
 800ba00:	3754      	adds	r7, #84	; 0x54
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr

0800ba0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba0a:	b580      	push	{r7, lr}
 800ba0c:	b084      	sub	sp, #16
 800ba0e:	af00      	add	r7, sp, #0
 800ba10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2200      	movs	r2, #0
 800ba22:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f7ff fd5d 	bl	800b4e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba2a:	bf00      	nop
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800ba32:	b480      	push	{r7}
 800ba34:	b085      	sub	sp, #20
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	2b21      	cmp	r3, #33	; 0x21
 800ba44:	d13e      	bne.n	800bac4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	689b      	ldr	r3, [r3, #8]
 800ba4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba4e:	d114      	bne.n	800ba7a <UART_Transmit_IT+0x48>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d110      	bne.n	800ba7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6a1b      	ldr	r3, [r3, #32]
 800ba5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	461a      	mov	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a1b      	ldr	r3, [r3, #32]
 800ba72:	1c9a      	adds	r2, r3, #2
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	621a      	str	r2, [r3, #32]
 800ba78:	e008      	b.n	800ba8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	6a1b      	ldr	r3, [r3, #32]
 800ba7e:	1c59      	adds	r1, r3, #1
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	6211      	str	r1, [r2, #32]
 800ba84:	781a      	ldrb	r2, [r3, #0]
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	3b01      	subs	r3, #1
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	4619      	mov	r1, r3
 800ba9a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d10f      	bne.n	800bac0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68da      	ldr	r2, [r3, #12]
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800baae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	68da      	ldr	r2, [r3, #12]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800babe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	e000      	b.n	800bac6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bac4:	2302      	movs	r3, #2
  }
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68da      	ldr	r2, [r3, #12]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bae8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2220      	movs	r2, #32
 800baee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f7f8 f8c2 	bl	8003c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3708      	adds	r7, #8
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b08c      	sub	sp, #48	; 0x30
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b22      	cmp	r3, #34	; 0x22
 800bb14:	f040 80ab 	bne.w	800bc6e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb20:	d117      	bne.n	800bb52 <UART_Receive_IT+0x50>
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d113      	bne.n	800bb52 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb32:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb44:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb4a:	1c9a      	adds	r2, r3, #2
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	629a      	str	r2, [r3, #40]	; 0x28
 800bb50:	e026      	b.n	800bba0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb56:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	689b      	ldr	r3, [r3, #8]
 800bb60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb64:	d007      	beq.n	800bb76 <UART_Receive_IT+0x74>
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <UART_Receive_IT+0x82>
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d106      	bne.n	800bb84 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	685b      	ldr	r3, [r3, #4]
 800bb7c:	b2da      	uxtb	r2, r3
 800bb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb80:	701a      	strb	r2, [r3, #0]
 800bb82:	e008      	b.n	800bb96 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb94:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb9a:	1c5a      	adds	r2, r3, #1
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bba4:	b29b      	uxth	r3, r3
 800bba6:	3b01      	subs	r3, #1
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	687a      	ldr	r2, [r7, #4]
 800bbac:	4619      	mov	r1, r3
 800bbae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d15a      	bne.n	800bc6a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	68da      	ldr	r2, [r3, #12]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	f022 0220 	bic.w	r2, r2, #32
 800bbc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	68da      	ldr	r2, [r3, #12]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bbd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	695a      	ldr	r2, [r3, #20]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f022 0201 	bic.w	r2, r2, #1
 800bbe2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d135      	bne.n	800bc60 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	330c      	adds	r3, #12
 800bc00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	e853 3f00 	ldrex	r3, [r3]
 800bc08:	613b      	str	r3, [r7, #16]
   return(result);
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	f023 0310 	bic.w	r3, r3, #16
 800bc10:	627b      	str	r3, [r7, #36]	; 0x24
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	330c      	adds	r3, #12
 800bc18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc1a:	623a      	str	r2, [r7, #32]
 800bc1c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1e:	69f9      	ldr	r1, [r7, #28]
 800bc20:	6a3a      	ldr	r2, [r7, #32]
 800bc22:	e841 2300 	strex	r3, r2, [r1]
 800bc26:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1e5      	bne.n	800bbfa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f003 0310 	and.w	r3, r3, #16
 800bc38:	2b10      	cmp	r3, #16
 800bc3a:	d10a      	bne.n	800bc52 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	60fb      	str	r3, [r7, #12]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	685b      	ldr	r3, [r3, #4]
 800bc4e:	60fb      	str	r3, [r7, #12]
 800bc50:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bc56:	4619      	mov	r1, r3
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f7ff fc4d 	bl	800b4f8 <HAL_UARTEx_RxEventCallback>
 800bc5e:	e002      	b.n	800bc66 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7f8 f81d 	bl	8003ca0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bc66:	2300      	movs	r3, #0
 800bc68:	e002      	b.n	800bc70 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e000      	b.n	800bc70 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bc6e:	2302      	movs	r3, #2
  }
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3730      	adds	r7, #48	; 0x30
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bc7c:	b0c0      	sub	sp, #256	; 0x100
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bc90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc94:	68d9      	ldr	r1, [r3, #12]
 800bc96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	ea40 0301 	orr.w	r3, r0, r1
 800bca0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bca2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bca6:	689a      	ldr	r2, [r3, #8]
 800bca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	431a      	orrs	r2, r3
 800bcb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcb4:	695b      	ldr	r3, [r3, #20]
 800bcb6:	431a      	orrs	r2, r3
 800bcb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcbc:	69db      	ldr	r3, [r3, #28]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800bcc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bcd0:	f021 010c 	bic.w	r1, r1, #12
 800bcd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bcde:	430b      	orrs	r3, r1
 800bce0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bcee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf2:	6999      	ldr	r1, [r3, #24]
 800bcf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bcf8:	681a      	ldr	r2, [r3, #0]
 800bcfa:	ea40 0301 	orr.w	r3, r0, r1
 800bcfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bd00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	4b8f      	ldr	r3, [pc, #572]	; (800bf44 <UART_SetConfig+0x2cc>)
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d005      	beq.n	800bd18 <UART_SetConfig+0xa0>
 800bd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	4b8d      	ldr	r3, [pc, #564]	; (800bf48 <UART_SetConfig+0x2d0>)
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d104      	bne.n	800bd22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bd18:	f7fe fce0 	bl	800a6dc <HAL_RCC_GetPCLK2Freq>
 800bd1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800bd20:	e003      	b.n	800bd2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd22:	f7fe fcc7 	bl	800a6b4 <HAL_RCC_GetPCLK1Freq>
 800bd26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd2e:	69db      	ldr	r3, [r3, #28]
 800bd30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd34:	f040 810c 	bne.w	800bf50 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bd38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bd42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800bd46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800bd4a:	4622      	mov	r2, r4
 800bd4c:	462b      	mov	r3, r5
 800bd4e:	1891      	adds	r1, r2, r2
 800bd50:	65b9      	str	r1, [r7, #88]	; 0x58
 800bd52:	415b      	adcs	r3, r3
 800bd54:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bd56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800bd5a:	4621      	mov	r1, r4
 800bd5c:	eb12 0801 	adds.w	r8, r2, r1
 800bd60:	4629      	mov	r1, r5
 800bd62:	eb43 0901 	adc.w	r9, r3, r1
 800bd66:	f04f 0200 	mov.w	r2, #0
 800bd6a:	f04f 0300 	mov.w	r3, #0
 800bd6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bd72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bd76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bd7a:	4690      	mov	r8, r2
 800bd7c:	4699      	mov	r9, r3
 800bd7e:	4623      	mov	r3, r4
 800bd80:	eb18 0303 	adds.w	r3, r8, r3
 800bd84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bd88:	462b      	mov	r3, r5
 800bd8a:	eb49 0303 	adc.w	r3, r9, r3
 800bd8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bd92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bd9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800bda2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bda6:	460b      	mov	r3, r1
 800bda8:	18db      	adds	r3, r3, r3
 800bdaa:	653b      	str	r3, [r7, #80]	; 0x50
 800bdac:	4613      	mov	r3, r2
 800bdae:	eb42 0303 	adc.w	r3, r2, r3
 800bdb2:	657b      	str	r3, [r7, #84]	; 0x54
 800bdb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800bdb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800bdbc:	f7f4 ff64 	bl	8000c88 <__aeabi_uldivmod>
 800bdc0:	4602      	mov	r2, r0
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	4b61      	ldr	r3, [pc, #388]	; (800bf4c <UART_SetConfig+0x2d4>)
 800bdc6:	fba3 2302 	umull	r2, r3, r3, r2
 800bdca:	095b      	lsrs	r3, r3, #5
 800bdcc:	011c      	lsls	r4, r3, #4
 800bdce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bdd8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800bddc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800bde0:	4642      	mov	r2, r8
 800bde2:	464b      	mov	r3, r9
 800bde4:	1891      	adds	r1, r2, r2
 800bde6:	64b9      	str	r1, [r7, #72]	; 0x48
 800bde8:	415b      	adcs	r3, r3
 800bdea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bdec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800bdf0:	4641      	mov	r1, r8
 800bdf2:	eb12 0a01 	adds.w	sl, r2, r1
 800bdf6:	4649      	mov	r1, r9
 800bdf8:	eb43 0b01 	adc.w	fp, r3, r1
 800bdfc:	f04f 0200 	mov.w	r2, #0
 800be00:	f04f 0300 	mov.w	r3, #0
 800be04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800be08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800be0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be10:	4692      	mov	sl, r2
 800be12:	469b      	mov	fp, r3
 800be14:	4643      	mov	r3, r8
 800be16:	eb1a 0303 	adds.w	r3, sl, r3
 800be1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800be1e:	464b      	mov	r3, r9
 800be20:	eb4b 0303 	adc.w	r3, fp, r3
 800be24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800be28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800be34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800be38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800be3c:	460b      	mov	r3, r1
 800be3e:	18db      	adds	r3, r3, r3
 800be40:	643b      	str	r3, [r7, #64]	; 0x40
 800be42:	4613      	mov	r3, r2
 800be44:	eb42 0303 	adc.w	r3, r2, r3
 800be48:	647b      	str	r3, [r7, #68]	; 0x44
 800be4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800be4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800be52:	f7f4 ff19 	bl	8000c88 <__aeabi_uldivmod>
 800be56:	4602      	mov	r2, r0
 800be58:	460b      	mov	r3, r1
 800be5a:	4611      	mov	r1, r2
 800be5c:	4b3b      	ldr	r3, [pc, #236]	; (800bf4c <UART_SetConfig+0x2d4>)
 800be5e:	fba3 2301 	umull	r2, r3, r3, r1
 800be62:	095b      	lsrs	r3, r3, #5
 800be64:	2264      	movs	r2, #100	; 0x64
 800be66:	fb02 f303 	mul.w	r3, r2, r3
 800be6a:	1acb      	subs	r3, r1, r3
 800be6c:	00db      	lsls	r3, r3, #3
 800be6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800be72:	4b36      	ldr	r3, [pc, #216]	; (800bf4c <UART_SetConfig+0x2d4>)
 800be74:	fba3 2302 	umull	r2, r3, r3, r2
 800be78:	095b      	lsrs	r3, r3, #5
 800be7a:	005b      	lsls	r3, r3, #1
 800be7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800be80:	441c      	add	r4, r3
 800be82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800be86:	2200      	movs	r2, #0
 800be88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800be8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800be90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800be94:	4642      	mov	r2, r8
 800be96:	464b      	mov	r3, r9
 800be98:	1891      	adds	r1, r2, r2
 800be9a:	63b9      	str	r1, [r7, #56]	; 0x38
 800be9c:	415b      	adcs	r3, r3
 800be9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bea4:	4641      	mov	r1, r8
 800bea6:	1851      	adds	r1, r2, r1
 800bea8:	6339      	str	r1, [r7, #48]	; 0x30
 800beaa:	4649      	mov	r1, r9
 800beac:	414b      	adcs	r3, r1
 800beae:	637b      	str	r3, [r7, #52]	; 0x34
 800beb0:	f04f 0200 	mov.w	r2, #0
 800beb4:	f04f 0300 	mov.w	r3, #0
 800beb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800bebc:	4659      	mov	r1, fp
 800bebe:	00cb      	lsls	r3, r1, #3
 800bec0:	4651      	mov	r1, sl
 800bec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bec6:	4651      	mov	r1, sl
 800bec8:	00ca      	lsls	r2, r1, #3
 800beca:	4610      	mov	r0, r2
 800becc:	4619      	mov	r1, r3
 800bece:	4603      	mov	r3, r0
 800bed0:	4642      	mov	r2, r8
 800bed2:	189b      	adds	r3, r3, r2
 800bed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bed8:	464b      	mov	r3, r9
 800beda:	460a      	mov	r2, r1
 800bedc:	eb42 0303 	adc.w	r3, r2, r3
 800bee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	2200      	movs	r2, #0
 800beec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bef0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bef4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bef8:	460b      	mov	r3, r1
 800befa:	18db      	adds	r3, r3, r3
 800befc:	62bb      	str	r3, [r7, #40]	; 0x28
 800befe:	4613      	mov	r3, r2
 800bf00:	eb42 0303 	adc.w	r3, r2, r3
 800bf04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bf0a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bf0e:	f7f4 febb 	bl	8000c88 <__aeabi_uldivmod>
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	4b0d      	ldr	r3, [pc, #52]	; (800bf4c <UART_SetConfig+0x2d4>)
 800bf18:	fba3 1302 	umull	r1, r3, r3, r2
 800bf1c:	095b      	lsrs	r3, r3, #5
 800bf1e:	2164      	movs	r1, #100	; 0x64
 800bf20:	fb01 f303 	mul.w	r3, r1, r3
 800bf24:	1ad3      	subs	r3, r2, r3
 800bf26:	00db      	lsls	r3, r3, #3
 800bf28:	3332      	adds	r3, #50	; 0x32
 800bf2a:	4a08      	ldr	r2, [pc, #32]	; (800bf4c <UART_SetConfig+0x2d4>)
 800bf2c:	fba2 2303 	umull	r2, r3, r2, r3
 800bf30:	095b      	lsrs	r3, r3, #5
 800bf32:	f003 0207 	and.w	r2, r3, #7
 800bf36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4422      	add	r2, r4
 800bf3e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bf40:	e105      	b.n	800c14e <UART_SetConfig+0x4d6>
 800bf42:	bf00      	nop
 800bf44:	40011000 	.word	0x40011000
 800bf48:	40011400 	.word	0x40011400
 800bf4c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bf50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bf54:	2200      	movs	r2, #0
 800bf56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bf5a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bf5e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bf62:	4642      	mov	r2, r8
 800bf64:	464b      	mov	r3, r9
 800bf66:	1891      	adds	r1, r2, r2
 800bf68:	6239      	str	r1, [r7, #32]
 800bf6a:	415b      	adcs	r3, r3
 800bf6c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bf72:	4641      	mov	r1, r8
 800bf74:	1854      	adds	r4, r2, r1
 800bf76:	4649      	mov	r1, r9
 800bf78:	eb43 0501 	adc.w	r5, r3, r1
 800bf7c:	f04f 0200 	mov.w	r2, #0
 800bf80:	f04f 0300 	mov.w	r3, #0
 800bf84:	00eb      	lsls	r3, r5, #3
 800bf86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bf8a:	00e2      	lsls	r2, r4, #3
 800bf8c:	4614      	mov	r4, r2
 800bf8e:	461d      	mov	r5, r3
 800bf90:	4643      	mov	r3, r8
 800bf92:	18e3      	adds	r3, r4, r3
 800bf94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf98:	464b      	mov	r3, r9
 800bf9a:	eb45 0303 	adc.w	r3, r5, r3
 800bf9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bfa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bfae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bfb2:	f04f 0200 	mov.w	r2, #0
 800bfb6:	f04f 0300 	mov.w	r3, #0
 800bfba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	008b      	lsls	r3, r1, #2
 800bfc2:	4621      	mov	r1, r4
 800bfc4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bfc8:	4621      	mov	r1, r4
 800bfca:	008a      	lsls	r2, r1, #2
 800bfcc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bfd0:	f7f4 fe5a 	bl	8000c88 <__aeabi_uldivmod>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4b60      	ldr	r3, [pc, #384]	; (800c15c <UART_SetConfig+0x4e4>)
 800bfda:	fba3 2302 	umull	r2, r3, r3, r2
 800bfde:	095b      	lsrs	r3, r3, #5
 800bfe0:	011c      	lsls	r4, r3, #4
 800bfe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bfec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bff0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bff4:	4642      	mov	r2, r8
 800bff6:	464b      	mov	r3, r9
 800bff8:	1891      	adds	r1, r2, r2
 800bffa:	61b9      	str	r1, [r7, #24]
 800bffc:	415b      	adcs	r3, r3
 800bffe:	61fb      	str	r3, [r7, #28]
 800c000:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c004:	4641      	mov	r1, r8
 800c006:	1851      	adds	r1, r2, r1
 800c008:	6139      	str	r1, [r7, #16]
 800c00a:	4649      	mov	r1, r9
 800c00c:	414b      	adcs	r3, r1
 800c00e:	617b      	str	r3, [r7, #20]
 800c010:	f04f 0200 	mov.w	r2, #0
 800c014:	f04f 0300 	mov.w	r3, #0
 800c018:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c01c:	4659      	mov	r1, fp
 800c01e:	00cb      	lsls	r3, r1, #3
 800c020:	4651      	mov	r1, sl
 800c022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c026:	4651      	mov	r1, sl
 800c028:	00ca      	lsls	r2, r1, #3
 800c02a:	4610      	mov	r0, r2
 800c02c:	4619      	mov	r1, r3
 800c02e:	4603      	mov	r3, r0
 800c030:	4642      	mov	r2, r8
 800c032:	189b      	adds	r3, r3, r2
 800c034:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c038:	464b      	mov	r3, r9
 800c03a:	460a      	mov	r2, r1
 800c03c:	eb42 0303 	adc.w	r3, r2, r3
 800c040:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	2200      	movs	r2, #0
 800c04c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c04e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c050:	f04f 0200 	mov.w	r2, #0
 800c054:	f04f 0300 	mov.w	r3, #0
 800c058:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c05c:	4649      	mov	r1, r9
 800c05e:	008b      	lsls	r3, r1, #2
 800c060:	4641      	mov	r1, r8
 800c062:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c066:	4641      	mov	r1, r8
 800c068:	008a      	lsls	r2, r1, #2
 800c06a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c06e:	f7f4 fe0b 	bl	8000c88 <__aeabi_uldivmod>
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	4b39      	ldr	r3, [pc, #228]	; (800c15c <UART_SetConfig+0x4e4>)
 800c078:	fba3 1302 	umull	r1, r3, r3, r2
 800c07c:	095b      	lsrs	r3, r3, #5
 800c07e:	2164      	movs	r1, #100	; 0x64
 800c080:	fb01 f303 	mul.w	r3, r1, r3
 800c084:	1ad3      	subs	r3, r2, r3
 800c086:	011b      	lsls	r3, r3, #4
 800c088:	3332      	adds	r3, #50	; 0x32
 800c08a:	4a34      	ldr	r2, [pc, #208]	; (800c15c <UART_SetConfig+0x4e4>)
 800c08c:	fba2 2303 	umull	r2, r3, r2, r3
 800c090:	095b      	lsrs	r3, r3, #5
 800c092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c096:	441c      	add	r4, r3
 800c098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c09c:	2200      	movs	r2, #0
 800c09e:	673b      	str	r3, [r7, #112]	; 0x70
 800c0a0:	677a      	str	r2, [r7, #116]	; 0x74
 800c0a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c0a6:	4642      	mov	r2, r8
 800c0a8:	464b      	mov	r3, r9
 800c0aa:	1891      	adds	r1, r2, r2
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	415b      	adcs	r3, r3
 800c0b0:	60fb      	str	r3, [r7, #12]
 800c0b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c0b6:	4641      	mov	r1, r8
 800c0b8:	1851      	adds	r1, r2, r1
 800c0ba:	6039      	str	r1, [r7, #0]
 800c0bc:	4649      	mov	r1, r9
 800c0be:	414b      	adcs	r3, r1
 800c0c0:	607b      	str	r3, [r7, #4]
 800c0c2:	f04f 0200 	mov.w	r2, #0
 800c0c6:	f04f 0300 	mov.w	r3, #0
 800c0ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c0ce:	4659      	mov	r1, fp
 800c0d0:	00cb      	lsls	r3, r1, #3
 800c0d2:	4651      	mov	r1, sl
 800c0d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c0d8:	4651      	mov	r1, sl
 800c0da:	00ca      	lsls	r2, r1, #3
 800c0dc:	4610      	mov	r0, r2
 800c0de:	4619      	mov	r1, r3
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	4642      	mov	r2, r8
 800c0e4:	189b      	adds	r3, r3, r2
 800c0e6:	66bb      	str	r3, [r7, #104]	; 0x68
 800c0e8:	464b      	mov	r3, r9
 800c0ea:	460a      	mov	r2, r1
 800c0ec:	eb42 0303 	adc.w	r3, r2, r3
 800c0f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c0f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	663b      	str	r3, [r7, #96]	; 0x60
 800c0fc:	667a      	str	r2, [r7, #100]	; 0x64
 800c0fe:	f04f 0200 	mov.w	r2, #0
 800c102:	f04f 0300 	mov.w	r3, #0
 800c106:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c10a:	4649      	mov	r1, r9
 800c10c:	008b      	lsls	r3, r1, #2
 800c10e:	4641      	mov	r1, r8
 800c110:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c114:	4641      	mov	r1, r8
 800c116:	008a      	lsls	r2, r1, #2
 800c118:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c11c:	f7f4 fdb4 	bl	8000c88 <__aeabi_uldivmod>
 800c120:	4602      	mov	r2, r0
 800c122:	460b      	mov	r3, r1
 800c124:	4b0d      	ldr	r3, [pc, #52]	; (800c15c <UART_SetConfig+0x4e4>)
 800c126:	fba3 1302 	umull	r1, r3, r3, r2
 800c12a:	095b      	lsrs	r3, r3, #5
 800c12c:	2164      	movs	r1, #100	; 0x64
 800c12e:	fb01 f303 	mul.w	r3, r1, r3
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	011b      	lsls	r3, r3, #4
 800c136:	3332      	adds	r3, #50	; 0x32
 800c138:	4a08      	ldr	r2, [pc, #32]	; (800c15c <UART_SetConfig+0x4e4>)
 800c13a:	fba2 2303 	umull	r2, r3, r2, r3
 800c13e:	095b      	lsrs	r3, r3, #5
 800c140:	f003 020f 	and.w	r2, r3, #15
 800c144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	4422      	add	r2, r4
 800c14c:	609a      	str	r2, [r3, #8]
}
 800c14e:	bf00      	nop
 800c150:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c154:	46bd      	mov	sp, r7
 800c156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c15a:	bf00      	nop
 800c15c:	51eb851f 	.word	0x51eb851f

0800c160 <__NVIC_SetPriority>:
{
 800c160:	b480      	push	{r7}
 800c162:	b083      	sub	sp, #12
 800c164:	af00      	add	r7, sp, #0
 800c166:	4603      	mov	r3, r0
 800c168:	6039      	str	r1, [r7, #0]
 800c16a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c16c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c170:	2b00      	cmp	r3, #0
 800c172:	db0a      	blt.n	800c18a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	b2da      	uxtb	r2, r3
 800c178:	490c      	ldr	r1, [pc, #48]	; (800c1ac <__NVIC_SetPriority+0x4c>)
 800c17a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c17e:	0112      	lsls	r2, r2, #4
 800c180:	b2d2      	uxtb	r2, r2
 800c182:	440b      	add	r3, r1
 800c184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c188:	e00a      	b.n	800c1a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	b2da      	uxtb	r2, r3
 800c18e:	4908      	ldr	r1, [pc, #32]	; (800c1b0 <__NVIC_SetPriority+0x50>)
 800c190:	79fb      	ldrb	r3, [r7, #7]
 800c192:	f003 030f 	and.w	r3, r3, #15
 800c196:	3b04      	subs	r3, #4
 800c198:	0112      	lsls	r2, r2, #4
 800c19a:	b2d2      	uxtb	r2, r2
 800c19c:	440b      	add	r3, r1
 800c19e:	761a      	strb	r2, [r3, #24]
}
 800c1a0:	bf00      	nop
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr
 800c1ac:	e000e100 	.word	0xe000e100
 800c1b0:	e000ed00 	.word	0xe000ed00

0800c1b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c1b8:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <SysTick_Handler+0x1c>)
 800c1ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c1bc:	f002 f968 	bl	800e490 <xTaskGetSchedulerState>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d001      	beq.n	800c1ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c1c6:	f003 f84f 	bl	800f268 <xPortSysTickHandler>
  }
}
 800c1ca:	bf00      	nop
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	e000e010 	.word	0xe000e010

0800c1d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c1d8:	2100      	movs	r1, #0
 800c1da:	f06f 0004 	mvn.w	r0, #4
 800c1de:	f7ff ffbf 	bl	800c160 <__NVIC_SetPriority>
#endif
}
 800c1e2:	bf00      	nop
 800c1e4:	bd80      	pop	{r7, pc}
	...

0800c1e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1ee:	f3ef 8305 	mrs	r3, IPSR
 800c1f2:	603b      	str	r3, [r7, #0]
  return(result);
 800c1f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d003      	beq.n	800c202 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c1fa:	f06f 0305 	mvn.w	r3, #5
 800c1fe:	607b      	str	r3, [r7, #4]
 800c200:	e00c      	b.n	800c21c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c202:	4b0a      	ldr	r3, [pc, #40]	; (800c22c <osKernelInitialize+0x44>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d105      	bne.n	800c216 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c20a:	4b08      	ldr	r3, [pc, #32]	; (800c22c <osKernelInitialize+0x44>)
 800c20c:	2201      	movs	r2, #1
 800c20e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c210:	2300      	movs	r3, #0
 800c212:	607b      	str	r3, [r7, #4]
 800c214:	e002      	b.n	800c21c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c216:	f04f 33ff 	mov.w	r3, #4294967295
 800c21a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c21c:	687b      	ldr	r3, [r7, #4]
}
 800c21e:	4618      	mov	r0, r3
 800c220:	370c      	adds	r7, #12
 800c222:	46bd      	mov	sp, r7
 800c224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c228:	4770      	bx	lr
 800c22a:	bf00      	nop
 800c22c:	20001850 	.word	0x20001850

0800c230 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c236:	f3ef 8305 	mrs	r3, IPSR
 800c23a:	603b      	str	r3, [r7, #0]
  return(result);
 800c23c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <osKernelStart+0x1a>
    stat = osErrorISR;
 800c242:	f06f 0305 	mvn.w	r3, #5
 800c246:	607b      	str	r3, [r7, #4]
 800c248:	e010      	b.n	800c26c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c24a:	4b0b      	ldr	r3, [pc, #44]	; (800c278 <osKernelStart+0x48>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d109      	bne.n	800c266 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c252:	f7ff ffbf 	bl	800c1d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c256:	4b08      	ldr	r3, [pc, #32]	; (800c278 <osKernelStart+0x48>)
 800c258:	2202      	movs	r2, #2
 800c25a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c25c:	f001 fcbc 	bl	800dbd8 <vTaskStartScheduler>
      stat = osOK;
 800c260:	2300      	movs	r3, #0
 800c262:	607b      	str	r3, [r7, #4]
 800c264:	e002      	b.n	800c26c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c266:	f04f 33ff 	mov.w	r3, #4294967295
 800c26a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c26c:	687b      	ldr	r3, [r7, #4]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	20001850 	.word	0x20001850

0800c27c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b08e      	sub	sp, #56	; 0x38
 800c280:	af04      	add	r7, sp, #16
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c288:	2300      	movs	r3, #0
 800c28a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c28c:	f3ef 8305 	mrs	r3, IPSR
 800c290:	617b      	str	r3, [r7, #20]
  return(result);
 800c292:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c294:	2b00      	cmp	r3, #0
 800c296:	d17e      	bne.n	800c396 <osThreadNew+0x11a>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d07b      	beq.n	800c396 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c29e:	2380      	movs	r3, #128	; 0x80
 800c2a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c2a2:	2318      	movs	r3, #24
 800c2a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c2aa:	f04f 33ff 	mov.w	r3, #4294967295
 800c2ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d045      	beq.n	800c342 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d002      	beq.n	800c2c4 <osThreadNew+0x48>
        name = attr->name;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	699b      	ldr	r3, [r3, #24]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d002      	beq.n	800c2d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	699b      	ldr	r3, [r3, #24]
 800c2d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d008      	beq.n	800c2ea <osThreadNew+0x6e>
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	2b38      	cmp	r3, #56	; 0x38
 800c2dc:	d805      	bhi.n	800c2ea <osThreadNew+0x6e>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	f003 0301 	and.w	r3, r3, #1
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d001      	beq.n	800c2ee <osThreadNew+0x72>
        return (NULL);
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e054      	b.n	800c398 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	695b      	ldr	r3, [r3, #20]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d003      	beq.n	800c2fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	089b      	lsrs	r3, r3, #2
 800c2fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d00e      	beq.n	800c324 <osThreadNew+0xa8>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	2bbb      	cmp	r3, #187	; 0xbb
 800c30c:	d90a      	bls.n	800c324 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c312:	2b00      	cmp	r3, #0
 800c314:	d006      	beq.n	800c324 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	695b      	ldr	r3, [r3, #20]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d002      	beq.n	800c324 <osThreadNew+0xa8>
        mem = 1;
 800c31e:	2301      	movs	r3, #1
 800c320:	61bb      	str	r3, [r7, #24]
 800c322:	e010      	b.n	800c346 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10c      	bne.n	800c346 <osThreadNew+0xca>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	68db      	ldr	r3, [r3, #12]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d108      	bne.n	800c346 <osThreadNew+0xca>
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	691b      	ldr	r3, [r3, #16]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d104      	bne.n	800c346 <osThreadNew+0xca>
          mem = 0;
 800c33c:	2300      	movs	r3, #0
 800c33e:	61bb      	str	r3, [r7, #24]
 800c340:	e001      	b.n	800c346 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c342:	2300      	movs	r3, #0
 800c344:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d110      	bne.n	800c36e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c354:	9202      	str	r2, [sp, #8]
 800c356:	9301      	str	r3, [sp, #4]
 800c358:	69fb      	ldr	r3, [r7, #28]
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	6a3a      	ldr	r2, [r7, #32]
 800c360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c362:	68f8      	ldr	r0, [r7, #12]
 800c364:	f001 fa4c 	bl	800d800 <xTaskCreateStatic>
 800c368:	4603      	mov	r3, r0
 800c36a:	613b      	str	r3, [r7, #16]
 800c36c:	e013      	b.n	800c396 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d110      	bne.n	800c396 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c374:	6a3b      	ldr	r3, [r7, #32]
 800c376:	b29a      	uxth	r2, r3
 800c378:	f107 0310 	add.w	r3, r7, #16
 800c37c:	9301      	str	r3, [sp, #4]
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	9300      	str	r3, [sp, #0]
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f001 fa97 	bl	800d8ba <xTaskCreate>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d001      	beq.n	800c396 <osThreadNew+0x11a>
            hTask = NULL;
 800c392:	2300      	movs	r3, #0
 800c394:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c396:	693b      	ldr	r3, [r7, #16]
}
 800c398:	4618      	mov	r0, r3
 800c39a:	3728      	adds	r7, #40	; 0x28
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}

0800c3a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b084      	sub	sp, #16
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3a8:	f3ef 8305 	mrs	r3, IPSR
 800c3ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800c3ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d003      	beq.n	800c3bc <osDelay+0x1c>
    stat = osErrorISR;
 800c3b4:	f06f 0305 	mvn.w	r3, #5
 800c3b8:	60fb      	str	r3, [r7, #12]
 800c3ba:	e007      	b.n	800c3cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d002      	beq.n	800c3cc <osDelay+0x2c>
      vTaskDelay(ticks);
 800c3c6:	6878      	ldr	r0, [r7, #4]
 800c3c8:	f001 fbd2 	bl	800db70 <vTaskDelay>
    }
  }

  return (stat);
 800c3cc:	68fb      	ldr	r3, [r7, #12]
}
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	3710      	adds	r7, #16
 800c3d2:	46bd      	mov	sp, r7
 800c3d4:	bd80      	pop	{r7, pc}

0800c3d6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c3d6:	b580      	push	{r7, lr}
 800c3d8:	b08a      	sub	sp, #40	; 0x28
 800c3da:	af02      	add	r7, sp, #8
 800c3dc:	60f8      	str	r0, [r7, #12]
 800c3de:	60b9      	str	r1, [r7, #8]
 800c3e0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3e6:	f3ef 8305 	mrs	r3, IPSR
 800c3ea:	613b      	str	r3, [r7, #16]
  return(result);
 800c3ec:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d175      	bne.n	800c4de <osSemaphoreNew+0x108>
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d072      	beq.n	800c4de <osSemaphoreNew+0x108>
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d86e      	bhi.n	800c4de <osSemaphoreNew+0x108>
    mem = -1;
 800c400:	f04f 33ff 	mov.w	r3, #4294967295
 800c404:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d015      	beq.n	800c438 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	689b      	ldr	r3, [r3, #8]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d006      	beq.n	800c422 <osSemaphoreNew+0x4c>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	2b4f      	cmp	r3, #79	; 0x4f
 800c41a:	d902      	bls.n	800c422 <osSemaphoreNew+0x4c>
        mem = 1;
 800c41c:	2301      	movs	r3, #1
 800c41e:	61bb      	str	r3, [r7, #24]
 800c420:	e00c      	b.n	800c43c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	689b      	ldr	r3, [r3, #8]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d108      	bne.n	800c43c <osSemaphoreNew+0x66>
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d104      	bne.n	800c43c <osSemaphoreNew+0x66>
          mem = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	61bb      	str	r3, [r7, #24]
 800c436:	e001      	b.n	800c43c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c438:	2300      	movs	r3, #0
 800c43a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c442:	d04c      	beq.n	800c4de <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2b01      	cmp	r3, #1
 800c448:	d128      	bne.n	800c49c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	d10a      	bne.n	800c466 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	2203      	movs	r2, #3
 800c456:	9200      	str	r2, [sp, #0]
 800c458:	2200      	movs	r2, #0
 800c45a:	2100      	movs	r1, #0
 800c45c:	2001      	movs	r0, #1
 800c45e:	f000 fa29 	bl	800c8b4 <xQueueGenericCreateStatic>
 800c462:	61f8      	str	r0, [r7, #28]
 800c464:	e005      	b.n	800c472 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c466:	2203      	movs	r2, #3
 800c468:	2100      	movs	r1, #0
 800c46a:	2001      	movs	r0, #1
 800c46c:	f000 fa9a 	bl	800c9a4 <xQueueGenericCreate>
 800c470:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c472:	69fb      	ldr	r3, [r7, #28]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d022      	beq.n	800c4be <osSemaphoreNew+0xe8>
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d01f      	beq.n	800c4be <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c47e:	2300      	movs	r3, #0
 800c480:	2200      	movs	r2, #0
 800c482:	2100      	movs	r1, #0
 800c484:	69f8      	ldr	r0, [r7, #28]
 800c486:	f000 fb55 	bl	800cb34 <xQueueGenericSend>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d016      	beq.n	800c4be <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c490:	69f8      	ldr	r0, [r7, #28]
 800c492:	f000 ffe1 	bl	800d458 <vQueueDelete>
            hSemaphore = NULL;
 800c496:	2300      	movs	r3, #0
 800c498:	61fb      	str	r3, [r7, #28]
 800c49a:	e010      	b.n	800c4be <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c49c:	69bb      	ldr	r3, [r7, #24]
 800c49e:	2b01      	cmp	r3, #1
 800c4a0:	d108      	bne.n	800c4b4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	461a      	mov	r2, r3
 800c4a8:	68b9      	ldr	r1, [r7, #8]
 800c4aa:	68f8      	ldr	r0, [r7, #12]
 800c4ac:	f000 fad7 	bl	800ca5e <xQueueCreateCountingSemaphoreStatic>
 800c4b0:	61f8      	str	r0, [r7, #28]
 800c4b2:	e004      	b.n	800c4be <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c4b4:	68b9      	ldr	r1, [r7, #8]
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f000 fb08 	bl	800cacc <xQueueCreateCountingSemaphore>
 800c4bc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c4be:	69fb      	ldr	r3, [r7, #28]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00c      	beq.n	800c4de <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d003      	beq.n	800c4d2 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	617b      	str	r3, [r7, #20]
 800c4d0:	e001      	b.n	800c4d6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c4d6:	6979      	ldr	r1, [r7, #20]
 800c4d8:	69f8      	ldr	r0, [r7, #28]
 800c4da:	f001 f909 	bl	800d6f0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c4de:	69fb      	ldr	r3, [r7, #28]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3720      	adds	r7, #32
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d103      	bne.n	800c508 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c500:	f06f 0303 	mvn.w	r3, #3
 800c504:	617b      	str	r3, [r7, #20]
 800c506:	e039      	b.n	800c57c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c508:	f3ef 8305 	mrs	r3, IPSR
 800c50c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c50e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c510:	2b00      	cmp	r3, #0
 800c512:	d022      	beq.n	800c55a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d003      	beq.n	800c522 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c51a:	f06f 0303 	mvn.w	r3, #3
 800c51e:	617b      	str	r3, [r7, #20]
 800c520:	e02c      	b.n	800c57c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c522:	2300      	movs	r3, #0
 800c524:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c526:	f107 0308 	add.w	r3, r7, #8
 800c52a:	461a      	mov	r2, r3
 800c52c:	2100      	movs	r1, #0
 800c52e:	6938      	ldr	r0, [r7, #16]
 800c530:	f000 ff12 	bl	800d358 <xQueueReceiveFromISR>
 800c534:	4603      	mov	r3, r0
 800c536:	2b01      	cmp	r3, #1
 800c538:	d003      	beq.n	800c542 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c53a:	f06f 0302 	mvn.w	r3, #2
 800c53e:	617b      	str	r3, [r7, #20]
 800c540:	e01c      	b.n	800c57c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d019      	beq.n	800c57c <osSemaphoreAcquire+0x94>
 800c548:	4b0f      	ldr	r3, [pc, #60]	; (800c588 <osSemaphoreAcquire+0xa0>)
 800c54a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c54e:	601a      	str	r2, [r3, #0]
 800c550:	f3bf 8f4f 	dsb	sy
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	e010      	b.n	800c57c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6938      	ldr	r0, [r7, #16]
 800c55e:	f000 fdef 	bl	800d140 <xQueueSemaphoreTake>
 800c562:	4603      	mov	r3, r0
 800c564:	2b01      	cmp	r3, #1
 800c566:	d009      	beq.n	800c57c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c568:	683b      	ldr	r3, [r7, #0]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d003      	beq.n	800c576 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c56e:	f06f 0301 	mvn.w	r3, #1
 800c572:	617b      	str	r3, [r7, #20]
 800c574:	e002      	b.n	800c57c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c576:	f06f 0302 	mvn.w	r3, #2
 800c57a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c57c:	697b      	ldr	r3, [r7, #20]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3718      	adds	r7, #24
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	e000ed04 	.word	0xe000ed04

0800c58c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c598:	2300      	movs	r3, #0
 800c59a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d103      	bne.n	800c5aa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c5a2:	f06f 0303 	mvn.w	r3, #3
 800c5a6:	617b      	str	r3, [r7, #20]
 800c5a8:	e02c      	b.n	800c604 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5aa:	f3ef 8305 	mrs	r3, IPSR
 800c5ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800c5b0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d01a      	beq.n	800c5ec <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c5ba:	f107 0308 	add.w	r3, r7, #8
 800c5be:	4619      	mov	r1, r3
 800c5c0:	6938      	ldr	r0, [r7, #16]
 800c5c2:	f000 fc50 	bl	800ce66 <xQueueGiveFromISR>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d003      	beq.n	800c5d4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c5cc:	f06f 0302 	mvn.w	r3, #2
 800c5d0:	617b      	str	r3, [r7, #20]
 800c5d2:	e017      	b.n	800c604 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d014      	beq.n	800c604 <osSemaphoreRelease+0x78>
 800c5da:	4b0d      	ldr	r3, [pc, #52]	; (800c610 <osSemaphoreRelease+0x84>)
 800c5dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5e0:	601a      	str	r2, [r3, #0]
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	e00b      	b.n	800c604 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	6938      	ldr	r0, [r7, #16]
 800c5f4:	f000 fa9e 	bl	800cb34 <xQueueGenericSend>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d002      	beq.n	800c604 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c5fe:	f06f 0302 	mvn.w	r3, #2
 800c602:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c604:	697b      	ldr	r3, [r7, #20]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3718      	adds	r7, #24
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	e000ed04 	.word	0xe000ed04

0800c614 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c614:	b480      	push	{r7}
 800c616:	b085      	sub	sp, #20
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	4a07      	ldr	r2, [pc, #28]	; (800c640 <vApplicationGetIdleTaskMemory+0x2c>)
 800c624:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	4a06      	ldr	r2, [pc, #24]	; (800c644 <vApplicationGetIdleTaskMemory+0x30>)
 800c62a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2280      	movs	r2, #128	; 0x80
 800c630:	601a      	str	r2, [r3, #0]
}
 800c632:	bf00      	nop
 800c634:	3714      	adds	r7, #20
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	20001854 	.word	0x20001854
 800c644:	20001910 	.word	0x20001910

0800c648 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c648:	b480      	push	{r7}
 800c64a:	b085      	sub	sp, #20
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	4a07      	ldr	r2, [pc, #28]	; (800c674 <vApplicationGetTimerTaskMemory+0x2c>)
 800c658:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	4a06      	ldr	r2, [pc, #24]	; (800c678 <vApplicationGetTimerTaskMemory+0x30>)
 800c65e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c666:	601a      	str	r2, [r3, #0]
}
 800c668:	bf00      	nop
 800c66a:	3714      	adds	r7, #20
 800c66c:	46bd      	mov	sp, r7
 800c66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c672:	4770      	bx	lr
 800c674:	20001b10 	.word	0x20001b10
 800c678:	20001bcc 	.word	0x20001bcc

0800c67c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c67c:	b480      	push	{r7}
 800c67e:	b083      	sub	sp, #12
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f103 0208 	add.w	r2, r3, #8
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f04f 32ff 	mov.w	r2, #4294967295
 800c694:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f103 0208 	add.w	r2, r3, #8
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f103 0208 	add.w	r2, r3, #8
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c6b0:	bf00      	nop
 800c6b2:	370c      	adds	r7, #12
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr

0800c6bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b083      	sub	sp, #12
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c6ca:	bf00      	nop
 800c6cc:	370c      	adds	r7, #12
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d4:	4770      	bx	lr

0800c6d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c6d6:	b480      	push	{r7}
 800c6d8:	b085      	sub	sp, #20
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	683a      	ldr	r2, [r7, #0]
 800c6fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	1c5a      	adds	r2, r3, #1
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	601a      	str	r2, [r3, #0]
}
 800c712:	bf00      	nop
 800c714:	3714      	adds	r7, #20
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c71e:	b480      	push	{r7}
 800c720:	b085      	sub	sp, #20
 800c722:	af00      	add	r7, sp, #0
 800c724:	6078      	str	r0, [r7, #4]
 800c726:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c72e:	68bb      	ldr	r3, [r7, #8]
 800c730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c734:	d103      	bne.n	800c73e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	60fb      	str	r3, [r7, #12]
 800c73c:	e00c      	b.n	800c758 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3308      	adds	r3, #8
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	e002      	b.n	800c74c <vListInsert+0x2e>
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	60fb      	str	r3, [r7, #12]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	68ba      	ldr	r2, [r7, #8]
 800c754:	429a      	cmp	r2, r3
 800c756:	d2f6      	bcs.n	800c746 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	685b      	ldr	r3, [r3, #4]
 800c764:	683a      	ldr	r2, [r7, #0]
 800c766:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	683a      	ldr	r2, [r7, #0]
 800c772:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	601a      	str	r2, [r3, #0]
}
 800c784:	bf00      	nop
 800c786:	3714      	adds	r7, #20
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c790:	b480      	push	{r7}
 800c792:	b085      	sub	sp, #20
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	691b      	ldr	r3, [r3, #16]
 800c79c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	6892      	ldr	r2, [r2, #8]
 800c7a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	687a      	ldr	r2, [r7, #4]
 800c7ae:	6852      	ldr	r2, [r2, #4]
 800c7b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	685b      	ldr	r3, [r3, #4]
 800c7b6:	687a      	ldr	r2, [r7, #4]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d103      	bne.n	800c7c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	689a      	ldr	r2, [r3, #8]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	1e5a      	subs	r2, r3, #1
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr

0800c7e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d10a      	bne.n	800c80e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c7f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c80a:	bf00      	nop
 800c80c:	e7fe      	b.n	800c80c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c80e:	f002 fc99 	bl	800f144 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681a      	ldr	r2, [r3, #0]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c81a:	68f9      	ldr	r1, [r7, #12]
 800c81c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c81e:	fb01 f303 	mul.w	r3, r1, r3
 800c822:	441a      	add	r2, r3
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c83e:	3b01      	subs	r3, #1
 800c840:	68f9      	ldr	r1, [r7, #12]
 800c842:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c844:	fb01 f303 	mul.w	r3, r1, r3
 800c848:	441a      	add	r2, r3
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	22ff      	movs	r2, #255	; 0xff
 800c852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	22ff      	movs	r2, #255	; 0xff
 800c85a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d114      	bne.n	800c88e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	691b      	ldr	r3, [r3, #16]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d01a      	beq.n	800c8a2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	3310      	adds	r3, #16
 800c870:	4618      	mov	r0, r3
 800c872:	f001 fc4b 	bl	800e10c <xTaskRemoveFromEventList>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d012      	beq.n	800c8a2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c87c:	4b0c      	ldr	r3, [pc, #48]	; (800c8b0 <xQueueGenericReset+0xcc>)
 800c87e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	f3bf 8f6f 	isb	sy
 800c88c:	e009      	b.n	800c8a2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	3310      	adds	r3, #16
 800c892:	4618      	mov	r0, r3
 800c894:	f7ff fef2 	bl	800c67c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	3324      	adds	r3, #36	; 0x24
 800c89c:	4618      	mov	r0, r3
 800c89e:	f7ff feed 	bl	800c67c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c8a2:	f002 fc7f 	bl	800f1a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c8a6:	2301      	movs	r3, #1
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3710      	adds	r7, #16
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	bd80      	pop	{r7, pc}
 800c8b0:	e000ed04 	.word	0xe000ed04

0800c8b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b08e      	sub	sp, #56	; 0x38
 800c8b8:	af02      	add	r7, sp, #8
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	607a      	str	r2, [r7, #4]
 800c8c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d10a      	bne.n	800c8de <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c8da:	bf00      	nop
 800c8dc:	e7fe      	b.n	800c8dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10a      	bne.n	800c8fa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8f6:	bf00      	nop
 800c8f8:	e7fe      	b.n	800c8f8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d002      	beq.n	800c906 <xQueueGenericCreateStatic+0x52>
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d001      	beq.n	800c90a <xQueueGenericCreateStatic+0x56>
 800c906:	2301      	movs	r3, #1
 800c908:	e000      	b.n	800c90c <xQueueGenericCreateStatic+0x58>
 800c90a:	2300      	movs	r3, #0
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d10a      	bne.n	800c926 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c914:	f383 8811 	msr	BASEPRI, r3
 800c918:	f3bf 8f6f 	isb	sy
 800c91c:	f3bf 8f4f 	dsb	sy
 800c920:	623b      	str	r3, [r7, #32]
}
 800c922:	bf00      	nop
 800c924:	e7fe      	b.n	800c924 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d102      	bne.n	800c932 <xQueueGenericCreateStatic+0x7e>
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d101      	bne.n	800c936 <xQueueGenericCreateStatic+0x82>
 800c932:	2301      	movs	r3, #1
 800c934:	e000      	b.n	800c938 <xQueueGenericCreateStatic+0x84>
 800c936:	2300      	movs	r3, #0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	61fb      	str	r3, [r7, #28]
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c952:	2350      	movs	r3, #80	; 0x50
 800c954:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	2b50      	cmp	r3, #80	; 0x50
 800c95a:	d00a      	beq.n	800c972 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c960:	f383 8811 	msr	BASEPRI, r3
 800c964:	f3bf 8f6f 	isb	sy
 800c968:	f3bf 8f4f 	dsb	sy
 800c96c:	61bb      	str	r3, [r7, #24]
}
 800c96e:	bf00      	nop
 800c970:	e7fe      	b.n	800c970 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c972:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00d      	beq.n	800c99a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c980:	2201      	movs	r2, #1
 800c982:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c986:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	4613      	mov	r3, r2
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	68b9      	ldr	r1, [r7, #8]
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f000 f83f 	bl	800ca18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3730      	adds	r7, #48	; 0x30
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b08a      	sub	sp, #40	; 0x28
 800c9a8:	af02      	add	r7, sp, #8
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	4613      	mov	r3, r2
 800c9b0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10a      	bne.n	800c9ce <xQueueGenericCreate+0x2a>
	__asm volatile
 800c9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9bc:	f383 8811 	msr	BASEPRI, r3
 800c9c0:	f3bf 8f6f 	isb	sy
 800c9c4:	f3bf 8f4f 	dsb	sy
 800c9c8:	613b      	str	r3, [r7, #16]
}
 800c9ca:	bf00      	nop
 800c9cc:	e7fe      	b.n	800c9cc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	68ba      	ldr	r2, [r7, #8]
 800c9d2:	fb02 f303 	mul.w	r3, r2, r3
 800c9d6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c9d8:	69fb      	ldr	r3, [r7, #28]
 800c9da:	3350      	adds	r3, #80	; 0x50
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f002 fcd3 	bl	800f388 <pvPortMalloc>
 800c9e2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c9e4:	69bb      	ldr	r3, [r7, #24]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d011      	beq.n	800ca0e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c9ea:	69bb      	ldr	r3, [r7, #24]
 800c9ec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	3350      	adds	r3, #80	; 0x50
 800c9f2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c9fc:	79fa      	ldrb	r2, [r7, #7]
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	9300      	str	r3, [sp, #0]
 800ca02:	4613      	mov	r3, r2
 800ca04:	697a      	ldr	r2, [r7, #20]
 800ca06:	68b9      	ldr	r1, [r7, #8]
 800ca08:	68f8      	ldr	r0, [r7, #12]
 800ca0a:	f000 f805 	bl	800ca18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca0e:	69bb      	ldr	r3, [r7, #24]
	}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3720      	adds	r7, #32
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	607a      	str	r2, [r7, #4]
 800ca24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d103      	bne.n	800ca34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ca2c:	69bb      	ldr	r3, [r7, #24]
 800ca2e:	69ba      	ldr	r2, [r7, #24]
 800ca30:	601a      	str	r2, [r3, #0]
 800ca32:	e002      	b.n	800ca3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	687a      	ldr	r2, [r7, #4]
 800ca38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	68fa      	ldr	r2, [r7, #12]
 800ca3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ca40:	69bb      	ldr	r3, [r7, #24]
 800ca42:	68ba      	ldr	r2, [r7, #8]
 800ca44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ca46:	2101      	movs	r1, #1
 800ca48:	69b8      	ldr	r0, [r7, #24]
 800ca4a:	f7ff fecb 	bl	800c7e4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ca4e:	69bb      	ldr	r3, [r7, #24]
 800ca50:	78fa      	ldrb	r2, [r7, #3]
 800ca52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ca56:	bf00      	nop
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b08a      	sub	sp, #40	; 0x28
 800ca62:	af02      	add	r7, sp, #8
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	60b9      	str	r1, [r7, #8]
 800ca68:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10a      	bne.n	800ca86 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	61bb      	str	r3, [r7, #24]
}
 800ca82:	bf00      	nop
 800ca84:	e7fe      	b.n	800ca84 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ca86:	68ba      	ldr	r2, [r7, #8]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d90a      	bls.n	800caa4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	617b      	str	r3, [r7, #20]
}
 800caa0:	bf00      	nop
 800caa2:	e7fe      	b.n	800caa2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800caa4:	2302      	movs	r3, #2
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	2100      	movs	r1, #0
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f7ff ff00 	bl	800c8b4 <xQueueGenericCreateStatic>
 800cab4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cabc:	69fb      	ldr	r3, [r7, #28]
 800cabe:	68ba      	ldr	r2, [r7, #8]
 800cac0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cac2:	69fb      	ldr	r3, [r7, #28]
	}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3720      	adds	r7, #32
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d10a      	bne.n	800caf2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800cadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	613b      	str	r3, [r7, #16]
}
 800caee:	bf00      	nop
 800caf0:	e7fe      	b.n	800caf0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800caf2:	683a      	ldr	r2, [r7, #0]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d90a      	bls.n	800cb10 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	60fb      	str	r3, [r7, #12]
}
 800cb0c:	bf00      	nop
 800cb0e:	e7fe      	b.n	800cb0e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cb10:	2202      	movs	r2, #2
 800cb12:	2100      	movs	r1, #0
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f7ff ff45 	bl	800c9a4 <xQueueGenericCreate>
 800cb1a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d002      	beq.n	800cb28 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800cb22:	697b      	ldr	r3, [r7, #20]
 800cb24:	683a      	ldr	r2, [r7, #0]
 800cb26:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800cb28:	697b      	ldr	r3, [r7, #20]
	}
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	3718      	adds	r7, #24
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
	...

0800cb34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b08e      	sub	sp, #56	; 0x38
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	60b9      	str	r1, [r7, #8]
 800cb3e:	607a      	str	r2, [r7, #4]
 800cb40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cb42:	2300      	movs	r3, #0
 800cb44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d10a      	bne.n	800cb66 <xQueueGenericSend+0x32>
	__asm volatile
 800cb50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb54:	f383 8811 	msr	BASEPRI, r3
 800cb58:	f3bf 8f6f 	isb	sy
 800cb5c:	f3bf 8f4f 	dsb	sy
 800cb60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cb62:	bf00      	nop
 800cb64:	e7fe      	b.n	800cb64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d103      	bne.n	800cb74 <xQueueGenericSend+0x40>
 800cb6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d101      	bne.n	800cb78 <xQueueGenericSend+0x44>
 800cb74:	2301      	movs	r3, #1
 800cb76:	e000      	b.n	800cb7a <xQueueGenericSend+0x46>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d10a      	bne.n	800cb94 <xQueueGenericSend+0x60>
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cb90:	bf00      	nop
 800cb92:	e7fe      	b.n	800cb92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	2b02      	cmp	r3, #2
 800cb98:	d103      	bne.n	800cba2 <xQueueGenericSend+0x6e>
 800cb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb9e:	2b01      	cmp	r3, #1
 800cba0:	d101      	bne.n	800cba6 <xQueueGenericSend+0x72>
 800cba2:	2301      	movs	r3, #1
 800cba4:	e000      	b.n	800cba8 <xQueueGenericSend+0x74>
 800cba6:	2300      	movs	r3, #0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10a      	bne.n	800cbc2 <xQueueGenericSend+0x8e>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	623b      	str	r3, [r7, #32]
}
 800cbbe:	bf00      	nop
 800cbc0:	e7fe      	b.n	800cbc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cbc2:	f001 fc65 	bl	800e490 <xTaskGetSchedulerState>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d102      	bne.n	800cbd2 <xQueueGenericSend+0x9e>
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d101      	bne.n	800cbd6 <xQueueGenericSend+0xa2>
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	e000      	b.n	800cbd8 <xQueueGenericSend+0xa4>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d10a      	bne.n	800cbf2 <xQueueGenericSend+0xbe>
	__asm volatile
 800cbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe0:	f383 8811 	msr	BASEPRI, r3
 800cbe4:	f3bf 8f6f 	isb	sy
 800cbe8:	f3bf 8f4f 	dsb	sy
 800cbec:	61fb      	str	r3, [r7, #28]
}
 800cbee:	bf00      	nop
 800cbf0:	e7fe      	b.n	800cbf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cbf2:	f002 faa7 	bl	800f144 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d302      	bcc.n	800cc08 <xQueueGenericSend+0xd4>
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b02      	cmp	r3, #2
 800cc06:	d129      	bne.n	800cc5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	68b9      	ldr	r1, [r7, #8]
 800cc0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc0e:	f000 fc5e 	bl	800d4ce <prvCopyDataToQueue>
 800cc12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d010      	beq.n	800cc3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1e:	3324      	adds	r3, #36	; 0x24
 800cc20:	4618      	mov	r0, r3
 800cc22:	f001 fa73 	bl	800e10c <xTaskRemoveFromEventList>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d013      	beq.n	800cc54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800cc2c:	4b3f      	ldr	r3, [pc, #252]	; (800cd2c <xQueueGenericSend+0x1f8>)
 800cc2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	f3bf 8f4f 	dsb	sy
 800cc38:	f3bf 8f6f 	isb	sy
 800cc3c:	e00a      	b.n	800cc54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d007      	beq.n	800cc54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800cc44:	4b39      	ldr	r3, [pc, #228]	; (800cd2c <xQueueGenericSend+0x1f8>)
 800cc46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc4a:	601a      	str	r2, [r3, #0]
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cc54:	f002 faa6 	bl	800f1a4 <vPortExitCritical>
				return pdPASS;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e063      	b.n	800cd24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d103      	bne.n	800cc6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cc62:	f002 fa9f 	bl	800f1a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800cc66:	2300      	movs	r3, #0
 800cc68:	e05c      	b.n	800cd24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cc6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d106      	bne.n	800cc7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cc70:	f107 0314 	add.w	r3, r7, #20
 800cc74:	4618      	mov	r0, r3
 800cc76:	f001 faad 	bl	800e1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cc7e:	f002 fa91 	bl	800f1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cc82:	f001 f819 	bl	800dcb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cc86:	f002 fa5d 	bl	800f144 <vPortEnterCritical>
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc90:	b25b      	sxtb	r3, r3
 800cc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc96:	d103      	bne.n	800cca0 <xQueueGenericSend+0x16c>
 800cc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cca6:	b25b      	sxtb	r3, r3
 800cca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccac:	d103      	bne.n	800ccb6 <xQueueGenericSend+0x182>
 800ccae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ccb6:	f002 fa75 	bl	800f1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ccba:	1d3a      	adds	r2, r7, #4
 800ccbc:	f107 0314 	add.w	r3, r7, #20
 800ccc0:	4611      	mov	r1, r2
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f001 fa9c 	bl	800e200 <xTaskCheckForTimeOut>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d124      	bne.n	800cd18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ccce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccd0:	f000 fcf5 	bl	800d6be <prvIsQueueFull>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d018      	beq.n	800cd0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ccda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccdc:	3310      	adds	r3, #16
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	4611      	mov	r1, r2
 800cce2:	4618      	mov	r0, r3
 800cce4:	f001 f9c2 	bl	800e06c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ccea:	f000 fc80 	bl	800d5ee <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ccee:	f000 fff1 	bl	800dcd4 <xTaskResumeAll>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	f47f af7c 	bne.w	800cbf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ccfa:	4b0c      	ldr	r3, [pc, #48]	; (800cd2c <xQueueGenericSend+0x1f8>)
 800ccfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd00:	601a      	str	r2, [r3, #0]
 800cd02:	f3bf 8f4f 	dsb	sy
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	e772      	b.n	800cbf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cd0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd0e:	f000 fc6e 	bl	800d5ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cd12:	f000 ffdf 	bl	800dcd4 <xTaskResumeAll>
 800cd16:	e76c      	b.n	800cbf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cd18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd1a:	f000 fc68 	bl	800d5ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cd1e:	f000 ffd9 	bl	800dcd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cd22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3738      	adds	r7, #56	; 0x38
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	e000ed04 	.word	0xe000ed04

0800cd30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b090      	sub	sp, #64	; 0x40
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	607a      	str	r2, [r7, #4]
 800cd3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cd42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d10a      	bne.n	800cd5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cd48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4c:	f383 8811 	msr	BASEPRI, r3
 800cd50:	f3bf 8f6f 	isb	sy
 800cd54:	f3bf 8f4f 	dsb	sy
 800cd58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd5a:	bf00      	nop
 800cd5c:	e7fe      	b.n	800cd5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d103      	bne.n	800cd6c <xQueueGenericSendFromISR+0x3c>
 800cd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d101      	bne.n	800cd70 <xQueueGenericSendFromISR+0x40>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	e000      	b.n	800cd72 <xQueueGenericSendFromISR+0x42>
 800cd70:	2300      	movs	r3, #0
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10a      	bne.n	800cd8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd7a:	f383 8811 	msr	BASEPRI, r3
 800cd7e:	f3bf 8f6f 	isb	sy
 800cd82:	f3bf 8f4f 	dsb	sy
 800cd86:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd88:	bf00      	nop
 800cd8a:	e7fe      	b.n	800cd8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d103      	bne.n	800cd9a <xQueueGenericSendFromISR+0x6a>
 800cd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d101      	bne.n	800cd9e <xQueueGenericSendFromISR+0x6e>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	e000      	b.n	800cda0 <xQueueGenericSendFromISR+0x70>
 800cd9e:	2300      	movs	r3, #0
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d10a      	bne.n	800cdba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda8:	f383 8811 	msr	BASEPRI, r3
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f3bf 8f4f 	dsb	sy
 800cdb4:	623b      	str	r3, [r7, #32]
}
 800cdb6:	bf00      	nop
 800cdb8:	e7fe      	b.n	800cdb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cdba:	f002 faa5 	bl	800f308 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cdbe:	f3ef 8211 	mrs	r2, BASEPRI
 800cdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc6:	f383 8811 	msr	BASEPRI, r3
 800cdca:	f3bf 8f6f 	isb	sy
 800cdce:	f3bf 8f4f 	dsb	sy
 800cdd2:	61fa      	str	r2, [r7, #28]
 800cdd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cdd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cdd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d302      	bcc.n	800cdec <xQueueGenericSendFromISR+0xbc>
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d12f      	bne.n	800ce4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cdec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cdfc:	683a      	ldr	r2, [r7, #0]
 800cdfe:	68b9      	ldr	r1, [r7, #8]
 800ce00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ce02:	f000 fb64 	bl	800d4ce <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ce06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ce0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0e:	d112      	bne.n	800ce36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d016      	beq.n	800ce46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1a:	3324      	adds	r3, #36	; 0x24
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f001 f975 	bl	800e10c <xTaskRemoveFromEventList>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d00e      	beq.n	800ce46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d00b      	beq.n	800ce46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	601a      	str	r2, [r3, #0]
 800ce34:	e007      	b.n	800ce46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ce36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ce3a:	3301      	adds	r3, #1
 800ce3c:	b2db      	uxtb	r3, r3
 800ce3e:	b25a      	sxtb	r2, r3
 800ce40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ce46:	2301      	movs	r3, #1
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ce4a:	e001      	b.n	800ce50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ce5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ce5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3740      	adds	r7, #64	; 0x40
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}

0800ce66 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce66:	b580      	push	{r7, lr}
 800ce68:	b08e      	sub	sp, #56	; 0x38
 800ce6a:	af00      	add	r7, sp, #0
 800ce6c:	6078      	str	r0, [r7, #4]
 800ce6e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ce74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d10a      	bne.n	800ce90 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ce7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce7e:	f383 8811 	msr	BASEPRI, r3
 800ce82:	f3bf 8f6f 	isb	sy
 800ce86:	f3bf 8f4f 	dsb	sy
 800ce8a:	623b      	str	r3, [r7, #32]
}
 800ce8c:	bf00      	nop
 800ce8e:	e7fe      	b.n	800ce8e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ce90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00a      	beq.n	800ceae <xQueueGiveFromISR+0x48>
	__asm volatile
 800ce98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce9c:	f383 8811 	msr	BASEPRI, r3
 800cea0:	f3bf 8f6f 	isb	sy
 800cea4:	f3bf 8f4f 	dsb	sy
 800cea8:	61fb      	str	r3, [r7, #28]
}
 800ceaa:	bf00      	nop
 800ceac:	e7fe      	b.n	800ceac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ceae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d103      	bne.n	800cebe <xQueueGiveFromISR+0x58>
 800ceb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d101      	bne.n	800cec2 <xQueueGiveFromISR+0x5c>
 800cebe:	2301      	movs	r3, #1
 800cec0:	e000      	b.n	800cec4 <xQueueGiveFromISR+0x5e>
 800cec2:	2300      	movs	r3, #0
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d10a      	bne.n	800cede <xQueueGiveFromISR+0x78>
	__asm volatile
 800cec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cecc:	f383 8811 	msr	BASEPRI, r3
 800ced0:	f3bf 8f6f 	isb	sy
 800ced4:	f3bf 8f4f 	dsb	sy
 800ced8:	61bb      	str	r3, [r7, #24]
}
 800ceda:	bf00      	nop
 800cedc:	e7fe      	b.n	800cedc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cede:	f002 fa13 	bl	800f308 <vPortValidateInterruptPriority>
	__asm volatile
 800cee2:	f3ef 8211 	mrs	r2, BASEPRI
 800cee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceea:	f383 8811 	msr	BASEPRI, r3
 800ceee:	f3bf 8f6f 	isb	sy
 800cef2:	f3bf 8f4f 	dsb	sy
 800cef6:	617a      	str	r2, [r7, #20]
 800cef8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cefa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cefc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cf04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d22b      	bcs.n	800cf66 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cf0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cf18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf1a:	1c5a      	adds	r2, r3, #1
 800cf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cf20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf28:	d112      	bne.n	800cf50 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cf2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d016      	beq.n	800cf60 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cf32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf34:	3324      	adds	r3, #36	; 0x24
 800cf36:	4618      	mov	r0, r3
 800cf38:	f001 f8e8 	bl	800e10c <xTaskRemoveFromEventList>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d00e      	beq.n	800cf60 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cf42:	683b      	ldr	r3, [r7, #0]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00b      	beq.n	800cf60 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	601a      	str	r2, [r3, #0]
 800cf4e:	e007      	b.n	800cf60 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cf50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf54:	3301      	adds	r3, #1
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	b25a      	sxtb	r2, r3
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cf60:	2301      	movs	r3, #1
 800cf62:	637b      	str	r3, [r7, #52]	; 0x34
 800cf64:	e001      	b.n	800cf6a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cf66:	2300      	movs	r3, #0
 800cf68:	637b      	str	r3, [r7, #52]	; 0x34
 800cf6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f383 8811 	msr	BASEPRI, r3
}
 800cf74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3738      	adds	r7, #56	; 0x38
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b08c      	sub	sp, #48	; 0x30
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cf94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d10a      	bne.n	800cfb0 <xQueueReceive+0x30>
	__asm volatile
 800cf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf9e:	f383 8811 	msr	BASEPRI, r3
 800cfa2:	f3bf 8f6f 	isb	sy
 800cfa6:	f3bf 8f4f 	dsb	sy
 800cfaa:	623b      	str	r3, [r7, #32]
}
 800cfac:	bf00      	nop
 800cfae:	e7fe      	b.n	800cfae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d103      	bne.n	800cfbe <xQueueReceive+0x3e>
 800cfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d101      	bne.n	800cfc2 <xQueueReceive+0x42>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e000      	b.n	800cfc4 <xQueueReceive+0x44>
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d10a      	bne.n	800cfde <xQueueReceive+0x5e>
	__asm volatile
 800cfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfcc:	f383 8811 	msr	BASEPRI, r3
 800cfd0:	f3bf 8f6f 	isb	sy
 800cfd4:	f3bf 8f4f 	dsb	sy
 800cfd8:	61fb      	str	r3, [r7, #28]
}
 800cfda:	bf00      	nop
 800cfdc:	e7fe      	b.n	800cfdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cfde:	f001 fa57 	bl	800e490 <xTaskGetSchedulerState>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d102      	bne.n	800cfee <xQueueReceive+0x6e>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <xQueueReceive+0x72>
 800cfee:	2301      	movs	r3, #1
 800cff0:	e000      	b.n	800cff4 <xQueueReceive+0x74>
 800cff2:	2300      	movs	r3, #0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10a      	bne.n	800d00e <xQueueReceive+0x8e>
	__asm volatile
 800cff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffc:	f383 8811 	msr	BASEPRI, r3
 800d000:	f3bf 8f6f 	isb	sy
 800d004:	f3bf 8f4f 	dsb	sy
 800d008:	61bb      	str	r3, [r7, #24]
}
 800d00a:	bf00      	nop
 800d00c:	e7fe      	b.n	800d00c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d00e:	f002 f899 	bl	800f144 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d016:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d01f      	beq.n	800d05e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d01e:	68b9      	ldr	r1, [r7, #8]
 800d020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d022:	f000 fabe 	bl	800d5a2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d028:	1e5a      	subs	r2, r3, #1
 800d02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d02c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d030:	691b      	ldr	r3, [r3, #16]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00f      	beq.n	800d056 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d038:	3310      	adds	r3, #16
 800d03a:	4618      	mov	r0, r3
 800d03c:	f001 f866 	bl	800e10c <xTaskRemoveFromEventList>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d007      	beq.n	800d056 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d046:	4b3d      	ldr	r3, [pc, #244]	; (800d13c <xQueueReceive+0x1bc>)
 800d048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d04c:	601a      	str	r2, [r3, #0]
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d056:	f002 f8a5 	bl	800f1a4 <vPortExitCritical>
				return pdPASS;
 800d05a:	2301      	movs	r3, #1
 800d05c:	e069      	b.n	800d132 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d103      	bne.n	800d06c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d064:	f002 f89e 	bl	800f1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d068:	2300      	movs	r3, #0
 800d06a:	e062      	b.n	800d132 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d06c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d106      	bne.n	800d080 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d072:	f107 0310 	add.w	r3, r7, #16
 800d076:	4618      	mov	r0, r3
 800d078:	f001 f8ac 	bl	800e1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d07c:	2301      	movs	r3, #1
 800d07e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d080:	f002 f890 	bl	800f1a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d084:	f000 fe18 	bl	800dcb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d088:	f002 f85c 	bl	800f144 <vPortEnterCritical>
 800d08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d08e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d092:	b25b      	sxtb	r3, r3
 800d094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d098:	d103      	bne.n	800d0a2 <xQueueReceive+0x122>
 800d09a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09c:	2200      	movs	r2, #0
 800d09e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0a8:	b25b      	sxtb	r3, r3
 800d0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ae:	d103      	bne.n	800d0b8 <xQueueReceive+0x138>
 800d0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0b8:	f002 f874 	bl	800f1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0bc:	1d3a      	adds	r2, r7, #4
 800d0be:	f107 0310 	add.w	r3, r7, #16
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f001 f89b 	bl	800e200 <xTaskCheckForTimeOut>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d123      	bne.n	800d118 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d0d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0d2:	f000 fade 	bl	800d692 <prvIsQueueEmpty>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d017      	beq.n	800d10c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0de:	3324      	adds	r3, #36	; 0x24
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f000 ffc1 	bl	800e06c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d0ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d0ec:	f000 fa7f 	bl	800d5ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d0f0:	f000 fdf0 	bl	800dcd4 <xTaskResumeAll>
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d189      	bne.n	800d00e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d0fa:	4b10      	ldr	r3, [pc, #64]	; (800d13c <xQueueReceive+0x1bc>)
 800d0fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d100:	601a      	str	r2, [r3, #0]
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	f3bf 8f6f 	isb	sy
 800d10a:	e780      	b.n	800d00e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d10e:	f000 fa6e 	bl	800d5ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d112:	f000 fddf 	bl	800dcd4 <xTaskResumeAll>
 800d116:	e77a      	b.n	800d00e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d11a:	f000 fa68 	bl	800d5ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d11e:	f000 fdd9 	bl	800dcd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d124:	f000 fab5 	bl	800d692 <prvIsQueueEmpty>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f43f af6f 	beq.w	800d00e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d132:	4618      	mov	r0, r3
 800d134:	3730      	adds	r7, #48	; 0x30
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	e000ed04 	.word	0xe000ed04

0800d140 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b08e      	sub	sp, #56	; 0x38
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d14a:	2300      	movs	r3, #0
 800d14c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d152:	2300      	movs	r3, #0
 800d154:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10a      	bne.n	800d172 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	623b      	str	r3, [r7, #32]
}
 800d16e:	bf00      	nop
 800d170:	e7fe      	b.n	800d170 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00a      	beq.n	800d190 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d17e:	f383 8811 	msr	BASEPRI, r3
 800d182:	f3bf 8f6f 	isb	sy
 800d186:	f3bf 8f4f 	dsb	sy
 800d18a:	61fb      	str	r3, [r7, #28]
}
 800d18c:	bf00      	nop
 800d18e:	e7fe      	b.n	800d18e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d190:	f001 f97e 	bl	800e490 <xTaskGetSchedulerState>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d102      	bne.n	800d1a0 <xQueueSemaphoreTake+0x60>
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d101      	bne.n	800d1a4 <xQueueSemaphoreTake+0x64>
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e000      	b.n	800d1a6 <xQueueSemaphoreTake+0x66>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d10a      	bne.n	800d1c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	61bb      	str	r3, [r7, #24]
}
 800d1bc:	bf00      	nop
 800d1be:	e7fe      	b.n	800d1be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1c0:	f001 ffc0 	bl	800f144 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d024      	beq.n	800d21a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d2:	1e5a      	subs	r2, r3, #1
 800d1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d104      	bne.n	800d1ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d1e0:	f001 facc 	bl	800e77c <pvTaskIncrementMutexHeldCount>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00f      	beq.n	800d212 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1f4:	3310      	adds	r3, #16
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f000 ff88 	bl	800e10c <xTaskRemoveFromEventList>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d007      	beq.n	800d212 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d202:	4b54      	ldr	r3, [pc, #336]	; (800d354 <xQueueSemaphoreTake+0x214>)
 800d204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d208:	601a      	str	r2, [r3, #0]
 800d20a:	f3bf 8f4f 	dsb	sy
 800d20e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d212:	f001 ffc7 	bl	800f1a4 <vPortExitCritical>
				return pdPASS;
 800d216:	2301      	movs	r3, #1
 800d218:	e097      	b.n	800d34a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d111      	bne.n	800d244 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d222:	2b00      	cmp	r3, #0
 800d224:	d00a      	beq.n	800d23c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	617b      	str	r3, [r7, #20]
}
 800d238:	bf00      	nop
 800d23a:	e7fe      	b.n	800d23a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d23c:	f001 ffb2 	bl	800f1a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d240:	2300      	movs	r3, #0
 800d242:	e082      	b.n	800d34a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d246:	2b00      	cmp	r3, #0
 800d248:	d106      	bne.n	800d258 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d24a:	f107 030c 	add.w	r3, r7, #12
 800d24e:	4618      	mov	r0, r3
 800d250:	f000 ffc0 	bl	800e1d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d254:	2301      	movs	r3, #1
 800d256:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d258:	f001 ffa4 	bl	800f1a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d25c:	f000 fd2c 	bl	800dcb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d260:	f001 ff70 	bl	800f144 <vPortEnterCritical>
 800d264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d26a:	b25b      	sxtb	r3, r3
 800d26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d270:	d103      	bne.n	800d27a <xQueueSemaphoreTake+0x13a>
 800d272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d274:	2200      	movs	r2, #0
 800d276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d280:	b25b      	sxtb	r3, r3
 800d282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d286:	d103      	bne.n	800d290 <xQueueSemaphoreTake+0x150>
 800d288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28a:	2200      	movs	r2, #0
 800d28c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d290:	f001 ff88 	bl	800f1a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d294:	463a      	mov	r2, r7
 800d296:	f107 030c 	add.w	r3, r7, #12
 800d29a:	4611      	mov	r1, r2
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 ffaf 	bl	800e200 <xTaskCheckForTimeOut>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d132      	bne.n	800d30e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2aa:	f000 f9f2 	bl	800d692 <prvIsQueueEmpty>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d026      	beq.n	800d302 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d109      	bne.n	800d2d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d2bc:	f001 ff42 	bl	800f144 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f001 f901 	bl	800e4cc <xTaskPriorityInherit>
 800d2ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d2cc:	f001 ff6a 	bl	800f1a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d2:	3324      	adds	r3, #36	; 0x24
 800d2d4:	683a      	ldr	r2, [r7, #0]
 800d2d6:	4611      	mov	r1, r2
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f000 fec7 	bl	800e06c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d2e0:	f000 f985 	bl	800d5ee <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2e4:	f000 fcf6 	bl	800dcd4 <xTaskResumeAll>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f47f af68 	bne.w	800d1c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d2f0:	4b18      	ldr	r3, [pc, #96]	; (800d354 <xQueueSemaphoreTake+0x214>)
 800d2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2f6:	601a      	str	r2, [r3, #0]
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	e75e      	b.n	800d1c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d304:	f000 f973 	bl	800d5ee <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d308:	f000 fce4 	bl	800dcd4 <xTaskResumeAll>
 800d30c:	e758      	b.n	800d1c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d30e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d310:	f000 f96d 	bl	800d5ee <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d314:	f000 fcde 	bl	800dcd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d31a:	f000 f9ba 	bl	800d692 <prvIsQueueEmpty>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	f43f af4d 	beq.w	800d1c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00d      	beq.n	800d348 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d32c:	f001 ff0a 	bl	800f144 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d332:	f000 f8b4 	bl	800d49e <prvGetDisinheritPriorityAfterTimeout>
 800d336:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	689b      	ldr	r3, [r3, #8]
 800d33c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d33e:	4618      	mov	r0, r3
 800d340:	f001 f99a 	bl	800e678 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d344:	f001 ff2e 	bl	800f1a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d348:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d34a:	4618      	mov	r0, r3
 800d34c:	3738      	adds	r7, #56	; 0x38
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	e000ed04 	.word	0xe000ed04

0800d358 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b08e      	sub	sp, #56	; 0x38
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	60f8      	str	r0, [r7, #12]
 800d360:	60b9      	str	r1, [r7, #8]
 800d362:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10a      	bne.n	800d384 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d372:	f383 8811 	msr	BASEPRI, r3
 800d376:	f3bf 8f6f 	isb	sy
 800d37a:	f3bf 8f4f 	dsb	sy
 800d37e:	623b      	str	r3, [r7, #32]
}
 800d380:	bf00      	nop
 800d382:	e7fe      	b.n	800d382 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d384:	68bb      	ldr	r3, [r7, #8]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d103      	bne.n	800d392 <xQueueReceiveFromISR+0x3a>
 800d38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d101      	bne.n	800d396 <xQueueReceiveFromISR+0x3e>
 800d392:	2301      	movs	r3, #1
 800d394:	e000      	b.n	800d398 <xQueueReceiveFromISR+0x40>
 800d396:	2300      	movs	r3, #0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10a      	bne.n	800d3b2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	61fb      	str	r3, [r7, #28]
}
 800d3ae:	bf00      	nop
 800d3b0:	e7fe      	b.n	800d3b0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3b2:	f001 ffa9 	bl	800f308 <vPortValidateInterruptPriority>
	__asm volatile
 800d3b6:	f3ef 8211 	mrs	r2, BASEPRI
 800d3ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3be:	f383 8811 	msr	BASEPRI, r3
 800d3c2:	f3bf 8f6f 	isb	sy
 800d3c6:	f3bf 8f4f 	dsb	sy
 800d3ca:	61ba      	str	r2, [r7, #24]
 800d3cc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d3ce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d02f      	beq.n	800d43e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d3e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d3e8:	68b9      	ldr	r1, [r7, #8]
 800d3ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3ec:	f000 f8d9 	bl	800d5a2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f2:	1e5a      	subs	r2, r3, #1
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d3f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d400:	d112      	bne.n	800d428 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d404:	691b      	ldr	r3, [r3, #16]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d016      	beq.n	800d438 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d40c:	3310      	adds	r3, #16
 800d40e:	4618      	mov	r0, r3
 800d410:	f000 fe7c 	bl	800e10c <xTaskRemoveFromEventList>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d00e      	beq.n	800d438 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00b      	beq.n	800d438 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	2201      	movs	r2, #1
 800d424:	601a      	str	r2, [r3, #0]
 800d426:	e007      	b.n	800d438 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d42c:	3301      	adds	r3, #1
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	b25a      	sxtb	r2, r3
 800d432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d438:	2301      	movs	r3, #1
 800d43a:	637b      	str	r3, [r7, #52]	; 0x34
 800d43c:	e001      	b.n	800d442 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d43e:	2300      	movs	r3, #0
 800d440:	637b      	str	r3, [r7, #52]	; 0x34
 800d442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d444:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	f383 8811 	msr	BASEPRI, r3
}
 800d44c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d44e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d450:	4618      	mov	r0, r3
 800d452:	3738      	adds	r7, #56	; 0x38
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b084      	sub	sp, #16
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d10a      	bne.n	800d480 <vQueueDelete+0x28>
	__asm volatile
 800d46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	60bb      	str	r3, [r7, #8]
}
 800d47c:	bf00      	nop
 800d47e:	e7fe      	b.n	800d47e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	f000 f95f 	bl	800d744 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d102      	bne.n	800d496 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f002 f845 	bl	800f520 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d496:	bf00      	nop
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d49e:	b480      	push	{r7}
 800d4a0:	b085      	sub	sp, #20
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d006      	beq.n	800d4bc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d4b8:	60fb      	str	r3, [r7, #12]
 800d4ba:	e001      	b.n	800d4c0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
	}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	3714      	adds	r7, #20
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b086      	sub	sp, #24
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	60f8      	str	r0, [r7, #12]
 800d4d6:	60b9      	str	r1, [r7, #8]
 800d4d8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10d      	bne.n	800d508 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d14d      	bne.n	800d590 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	689b      	ldr	r3, [r3, #8]
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f001 f84f 	bl	800e59c <xTaskPriorityDisinherit>
 800d4fe:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2200      	movs	r2, #0
 800d504:	609a      	str	r2, [r3, #8]
 800d506:	e043      	b.n	800d590 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d119      	bne.n	800d542 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6858      	ldr	r0, [r3, #4]
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d516:	461a      	mov	r2, r3
 800d518:	68b9      	ldr	r1, [r7, #8]
 800d51a:	f005 f862 	bl	80125e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	685a      	ldr	r2, [r3, #4]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d526:	441a      	add	r2, r3
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	685a      	ldr	r2, [r3, #4]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	429a      	cmp	r2, r3
 800d536:	d32b      	bcc.n	800d590 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	605a      	str	r2, [r3, #4]
 800d540:	e026      	b.n	800d590 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	68d8      	ldr	r0, [r3, #12]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d54a:	461a      	mov	r2, r3
 800d54c:	68b9      	ldr	r1, [r7, #8]
 800d54e:	f005 f848 	bl	80125e2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	68da      	ldr	r2, [r3, #12]
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d55a:	425b      	negs	r3, r3
 800d55c:	441a      	add	r2, r3
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	68da      	ldr	r2, [r3, #12]
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d207      	bcs.n	800d57e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	689a      	ldr	r2, [r3, #8]
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d576:	425b      	negs	r3, r3
 800d578:	441a      	add	r2, r3
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2b02      	cmp	r3, #2
 800d582:	d105      	bne.n	800d590 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d002      	beq.n	800d590 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	3b01      	subs	r3, #1
 800d58e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	1c5a      	adds	r2, r3, #1
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d598:	697b      	ldr	r3, [r7, #20]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3718      	adds	r7, #24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b082      	sub	sp, #8
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d018      	beq.n	800d5e6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	68da      	ldr	r2, [r3, #12]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5bc:	441a      	add	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	68da      	ldr	r2, [r3, #12]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	689b      	ldr	r3, [r3, #8]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d303      	bcc.n	800d5d6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681a      	ldr	r2, [r3, #0]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	68d9      	ldr	r1, [r3, #12]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5de:	461a      	mov	r2, r3
 800d5e0:	6838      	ldr	r0, [r7, #0]
 800d5e2:	f004 fffe 	bl	80125e2 <memcpy>
	}
}
 800d5e6:	bf00      	nop
 800d5e8:	3708      	adds	r7, #8
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}

0800d5ee <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b084      	sub	sp, #16
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d5f6:	f001 fda5 	bl	800f144 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d600:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d602:	e011      	b.n	800d628 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d012      	beq.n	800d632 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	3324      	adds	r3, #36	; 0x24
 800d610:	4618      	mov	r0, r3
 800d612:	f000 fd7b 	bl	800e10c <xTaskRemoveFromEventList>
 800d616:	4603      	mov	r3, r0
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d001      	beq.n	800d620 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d61c:	f000 fe52 	bl	800e2c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	3b01      	subs	r3, #1
 800d624:	b2db      	uxtb	r3, r3
 800d626:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	dce9      	bgt.n	800d604 <prvUnlockQueue+0x16>
 800d630:	e000      	b.n	800d634 <prvUnlockQueue+0x46>
					break;
 800d632:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	22ff      	movs	r2, #255	; 0xff
 800d638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d63c:	f001 fdb2 	bl	800f1a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d640:	f001 fd80 	bl	800f144 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d64a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d64c:	e011      	b.n	800d672 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	691b      	ldr	r3, [r3, #16]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d012      	beq.n	800d67c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	3310      	adds	r3, #16
 800d65a:	4618      	mov	r0, r3
 800d65c:	f000 fd56 	bl	800e10c <xTaskRemoveFromEventList>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d001      	beq.n	800d66a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d666:	f000 fe2d 	bl	800e2c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d66a:	7bbb      	ldrb	r3, [r7, #14]
 800d66c:	3b01      	subs	r3, #1
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d672:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d676:	2b00      	cmp	r3, #0
 800d678:	dce9      	bgt.n	800d64e <prvUnlockQueue+0x60>
 800d67a:	e000      	b.n	800d67e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d67c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	22ff      	movs	r2, #255	; 0xff
 800d682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d686:	f001 fd8d 	bl	800f1a4 <vPortExitCritical>
}
 800d68a:	bf00      	nop
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b084      	sub	sp, #16
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d69a:	f001 fd53 	bl	800f144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d102      	bne.n	800d6ac <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	60fb      	str	r3, [r7, #12]
 800d6aa:	e001      	b.n	800d6b0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6b0:	f001 fd78 	bl	800f1a4 <vPortExitCritical>

	return xReturn;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b084      	sub	sp, #16
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d6c6:	f001 fd3d 	bl	800f144 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d102      	bne.n	800d6dc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	60fb      	str	r3, [r7, #12]
 800d6da:	e001      	b.n	800d6e0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d6e0:	f001 fd60 	bl	800f1a4 <vPortExitCritical>

	return xReturn;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
	...

0800d6f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b085      	sub	sp, #20
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
 800d6f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	60fb      	str	r3, [r7, #12]
 800d6fe:	e014      	b.n	800d72a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d700:	4a0f      	ldr	r2, [pc, #60]	; (800d740 <vQueueAddToRegistry+0x50>)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10b      	bne.n	800d724 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d70c:	490c      	ldr	r1, [pc, #48]	; (800d740 <vQueueAddToRegistry+0x50>)
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	683a      	ldr	r2, [r7, #0]
 800d712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d716:	4a0a      	ldr	r2, [pc, #40]	; (800d740 <vQueueAddToRegistry+0x50>)
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	00db      	lsls	r3, r3, #3
 800d71c:	4413      	add	r3, r2
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d722:	e006      	b.n	800d732 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	3301      	adds	r3, #1
 800d728:	60fb      	str	r3, [r7, #12]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2b07      	cmp	r3, #7
 800d72e:	d9e7      	bls.n	800d700 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d730:	bf00      	nop
 800d732:	bf00      	nop
 800d734:	3714      	adds	r7, #20
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop
 800d740:	20001fcc 	.word	0x20001fcc

0800d744 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d744:	b480      	push	{r7}
 800d746:	b085      	sub	sp, #20
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d74c:	2300      	movs	r3, #0
 800d74e:	60fb      	str	r3, [r7, #12]
 800d750:	e016      	b.n	800d780 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d752:	4a10      	ldr	r2, [pc, #64]	; (800d794 <vQueueUnregisterQueue+0x50>)
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	00db      	lsls	r3, r3, #3
 800d758:	4413      	add	r3, r2
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d10b      	bne.n	800d77a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d762:	4a0c      	ldr	r2, [pc, #48]	; (800d794 <vQueueUnregisterQueue+0x50>)
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	2100      	movs	r1, #0
 800d768:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d76c:	4a09      	ldr	r2, [pc, #36]	; (800d794 <vQueueUnregisterQueue+0x50>)
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	00db      	lsls	r3, r3, #3
 800d772:	4413      	add	r3, r2
 800d774:	2200      	movs	r2, #0
 800d776:	605a      	str	r2, [r3, #4]
				break;
 800d778:	e006      	b.n	800d788 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	3301      	adds	r3, #1
 800d77e:	60fb      	str	r3, [r7, #12]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2b07      	cmp	r3, #7
 800d784:	d9e5      	bls.n	800d752 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d786:	bf00      	nop
 800d788:	bf00      	nop
 800d78a:	3714      	adds	r7, #20
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr
 800d794:	20001fcc 	.word	0x20001fcc

0800d798 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d7a8:	f001 fccc 	bl	800f144 <vPortEnterCritical>
 800d7ac:	697b      	ldr	r3, [r7, #20]
 800d7ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d7b2:	b25b      	sxtb	r3, r3
 800d7b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7b8:	d103      	bne.n	800d7c2 <vQueueWaitForMessageRestricted+0x2a>
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	2200      	movs	r2, #0
 800d7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d7c8:	b25b      	sxtb	r3, r3
 800d7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7ce:	d103      	bne.n	800d7d8 <vQueueWaitForMessageRestricted+0x40>
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7d8:	f001 fce4 	bl	800f1a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d106      	bne.n	800d7f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	3324      	adds	r3, #36	; 0x24
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	68b9      	ldr	r1, [r7, #8]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f000 fc61 	bl	800e0b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d7f2:	6978      	ldr	r0, [r7, #20]
 800d7f4:	f7ff fefb 	bl	800d5ee <prvUnlockQueue>
	}
 800d7f8:	bf00      	nop
 800d7fa:	3718      	adds	r7, #24
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}

0800d800 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d800:	b580      	push	{r7, lr}
 800d802:	b08e      	sub	sp, #56	; 0x38
 800d804:	af04      	add	r7, sp, #16
 800d806:	60f8      	str	r0, [r7, #12]
 800d808:	60b9      	str	r1, [r7, #8]
 800d80a:	607a      	str	r2, [r7, #4]
 800d80c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10a      	bne.n	800d82a <xTaskCreateStatic+0x2a>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	623b      	str	r3, [r7, #32]
}
 800d826:	bf00      	nop
 800d828:	e7fe      	b.n	800d828 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d10a      	bne.n	800d846 <xTaskCreateStatic+0x46>
	__asm volatile
 800d830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d834:	f383 8811 	msr	BASEPRI, r3
 800d838:	f3bf 8f6f 	isb	sy
 800d83c:	f3bf 8f4f 	dsb	sy
 800d840:	61fb      	str	r3, [r7, #28]
}
 800d842:	bf00      	nop
 800d844:	e7fe      	b.n	800d844 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d846:	23bc      	movs	r3, #188	; 0xbc
 800d848:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	2bbc      	cmp	r3, #188	; 0xbc
 800d84e:	d00a      	beq.n	800d866 <xTaskCreateStatic+0x66>
	__asm volatile
 800d850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d854:	f383 8811 	msr	BASEPRI, r3
 800d858:	f3bf 8f6f 	isb	sy
 800d85c:	f3bf 8f4f 	dsb	sy
 800d860:	61bb      	str	r3, [r7, #24]
}
 800d862:	bf00      	nop
 800d864:	e7fe      	b.n	800d864 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d866:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d01e      	beq.n	800d8ac <xTaskCreateStatic+0xac>
 800d86e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d870:	2b00      	cmp	r3, #0
 800d872:	d01b      	beq.n	800d8ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d876:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d87c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	2202      	movs	r2, #2
 800d882:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d886:	2300      	movs	r3, #0
 800d888:	9303      	str	r3, [sp, #12]
 800d88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88c:	9302      	str	r3, [sp, #8]
 800d88e:	f107 0314 	add.w	r3, r7, #20
 800d892:	9301      	str	r3, [sp, #4]
 800d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	68b9      	ldr	r1, [r7, #8]
 800d89e:	68f8      	ldr	r0, [r7, #12]
 800d8a0:	f000 f850 	bl	800d944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d8a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8a6:	f000 f8f3 	bl	800da90 <prvAddNewTaskToReadyList>
 800d8aa:	e001      	b.n	800d8b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d8b0:	697b      	ldr	r3, [r7, #20]
	}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3728      	adds	r7, #40	; 0x28
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b08c      	sub	sp, #48	; 0x30
 800d8be:	af04      	add	r7, sp, #16
 800d8c0:	60f8      	str	r0, [r7, #12]
 800d8c2:	60b9      	str	r1, [r7, #8]
 800d8c4:	603b      	str	r3, [r7, #0]
 800d8c6:	4613      	mov	r3, r2
 800d8c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d8ca:	88fb      	ldrh	r3, [r7, #6]
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	f001 fd5a 	bl	800f388 <pvPortMalloc>
 800d8d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d00e      	beq.n	800d8fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d8dc:	20bc      	movs	r0, #188	; 0xbc
 800d8de:	f001 fd53 	bl	800f388 <pvPortMalloc>
 800d8e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d003      	beq.n	800d8f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d8ea:	69fb      	ldr	r3, [r7, #28]
 800d8ec:	697a      	ldr	r2, [r7, #20]
 800d8ee:	631a      	str	r2, [r3, #48]	; 0x30
 800d8f0:	e005      	b.n	800d8fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d8f2:	6978      	ldr	r0, [r7, #20]
 800d8f4:	f001 fe14 	bl	800f520 <vPortFree>
 800d8f8:	e001      	b.n	800d8fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d8fe:	69fb      	ldr	r3, [r7, #28]
 800d900:	2b00      	cmp	r3, #0
 800d902:	d017      	beq.n	800d934 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	2200      	movs	r2, #0
 800d908:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d90c:	88fa      	ldrh	r2, [r7, #6]
 800d90e:	2300      	movs	r3, #0
 800d910:	9303      	str	r3, [sp, #12]
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	9302      	str	r3, [sp, #8]
 800d916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d918:	9301      	str	r3, [sp, #4]
 800d91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91c:	9300      	str	r3, [sp, #0]
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	68b9      	ldr	r1, [r7, #8]
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f000 f80e 	bl	800d944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d928:	69f8      	ldr	r0, [r7, #28]
 800d92a:	f000 f8b1 	bl	800da90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d92e:	2301      	movs	r3, #1
 800d930:	61bb      	str	r3, [r7, #24]
 800d932:	e002      	b.n	800d93a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d934:	f04f 33ff 	mov.w	r3, #4294967295
 800d938:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d93a:	69bb      	ldr	r3, [r7, #24]
	}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3720      	adds	r7, #32
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
 800d950:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d954:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	461a      	mov	r2, r3
 800d95c:	21a5      	movs	r1, #165	; 0xa5
 800d95e:	f004 fe4e 	bl	80125fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d96c:	3b01      	subs	r3, #1
 800d96e:	009b      	lsls	r3, r3, #2
 800d970:	4413      	add	r3, r2
 800d972:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d974:	69bb      	ldr	r3, [r7, #24]
 800d976:	f023 0307 	bic.w	r3, r3, #7
 800d97a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	f003 0307 	and.w	r3, r3, #7
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00a      	beq.n	800d99c <prvInitialiseNewTask+0x58>
	__asm volatile
 800d986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d98a:	f383 8811 	msr	BASEPRI, r3
 800d98e:	f3bf 8f6f 	isb	sy
 800d992:	f3bf 8f4f 	dsb	sy
 800d996:	617b      	str	r3, [r7, #20]
}
 800d998:	bf00      	nop
 800d99a:	e7fe      	b.n	800d99a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d01f      	beq.n	800d9e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	61fb      	str	r3, [r7, #28]
 800d9a6:	e012      	b.n	800d9ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d9a8:	68ba      	ldr	r2, [r7, #8]
 800d9aa:	69fb      	ldr	r3, [r7, #28]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	7819      	ldrb	r1, [r3, #0]
 800d9b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9b2:	69fb      	ldr	r3, [r7, #28]
 800d9b4:	4413      	add	r3, r2
 800d9b6:	3334      	adds	r3, #52	; 0x34
 800d9b8:	460a      	mov	r2, r1
 800d9ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	69fb      	ldr	r3, [r7, #28]
 800d9c0:	4413      	add	r3, r2
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d006      	beq.n	800d9d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	61fb      	str	r3, [r7, #28]
 800d9ce:	69fb      	ldr	r3, [r7, #28]
 800d9d0:	2b0f      	cmp	r3, #15
 800d9d2:	d9e9      	bls.n	800d9a8 <prvInitialiseNewTask+0x64>
 800d9d4:	e000      	b.n	800d9d8 <prvInitialiseNewTask+0x94>
			{
				break;
 800d9d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9da:	2200      	movs	r2, #0
 800d9dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d9e0:	e003      	b.n	800d9ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ec:	2b37      	cmp	r3, #55	; 0x37
 800d9ee:	d901      	bls.n	800d9f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d9f0:	2337      	movs	r3, #55	; 0x37
 800d9f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d9f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800da00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da02:	2200      	movs	r2, #0
 800da04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800da06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da08:	3304      	adds	r3, #4
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7fe fe56 	bl	800c6bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800da10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da12:	3318      	adds	r3, #24
 800da14:	4618      	mov	r0, r3
 800da16:	f7fe fe51 	bl	800c6bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800da1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800da2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800da30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da32:	2200      	movs	r2, #0
 800da34:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800da38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800da40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da42:	3354      	adds	r3, #84	; 0x54
 800da44:	2260      	movs	r2, #96	; 0x60
 800da46:	2100      	movs	r1, #0
 800da48:	4618      	mov	r0, r3
 800da4a:	f004 fdd8 	bl	80125fe <memset>
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	4a0c      	ldr	r2, [pc, #48]	; (800da84 <prvInitialiseNewTask+0x140>)
 800da52:	659a      	str	r2, [r3, #88]	; 0x58
 800da54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da56:	4a0c      	ldr	r2, [pc, #48]	; (800da88 <prvInitialiseNewTask+0x144>)
 800da58:	65da      	str	r2, [r3, #92]	; 0x5c
 800da5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da5c:	4a0b      	ldr	r2, [pc, #44]	; (800da8c <prvInitialiseNewTask+0x148>)
 800da5e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800da60:	683a      	ldr	r2, [r7, #0]
 800da62:	68f9      	ldr	r1, [r7, #12]
 800da64:	69b8      	ldr	r0, [r7, #24]
 800da66:	f001 fa3f 	bl	800eee8 <pxPortInitialiseStack>
 800da6a:	4602      	mov	r2, r0
 800da6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da6e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800da70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da72:	2b00      	cmp	r3, #0
 800da74:	d002      	beq.n	800da7c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800da76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da7a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800da7c:	bf00      	nop
 800da7e:	3720      	adds	r7, #32
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	08017720 	.word	0x08017720
 800da88:	08017740 	.word	0x08017740
 800da8c:	08017700 	.word	0x08017700

0800da90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800da98:	f001 fb54 	bl	800f144 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800da9c:	4b2d      	ldr	r3, [pc, #180]	; (800db54 <prvAddNewTaskToReadyList+0xc4>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3301      	adds	r3, #1
 800daa2:	4a2c      	ldr	r2, [pc, #176]	; (800db54 <prvAddNewTaskToReadyList+0xc4>)
 800daa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800daa6:	4b2c      	ldr	r3, [pc, #176]	; (800db58 <prvAddNewTaskToReadyList+0xc8>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d109      	bne.n	800dac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800daae:	4a2a      	ldr	r2, [pc, #168]	; (800db58 <prvAddNewTaskToReadyList+0xc8>)
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dab4:	4b27      	ldr	r3, [pc, #156]	; (800db54 <prvAddNewTaskToReadyList+0xc4>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d110      	bne.n	800dade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dabc:	f000 fc26 	bl	800e30c <prvInitialiseTaskLists>
 800dac0:	e00d      	b.n	800dade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dac2:	4b26      	ldr	r3, [pc, #152]	; (800db5c <prvAddNewTaskToReadyList+0xcc>)
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d109      	bne.n	800dade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800daca:	4b23      	ldr	r3, [pc, #140]	; (800db58 <prvAddNewTaskToReadyList+0xc8>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d802      	bhi.n	800dade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dad8:	4a1f      	ldr	r2, [pc, #124]	; (800db58 <prvAddNewTaskToReadyList+0xc8>)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dade:	4b20      	ldr	r3, [pc, #128]	; (800db60 <prvAddNewTaskToReadyList+0xd0>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3301      	adds	r3, #1
 800dae4:	4a1e      	ldr	r2, [pc, #120]	; (800db60 <prvAddNewTaskToReadyList+0xd0>)
 800dae6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dae8:	4b1d      	ldr	r3, [pc, #116]	; (800db60 <prvAddNewTaskToReadyList+0xd0>)
 800daea:	681a      	ldr	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf4:	4b1b      	ldr	r3, [pc, #108]	; (800db64 <prvAddNewTaskToReadyList+0xd4>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d903      	bls.n	800db04 <prvAddNewTaskToReadyList+0x74>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db00:	4a18      	ldr	r2, [pc, #96]	; (800db64 <prvAddNewTaskToReadyList+0xd4>)
 800db02:	6013      	str	r3, [r2, #0]
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db08:	4613      	mov	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	4413      	add	r3, r2
 800db0e:	009b      	lsls	r3, r3, #2
 800db10:	4a15      	ldr	r2, [pc, #84]	; (800db68 <prvAddNewTaskToReadyList+0xd8>)
 800db12:	441a      	add	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	3304      	adds	r3, #4
 800db18:	4619      	mov	r1, r3
 800db1a:	4610      	mov	r0, r2
 800db1c:	f7fe fddb 	bl	800c6d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800db20:	f001 fb40 	bl	800f1a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800db24:	4b0d      	ldr	r3, [pc, #52]	; (800db5c <prvAddNewTaskToReadyList+0xcc>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d00e      	beq.n	800db4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800db2c:	4b0a      	ldr	r3, [pc, #40]	; (800db58 <prvAddNewTaskToReadyList+0xc8>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db36:	429a      	cmp	r2, r3
 800db38:	d207      	bcs.n	800db4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800db3a:	4b0c      	ldr	r3, [pc, #48]	; (800db6c <prvAddNewTaskToReadyList+0xdc>)
 800db3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db40:	601a      	str	r2, [r3, #0]
 800db42:	f3bf 8f4f 	dsb	sy
 800db46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800db4a:	bf00      	nop
 800db4c:	3708      	adds	r7, #8
 800db4e:	46bd      	mov	sp, r7
 800db50:	bd80      	pop	{r7, pc}
 800db52:	bf00      	nop
 800db54:	200024e0 	.word	0x200024e0
 800db58:	2000200c 	.word	0x2000200c
 800db5c:	200024ec 	.word	0x200024ec
 800db60:	200024fc 	.word	0x200024fc
 800db64:	200024e8 	.word	0x200024e8
 800db68:	20002010 	.word	0x20002010
 800db6c:	e000ed04 	.word	0xe000ed04

0800db70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db70:	b580      	push	{r7, lr}
 800db72:	b084      	sub	sp, #16
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db78:	2300      	movs	r3, #0
 800db7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d017      	beq.n	800dbb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db82:	4b13      	ldr	r3, [pc, #76]	; (800dbd0 <vTaskDelay+0x60>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00a      	beq.n	800dba0 <vTaskDelay+0x30>
	__asm volatile
 800db8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db8e:	f383 8811 	msr	BASEPRI, r3
 800db92:	f3bf 8f6f 	isb	sy
 800db96:	f3bf 8f4f 	dsb	sy
 800db9a:	60bb      	str	r3, [r7, #8]
}
 800db9c:	bf00      	nop
 800db9e:	e7fe      	b.n	800db9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800dba0:	f000 f88a 	bl	800dcb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dba4:	2100      	movs	r1, #0
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f000 fdfc 	bl	800e7a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dbac:	f000 f892 	bl	800dcd4 <xTaskResumeAll>
 800dbb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d107      	bne.n	800dbc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800dbb8:	4b06      	ldr	r3, [pc, #24]	; (800dbd4 <vTaskDelay+0x64>)
 800dbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbbe:	601a      	str	r2, [r3, #0]
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbc8:	bf00      	nop
 800dbca:	3710      	adds	r7, #16
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}
 800dbd0:	20002508 	.word	0x20002508
 800dbd4:	e000ed04 	.word	0xe000ed04

0800dbd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b08a      	sub	sp, #40	; 0x28
 800dbdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dbe6:	463a      	mov	r2, r7
 800dbe8:	1d39      	adds	r1, r7, #4
 800dbea:	f107 0308 	add.w	r3, r7, #8
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7fe fd10 	bl	800c614 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dbf4:	6839      	ldr	r1, [r7, #0]
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	68ba      	ldr	r2, [r7, #8]
 800dbfa:	9202      	str	r2, [sp, #8]
 800dbfc:	9301      	str	r3, [sp, #4]
 800dbfe:	2300      	movs	r3, #0
 800dc00:	9300      	str	r3, [sp, #0]
 800dc02:	2300      	movs	r3, #0
 800dc04:	460a      	mov	r2, r1
 800dc06:	4924      	ldr	r1, [pc, #144]	; (800dc98 <vTaskStartScheduler+0xc0>)
 800dc08:	4824      	ldr	r0, [pc, #144]	; (800dc9c <vTaskStartScheduler+0xc4>)
 800dc0a:	f7ff fdf9 	bl	800d800 <xTaskCreateStatic>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	4a23      	ldr	r2, [pc, #140]	; (800dca0 <vTaskStartScheduler+0xc8>)
 800dc12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc14:	4b22      	ldr	r3, [pc, #136]	; (800dca0 <vTaskStartScheduler+0xc8>)
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d002      	beq.n	800dc22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	617b      	str	r3, [r7, #20]
 800dc20:	e001      	b.n	800dc26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc22:	2300      	movs	r3, #0
 800dc24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d102      	bne.n	800dc32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800dc2c:	f000 fe0e 	bl	800e84c <xTimerCreateTimerTask>
 800dc30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d11b      	bne.n	800dc70 <vTaskStartScheduler+0x98>
	__asm volatile
 800dc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3c:	f383 8811 	msr	BASEPRI, r3
 800dc40:	f3bf 8f6f 	isb	sy
 800dc44:	f3bf 8f4f 	dsb	sy
 800dc48:	613b      	str	r3, [r7, #16]
}
 800dc4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dc4c:	4b15      	ldr	r3, [pc, #84]	; (800dca4 <vTaskStartScheduler+0xcc>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	3354      	adds	r3, #84	; 0x54
 800dc52:	4a15      	ldr	r2, [pc, #84]	; (800dca8 <vTaskStartScheduler+0xd0>)
 800dc54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc56:	4b15      	ldr	r3, [pc, #84]	; (800dcac <vTaskStartScheduler+0xd4>)
 800dc58:	f04f 32ff 	mov.w	r2, #4294967295
 800dc5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc5e:	4b14      	ldr	r3, [pc, #80]	; (800dcb0 <vTaskStartScheduler+0xd8>)
 800dc60:	2201      	movs	r2, #1
 800dc62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc64:	4b13      	ldr	r3, [pc, #76]	; (800dcb4 <vTaskStartScheduler+0xdc>)
 800dc66:	2200      	movs	r2, #0
 800dc68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc6a:	f001 f9c9 	bl	800f000 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc6e:	e00e      	b.n	800dc8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc76:	d10a      	bne.n	800dc8e <vTaskStartScheduler+0xb6>
	__asm volatile
 800dc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc7c:	f383 8811 	msr	BASEPRI, r3
 800dc80:	f3bf 8f6f 	isb	sy
 800dc84:	f3bf 8f4f 	dsb	sy
 800dc88:	60fb      	str	r3, [r7, #12]
}
 800dc8a:	bf00      	nop
 800dc8c:	e7fe      	b.n	800dc8c <vTaskStartScheduler+0xb4>
}
 800dc8e:	bf00      	nop
 800dc90:	3718      	adds	r7, #24
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}
 800dc96:	bf00      	nop
 800dc98:	08016f40 	.word	0x08016f40
 800dc9c:	0800e2dd 	.word	0x0800e2dd
 800dca0:	20002504 	.word	0x20002504
 800dca4:	2000200c 	.word	0x2000200c
 800dca8:	20000014 	.word	0x20000014
 800dcac:	20002500 	.word	0x20002500
 800dcb0:	200024ec 	.word	0x200024ec
 800dcb4:	200024e4 	.word	0x200024e4

0800dcb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dcb8:	b480      	push	{r7}
 800dcba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dcbc:	4b04      	ldr	r3, [pc, #16]	; (800dcd0 <vTaskSuspendAll+0x18>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	4a03      	ldr	r2, [pc, #12]	; (800dcd0 <vTaskSuspendAll+0x18>)
 800dcc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dcc6:	bf00      	nop
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcce:	4770      	bx	lr
 800dcd0:	20002508 	.word	0x20002508

0800dcd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dcda:	2300      	movs	r3, #0
 800dcdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dcde:	2300      	movs	r3, #0
 800dce0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dce2:	4b42      	ldr	r3, [pc, #264]	; (800ddec <xTaskResumeAll+0x118>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d10a      	bne.n	800dd00 <xTaskResumeAll+0x2c>
	__asm volatile
 800dcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcee:	f383 8811 	msr	BASEPRI, r3
 800dcf2:	f3bf 8f6f 	isb	sy
 800dcf6:	f3bf 8f4f 	dsb	sy
 800dcfa:	603b      	str	r3, [r7, #0]
}
 800dcfc:	bf00      	nop
 800dcfe:	e7fe      	b.n	800dcfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dd00:	f001 fa20 	bl	800f144 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dd04:	4b39      	ldr	r3, [pc, #228]	; (800ddec <xTaskResumeAll+0x118>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	4a38      	ldr	r2, [pc, #224]	; (800ddec <xTaskResumeAll+0x118>)
 800dd0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd0e:	4b37      	ldr	r3, [pc, #220]	; (800ddec <xTaskResumeAll+0x118>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d162      	bne.n	800dddc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd16:	4b36      	ldr	r3, [pc, #216]	; (800ddf0 <xTaskResumeAll+0x11c>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d05e      	beq.n	800dddc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd1e:	e02f      	b.n	800dd80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd20:	4b34      	ldr	r3, [pc, #208]	; (800ddf4 <xTaskResumeAll+0x120>)
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	3318      	adds	r3, #24
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fe fd2f 	bl	800c790 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	3304      	adds	r3, #4
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fe fd2a 	bl	800c790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd40:	4b2d      	ldr	r3, [pc, #180]	; (800ddf8 <xTaskResumeAll+0x124>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d903      	bls.n	800dd50 <xTaskResumeAll+0x7c>
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4c:	4a2a      	ldr	r2, [pc, #168]	; (800ddf8 <xTaskResumeAll+0x124>)
 800dd4e:	6013      	str	r3, [r2, #0]
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd54:	4613      	mov	r3, r2
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	4413      	add	r3, r2
 800dd5a:	009b      	lsls	r3, r3, #2
 800dd5c:	4a27      	ldr	r2, [pc, #156]	; (800ddfc <xTaskResumeAll+0x128>)
 800dd5e:	441a      	add	r2, r3
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	3304      	adds	r3, #4
 800dd64:	4619      	mov	r1, r3
 800dd66:	4610      	mov	r0, r2
 800dd68:	f7fe fcb5 	bl	800c6d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd70:	4b23      	ldr	r3, [pc, #140]	; (800de00 <xTaskResumeAll+0x12c>)
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d302      	bcc.n	800dd80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dd7a:	4b22      	ldr	r3, [pc, #136]	; (800de04 <xTaskResumeAll+0x130>)
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd80:	4b1c      	ldr	r3, [pc, #112]	; (800ddf4 <xTaskResumeAll+0x120>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d1cb      	bne.n	800dd20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d001      	beq.n	800dd92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd8e:	f000 fb5f 	bl	800e450 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dd92:	4b1d      	ldr	r3, [pc, #116]	; (800de08 <xTaskResumeAll+0x134>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d010      	beq.n	800ddc0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd9e:	f000 f847 	bl	800de30 <xTaskIncrementTick>
 800dda2:	4603      	mov	r3, r0
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d002      	beq.n	800ddae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dda8:	4b16      	ldr	r3, [pc, #88]	; (800de04 <xTaskResumeAll+0x130>)
 800ddaa:	2201      	movs	r2, #1
 800ddac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	3b01      	subs	r3, #1
 800ddb2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d1f1      	bne.n	800dd9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ddba:	4b13      	ldr	r3, [pc, #76]	; (800de08 <xTaskResumeAll+0x134>)
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ddc0:	4b10      	ldr	r3, [pc, #64]	; (800de04 <xTaskResumeAll+0x130>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d009      	beq.n	800dddc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ddc8:	2301      	movs	r3, #1
 800ddca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ddcc:	4b0f      	ldr	r3, [pc, #60]	; (800de0c <xTaskResumeAll+0x138>)
 800ddce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	f3bf 8f4f 	dsb	sy
 800ddd8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dddc:	f001 f9e2 	bl	800f1a4 <vPortExitCritical>

	return xAlreadyYielded;
 800dde0:	68bb      	ldr	r3, [r7, #8]
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	3710      	adds	r7, #16
 800dde6:	46bd      	mov	sp, r7
 800dde8:	bd80      	pop	{r7, pc}
 800ddea:	bf00      	nop
 800ddec:	20002508 	.word	0x20002508
 800ddf0:	200024e0 	.word	0x200024e0
 800ddf4:	200024a0 	.word	0x200024a0
 800ddf8:	200024e8 	.word	0x200024e8
 800ddfc:	20002010 	.word	0x20002010
 800de00:	2000200c 	.word	0x2000200c
 800de04:	200024f4 	.word	0x200024f4
 800de08:	200024f0 	.word	0x200024f0
 800de0c:	e000ed04 	.word	0xe000ed04

0800de10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de10:	b480      	push	{r7}
 800de12:	b083      	sub	sp, #12
 800de14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de16:	4b05      	ldr	r3, [pc, #20]	; (800de2c <xTaskGetTickCount+0x1c>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800de1c:	687b      	ldr	r3, [r7, #4]
}
 800de1e:	4618      	mov	r0, r3
 800de20:	370c      	adds	r7, #12
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	200024e4 	.word	0x200024e4

0800de30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de36:	2300      	movs	r3, #0
 800de38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de3a:	4b4f      	ldr	r3, [pc, #316]	; (800df78 <xTaskIncrementTick+0x148>)
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f040 808f 	bne.w	800df62 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800de44:	4b4d      	ldr	r3, [pc, #308]	; (800df7c <xTaskIncrementTick+0x14c>)
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	3301      	adds	r3, #1
 800de4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de4c:	4a4b      	ldr	r2, [pc, #300]	; (800df7c <xTaskIncrementTick+0x14c>)
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d120      	bne.n	800de9a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800de58:	4b49      	ldr	r3, [pc, #292]	; (800df80 <xTaskIncrementTick+0x150>)
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00a      	beq.n	800de78 <xTaskIncrementTick+0x48>
	__asm volatile
 800de62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	603b      	str	r3, [r7, #0]
}
 800de74:	bf00      	nop
 800de76:	e7fe      	b.n	800de76 <xTaskIncrementTick+0x46>
 800de78:	4b41      	ldr	r3, [pc, #260]	; (800df80 <xTaskIncrementTick+0x150>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	60fb      	str	r3, [r7, #12]
 800de7e:	4b41      	ldr	r3, [pc, #260]	; (800df84 <xTaskIncrementTick+0x154>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4a3f      	ldr	r2, [pc, #252]	; (800df80 <xTaskIncrementTick+0x150>)
 800de84:	6013      	str	r3, [r2, #0]
 800de86:	4a3f      	ldr	r2, [pc, #252]	; (800df84 <xTaskIncrementTick+0x154>)
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6013      	str	r3, [r2, #0]
 800de8c:	4b3e      	ldr	r3, [pc, #248]	; (800df88 <xTaskIncrementTick+0x158>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	3301      	adds	r3, #1
 800de92:	4a3d      	ldr	r2, [pc, #244]	; (800df88 <xTaskIncrementTick+0x158>)
 800de94:	6013      	str	r3, [r2, #0]
 800de96:	f000 fadb 	bl	800e450 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de9a:	4b3c      	ldr	r3, [pc, #240]	; (800df8c <xTaskIncrementTick+0x15c>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	693a      	ldr	r2, [r7, #16]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d349      	bcc.n	800df38 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dea4:	4b36      	ldr	r3, [pc, #216]	; (800df80 <xTaskIncrementTick+0x150>)
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d104      	bne.n	800deb8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deae:	4b37      	ldr	r3, [pc, #220]	; (800df8c <xTaskIncrementTick+0x15c>)
 800deb0:	f04f 32ff 	mov.w	r2, #4294967295
 800deb4:	601a      	str	r2, [r3, #0]
					break;
 800deb6:	e03f      	b.n	800df38 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deb8:	4b31      	ldr	r3, [pc, #196]	; (800df80 <xTaskIncrementTick+0x150>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	68db      	ldr	r3, [r3, #12]
 800dec0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	685b      	ldr	r3, [r3, #4]
 800dec6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dec8:	693a      	ldr	r2, [r7, #16]
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	429a      	cmp	r2, r3
 800dece:	d203      	bcs.n	800ded8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ded0:	4a2e      	ldr	r2, [pc, #184]	; (800df8c <xTaskIncrementTick+0x15c>)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ded6:	e02f      	b.n	800df38 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	3304      	adds	r3, #4
 800dedc:	4618      	mov	r0, r3
 800dede:	f7fe fc57 	bl	800c790 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d004      	beq.n	800def4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	3318      	adds	r3, #24
 800deee:	4618      	mov	r0, r3
 800def0:	f7fe fc4e 	bl	800c790 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def8:	4b25      	ldr	r3, [pc, #148]	; (800df90 <xTaskIncrementTick+0x160>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	429a      	cmp	r2, r3
 800defe:	d903      	bls.n	800df08 <xTaskIncrementTick+0xd8>
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df04:	4a22      	ldr	r2, [pc, #136]	; (800df90 <xTaskIncrementTick+0x160>)
 800df06:	6013      	str	r3, [r2, #0]
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df0c:	4613      	mov	r3, r2
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	4413      	add	r3, r2
 800df12:	009b      	lsls	r3, r3, #2
 800df14:	4a1f      	ldr	r2, [pc, #124]	; (800df94 <xTaskIncrementTick+0x164>)
 800df16:	441a      	add	r2, r3
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	3304      	adds	r3, #4
 800df1c:	4619      	mov	r1, r3
 800df1e:	4610      	mov	r0, r2
 800df20:	f7fe fbd9 	bl	800c6d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df28:	4b1b      	ldr	r3, [pc, #108]	; (800df98 <xTaskIncrementTick+0x168>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df2e:	429a      	cmp	r2, r3
 800df30:	d3b8      	bcc.n	800dea4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800df32:	2301      	movs	r3, #1
 800df34:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df36:	e7b5      	b.n	800dea4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df38:	4b17      	ldr	r3, [pc, #92]	; (800df98 <xTaskIncrementTick+0x168>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df3e:	4915      	ldr	r1, [pc, #84]	; (800df94 <xTaskIncrementTick+0x164>)
 800df40:	4613      	mov	r3, r2
 800df42:	009b      	lsls	r3, r3, #2
 800df44:	4413      	add	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	440b      	add	r3, r1
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d901      	bls.n	800df54 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800df50:	2301      	movs	r3, #1
 800df52:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800df54:	4b11      	ldr	r3, [pc, #68]	; (800df9c <xTaskIncrementTick+0x16c>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d007      	beq.n	800df6c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800df5c:	2301      	movs	r3, #1
 800df5e:	617b      	str	r3, [r7, #20]
 800df60:	e004      	b.n	800df6c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800df62:	4b0f      	ldr	r3, [pc, #60]	; (800dfa0 <xTaskIncrementTick+0x170>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	3301      	adds	r3, #1
 800df68:	4a0d      	ldr	r2, [pc, #52]	; (800dfa0 <xTaskIncrementTick+0x170>)
 800df6a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800df6c:	697b      	ldr	r3, [r7, #20]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3718      	adds	r7, #24
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	20002508 	.word	0x20002508
 800df7c:	200024e4 	.word	0x200024e4
 800df80:	20002498 	.word	0x20002498
 800df84:	2000249c 	.word	0x2000249c
 800df88:	200024f8 	.word	0x200024f8
 800df8c:	20002500 	.word	0x20002500
 800df90:	200024e8 	.word	0x200024e8
 800df94:	20002010 	.word	0x20002010
 800df98:	2000200c 	.word	0x2000200c
 800df9c:	200024f4 	.word	0x200024f4
 800dfa0:	200024f0 	.word	0x200024f0

0800dfa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800dfaa:	4b2a      	ldr	r3, [pc, #168]	; (800e054 <vTaskSwitchContext+0xb0>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d003      	beq.n	800dfba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dfb2:	4b29      	ldr	r3, [pc, #164]	; (800e058 <vTaskSwitchContext+0xb4>)
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dfb8:	e046      	b.n	800e048 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800dfba:	4b27      	ldr	r3, [pc, #156]	; (800e058 <vTaskSwitchContext+0xb4>)
 800dfbc:	2200      	movs	r2, #0
 800dfbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfc0:	4b26      	ldr	r3, [pc, #152]	; (800e05c <vTaskSwitchContext+0xb8>)
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	60fb      	str	r3, [r7, #12]
 800dfc6:	e010      	b.n	800dfea <vTaskSwitchContext+0x46>
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d10a      	bne.n	800dfe4 <vTaskSwitchContext+0x40>
	__asm volatile
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	f383 8811 	msr	BASEPRI, r3
 800dfd6:	f3bf 8f6f 	isb	sy
 800dfda:	f3bf 8f4f 	dsb	sy
 800dfde:	607b      	str	r3, [r7, #4]
}
 800dfe0:	bf00      	nop
 800dfe2:	e7fe      	b.n	800dfe2 <vTaskSwitchContext+0x3e>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	60fb      	str	r3, [r7, #12]
 800dfea:	491d      	ldr	r1, [pc, #116]	; (800e060 <vTaskSwitchContext+0xbc>)
 800dfec:	68fa      	ldr	r2, [r7, #12]
 800dfee:	4613      	mov	r3, r2
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	4413      	add	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	440b      	add	r3, r1
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d0e4      	beq.n	800dfc8 <vTaskSwitchContext+0x24>
 800dffe:	68fa      	ldr	r2, [r7, #12]
 800e000:	4613      	mov	r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	4413      	add	r3, r2
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	4a15      	ldr	r2, [pc, #84]	; (800e060 <vTaskSwitchContext+0xbc>)
 800e00a:	4413      	add	r3, r2
 800e00c:	60bb      	str	r3, [r7, #8]
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	685b      	ldr	r3, [r3, #4]
 800e012:	685a      	ldr	r2, [r3, #4]
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	605a      	str	r2, [r3, #4]
 800e018:	68bb      	ldr	r3, [r7, #8]
 800e01a:	685a      	ldr	r2, [r3, #4]
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	3308      	adds	r3, #8
 800e020:	429a      	cmp	r2, r3
 800e022:	d104      	bne.n	800e02e <vTaskSwitchContext+0x8a>
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	685a      	ldr	r2, [r3, #4]
 800e02a:	68bb      	ldr	r3, [r7, #8]
 800e02c:	605a      	str	r2, [r3, #4]
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	4a0b      	ldr	r2, [pc, #44]	; (800e064 <vTaskSwitchContext+0xc0>)
 800e036:	6013      	str	r3, [r2, #0]
 800e038:	4a08      	ldr	r2, [pc, #32]	; (800e05c <vTaskSwitchContext+0xb8>)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e03e:	4b09      	ldr	r3, [pc, #36]	; (800e064 <vTaskSwitchContext+0xc0>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	3354      	adds	r3, #84	; 0x54
 800e044:	4a08      	ldr	r2, [pc, #32]	; (800e068 <vTaskSwitchContext+0xc4>)
 800e046:	6013      	str	r3, [r2, #0]
}
 800e048:	bf00      	nop
 800e04a:	3714      	adds	r7, #20
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	20002508 	.word	0x20002508
 800e058:	200024f4 	.word	0x200024f4
 800e05c:	200024e8 	.word	0x200024e8
 800e060:	20002010 	.word	0x20002010
 800e064:	2000200c 	.word	0x2000200c
 800e068:	20000014 	.word	0x20000014

0800e06c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d10a      	bne.n	800e092 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e080:	f383 8811 	msr	BASEPRI, r3
 800e084:	f3bf 8f6f 	isb	sy
 800e088:	f3bf 8f4f 	dsb	sy
 800e08c:	60fb      	str	r3, [r7, #12]
}
 800e08e:	bf00      	nop
 800e090:	e7fe      	b.n	800e090 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e092:	4b07      	ldr	r3, [pc, #28]	; (800e0b0 <vTaskPlaceOnEventList+0x44>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	3318      	adds	r3, #24
 800e098:	4619      	mov	r1, r3
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f7fe fb3f 	bl	800c71e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e0a0:	2101      	movs	r1, #1
 800e0a2:	6838      	ldr	r0, [r7, #0]
 800e0a4:	f000 fb7e 	bl	800e7a4 <prvAddCurrentTaskToDelayedList>
}
 800e0a8:	bf00      	nop
 800e0aa:	3710      	adds	r7, #16
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	2000200c 	.word	0x2000200c

0800e0b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b086      	sub	sp, #24
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d10a      	bne.n	800e0dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e0c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ca:	f383 8811 	msr	BASEPRI, r3
 800e0ce:	f3bf 8f6f 	isb	sy
 800e0d2:	f3bf 8f4f 	dsb	sy
 800e0d6:	617b      	str	r3, [r7, #20]
}
 800e0d8:	bf00      	nop
 800e0da:	e7fe      	b.n	800e0da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0dc:	4b0a      	ldr	r3, [pc, #40]	; (800e108 <vTaskPlaceOnEventListRestricted+0x54>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	3318      	adds	r3, #24
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f7fe faf6 	bl	800c6d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d002      	beq.n	800e0f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e0f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e0f6:	6879      	ldr	r1, [r7, #4]
 800e0f8:	68b8      	ldr	r0, [r7, #8]
 800e0fa:	f000 fb53 	bl	800e7a4 <prvAddCurrentTaskToDelayedList>
	}
 800e0fe:	bf00      	nop
 800e100:	3718      	adds	r7, #24
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	2000200c 	.word	0x2000200c

0800e10c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b086      	sub	sp, #24
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	68db      	ldr	r3, [r3, #12]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d10a      	bne.n	800e138 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e126:	f383 8811 	msr	BASEPRI, r3
 800e12a:	f3bf 8f6f 	isb	sy
 800e12e:	f3bf 8f4f 	dsb	sy
 800e132:	60fb      	str	r3, [r7, #12]
}
 800e134:	bf00      	nop
 800e136:	e7fe      	b.n	800e136 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	3318      	adds	r3, #24
 800e13c:	4618      	mov	r0, r3
 800e13e:	f7fe fb27 	bl	800c790 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e142:	4b1e      	ldr	r3, [pc, #120]	; (800e1bc <xTaskRemoveFromEventList+0xb0>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d11d      	bne.n	800e186 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e14a:	693b      	ldr	r3, [r7, #16]
 800e14c:	3304      	adds	r3, #4
 800e14e:	4618      	mov	r0, r3
 800e150:	f7fe fb1e 	bl	800c790 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e158:	4b19      	ldr	r3, [pc, #100]	; (800e1c0 <xTaskRemoveFromEventList+0xb4>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d903      	bls.n	800e168 <xTaskRemoveFromEventList+0x5c>
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e164:	4a16      	ldr	r2, [pc, #88]	; (800e1c0 <xTaskRemoveFromEventList+0xb4>)
 800e166:	6013      	str	r3, [r2, #0]
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e16c:	4613      	mov	r3, r2
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	4413      	add	r3, r2
 800e172:	009b      	lsls	r3, r3, #2
 800e174:	4a13      	ldr	r2, [pc, #76]	; (800e1c4 <xTaskRemoveFromEventList+0xb8>)
 800e176:	441a      	add	r2, r3
 800e178:	693b      	ldr	r3, [r7, #16]
 800e17a:	3304      	adds	r3, #4
 800e17c:	4619      	mov	r1, r3
 800e17e:	4610      	mov	r0, r2
 800e180:	f7fe faa9 	bl	800c6d6 <vListInsertEnd>
 800e184:	e005      	b.n	800e192 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	3318      	adds	r3, #24
 800e18a:	4619      	mov	r1, r3
 800e18c:	480e      	ldr	r0, [pc, #56]	; (800e1c8 <xTaskRemoveFromEventList+0xbc>)
 800e18e:	f7fe faa2 	bl	800c6d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e196:	4b0d      	ldr	r3, [pc, #52]	; (800e1cc <xTaskRemoveFromEventList+0xc0>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d905      	bls.n	800e1ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e1a4:	4b0a      	ldr	r3, [pc, #40]	; (800e1d0 <xTaskRemoveFromEventList+0xc4>)
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	601a      	str	r2, [r3, #0]
 800e1aa:	e001      	b.n	800e1b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e1b0:	697b      	ldr	r3, [r7, #20]
}
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	3718      	adds	r7, #24
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	20002508 	.word	0x20002508
 800e1c0:	200024e8 	.word	0x200024e8
 800e1c4:	20002010 	.word	0x20002010
 800e1c8:	200024a0 	.word	0x200024a0
 800e1cc:	2000200c 	.word	0x2000200c
 800e1d0:	200024f4 	.word	0x200024f4

0800e1d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1dc:	4b06      	ldr	r3, [pc, #24]	; (800e1f8 <vTaskInternalSetTimeOutState+0x24>)
 800e1de:	681a      	ldr	r2, [r3, #0]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e1e4:	4b05      	ldr	r3, [pc, #20]	; (800e1fc <vTaskInternalSetTimeOutState+0x28>)
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	605a      	str	r2, [r3, #4]
}
 800e1ec:	bf00      	nop
 800e1ee:	370c      	adds	r7, #12
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr
 800e1f8:	200024f8 	.word	0x200024f8
 800e1fc:	200024e4 	.word	0x200024e4

0800e200 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b088      	sub	sp, #32
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10a      	bne.n	800e226 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e214:	f383 8811 	msr	BASEPRI, r3
 800e218:	f3bf 8f6f 	isb	sy
 800e21c:	f3bf 8f4f 	dsb	sy
 800e220:	613b      	str	r3, [r7, #16]
}
 800e222:	bf00      	nop
 800e224:	e7fe      	b.n	800e224 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10a      	bne.n	800e242 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e230:	f383 8811 	msr	BASEPRI, r3
 800e234:	f3bf 8f6f 	isb	sy
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	60fb      	str	r3, [r7, #12]
}
 800e23e:	bf00      	nop
 800e240:	e7fe      	b.n	800e240 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e242:	f000 ff7f 	bl	800f144 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e246:	4b1d      	ldr	r3, [pc, #116]	; (800e2bc <xTaskCheckForTimeOut+0xbc>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	685b      	ldr	r3, [r3, #4]
 800e250:	69ba      	ldr	r2, [r7, #24]
 800e252:	1ad3      	subs	r3, r2, r3
 800e254:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e25e:	d102      	bne.n	800e266 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e260:	2300      	movs	r3, #0
 800e262:	61fb      	str	r3, [r7, #28]
 800e264:	e023      	b.n	800e2ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	4b15      	ldr	r3, [pc, #84]	; (800e2c0 <xTaskCheckForTimeOut+0xc0>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d007      	beq.n	800e282 <xTaskCheckForTimeOut+0x82>
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	69ba      	ldr	r2, [r7, #24]
 800e278:	429a      	cmp	r2, r3
 800e27a:	d302      	bcc.n	800e282 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e27c:	2301      	movs	r3, #1
 800e27e:	61fb      	str	r3, [r7, #28]
 800e280:	e015      	b.n	800e2ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e282:	683b      	ldr	r3, [r7, #0]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	697a      	ldr	r2, [r7, #20]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d20b      	bcs.n	800e2a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e28c:	683b      	ldr	r3, [r7, #0]
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	1ad2      	subs	r2, r2, r3
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f7ff ff9b 	bl	800e1d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	61fb      	str	r3, [r7, #28]
 800e2a2:	e004      	b.n	800e2ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e2ae:	f000 ff79 	bl	800f1a4 <vPortExitCritical>

	return xReturn;
 800e2b2:	69fb      	ldr	r3, [r7, #28]
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3720      	adds	r7, #32
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	200024e4 	.word	0x200024e4
 800e2c0:	200024f8 	.word	0x200024f8

0800e2c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e2c8:	4b03      	ldr	r3, [pc, #12]	; (800e2d8 <vTaskMissedYield+0x14>)
 800e2ca:	2201      	movs	r2, #1
 800e2cc:	601a      	str	r2, [r3, #0]
}
 800e2ce:	bf00      	nop
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d6:	4770      	bx	lr
 800e2d8:	200024f4 	.word	0x200024f4

0800e2dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e2e4:	f000 f852 	bl	800e38c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e2e8:	4b06      	ldr	r3, [pc, #24]	; (800e304 <prvIdleTask+0x28>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d9f9      	bls.n	800e2e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e2f0:	4b05      	ldr	r3, [pc, #20]	; (800e308 <prvIdleTask+0x2c>)
 800e2f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2f6:	601a      	str	r2, [r3, #0]
 800e2f8:	f3bf 8f4f 	dsb	sy
 800e2fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e300:	e7f0      	b.n	800e2e4 <prvIdleTask+0x8>
 800e302:	bf00      	nop
 800e304:	20002010 	.word	0x20002010
 800e308:	e000ed04 	.word	0xe000ed04

0800e30c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e312:	2300      	movs	r3, #0
 800e314:	607b      	str	r3, [r7, #4]
 800e316:	e00c      	b.n	800e332 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	4613      	mov	r3, r2
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	4413      	add	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	4a12      	ldr	r2, [pc, #72]	; (800e36c <prvInitialiseTaskLists+0x60>)
 800e324:	4413      	add	r3, r2
 800e326:	4618      	mov	r0, r3
 800e328:	f7fe f9a8 	bl	800c67c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3301      	adds	r3, #1
 800e330:	607b      	str	r3, [r7, #4]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2b37      	cmp	r3, #55	; 0x37
 800e336:	d9ef      	bls.n	800e318 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e338:	480d      	ldr	r0, [pc, #52]	; (800e370 <prvInitialiseTaskLists+0x64>)
 800e33a:	f7fe f99f 	bl	800c67c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e33e:	480d      	ldr	r0, [pc, #52]	; (800e374 <prvInitialiseTaskLists+0x68>)
 800e340:	f7fe f99c 	bl	800c67c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e344:	480c      	ldr	r0, [pc, #48]	; (800e378 <prvInitialiseTaskLists+0x6c>)
 800e346:	f7fe f999 	bl	800c67c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e34a:	480c      	ldr	r0, [pc, #48]	; (800e37c <prvInitialiseTaskLists+0x70>)
 800e34c:	f7fe f996 	bl	800c67c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e350:	480b      	ldr	r0, [pc, #44]	; (800e380 <prvInitialiseTaskLists+0x74>)
 800e352:	f7fe f993 	bl	800c67c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e356:	4b0b      	ldr	r3, [pc, #44]	; (800e384 <prvInitialiseTaskLists+0x78>)
 800e358:	4a05      	ldr	r2, [pc, #20]	; (800e370 <prvInitialiseTaskLists+0x64>)
 800e35a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e35c:	4b0a      	ldr	r3, [pc, #40]	; (800e388 <prvInitialiseTaskLists+0x7c>)
 800e35e:	4a05      	ldr	r2, [pc, #20]	; (800e374 <prvInitialiseTaskLists+0x68>)
 800e360:	601a      	str	r2, [r3, #0]
}
 800e362:	bf00      	nop
 800e364:	3708      	adds	r7, #8
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	20002010 	.word	0x20002010
 800e370:	20002470 	.word	0x20002470
 800e374:	20002484 	.word	0x20002484
 800e378:	200024a0 	.word	0x200024a0
 800e37c:	200024b4 	.word	0x200024b4
 800e380:	200024cc 	.word	0x200024cc
 800e384:	20002498 	.word	0x20002498
 800e388:	2000249c 	.word	0x2000249c

0800e38c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b082      	sub	sp, #8
 800e390:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e392:	e019      	b.n	800e3c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e394:	f000 fed6 	bl	800f144 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e398:	4b10      	ldr	r3, [pc, #64]	; (800e3dc <prvCheckTasksWaitingTermination+0x50>)
 800e39a:	68db      	ldr	r3, [r3, #12]
 800e39c:	68db      	ldr	r3, [r3, #12]
 800e39e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7fe f9f3 	bl	800c790 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e3aa:	4b0d      	ldr	r3, [pc, #52]	; (800e3e0 <prvCheckTasksWaitingTermination+0x54>)
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	3b01      	subs	r3, #1
 800e3b0:	4a0b      	ldr	r2, [pc, #44]	; (800e3e0 <prvCheckTasksWaitingTermination+0x54>)
 800e3b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e3b4:	4b0b      	ldr	r3, [pc, #44]	; (800e3e4 <prvCheckTasksWaitingTermination+0x58>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	4a0a      	ldr	r2, [pc, #40]	; (800e3e4 <prvCheckTasksWaitingTermination+0x58>)
 800e3bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e3be:	f000 fef1 	bl	800f1a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f810 	bl	800e3e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3c8:	4b06      	ldr	r3, [pc, #24]	; (800e3e4 <prvCheckTasksWaitingTermination+0x58>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d1e1      	bne.n	800e394 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e3d0:	bf00      	nop
 800e3d2:	bf00      	nop
 800e3d4:	3708      	adds	r7, #8
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}
 800e3da:	bf00      	nop
 800e3dc:	200024b4 	.word	0x200024b4
 800e3e0:	200024e0 	.word	0x200024e0
 800e3e4:	200024c8 	.word	0x200024c8

0800e3e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e3e8:	b580      	push	{r7, lr}
 800e3ea:	b084      	sub	sp, #16
 800e3ec:	af00      	add	r7, sp, #0
 800e3ee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	3354      	adds	r3, #84	; 0x54
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f005 f82f 	bl	8013458 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e400:	2b00      	cmp	r3, #0
 800e402:	d108      	bne.n	800e416 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e408:	4618      	mov	r0, r3
 800e40a:	f001 f889 	bl	800f520 <vPortFree>
				vPortFree( pxTCB );
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f001 f886 	bl	800f520 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e414:	e018      	b.n	800e448 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e41c:	2b01      	cmp	r3, #1
 800e41e:	d103      	bne.n	800e428 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f001 f87d 	bl	800f520 <vPortFree>
	}
 800e426:	e00f      	b.n	800e448 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800e42e:	2b02      	cmp	r3, #2
 800e430:	d00a      	beq.n	800e448 <prvDeleteTCB+0x60>
	__asm volatile
 800e432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e436:	f383 8811 	msr	BASEPRI, r3
 800e43a:	f3bf 8f6f 	isb	sy
 800e43e:	f3bf 8f4f 	dsb	sy
 800e442:	60fb      	str	r3, [r7, #12]
}
 800e444:	bf00      	nop
 800e446:	e7fe      	b.n	800e446 <prvDeleteTCB+0x5e>
	}
 800e448:	bf00      	nop
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e456:	4b0c      	ldr	r3, [pc, #48]	; (800e488 <prvResetNextTaskUnblockTime+0x38>)
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d104      	bne.n	800e46a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e460:	4b0a      	ldr	r3, [pc, #40]	; (800e48c <prvResetNextTaskUnblockTime+0x3c>)
 800e462:	f04f 32ff 	mov.w	r2, #4294967295
 800e466:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e468:	e008      	b.n	800e47c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e46a:	4b07      	ldr	r3, [pc, #28]	; (800e488 <prvResetNextTaskUnblockTime+0x38>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	4a04      	ldr	r2, [pc, #16]	; (800e48c <prvResetNextTaskUnblockTime+0x3c>)
 800e47a:	6013      	str	r3, [r2, #0]
}
 800e47c:	bf00      	nop
 800e47e:	370c      	adds	r7, #12
 800e480:	46bd      	mov	sp, r7
 800e482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e486:	4770      	bx	lr
 800e488:	20002498 	.word	0x20002498
 800e48c:	20002500 	.word	0x20002500

0800e490 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e496:	4b0b      	ldr	r3, [pc, #44]	; (800e4c4 <xTaskGetSchedulerState+0x34>)
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d102      	bne.n	800e4a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e49e:	2301      	movs	r3, #1
 800e4a0:	607b      	str	r3, [r7, #4]
 800e4a2:	e008      	b.n	800e4b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4a4:	4b08      	ldr	r3, [pc, #32]	; (800e4c8 <xTaskGetSchedulerState+0x38>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d102      	bne.n	800e4b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e4ac:	2302      	movs	r3, #2
 800e4ae:	607b      	str	r3, [r7, #4]
 800e4b0:	e001      	b.n	800e4b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e4b6:	687b      	ldr	r3, [r7, #4]
	}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	370c      	adds	r7, #12
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c2:	4770      	bx	lr
 800e4c4:	200024ec 	.word	0x200024ec
 800e4c8:	20002508 	.word	0x20002508

0800e4cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b084      	sub	sp, #16
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d051      	beq.n	800e586 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e4e2:	68bb      	ldr	r3, [r7, #8]
 800e4e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4e6:	4b2a      	ldr	r3, [pc, #168]	; (800e590 <xTaskPriorityInherit+0xc4>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d241      	bcs.n	800e574 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4f0:	68bb      	ldr	r3, [r7, #8]
 800e4f2:	699b      	ldr	r3, [r3, #24]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	db06      	blt.n	800e506 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4f8:	4b25      	ldr	r3, [pc, #148]	; (800e590 <xTaskPriorityInherit+0xc4>)
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	6959      	ldr	r1, [r3, #20]
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e50e:	4613      	mov	r3, r2
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	4413      	add	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4a1f      	ldr	r2, [pc, #124]	; (800e594 <xTaskPriorityInherit+0xc8>)
 800e518:	4413      	add	r3, r2
 800e51a:	4299      	cmp	r1, r3
 800e51c:	d122      	bne.n	800e564 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e51e:	68bb      	ldr	r3, [r7, #8]
 800e520:	3304      	adds	r3, #4
 800e522:	4618      	mov	r0, r3
 800e524:	f7fe f934 	bl	800c790 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e528:	4b19      	ldr	r3, [pc, #100]	; (800e590 <xTaskPriorityInherit+0xc4>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e532:	68bb      	ldr	r3, [r7, #8]
 800e534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e536:	4b18      	ldr	r3, [pc, #96]	; (800e598 <xTaskPriorityInherit+0xcc>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d903      	bls.n	800e546 <xTaskPriorityInherit+0x7a>
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e542:	4a15      	ldr	r2, [pc, #84]	; (800e598 <xTaskPriorityInherit+0xcc>)
 800e544:	6013      	str	r3, [r2, #0]
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e54a:	4613      	mov	r3, r2
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	4413      	add	r3, r2
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	4a10      	ldr	r2, [pc, #64]	; (800e594 <xTaskPriorityInherit+0xc8>)
 800e554:	441a      	add	r2, r3
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	3304      	adds	r3, #4
 800e55a:	4619      	mov	r1, r3
 800e55c:	4610      	mov	r0, r2
 800e55e:	f7fe f8ba 	bl	800c6d6 <vListInsertEnd>
 800e562:	e004      	b.n	800e56e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e564:	4b0a      	ldr	r3, [pc, #40]	; (800e590 <xTaskPriorityInherit+0xc4>)
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e56e:	2301      	movs	r3, #1
 800e570:	60fb      	str	r3, [r7, #12]
 800e572:	e008      	b.n	800e586 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e578:	4b05      	ldr	r3, [pc, #20]	; (800e590 <xTaskPriorityInherit+0xc4>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e57e:	429a      	cmp	r2, r3
 800e580:	d201      	bcs.n	800e586 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e582:	2301      	movs	r3, #1
 800e584:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e586:	68fb      	ldr	r3, [r7, #12]
	}
 800e588:	4618      	mov	r0, r3
 800e58a:	3710      	adds	r7, #16
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}
 800e590:	2000200c 	.word	0x2000200c
 800e594:	20002010 	.word	0x20002010
 800e598:	200024e8 	.word	0x200024e8

0800e59c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b086      	sub	sp, #24
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d056      	beq.n	800e660 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e5b2:	4b2e      	ldr	r3, [pc, #184]	; (800e66c <xTaskPriorityDisinherit+0xd0>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	693a      	ldr	r2, [r7, #16]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d00a      	beq.n	800e5d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c0:	f383 8811 	msr	BASEPRI, r3
 800e5c4:	f3bf 8f6f 	isb	sy
 800e5c8:	f3bf 8f4f 	dsb	sy
 800e5cc:	60fb      	str	r3, [r7, #12]
}
 800e5ce:	bf00      	nop
 800e5d0:	e7fe      	b.n	800e5d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d10a      	bne.n	800e5f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5de:	f383 8811 	msr	BASEPRI, r3
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	f3bf 8f4f 	dsb	sy
 800e5ea:	60bb      	str	r3, [r7, #8]
}
 800e5ec:	bf00      	nop
 800e5ee:	e7fe      	b.n	800e5ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5f4:	1e5a      	subs	r2, r3, #1
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e602:	429a      	cmp	r2, r3
 800e604:	d02c      	beq.n	800e660 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d128      	bne.n	800e660 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	3304      	adds	r3, #4
 800e612:	4618      	mov	r0, r3
 800e614:	f7fe f8bc 	bl	800c790 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e618:	693b      	ldr	r3, [r7, #16]
 800e61a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e624:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e630:	4b0f      	ldr	r3, [pc, #60]	; (800e670 <xTaskPriorityDisinherit+0xd4>)
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	429a      	cmp	r2, r3
 800e636:	d903      	bls.n	800e640 <xTaskPriorityDisinherit+0xa4>
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e63c:	4a0c      	ldr	r2, [pc, #48]	; (800e670 <xTaskPriorityDisinherit+0xd4>)
 800e63e:	6013      	str	r3, [r2, #0]
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e644:	4613      	mov	r3, r2
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	4413      	add	r3, r2
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	4a09      	ldr	r2, [pc, #36]	; (800e674 <xTaskPriorityDisinherit+0xd8>)
 800e64e:	441a      	add	r2, r3
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	3304      	adds	r3, #4
 800e654:	4619      	mov	r1, r3
 800e656:	4610      	mov	r0, r2
 800e658:	f7fe f83d 	bl	800c6d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e65c:	2301      	movs	r3, #1
 800e65e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e660:	697b      	ldr	r3, [r7, #20]
	}
 800e662:	4618      	mov	r0, r3
 800e664:	3718      	adds	r7, #24
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
 800e66a:	bf00      	nop
 800e66c:	2000200c 	.word	0x2000200c
 800e670:	200024e8 	.word	0x200024e8
 800e674:	20002010 	.word	0x20002010

0800e678 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b088      	sub	sp, #32
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e686:	2301      	movs	r3, #1
 800e688:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d06a      	beq.n	800e766 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e690:	69bb      	ldr	r3, [r7, #24]
 800e692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e694:	2b00      	cmp	r3, #0
 800e696:	d10a      	bne.n	800e6ae <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e69c:	f383 8811 	msr	BASEPRI, r3
 800e6a0:	f3bf 8f6f 	isb	sy
 800e6a4:	f3bf 8f4f 	dsb	sy
 800e6a8:	60fb      	str	r3, [r7, #12]
}
 800e6aa:	bf00      	nop
 800e6ac:	e7fe      	b.n	800e6ac <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6b2:	683a      	ldr	r2, [r7, #0]
 800e6b4:	429a      	cmp	r2, r3
 800e6b6:	d902      	bls.n	800e6be <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	61fb      	str	r3, [r7, #28]
 800e6bc:	e002      	b.n	800e6c4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e6be:	69bb      	ldr	r3, [r7, #24]
 800e6c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e6c2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6c8:	69fa      	ldr	r2, [r7, #28]
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d04b      	beq.n	800e766 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e6ce:	69bb      	ldr	r3, [r7, #24]
 800e6d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6d2:	697a      	ldr	r2, [r7, #20]
 800e6d4:	429a      	cmp	r2, r3
 800e6d6:	d146      	bne.n	800e766 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e6d8:	4b25      	ldr	r3, [pc, #148]	; (800e770 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	69ba      	ldr	r2, [r7, #24]
 800e6de:	429a      	cmp	r2, r3
 800e6e0:	d10a      	bne.n	800e6f8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e6:	f383 8811 	msr	BASEPRI, r3
 800e6ea:	f3bf 8f6f 	isb	sy
 800e6ee:	f3bf 8f4f 	dsb	sy
 800e6f2:	60bb      	str	r3, [r7, #8]
}
 800e6f4:	bf00      	nop
 800e6f6:	e7fe      	b.n	800e6f6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e6f8:	69bb      	ldr	r3, [r7, #24]
 800e6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	69fa      	ldr	r2, [r7, #28]
 800e702:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e704:	69bb      	ldr	r3, [r7, #24]
 800e706:	699b      	ldr	r3, [r3, #24]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	db04      	blt.n	800e716 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e712:	69bb      	ldr	r3, [r7, #24]
 800e714:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	6959      	ldr	r1, [r3, #20]
 800e71a:	693a      	ldr	r2, [r7, #16]
 800e71c:	4613      	mov	r3, r2
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	4413      	add	r3, r2
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	4a13      	ldr	r2, [pc, #76]	; (800e774 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e726:	4413      	add	r3, r2
 800e728:	4299      	cmp	r1, r3
 800e72a:	d11c      	bne.n	800e766 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e72c:	69bb      	ldr	r3, [r7, #24]
 800e72e:	3304      	adds	r3, #4
 800e730:	4618      	mov	r0, r3
 800e732:	f7fe f82d 	bl	800c790 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e73a:	4b0f      	ldr	r3, [pc, #60]	; (800e778 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d903      	bls.n	800e74a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e746:	4a0c      	ldr	r2, [pc, #48]	; (800e778 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e748:	6013      	str	r3, [r2, #0]
 800e74a:	69bb      	ldr	r3, [r7, #24]
 800e74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e74e:	4613      	mov	r3, r2
 800e750:	009b      	lsls	r3, r3, #2
 800e752:	4413      	add	r3, r2
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	4a07      	ldr	r2, [pc, #28]	; (800e774 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e758:	441a      	add	r2, r3
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	3304      	adds	r3, #4
 800e75e:	4619      	mov	r1, r3
 800e760:	4610      	mov	r0, r2
 800e762:	f7fd ffb8 	bl	800c6d6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e766:	bf00      	nop
 800e768:	3720      	adds	r7, #32
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	2000200c 	.word	0x2000200c
 800e774:	20002010 	.word	0x20002010
 800e778:	200024e8 	.word	0x200024e8

0800e77c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e77c:	b480      	push	{r7}
 800e77e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e780:	4b07      	ldr	r3, [pc, #28]	; (800e7a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d004      	beq.n	800e792 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e788:	4b05      	ldr	r3, [pc, #20]	; (800e7a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e78e:	3201      	adds	r2, #1
 800e790:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e792:	4b03      	ldr	r3, [pc, #12]	; (800e7a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e794:	681b      	ldr	r3, [r3, #0]
	}
 800e796:	4618      	mov	r0, r3
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr
 800e7a0:	2000200c 	.word	0x2000200c

0800e7a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e7ae:	4b21      	ldr	r3, [pc, #132]	; (800e834 <prvAddCurrentTaskToDelayedList+0x90>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e7b4:	4b20      	ldr	r3, [pc, #128]	; (800e838 <prvAddCurrentTaskToDelayedList+0x94>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f7fd ffe8 	bl	800c790 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7c6:	d10a      	bne.n	800e7de <prvAddCurrentTaskToDelayedList+0x3a>
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d007      	beq.n	800e7de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7ce:	4b1a      	ldr	r3, [pc, #104]	; (800e838 <prvAddCurrentTaskToDelayedList+0x94>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	3304      	adds	r3, #4
 800e7d4:	4619      	mov	r1, r3
 800e7d6:	4819      	ldr	r0, [pc, #100]	; (800e83c <prvAddCurrentTaskToDelayedList+0x98>)
 800e7d8:	f7fd ff7d 	bl	800c6d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e7dc:	e026      	b.n	800e82c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	4413      	add	r3, r2
 800e7e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e7e6:	4b14      	ldr	r3, [pc, #80]	; (800e838 <prvAddCurrentTaskToDelayedList+0x94>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68ba      	ldr	r2, [r7, #8]
 800e7ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e7ee:	68ba      	ldr	r2, [r7, #8]
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d209      	bcs.n	800e80a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e7f6:	4b12      	ldr	r3, [pc, #72]	; (800e840 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	4b0f      	ldr	r3, [pc, #60]	; (800e838 <prvAddCurrentTaskToDelayedList+0x94>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	3304      	adds	r3, #4
 800e800:	4619      	mov	r1, r3
 800e802:	4610      	mov	r0, r2
 800e804:	f7fd ff8b 	bl	800c71e <vListInsert>
}
 800e808:	e010      	b.n	800e82c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e80a:	4b0e      	ldr	r3, [pc, #56]	; (800e844 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	4b0a      	ldr	r3, [pc, #40]	; (800e838 <prvAddCurrentTaskToDelayedList+0x94>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	3304      	adds	r3, #4
 800e814:	4619      	mov	r1, r3
 800e816:	4610      	mov	r0, r2
 800e818:	f7fd ff81 	bl	800c71e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e81c:	4b0a      	ldr	r3, [pc, #40]	; (800e848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	68ba      	ldr	r2, [r7, #8]
 800e822:	429a      	cmp	r2, r3
 800e824:	d202      	bcs.n	800e82c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e826:	4a08      	ldr	r2, [pc, #32]	; (800e848 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	6013      	str	r3, [r2, #0]
}
 800e82c:	bf00      	nop
 800e82e:	3710      	adds	r7, #16
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	200024e4 	.word	0x200024e4
 800e838:	2000200c 	.word	0x2000200c
 800e83c:	200024cc 	.word	0x200024cc
 800e840:	2000249c 	.word	0x2000249c
 800e844:	20002498 	.word	0x20002498
 800e848:	20002500 	.word	0x20002500

0800e84c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b08a      	sub	sp, #40	; 0x28
 800e850:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e852:	2300      	movs	r3, #0
 800e854:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e856:	f000 fb07 	bl	800ee68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e85a:	4b1c      	ldr	r3, [pc, #112]	; (800e8cc <xTimerCreateTimerTask+0x80>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d021      	beq.n	800e8a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e862:	2300      	movs	r3, #0
 800e864:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e866:	2300      	movs	r3, #0
 800e868:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e86a:	1d3a      	adds	r2, r7, #4
 800e86c:	f107 0108 	add.w	r1, r7, #8
 800e870:	f107 030c 	add.w	r3, r7, #12
 800e874:	4618      	mov	r0, r3
 800e876:	f7fd fee7 	bl	800c648 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e87a:	6879      	ldr	r1, [r7, #4]
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	9202      	str	r2, [sp, #8]
 800e882:	9301      	str	r3, [sp, #4]
 800e884:	2302      	movs	r3, #2
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	2300      	movs	r3, #0
 800e88a:	460a      	mov	r2, r1
 800e88c:	4910      	ldr	r1, [pc, #64]	; (800e8d0 <xTimerCreateTimerTask+0x84>)
 800e88e:	4811      	ldr	r0, [pc, #68]	; (800e8d4 <xTimerCreateTimerTask+0x88>)
 800e890:	f7fe ffb6 	bl	800d800 <xTaskCreateStatic>
 800e894:	4603      	mov	r3, r0
 800e896:	4a10      	ldr	r2, [pc, #64]	; (800e8d8 <xTimerCreateTimerTask+0x8c>)
 800e898:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e89a:	4b0f      	ldr	r3, [pc, #60]	; (800e8d8 <xTimerCreateTimerTask+0x8c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d001      	beq.n	800e8a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e8a6:	697b      	ldr	r3, [r7, #20]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d10a      	bne.n	800e8c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b0:	f383 8811 	msr	BASEPRI, r3
 800e8b4:	f3bf 8f6f 	isb	sy
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	613b      	str	r3, [r7, #16]
}
 800e8be:	bf00      	nop
 800e8c0:	e7fe      	b.n	800e8c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e8c2:	697b      	ldr	r3, [r7, #20]
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3718      	adds	r7, #24
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	2000253c 	.word	0x2000253c
 800e8d0:	08016f48 	.word	0x08016f48
 800e8d4:	0800ea11 	.word	0x0800ea11
 800e8d8:	20002540 	.word	0x20002540

0800e8dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b08a      	sub	sp, #40	; 0x28
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
 800e8e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d10a      	bne.n	800e90a <xTimerGenericCommand+0x2e>
	__asm volatile
 800e8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8f8:	f383 8811 	msr	BASEPRI, r3
 800e8fc:	f3bf 8f6f 	isb	sy
 800e900:	f3bf 8f4f 	dsb	sy
 800e904:	623b      	str	r3, [r7, #32]
}
 800e906:	bf00      	nop
 800e908:	e7fe      	b.n	800e908 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e90a:	4b1a      	ldr	r3, [pc, #104]	; (800e974 <xTimerGenericCommand+0x98>)
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d02a      	beq.n	800e968 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	2b05      	cmp	r3, #5
 800e922:	dc18      	bgt.n	800e956 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e924:	f7ff fdb4 	bl	800e490 <xTaskGetSchedulerState>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b02      	cmp	r3, #2
 800e92c:	d109      	bne.n	800e942 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e92e:	4b11      	ldr	r3, [pc, #68]	; (800e974 <xTimerGenericCommand+0x98>)
 800e930:	6818      	ldr	r0, [r3, #0]
 800e932:	f107 0110 	add.w	r1, r7, #16
 800e936:	2300      	movs	r3, #0
 800e938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e93a:	f7fe f8fb 	bl	800cb34 <xQueueGenericSend>
 800e93e:	6278      	str	r0, [r7, #36]	; 0x24
 800e940:	e012      	b.n	800e968 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e942:	4b0c      	ldr	r3, [pc, #48]	; (800e974 <xTimerGenericCommand+0x98>)
 800e944:	6818      	ldr	r0, [r3, #0]
 800e946:	f107 0110 	add.w	r1, r7, #16
 800e94a:	2300      	movs	r3, #0
 800e94c:	2200      	movs	r2, #0
 800e94e:	f7fe f8f1 	bl	800cb34 <xQueueGenericSend>
 800e952:	6278      	str	r0, [r7, #36]	; 0x24
 800e954:	e008      	b.n	800e968 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e956:	4b07      	ldr	r3, [pc, #28]	; (800e974 <xTimerGenericCommand+0x98>)
 800e958:	6818      	ldr	r0, [r3, #0]
 800e95a:	f107 0110 	add.w	r1, r7, #16
 800e95e:	2300      	movs	r3, #0
 800e960:	683a      	ldr	r2, [r7, #0]
 800e962:	f7fe f9e5 	bl	800cd30 <xQueueGenericSendFromISR>
 800e966:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3728      	adds	r7, #40	; 0x28
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	2000253c 	.word	0x2000253c

0800e978 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b088      	sub	sp, #32
 800e97c:	af02      	add	r7, sp, #8
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e982:	4b22      	ldr	r3, [pc, #136]	; (800ea0c <prvProcessExpiredTimer+0x94>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	3304      	adds	r3, #4
 800e990:	4618      	mov	r0, r3
 800e992:	f7fd fefd 	bl	800c790 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e99c:	f003 0304 	and.w	r3, r3, #4
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d022      	beq.n	800e9ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	699a      	ldr	r2, [r3, #24]
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	18d1      	adds	r1, r2, r3
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	683a      	ldr	r2, [r7, #0]
 800e9b0:	6978      	ldr	r0, [r7, #20]
 800e9b2:	f000 f8d1 	bl	800eb58 <prvInsertTimerInActiveList>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d01f      	beq.n	800e9fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9bc:	2300      	movs	r3, #0
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	687a      	ldr	r2, [r7, #4]
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	6978      	ldr	r0, [r7, #20]
 800e9c8:	f7ff ff88 	bl	800e8dc <xTimerGenericCommand>
 800e9cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e9ce:	693b      	ldr	r3, [r7, #16]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d113      	bne.n	800e9fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	60fb      	str	r3, [r7, #12]
}
 800e9e6:	bf00      	nop
 800e9e8:	e7fe      	b.n	800e9e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e9f0:	f023 0301 	bic.w	r3, r3, #1
 800e9f4:	b2da      	uxtb	r2, r3
 800e9f6:	697b      	ldr	r3, [r7, #20]
 800e9f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	6a1b      	ldr	r3, [r3, #32]
 800ea00:	6978      	ldr	r0, [r7, #20]
 800ea02:	4798      	blx	r3
}
 800ea04:	bf00      	nop
 800ea06:	3718      	adds	r7, #24
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	20002534 	.word	0x20002534

0800ea10 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea18:	f107 0308 	add.w	r3, r7, #8
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	f000 f857 	bl	800ead0 <prvGetNextExpireTime>
 800ea22:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	4619      	mov	r1, r3
 800ea28:	68f8      	ldr	r0, [r7, #12]
 800ea2a:	f000 f803 	bl	800ea34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ea2e:	f000 f8d5 	bl	800ebdc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ea32:	e7f1      	b.n	800ea18 <prvTimerTask+0x8>

0800ea34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ea3e:	f7ff f93b 	bl	800dcb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea42:	f107 0308 	add.w	r3, r7, #8
 800ea46:	4618      	mov	r0, r3
 800ea48:	f000 f866 	bl	800eb18 <prvSampleTimeNow>
 800ea4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d130      	bne.n	800eab6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ea54:	683b      	ldr	r3, [r7, #0]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d10a      	bne.n	800ea70 <prvProcessTimerOrBlockTask+0x3c>
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d806      	bhi.n	800ea70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ea62:	f7ff f937 	bl	800dcd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ea66:	68f9      	ldr	r1, [r7, #12]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f7ff ff85 	bl	800e978 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ea6e:	e024      	b.n	800eaba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d008      	beq.n	800ea88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ea76:	4b13      	ldr	r3, [pc, #76]	; (800eac4 <prvProcessTimerOrBlockTask+0x90>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d101      	bne.n	800ea84 <prvProcessTimerOrBlockTask+0x50>
 800ea80:	2301      	movs	r3, #1
 800ea82:	e000      	b.n	800ea86 <prvProcessTimerOrBlockTask+0x52>
 800ea84:	2300      	movs	r3, #0
 800ea86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ea88:	4b0f      	ldr	r3, [pc, #60]	; (800eac8 <prvProcessTimerOrBlockTask+0x94>)
 800ea8a:	6818      	ldr	r0, [r3, #0]
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	1ad3      	subs	r3, r2, r3
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	4619      	mov	r1, r3
 800ea96:	f7fe fe7f 	bl	800d798 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ea9a:	f7ff f91b 	bl	800dcd4 <xTaskResumeAll>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d10a      	bne.n	800eaba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800eaa4:	4b09      	ldr	r3, [pc, #36]	; (800eacc <prvProcessTimerOrBlockTask+0x98>)
 800eaa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eaaa:	601a      	str	r2, [r3, #0]
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	f3bf 8f6f 	isb	sy
}
 800eab4:	e001      	b.n	800eaba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800eab6:	f7ff f90d 	bl	800dcd4 <xTaskResumeAll>
}
 800eaba:	bf00      	nop
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	20002538 	.word	0x20002538
 800eac8:	2000253c 	.word	0x2000253c
 800eacc:	e000ed04 	.word	0xe000ed04

0800ead0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ead8:	4b0e      	ldr	r3, [pc, #56]	; (800eb14 <prvGetNextExpireTime+0x44>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d101      	bne.n	800eae6 <prvGetNextExpireTime+0x16>
 800eae2:	2201      	movs	r2, #1
 800eae4:	e000      	b.n	800eae8 <prvGetNextExpireTime+0x18>
 800eae6:	2200      	movs	r2, #0
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d105      	bne.n	800eb00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eaf4:	4b07      	ldr	r3, [pc, #28]	; (800eb14 <prvGetNextExpireTime+0x44>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	68db      	ldr	r3, [r3, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	60fb      	str	r3, [r7, #12]
 800eafe:	e001      	b.n	800eb04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800eb00:	2300      	movs	r3, #0
 800eb02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800eb04:	68fb      	ldr	r3, [r7, #12]
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3714      	adds	r7, #20
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	20002534 	.word	0x20002534

0800eb18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800eb20:	f7ff f976 	bl	800de10 <xTaskGetTickCount>
 800eb24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800eb26:	4b0b      	ldr	r3, [pc, #44]	; (800eb54 <prvSampleTimeNow+0x3c>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d205      	bcs.n	800eb3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800eb30:	f000 f936 	bl	800eda0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2201      	movs	r2, #1
 800eb38:	601a      	str	r2, [r3, #0]
 800eb3a:	e002      	b.n	800eb42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2200      	movs	r2, #0
 800eb40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800eb42:	4a04      	ldr	r2, [pc, #16]	; (800eb54 <prvSampleTimeNow+0x3c>)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800eb48:	68fb      	ldr	r3, [r7, #12]
}
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	3710      	adds	r7, #16
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd80      	pop	{r7, pc}
 800eb52:	bf00      	nop
 800eb54:	20002544 	.word	0x20002544

0800eb58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	60f8      	str	r0, [r7, #12]
 800eb60:	60b9      	str	r1, [r7, #8]
 800eb62:	607a      	str	r2, [r7, #4]
 800eb64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800eb66:	2300      	movs	r3, #0
 800eb68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	68ba      	ldr	r2, [r7, #8]
 800eb6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	68fa      	ldr	r2, [r7, #12]
 800eb74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d812      	bhi.n	800eba4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb7e:	687a      	ldr	r2, [r7, #4]
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	1ad2      	subs	r2, r2, r3
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	699b      	ldr	r3, [r3, #24]
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	d302      	bcc.n	800eb92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	617b      	str	r3, [r7, #20]
 800eb90:	e01b      	b.n	800ebca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800eb92:	4b10      	ldr	r3, [pc, #64]	; (800ebd4 <prvInsertTimerInActiveList+0x7c>)
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	3304      	adds	r3, #4
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	4610      	mov	r0, r2
 800eb9e:	f7fd fdbe 	bl	800c71e <vListInsert>
 800eba2:	e012      	b.n	800ebca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d206      	bcs.n	800ebba <prvInsertTimerInActiveList+0x62>
 800ebac:	68ba      	ldr	r2, [r7, #8]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d302      	bcc.n	800ebba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	617b      	str	r3, [r7, #20]
 800ebb8:	e007      	b.n	800ebca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ebba:	4b07      	ldr	r3, [pc, #28]	; (800ebd8 <prvInsertTimerInActiveList+0x80>)
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	3304      	adds	r3, #4
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	4610      	mov	r0, r2
 800ebc6:	f7fd fdaa 	bl	800c71e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ebca:	697b      	ldr	r3, [r7, #20]
}
 800ebcc:	4618      	mov	r0, r3
 800ebce:	3718      	adds	r7, #24
 800ebd0:	46bd      	mov	sp, r7
 800ebd2:	bd80      	pop	{r7, pc}
 800ebd4:	20002538 	.word	0x20002538
 800ebd8:	20002534 	.word	0x20002534

0800ebdc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b08e      	sub	sp, #56	; 0x38
 800ebe0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ebe2:	e0ca      	b.n	800ed7a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	da18      	bge.n	800ec1c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ebea:	1d3b      	adds	r3, r7, #4
 800ebec:	3304      	adds	r3, #4
 800ebee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ebf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d10a      	bne.n	800ec0c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ebf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebfa:	f383 8811 	msr	BASEPRI, r3
 800ebfe:	f3bf 8f6f 	isb	sy
 800ec02:	f3bf 8f4f 	dsb	sy
 800ec06:	61fb      	str	r3, [r7, #28]
}
 800ec08:	bf00      	nop
 800ec0a:	e7fe      	b.n	800ec0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ec0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec12:	6850      	ldr	r0, [r2, #4]
 800ec14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec16:	6892      	ldr	r2, [r2, #8]
 800ec18:	4611      	mov	r1, r2
 800ec1a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	f2c0 80aa 	blt.w	800ed78 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ec28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec2a:	695b      	ldr	r3, [r3, #20]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d004      	beq.n	800ec3a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ec30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec32:	3304      	adds	r3, #4
 800ec34:	4618      	mov	r0, r3
 800ec36:	f7fd fdab 	bl	800c790 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ec3a:	463b      	mov	r3, r7
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f7ff ff6b 	bl	800eb18 <prvSampleTimeNow>
 800ec42:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	2b09      	cmp	r3, #9
 800ec48:	f200 8097 	bhi.w	800ed7a <prvProcessReceivedCommands+0x19e>
 800ec4c:	a201      	add	r2, pc, #4	; (adr r2, 800ec54 <prvProcessReceivedCommands+0x78>)
 800ec4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec52:	bf00      	nop
 800ec54:	0800ec7d 	.word	0x0800ec7d
 800ec58:	0800ec7d 	.word	0x0800ec7d
 800ec5c:	0800ec7d 	.word	0x0800ec7d
 800ec60:	0800ecf1 	.word	0x0800ecf1
 800ec64:	0800ed05 	.word	0x0800ed05
 800ec68:	0800ed4f 	.word	0x0800ed4f
 800ec6c:	0800ec7d 	.word	0x0800ec7d
 800ec70:	0800ec7d 	.word	0x0800ec7d
 800ec74:	0800ecf1 	.word	0x0800ecf1
 800ec78:	0800ed05 	.word	0x0800ed05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ec7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ec82:	f043 0301 	orr.w	r3, r3, #1
 800ec86:	b2da      	uxtb	r2, r3
 800ec88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ec8e:	68ba      	ldr	r2, [r7, #8]
 800ec90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec92:	699b      	ldr	r3, [r3, #24]
 800ec94:	18d1      	adds	r1, r2, r3
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ec9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ec9c:	f7ff ff5c 	bl	800eb58 <prvInsertTimerInActiveList>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d069      	beq.n	800ed7a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca8:	6a1b      	ldr	r3, [r3, #32]
 800ecaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ecae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecb4:	f003 0304 	and.w	r3, r3, #4
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d05e      	beq.n	800ed7a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ecbc:	68ba      	ldr	r2, [r7, #8]
 800ecbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc0:	699b      	ldr	r3, [r3, #24]
 800ecc2:	441a      	add	r2, r3
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	9300      	str	r3, [sp, #0]
 800ecc8:	2300      	movs	r3, #0
 800ecca:	2100      	movs	r1, #0
 800eccc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ecce:	f7ff fe05 	bl	800e8dc <xTimerGenericCommand>
 800ecd2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ecd4:	6a3b      	ldr	r3, [r7, #32]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d14f      	bne.n	800ed7a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ecda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecde:	f383 8811 	msr	BASEPRI, r3
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	61bb      	str	r3, [r7, #24]
}
 800ecec:	bf00      	nop
 800ecee:	e7fe      	b.n	800ecee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ecf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ecf6:	f023 0301 	bic.w	r3, r3, #1
 800ecfa:	b2da      	uxtb	r2, r3
 800ecfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ed02:	e03a      	b.n	800ed7a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ed04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed0a:	f043 0301 	orr.w	r3, r3, #1
 800ed0e:	b2da      	uxtb	r2, r3
 800ed10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ed1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed1e:	699b      	ldr	r3, [r3, #24]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d10a      	bne.n	800ed3a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ed24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed28:	f383 8811 	msr	BASEPRI, r3
 800ed2c:	f3bf 8f6f 	isb	sy
 800ed30:	f3bf 8f4f 	dsb	sy
 800ed34:	617b      	str	r3, [r7, #20]
}
 800ed36:	bf00      	nop
 800ed38:	e7fe      	b.n	800ed38 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ed3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed3c:	699a      	ldr	r2, [r3, #24]
 800ed3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed40:	18d1      	adds	r1, r2, r3
 800ed42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed48:	f7ff ff06 	bl	800eb58 <prvInsertTimerInActiveList>
					break;
 800ed4c:	e015      	b.n	800ed7a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ed4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed54:	f003 0302 	and.w	r3, r3, #2
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d103      	bne.n	800ed64 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ed5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ed5e:	f000 fbdf 	bl	800f520 <vPortFree>
 800ed62:	e00a      	b.n	800ed7a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ed64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed6a:	f023 0301 	bic.w	r3, r3, #1
 800ed6e:	b2da      	uxtb	r2, r3
 800ed70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ed76:	e000      	b.n	800ed7a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ed78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed7a:	4b08      	ldr	r3, [pc, #32]	; (800ed9c <prvProcessReceivedCommands+0x1c0>)
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	1d39      	adds	r1, r7, #4
 800ed80:	2200      	movs	r2, #0
 800ed82:	4618      	mov	r0, r3
 800ed84:	f7fe f8fc 	bl	800cf80 <xQueueReceive>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f47f af2a 	bne.w	800ebe4 <prvProcessReceivedCommands+0x8>
	}
}
 800ed90:	bf00      	nop
 800ed92:	bf00      	nop
 800ed94:	3730      	adds	r7, #48	; 0x30
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	2000253c 	.word	0x2000253c

0800eda0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eda0:	b580      	push	{r7, lr}
 800eda2:	b088      	sub	sp, #32
 800eda4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eda6:	e048      	b.n	800ee3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eda8:	4b2d      	ldr	r3, [pc, #180]	; (800ee60 <prvSwitchTimerLists+0xc0>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800edb2:	4b2b      	ldr	r3, [pc, #172]	; (800ee60 <prvSwitchTimerLists+0xc0>)
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	68db      	ldr	r3, [r3, #12]
 800edba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	3304      	adds	r3, #4
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fd fce5 	bl	800c790 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	6a1b      	ldr	r3, [r3, #32]
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edd4:	f003 0304 	and.w	r3, r3, #4
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d02e      	beq.n	800ee3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	699b      	ldr	r3, [r3, #24]
 800ede0:	693a      	ldr	r2, [r7, #16]
 800ede2:	4413      	add	r3, r2
 800ede4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ede6:	68ba      	ldr	r2, [r7, #8]
 800ede8:	693b      	ldr	r3, [r7, #16]
 800edea:	429a      	cmp	r2, r3
 800edec:	d90e      	bls.n	800ee0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	68ba      	ldr	r2, [r7, #8]
 800edf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	68fa      	ldr	r2, [r7, #12]
 800edf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800edfa:	4b19      	ldr	r3, [pc, #100]	; (800ee60 <prvSwitchTimerLists+0xc0>)
 800edfc:	681a      	ldr	r2, [r3, #0]
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	3304      	adds	r3, #4
 800ee02:	4619      	mov	r1, r3
 800ee04:	4610      	mov	r0, r2
 800ee06:	f7fd fc8a 	bl	800c71e <vListInsert>
 800ee0a:	e016      	b.n	800ee3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	9300      	str	r3, [sp, #0]
 800ee10:	2300      	movs	r3, #0
 800ee12:	693a      	ldr	r2, [r7, #16]
 800ee14:	2100      	movs	r1, #0
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f7ff fd60 	bl	800e8dc <xTimerGenericCommand>
 800ee1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d10a      	bne.n	800ee3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ee24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee28:	f383 8811 	msr	BASEPRI, r3
 800ee2c:	f3bf 8f6f 	isb	sy
 800ee30:	f3bf 8f4f 	dsb	sy
 800ee34:	603b      	str	r3, [r7, #0]
}
 800ee36:	bf00      	nop
 800ee38:	e7fe      	b.n	800ee38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ee3a:	4b09      	ldr	r3, [pc, #36]	; (800ee60 <prvSwitchTimerLists+0xc0>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d1b1      	bne.n	800eda8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ee44:	4b06      	ldr	r3, [pc, #24]	; (800ee60 <prvSwitchTimerLists+0xc0>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ee4a:	4b06      	ldr	r3, [pc, #24]	; (800ee64 <prvSwitchTimerLists+0xc4>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	4a04      	ldr	r2, [pc, #16]	; (800ee60 <prvSwitchTimerLists+0xc0>)
 800ee50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ee52:	4a04      	ldr	r2, [pc, #16]	; (800ee64 <prvSwitchTimerLists+0xc4>)
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	6013      	str	r3, [r2, #0]
}
 800ee58:	bf00      	nop
 800ee5a:	3718      	adds	r7, #24
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}
 800ee60:	20002534 	.word	0x20002534
 800ee64:	20002538 	.word	0x20002538

0800ee68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ee6e:	f000 f969 	bl	800f144 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ee72:	4b15      	ldr	r3, [pc, #84]	; (800eec8 <prvCheckForValidListAndQueue+0x60>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d120      	bne.n	800eebc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ee7a:	4814      	ldr	r0, [pc, #80]	; (800eecc <prvCheckForValidListAndQueue+0x64>)
 800ee7c:	f7fd fbfe 	bl	800c67c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ee80:	4813      	ldr	r0, [pc, #76]	; (800eed0 <prvCheckForValidListAndQueue+0x68>)
 800ee82:	f7fd fbfb 	bl	800c67c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ee86:	4b13      	ldr	r3, [pc, #76]	; (800eed4 <prvCheckForValidListAndQueue+0x6c>)
 800ee88:	4a10      	ldr	r2, [pc, #64]	; (800eecc <prvCheckForValidListAndQueue+0x64>)
 800ee8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ee8c:	4b12      	ldr	r3, [pc, #72]	; (800eed8 <prvCheckForValidListAndQueue+0x70>)
 800ee8e:	4a10      	ldr	r2, [pc, #64]	; (800eed0 <prvCheckForValidListAndQueue+0x68>)
 800ee90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ee92:	2300      	movs	r3, #0
 800ee94:	9300      	str	r3, [sp, #0]
 800ee96:	4b11      	ldr	r3, [pc, #68]	; (800eedc <prvCheckForValidListAndQueue+0x74>)
 800ee98:	4a11      	ldr	r2, [pc, #68]	; (800eee0 <prvCheckForValidListAndQueue+0x78>)
 800ee9a:	2110      	movs	r1, #16
 800ee9c:	200a      	movs	r0, #10
 800ee9e:	f7fd fd09 	bl	800c8b4 <xQueueGenericCreateStatic>
 800eea2:	4603      	mov	r3, r0
 800eea4:	4a08      	ldr	r2, [pc, #32]	; (800eec8 <prvCheckForValidListAndQueue+0x60>)
 800eea6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800eea8:	4b07      	ldr	r3, [pc, #28]	; (800eec8 <prvCheckForValidListAndQueue+0x60>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d005      	beq.n	800eebc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800eeb0:	4b05      	ldr	r3, [pc, #20]	; (800eec8 <prvCheckForValidListAndQueue+0x60>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	490b      	ldr	r1, [pc, #44]	; (800eee4 <prvCheckForValidListAndQueue+0x7c>)
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	f7fe fc1a 	bl	800d6f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800eebc:	f000 f972 	bl	800f1a4 <vPortExitCritical>
}
 800eec0:	bf00      	nop
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	2000253c 	.word	0x2000253c
 800eecc:	2000250c 	.word	0x2000250c
 800eed0:	20002520 	.word	0x20002520
 800eed4:	20002534 	.word	0x20002534
 800eed8:	20002538 	.word	0x20002538
 800eedc:	200025e8 	.word	0x200025e8
 800eee0:	20002548 	.word	0x20002548
 800eee4:	08016f50 	.word	0x08016f50

0800eee8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800eee8:	b480      	push	{r7}
 800eeea:	b085      	sub	sp, #20
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	3b04      	subs	r3, #4
 800eef8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ef00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	3b04      	subs	r3, #4
 800ef06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	f023 0201 	bic.w	r2, r3, #1
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	3b04      	subs	r3, #4
 800ef16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ef18:	4a0c      	ldr	r2, [pc, #48]	; (800ef4c <pxPortInitialiseStack+0x64>)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	3b14      	subs	r3, #20
 800ef22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	3b04      	subs	r3, #4
 800ef2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	f06f 0202 	mvn.w	r2, #2
 800ef36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	3b20      	subs	r3, #32
 800ef3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ef3e:	68fb      	ldr	r3, [r7, #12]
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3714      	adds	r7, #20
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr
 800ef4c:	0800ef51 	.word	0x0800ef51

0800ef50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ef50:	b480      	push	{r7}
 800ef52:	b085      	sub	sp, #20
 800ef54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ef56:	2300      	movs	r3, #0
 800ef58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ef5a:	4b12      	ldr	r3, [pc, #72]	; (800efa4 <prvTaskExitError+0x54>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef62:	d00a      	beq.n	800ef7a <prvTaskExitError+0x2a>
	__asm volatile
 800ef64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef68:	f383 8811 	msr	BASEPRI, r3
 800ef6c:	f3bf 8f6f 	isb	sy
 800ef70:	f3bf 8f4f 	dsb	sy
 800ef74:	60fb      	str	r3, [r7, #12]
}
 800ef76:	bf00      	nop
 800ef78:	e7fe      	b.n	800ef78 <prvTaskExitError+0x28>
	__asm volatile
 800ef7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef7e:	f383 8811 	msr	BASEPRI, r3
 800ef82:	f3bf 8f6f 	isb	sy
 800ef86:	f3bf 8f4f 	dsb	sy
 800ef8a:	60bb      	str	r3, [r7, #8]
}
 800ef8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ef8e:	bf00      	nop
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d0fc      	beq.n	800ef90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ef96:	bf00      	nop
 800ef98:	bf00      	nop
 800ef9a:	3714      	adds	r7, #20
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr
 800efa4:	2000000c 	.word	0x2000000c
	...

0800efb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800efb0:	4b07      	ldr	r3, [pc, #28]	; (800efd0 <pxCurrentTCBConst2>)
 800efb2:	6819      	ldr	r1, [r3, #0]
 800efb4:	6808      	ldr	r0, [r1, #0]
 800efb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efba:	f380 8809 	msr	PSP, r0
 800efbe:	f3bf 8f6f 	isb	sy
 800efc2:	f04f 0000 	mov.w	r0, #0
 800efc6:	f380 8811 	msr	BASEPRI, r0
 800efca:	4770      	bx	lr
 800efcc:	f3af 8000 	nop.w

0800efd0 <pxCurrentTCBConst2>:
 800efd0:	2000200c 	.word	0x2000200c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800efd4:	bf00      	nop
 800efd6:	bf00      	nop

0800efd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800efd8:	4808      	ldr	r0, [pc, #32]	; (800effc <prvPortStartFirstTask+0x24>)
 800efda:	6800      	ldr	r0, [r0, #0]
 800efdc:	6800      	ldr	r0, [r0, #0]
 800efde:	f380 8808 	msr	MSP, r0
 800efe2:	f04f 0000 	mov.w	r0, #0
 800efe6:	f380 8814 	msr	CONTROL, r0
 800efea:	b662      	cpsie	i
 800efec:	b661      	cpsie	f
 800efee:	f3bf 8f4f 	dsb	sy
 800eff2:	f3bf 8f6f 	isb	sy
 800eff6:	df00      	svc	0
 800eff8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800effa:	bf00      	nop
 800effc:	e000ed08 	.word	0xe000ed08

0800f000 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f006:	4b46      	ldr	r3, [pc, #280]	; (800f120 <xPortStartScheduler+0x120>)
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	4a46      	ldr	r2, [pc, #280]	; (800f124 <xPortStartScheduler+0x124>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d10a      	bne.n	800f026 <xPortStartScheduler+0x26>
	__asm volatile
 800f010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f014:	f383 8811 	msr	BASEPRI, r3
 800f018:	f3bf 8f6f 	isb	sy
 800f01c:	f3bf 8f4f 	dsb	sy
 800f020:	613b      	str	r3, [r7, #16]
}
 800f022:	bf00      	nop
 800f024:	e7fe      	b.n	800f024 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f026:	4b3e      	ldr	r3, [pc, #248]	; (800f120 <xPortStartScheduler+0x120>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4a3f      	ldr	r2, [pc, #252]	; (800f128 <xPortStartScheduler+0x128>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d10a      	bne.n	800f046 <xPortStartScheduler+0x46>
	__asm volatile
 800f030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f034:	f383 8811 	msr	BASEPRI, r3
 800f038:	f3bf 8f6f 	isb	sy
 800f03c:	f3bf 8f4f 	dsb	sy
 800f040:	60fb      	str	r3, [r7, #12]
}
 800f042:	bf00      	nop
 800f044:	e7fe      	b.n	800f044 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f046:	4b39      	ldr	r3, [pc, #228]	; (800f12c <xPortStartScheduler+0x12c>)
 800f048:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f04a:	697b      	ldr	r3, [r7, #20]
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	22ff      	movs	r2, #255	; 0xff
 800f056:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f058:	697b      	ldr	r3, [r7, #20]
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f060:	78fb      	ldrb	r3, [r7, #3]
 800f062:	b2db      	uxtb	r3, r3
 800f064:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f068:	b2da      	uxtb	r2, r3
 800f06a:	4b31      	ldr	r3, [pc, #196]	; (800f130 <xPortStartScheduler+0x130>)
 800f06c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f06e:	4b31      	ldr	r3, [pc, #196]	; (800f134 <xPortStartScheduler+0x134>)
 800f070:	2207      	movs	r2, #7
 800f072:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f074:	e009      	b.n	800f08a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f076:	4b2f      	ldr	r3, [pc, #188]	; (800f134 <xPortStartScheduler+0x134>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	3b01      	subs	r3, #1
 800f07c:	4a2d      	ldr	r2, [pc, #180]	; (800f134 <xPortStartScheduler+0x134>)
 800f07e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f080:	78fb      	ldrb	r3, [r7, #3]
 800f082:	b2db      	uxtb	r3, r3
 800f084:	005b      	lsls	r3, r3, #1
 800f086:	b2db      	uxtb	r3, r3
 800f088:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f08a:	78fb      	ldrb	r3, [r7, #3]
 800f08c:	b2db      	uxtb	r3, r3
 800f08e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f092:	2b80      	cmp	r3, #128	; 0x80
 800f094:	d0ef      	beq.n	800f076 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f096:	4b27      	ldr	r3, [pc, #156]	; (800f134 <xPortStartScheduler+0x134>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	f1c3 0307 	rsb	r3, r3, #7
 800f09e:	2b04      	cmp	r3, #4
 800f0a0:	d00a      	beq.n	800f0b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a6:	f383 8811 	msr	BASEPRI, r3
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	60bb      	str	r3, [r7, #8]
}
 800f0b4:	bf00      	nop
 800f0b6:	e7fe      	b.n	800f0b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f0b8:	4b1e      	ldr	r3, [pc, #120]	; (800f134 <xPortStartScheduler+0x134>)
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	021b      	lsls	r3, r3, #8
 800f0be:	4a1d      	ldr	r2, [pc, #116]	; (800f134 <xPortStartScheduler+0x134>)
 800f0c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f0c2:	4b1c      	ldr	r3, [pc, #112]	; (800f134 <xPortStartScheduler+0x134>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f0ca:	4a1a      	ldr	r2, [pc, #104]	; (800f134 <xPortStartScheduler+0x134>)
 800f0cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	b2da      	uxtb	r2, r3
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f0d6:	4b18      	ldr	r3, [pc, #96]	; (800f138 <xPortStartScheduler+0x138>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	4a17      	ldr	r2, [pc, #92]	; (800f138 <xPortStartScheduler+0x138>)
 800f0dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f0e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f0e2:	4b15      	ldr	r3, [pc, #84]	; (800f138 <xPortStartScheduler+0x138>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	4a14      	ldr	r2, [pc, #80]	; (800f138 <xPortStartScheduler+0x138>)
 800f0e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f0ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f0ee:	f000 f8dd 	bl	800f2ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f0f2:	4b12      	ldr	r3, [pc, #72]	; (800f13c <xPortStartScheduler+0x13c>)
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f0f8:	f000 f8fc 	bl	800f2f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f0fc:	4b10      	ldr	r3, [pc, #64]	; (800f140 <xPortStartScheduler+0x140>)
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	4a0f      	ldr	r2, [pc, #60]	; (800f140 <xPortStartScheduler+0x140>)
 800f102:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f106:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f108:	f7ff ff66 	bl	800efd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f10c:	f7fe ff4a 	bl	800dfa4 <vTaskSwitchContext>
	prvTaskExitError();
 800f110:	f7ff ff1e 	bl	800ef50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3718      	adds	r7, #24
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	e000ed00 	.word	0xe000ed00
 800f124:	410fc271 	.word	0x410fc271
 800f128:	410fc270 	.word	0x410fc270
 800f12c:	e000e400 	.word	0xe000e400
 800f130:	20002638 	.word	0x20002638
 800f134:	2000263c 	.word	0x2000263c
 800f138:	e000ed20 	.word	0xe000ed20
 800f13c:	2000000c 	.word	0x2000000c
 800f140:	e000ef34 	.word	0xe000ef34

0800f144 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
	__asm volatile
 800f14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14e:	f383 8811 	msr	BASEPRI, r3
 800f152:	f3bf 8f6f 	isb	sy
 800f156:	f3bf 8f4f 	dsb	sy
 800f15a:	607b      	str	r3, [r7, #4]
}
 800f15c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f15e:	4b0f      	ldr	r3, [pc, #60]	; (800f19c <vPortEnterCritical+0x58>)
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	3301      	adds	r3, #1
 800f164:	4a0d      	ldr	r2, [pc, #52]	; (800f19c <vPortEnterCritical+0x58>)
 800f166:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f168:	4b0c      	ldr	r3, [pc, #48]	; (800f19c <vPortEnterCritical+0x58>)
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d10f      	bne.n	800f190 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f170:	4b0b      	ldr	r3, [pc, #44]	; (800f1a0 <vPortEnterCritical+0x5c>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b00      	cmp	r3, #0
 800f178:	d00a      	beq.n	800f190 <vPortEnterCritical+0x4c>
	__asm volatile
 800f17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17e:	f383 8811 	msr	BASEPRI, r3
 800f182:	f3bf 8f6f 	isb	sy
 800f186:	f3bf 8f4f 	dsb	sy
 800f18a:	603b      	str	r3, [r7, #0]
}
 800f18c:	bf00      	nop
 800f18e:	e7fe      	b.n	800f18e <vPortEnterCritical+0x4a>
	}
}
 800f190:	bf00      	nop
 800f192:	370c      	adds	r7, #12
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr
 800f19c:	2000000c 	.word	0x2000000c
 800f1a0:	e000ed04 	.word	0xe000ed04

0800f1a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f1a4:	b480      	push	{r7}
 800f1a6:	b083      	sub	sp, #12
 800f1a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f1aa:	4b12      	ldr	r3, [pc, #72]	; (800f1f4 <vPortExitCritical+0x50>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d10a      	bne.n	800f1c8 <vPortExitCritical+0x24>
	__asm volatile
 800f1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b6:	f383 8811 	msr	BASEPRI, r3
 800f1ba:	f3bf 8f6f 	isb	sy
 800f1be:	f3bf 8f4f 	dsb	sy
 800f1c2:	607b      	str	r3, [r7, #4]
}
 800f1c4:	bf00      	nop
 800f1c6:	e7fe      	b.n	800f1c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f1c8:	4b0a      	ldr	r3, [pc, #40]	; (800f1f4 <vPortExitCritical+0x50>)
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	3b01      	subs	r3, #1
 800f1ce:	4a09      	ldr	r2, [pc, #36]	; (800f1f4 <vPortExitCritical+0x50>)
 800f1d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f1d2:	4b08      	ldr	r3, [pc, #32]	; (800f1f4 <vPortExitCritical+0x50>)
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d105      	bne.n	800f1e6 <vPortExitCritical+0x42>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f1de:	683b      	ldr	r3, [r7, #0]
 800f1e0:	f383 8811 	msr	BASEPRI, r3
}
 800f1e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f1e6:	bf00      	nop
 800f1e8:	370c      	adds	r7, #12
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr
 800f1f2:	bf00      	nop
 800f1f4:	2000000c 	.word	0x2000000c
	...

0800f200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f200:	f3ef 8009 	mrs	r0, PSP
 800f204:	f3bf 8f6f 	isb	sy
 800f208:	4b15      	ldr	r3, [pc, #84]	; (800f260 <pxCurrentTCBConst>)
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	f01e 0f10 	tst.w	lr, #16
 800f210:	bf08      	it	eq
 800f212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f21a:	6010      	str	r0, [r2, #0]
 800f21c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f220:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f224:	f380 8811 	msr	BASEPRI, r0
 800f228:	f3bf 8f4f 	dsb	sy
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	f7fe feb8 	bl	800dfa4 <vTaskSwitchContext>
 800f234:	f04f 0000 	mov.w	r0, #0
 800f238:	f380 8811 	msr	BASEPRI, r0
 800f23c:	bc09      	pop	{r0, r3}
 800f23e:	6819      	ldr	r1, [r3, #0]
 800f240:	6808      	ldr	r0, [r1, #0]
 800f242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f246:	f01e 0f10 	tst.w	lr, #16
 800f24a:	bf08      	it	eq
 800f24c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f250:	f380 8809 	msr	PSP, r0
 800f254:	f3bf 8f6f 	isb	sy
 800f258:	4770      	bx	lr
 800f25a:	bf00      	nop
 800f25c:	f3af 8000 	nop.w

0800f260 <pxCurrentTCBConst>:
 800f260:	2000200c 	.word	0x2000200c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f264:	bf00      	nop
 800f266:	bf00      	nop

0800f268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
	__asm volatile
 800f26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f272:	f383 8811 	msr	BASEPRI, r3
 800f276:	f3bf 8f6f 	isb	sy
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	607b      	str	r3, [r7, #4]
}
 800f280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f282:	f7fe fdd5 	bl	800de30 <xTaskIncrementTick>
 800f286:	4603      	mov	r3, r0
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d003      	beq.n	800f294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f28c:	4b06      	ldr	r3, [pc, #24]	; (800f2a8 <xPortSysTickHandler+0x40>)
 800f28e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f292:	601a      	str	r2, [r3, #0]
 800f294:	2300      	movs	r3, #0
 800f296:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	f383 8811 	msr	BASEPRI, r3
}
 800f29e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f2a0:	bf00      	nop
 800f2a2:	3708      	adds	r7, #8
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	bd80      	pop	{r7, pc}
 800f2a8:	e000ed04 	.word	0xe000ed04

0800f2ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f2ac:	b480      	push	{r7}
 800f2ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f2b0:	4b0b      	ldr	r3, [pc, #44]	; (800f2e0 <vPortSetupTimerInterrupt+0x34>)
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f2b6:	4b0b      	ldr	r3, [pc, #44]	; (800f2e4 <vPortSetupTimerInterrupt+0x38>)
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f2bc:	4b0a      	ldr	r3, [pc, #40]	; (800f2e8 <vPortSetupTimerInterrupt+0x3c>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	4a0a      	ldr	r2, [pc, #40]	; (800f2ec <vPortSetupTimerInterrupt+0x40>)
 800f2c2:	fba2 2303 	umull	r2, r3, r2, r3
 800f2c6:	099b      	lsrs	r3, r3, #6
 800f2c8:	4a09      	ldr	r2, [pc, #36]	; (800f2f0 <vPortSetupTimerInterrupt+0x44>)
 800f2ca:	3b01      	subs	r3, #1
 800f2cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f2ce:	4b04      	ldr	r3, [pc, #16]	; (800f2e0 <vPortSetupTimerInterrupt+0x34>)
 800f2d0:	2207      	movs	r2, #7
 800f2d2:	601a      	str	r2, [r3, #0]
}
 800f2d4:	bf00      	nop
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr
 800f2de:	bf00      	nop
 800f2e0:	e000e010 	.word	0xe000e010
 800f2e4:	e000e018 	.word	0xe000e018
 800f2e8:	20000000 	.word	0x20000000
 800f2ec:	10624dd3 	.word	0x10624dd3
 800f2f0:	e000e014 	.word	0xe000e014

0800f2f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f2f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f304 <vPortEnableVFP+0x10>
 800f2f8:	6801      	ldr	r1, [r0, #0]
 800f2fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f2fe:	6001      	str	r1, [r0, #0]
 800f300:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f302:	bf00      	nop
 800f304:	e000ed88 	.word	0xe000ed88

0800f308 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f30e:	f3ef 8305 	mrs	r3, IPSR
 800f312:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2b0f      	cmp	r3, #15
 800f318:	d914      	bls.n	800f344 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f31a:	4a17      	ldr	r2, [pc, #92]	; (800f378 <vPortValidateInterruptPriority+0x70>)
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	4413      	add	r3, r2
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f324:	4b15      	ldr	r3, [pc, #84]	; (800f37c <vPortValidateInterruptPriority+0x74>)
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	7afa      	ldrb	r2, [r7, #11]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d20a      	bcs.n	800f344 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f332:	f383 8811 	msr	BASEPRI, r3
 800f336:	f3bf 8f6f 	isb	sy
 800f33a:	f3bf 8f4f 	dsb	sy
 800f33e:	607b      	str	r3, [r7, #4]
}
 800f340:	bf00      	nop
 800f342:	e7fe      	b.n	800f342 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f344:	4b0e      	ldr	r3, [pc, #56]	; (800f380 <vPortValidateInterruptPriority+0x78>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f34c:	4b0d      	ldr	r3, [pc, #52]	; (800f384 <vPortValidateInterruptPriority+0x7c>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	429a      	cmp	r2, r3
 800f352:	d90a      	bls.n	800f36a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f358:	f383 8811 	msr	BASEPRI, r3
 800f35c:	f3bf 8f6f 	isb	sy
 800f360:	f3bf 8f4f 	dsb	sy
 800f364:	603b      	str	r3, [r7, #0]
}
 800f366:	bf00      	nop
 800f368:	e7fe      	b.n	800f368 <vPortValidateInterruptPriority+0x60>
	}
 800f36a:	bf00      	nop
 800f36c:	3714      	adds	r7, #20
 800f36e:	46bd      	mov	sp, r7
 800f370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f374:	4770      	bx	lr
 800f376:	bf00      	nop
 800f378:	e000e3f0 	.word	0xe000e3f0
 800f37c:	20002638 	.word	0x20002638
 800f380:	e000ed0c 	.word	0xe000ed0c
 800f384:	2000263c 	.word	0x2000263c

0800f388 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b08a      	sub	sp, #40	; 0x28
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f390:	2300      	movs	r3, #0
 800f392:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f394:	f7fe fc90 	bl	800dcb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f398:	4b5b      	ldr	r3, [pc, #364]	; (800f508 <pvPortMalloc+0x180>)
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d101      	bne.n	800f3a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f3a0:	f000 f920 	bl	800f5e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f3a4:	4b59      	ldr	r3, [pc, #356]	; (800f50c <pvPortMalloc+0x184>)
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	4013      	ands	r3, r2
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f040 8093 	bne.w	800f4d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d01d      	beq.n	800f3f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f3b8:	2208      	movs	r2, #8
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	4413      	add	r3, r2
 800f3be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f003 0307 	and.w	r3, r3, #7
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d014      	beq.n	800f3f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f023 0307 	bic.w	r3, r3, #7
 800f3d0:	3308      	adds	r3, #8
 800f3d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	f003 0307 	and.w	r3, r3, #7
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00a      	beq.n	800f3f4 <pvPortMalloc+0x6c>
	__asm volatile
 800f3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e2:	f383 8811 	msr	BASEPRI, r3
 800f3e6:	f3bf 8f6f 	isb	sy
 800f3ea:	f3bf 8f4f 	dsb	sy
 800f3ee:	617b      	str	r3, [r7, #20]
}
 800f3f0:	bf00      	nop
 800f3f2:	e7fe      	b.n	800f3f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d06e      	beq.n	800f4d8 <pvPortMalloc+0x150>
 800f3fa:	4b45      	ldr	r3, [pc, #276]	; (800f510 <pvPortMalloc+0x188>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	687a      	ldr	r2, [r7, #4]
 800f400:	429a      	cmp	r2, r3
 800f402:	d869      	bhi.n	800f4d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f404:	4b43      	ldr	r3, [pc, #268]	; (800f514 <pvPortMalloc+0x18c>)
 800f406:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f408:	4b42      	ldr	r3, [pc, #264]	; (800f514 <pvPortMalloc+0x18c>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f40e:	e004      	b.n	800f41a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f412:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f41c:	685b      	ldr	r3, [r3, #4]
 800f41e:	687a      	ldr	r2, [r7, #4]
 800f420:	429a      	cmp	r2, r3
 800f422:	d903      	bls.n	800f42c <pvPortMalloc+0xa4>
 800f424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d1f1      	bne.n	800f410 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f42c:	4b36      	ldr	r3, [pc, #216]	; (800f508 <pvPortMalloc+0x180>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f432:	429a      	cmp	r2, r3
 800f434:	d050      	beq.n	800f4d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f436:	6a3b      	ldr	r3, [r7, #32]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	2208      	movs	r2, #8
 800f43c:	4413      	add	r3, r2
 800f43e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f442:	681a      	ldr	r2, [r3, #0]
 800f444:	6a3b      	ldr	r3, [r7, #32]
 800f446:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f44a:	685a      	ldr	r2, [r3, #4]
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	1ad2      	subs	r2, r2, r3
 800f450:	2308      	movs	r3, #8
 800f452:	005b      	lsls	r3, r3, #1
 800f454:	429a      	cmp	r2, r3
 800f456:	d91f      	bls.n	800f498 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f458:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4413      	add	r3, r2
 800f45e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f460:	69bb      	ldr	r3, [r7, #24]
 800f462:	f003 0307 	and.w	r3, r3, #7
 800f466:	2b00      	cmp	r3, #0
 800f468:	d00a      	beq.n	800f480 <pvPortMalloc+0xf8>
	__asm volatile
 800f46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f46e:	f383 8811 	msr	BASEPRI, r3
 800f472:	f3bf 8f6f 	isb	sy
 800f476:	f3bf 8f4f 	dsb	sy
 800f47a:	613b      	str	r3, [r7, #16]
}
 800f47c:	bf00      	nop
 800f47e:	e7fe      	b.n	800f47e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f482:	685a      	ldr	r2, [r3, #4]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	1ad2      	subs	r2, r2, r3
 800f488:	69bb      	ldr	r3, [r7, #24]
 800f48a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48e:	687a      	ldr	r2, [r7, #4]
 800f490:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f492:	69b8      	ldr	r0, [r7, #24]
 800f494:	f000 f90a 	bl	800f6ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f498:	4b1d      	ldr	r3, [pc, #116]	; (800f510 <pvPortMalloc+0x188>)
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	1ad3      	subs	r3, r2, r3
 800f4a2:	4a1b      	ldr	r2, [pc, #108]	; (800f510 <pvPortMalloc+0x188>)
 800f4a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f4a6:	4b1a      	ldr	r3, [pc, #104]	; (800f510 <pvPortMalloc+0x188>)
 800f4a8:	681a      	ldr	r2, [r3, #0]
 800f4aa:	4b1b      	ldr	r3, [pc, #108]	; (800f518 <pvPortMalloc+0x190>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d203      	bcs.n	800f4ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f4b2:	4b17      	ldr	r3, [pc, #92]	; (800f510 <pvPortMalloc+0x188>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4a18      	ldr	r2, [pc, #96]	; (800f518 <pvPortMalloc+0x190>)
 800f4b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4bc:	685a      	ldr	r2, [r3, #4]
 800f4be:	4b13      	ldr	r3, [pc, #76]	; (800f50c <pvPortMalloc+0x184>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	431a      	orrs	r2, r3
 800f4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f4ce:	4b13      	ldr	r3, [pc, #76]	; (800f51c <pvPortMalloc+0x194>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	3301      	adds	r3, #1
 800f4d4:	4a11      	ldr	r2, [pc, #68]	; (800f51c <pvPortMalloc+0x194>)
 800f4d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f4d8:	f7fe fbfc 	bl	800dcd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4dc:	69fb      	ldr	r3, [r7, #28]
 800f4de:	f003 0307 	and.w	r3, r3, #7
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d00a      	beq.n	800f4fc <pvPortMalloc+0x174>
	__asm volatile
 800f4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ea:	f383 8811 	msr	BASEPRI, r3
 800f4ee:	f3bf 8f6f 	isb	sy
 800f4f2:	f3bf 8f4f 	dsb	sy
 800f4f6:	60fb      	str	r3, [r7, #12]
}
 800f4f8:	bf00      	nop
 800f4fa:	e7fe      	b.n	800f4fa <pvPortMalloc+0x172>
	return pvReturn;
 800f4fc:	69fb      	ldr	r3, [r7, #28]
}
 800f4fe:	4618      	mov	r0, r3
 800f500:	3728      	adds	r7, #40	; 0x28
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	20014b40 	.word	0x20014b40
 800f50c:	20014b54 	.word	0x20014b54
 800f510:	20014b44 	.word	0x20014b44
 800f514:	20014b38 	.word	0x20014b38
 800f518:	20014b48 	.word	0x20014b48
 800f51c:	20014b4c 	.word	0x20014b4c

0800f520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b086      	sub	sp, #24
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d04d      	beq.n	800f5ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f532:	2308      	movs	r3, #8
 800f534:	425b      	negs	r3, r3
 800f536:	697a      	ldr	r2, [r7, #20]
 800f538:	4413      	add	r3, r2
 800f53a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	685a      	ldr	r2, [r3, #4]
 800f544:	4b24      	ldr	r3, [pc, #144]	; (800f5d8 <vPortFree+0xb8>)
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4013      	ands	r3, r2
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d10a      	bne.n	800f564 <vPortFree+0x44>
	__asm volatile
 800f54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f552:	f383 8811 	msr	BASEPRI, r3
 800f556:	f3bf 8f6f 	isb	sy
 800f55a:	f3bf 8f4f 	dsb	sy
 800f55e:	60fb      	str	r3, [r7, #12]
}
 800f560:	bf00      	nop
 800f562:	e7fe      	b.n	800f562 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d00a      	beq.n	800f582 <vPortFree+0x62>
	__asm volatile
 800f56c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f570:	f383 8811 	msr	BASEPRI, r3
 800f574:	f3bf 8f6f 	isb	sy
 800f578:	f3bf 8f4f 	dsb	sy
 800f57c:	60bb      	str	r3, [r7, #8]
}
 800f57e:	bf00      	nop
 800f580:	e7fe      	b.n	800f580 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	685a      	ldr	r2, [r3, #4]
 800f586:	4b14      	ldr	r3, [pc, #80]	; (800f5d8 <vPortFree+0xb8>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	4013      	ands	r3, r2
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d01e      	beq.n	800f5ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d11a      	bne.n	800f5ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	685a      	ldr	r2, [r3, #4]
 800f59c:	4b0e      	ldr	r3, [pc, #56]	; (800f5d8 <vPortFree+0xb8>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	43db      	mvns	r3, r3
 800f5a2:	401a      	ands	r2, r3
 800f5a4:	693b      	ldr	r3, [r7, #16]
 800f5a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f5a8:	f7fe fb86 	bl	800dcb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	685a      	ldr	r2, [r3, #4]
 800f5b0:	4b0a      	ldr	r3, [pc, #40]	; (800f5dc <vPortFree+0xbc>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	4413      	add	r3, r2
 800f5b6:	4a09      	ldr	r2, [pc, #36]	; (800f5dc <vPortFree+0xbc>)
 800f5b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f5ba:	6938      	ldr	r0, [r7, #16]
 800f5bc:	f000 f876 	bl	800f6ac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f5c0:	4b07      	ldr	r3, [pc, #28]	; (800f5e0 <vPortFree+0xc0>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	4a06      	ldr	r2, [pc, #24]	; (800f5e0 <vPortFree+0xc0>)
 800f5c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f5ca:	f7fe fb83 	bl	800dcd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f5ce:	bf00      	nop
 800f5d0:	3718      	adds	r7, #24
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	20014b54 	.word	0x20014b54
 800f5dc:	20014b44 	.word	0x20014b44
 800f5e0:	20014b50 	.word	0x20014b50

0800f5e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b085      	sub	sp, #20
 800f5e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f5ea:	4b29      	ldr	r3, [pc, #164]	; (800f690 <prvHeapInit+0xac>)
 800f5ec:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f5ee:	4b29      	ldr	r3, [pc, #164]	; (800f694 <prvHeapInit+0xb0>)
 800f5f0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	f003 0307 	and.w	r3, r3, #7
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d00c      	beq.n	800f616 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	3307      	adds	r3, #7
 800f600:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f023 0307 	bic.w	r3, r3, #7
 800f608:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f60a:	68ba      	ldr	r2, [r7, #8]
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	4a20      	ldr	r2, [pc, #128]	; (800f694 <prvHeapInit+0xb0>)
 800f612:	4413      	add	r3, r2
 800f614:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f61a:	4a1f      	ldr	r2, [pc, #124]	; (800f698 <prvHeapInit+0xb4>)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f620:	4b1d      	ldr	r3, [pc, #116]	; (800f698 <prvHeapInit+0xb4>)
 800f622:	2200      	movs	r2, #0
 800f624:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	4413      	add	r3, r2
 800f62c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f62e:	2208      	movs	r2, #8
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	1a9b      	subs	r3, r3, r2
 800f634:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f023 0307 	bic.w	r3, r3, #7
 800f63c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	4a16      	ldr	r2, [pc, #88]	; (800f69c <prvHeapInit+0xb8>)
 800f642:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f644:	4b15      	ldr	r3, [pc, #84]	; (800f69c <prvHeapInit+0xb8>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2200      	movs	r2, #0
 800f64a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f64c:	4b13      	ldr	r3, [pc, #76]	; (800f69c <prvHeapInit+0xb8>)
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	2200      	movs	r2, #0
 800f652:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	68fa      	ldr	r2, [r7, #12]
 800f65c:	1ad2      	subs	r2, r2, r3
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f662:	4b0e      	ldr	r3, [pc, #56]	; (800f69c <prvHeapInit+0xb8>)
 800f664:	681a      	ldr	r2, [r3, #0]
 800f666:	683b      	ldr	r3, [r7, #0]
 800f668:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	4a0c      	ldr	r2, [pc, #48]	; (800f6a0 <prvHeapInit+0xbc>)
 800f670:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	685b      	ldr	r3, [r3, #4]
 800f676:	4a0b      	ldr	r2, [pc, #44]	; (800f6a4 <prvHeapInit+0xc0>)
 800f678:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f67a:	4b0b      	ldr	r3, [pc, #44]	; (800f6a8 <prvHeapInit+0xc4>)
 800f67c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f680:	601a      	str	r2, [r3, #0]
}
 800f682:	bf00      	nop
 800f684:	3714      	adds	r7, #20
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr
 800f68e:	bf00      	nop
 800f690:	000124f8 	.word	0x000124f8
 800f694:	20002640 	.word	0x20002640
 800f698:	20014b38 	.word	0x20014b38
 800f69c:	20014b40 	.word	0x20014b40
 800f6a0:	20014b48 	.word	0x20014b48
 800f6a4:	20014b44 	.word	0x20014b44
 800f6a8:	20014b54 	.word	0x20014b54

0800f6ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f6b4:	4b28      	ldr	r3, [pc, #160]	; (800f758 <prvInsertBlockIntoFreeList+0xac>)
 800f6b6:	60fb      	str	r3, [r7, #12]
 800f6b8:	e002      	b.n	800f6c0 <prvInsertBlockIntoFreeList+0x14>
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	60fb      	str	r3, [r7, #12]
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	687a      	ldr	r2, [r7, #4]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d8f7      	bhi.n	800f6ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	68ba      	ldr	r2, [r7, #8]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d108      	bne.n	800f6ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	685a      	ldr	r2, [r3, #4]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	441a      	add	r2, r3
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	685b      	ldr	r3, [r3, #4]
 800f6f6:	68ba      	ldr	r2, [r7, #8]
 800f6f8:	441a      	add	r2, r3
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	d118      	bne.n	800f734 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	4b15      	ldr	r3, [pc, #84]	; (800f75c <prvInsertBlockIntoFreeList+0xb0>)
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d00d      	beq.n	800f72a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	685a      	ldr	r2, [r3, #4]
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	441a      	add	r2, r3
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	601a      	str	r2, [r3, #0]
 800f728:	e008      	b.n	800f73c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f72a:	4b0c      	ldr	r3, [pc, #48]	; (800f75c <prvInsertBlockIntoFreeList+0xb0>)
 800f72c:	681a      	ldr	r2, [r3, #0]
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	601a      	str	r2, [r3, #0]
 800f732:	e003      	b.n	800f73c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f73c:	68fa      	ldr	r2, [r7, #12]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	429a      	cmp	r2, r3
 800f742:	d002      	beq.n	800f74a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f74a:	bf00      	nop
 800f74c:	3714      	adds	r7, #20
 800f74e:	46bd      	mov	sp, r7
 800f750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	20014b38 	.word	0x20014b38
 800f75c:	20014b40 	.word	0x20014b40

0800f760 <__cxa_pure_virtual>:
 800f760:	b508      	push	{r3, lr}
 800f762:	f000 f80d 	bl	800f780 <_ZSt9terminatev>

0800f766 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800f766:	b508      	push	{r3, lr}
 800f768:	4780      	blx	r0
 800f76a:	f002 fe0f 	bl	801238c <abort>
	...

0800f770 <_ZSt13get_terminatev>:
 800f770:	4b02      	ldr	r3, [pc, #8]	; (800f77c <_ZSt13get_terminatev+0xc>)
 800f772:	6818      	ldr	r0, [r3, #0]
 800f774:	f3bf 8f5b 	dmb	ish
 800f778:	4770      	bx	lr
 800f77a:	bf00      	nop
 800f77c:	20000010 	.word	0x20000010

0800f780 <_ZSt9terminatev>:
 800f780:	b508      	push	{r3, lr}
 800f782:	f7ff fff5 	bl	800f770 <_ZSt13get_terminatev>
 800f786:	f7ff ffee 	bl	800f766 <_ZN10__cxxabiv111__terminateEPFvvE>
 800f78a:	0000      	movs	r0, r0
 800f78c:	0000      	movs	r0, r0
	...

0800f790 <atan>:
 800f790:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f794:	ec55 4b10 	vmov	r4, r5, d0
 800f798:	4bc3      	ldr	r3, [pc, #780]	; (800faa8 <atan+0x318>)
 800f79a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f79e:	429e      	cmp	r6, r3
 800f7a0:	46ab      	mov	fp, r5
 800f7a2:	dd18      	ble.n	800f7d6 <atan+0x46>
 800f7a4:	4bc1      	ldr	r3, [pc, #772]	; (800faac <atan+0x31c>)
 800f7a6:	429e      	cmp	r6, r3
 800f7a8:	dc01      	bgt.n	800f7ae <atan+0x1e>
 800f7aa:	d109      	bne.n	800f7c0 <atan+0x30>
 800f7ac:	b144      	cbz	r4, 800f7c0 <atan+0x30>
 800f7ae:	4622      	mov	r2, r4
 800f7b0:	462b      	mov	r3, r5
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	4629      	mov	r1, r5
 800f7b6:	f7f0 fd69 	bl	800028c <__adddf3>
 800f7ba:	4604      	mov	r4, r0
 800f7bc:	460d      	mov	r5, r1
 800f7be:	e006      	b.n	800f7ce <atan+0x3e>
 800f7c0:	f1bb 0f00 	cmp.w	fp, #0
 800f7c4:	f300 8131 	bgt.w	800fa2a <atan+0x29a>
 800f7c8:	a59b      	add	r5, pc, #620	; (adr r5, 800fa38 <atan+0x2a8>)
 800f7ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f7ce:	ec45 4b10 	vmov	d0, r4, r5
 800f7d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7d6:	4bb6      	ldr	r3, [pc, #728]	; (800fab0 <atan+0x320>)
 800f7d8:	429e      	cmp	r6, r3
 800f7da:	dc14      	bgt.n	800f806 <atan+0x76>
 800f7dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f7e0:	429e      	cmp	r6, r3
 800f7e2:	dc0d      	bgt.n	800f800 <atan+0x70>
 800f7e4:	a396      	add	r3, pc, #600	; (adr r3, 800fa40 <atan+0x2b0>)
 800f7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ea:	ee10 0a10 	vmov	r0, s0
 800f7ee:	4629      	mov	r1, r5
 800f7f0:	f7f0 fd4c 	bl	800028c <__adddf3>
 800f7f4:	4baf      	ldr	r3, [pc, #700]	; (800fab4 <atan+0x324>)
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	f7f1 f98e 	bl	8000b18 <__aeabi_dcmpgt>
 800f7fc:	2800      	cmp	r0, #0
 800f7fe:	d1e6      	bne.n	800f7ce <atan+0x3e>
 800f800:	f04f 3aff 	mov.w	sl, #4294967295
 800f804:	e02b      	b.n	800f85e <atan+0xce>
 800f806:	f000 f9b7 	bl	800fb78 <fabs>
 800f80a:	4bab      	ldr	r3, [pc, #684]	; (800fab8 <atan+0x328>)
 800f80c:	429e      	cmp	r6, r3
 800f80e:	ec55 4b10 	vmov	r4, r5, d0
 800f812:	f300 80bf 	bgt.w	800f994 <atan+0x204>
 800f816:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f81a:	429e      	cmp	r6, r3
 800f81c:	f300 80a0 	bgt.w	800f960 <atan+0x1d0>
 800f820:	ee10 2a10 	vmov	r2, s0
 800f824:	ee10 0a10 	vmov	r0, s0
 800f828:	462b      	mov	r3, r5
 800f82a:	4629      	mov	r1, r5
 800f82c:	f7f0 fd2e 	bl	800028c <__adddf3>
 800f830:	4ba0      	ldr	r3, [pc, #640]	; (800fab4 <atan+0x324>)
 800f832:	2200      	movs	r2, #0
 800f834:	f7f0 fd28 	bl	8000288 <__aeabi_dsub>
 800f838:	2200      	movs	r2, #0
 800f83a:	4606      	mov	r6, r0
 800f83c:	460f      	mov	r7, r1
 800f83e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f842:	4620      	mov	r0, r4
 800f844:	4629      	mov	r1, r5
 800f846:	f7f0 fd21 	bl	800028c <__adddf3>
 800f84a:	4602      	mov	r2, r0
 800f84c:	460b      	mov	r3, r1
 800f84e:	4630      	mov	r0, r6
 800f850:	4639      	mov	r1, r7
 800f852:	f7f0 fffb 	bl	800084c <__aeabi_ddiv>
 800f856:	f04f 0a00 	mov.w	sl, #0
 800f85a:	4604      	mov	r4, r0
 800f85c:	460d      	mov	r5, r1
 800f85e:	4622      	mov	r2, r4
 800f860:	462b      	mov	r3, r5
 800f862:	4620      	mov	r0, r4
 800f864:	4629      	mov	r1, r5
 800f866:	f7f0 fec7 	bl	80005f8 <__aeabi_dmul>
 800f86a:	4602      	mov	r2, r0
 800f86c:	460b      	mov	r3, r1
 800f86e:	4680      	mov	r8, r0
 800f870:	4689      	mov	r9, r1
 800f872:	f7f0 fec1 	bl	80005f8 <__aeabi_dmul>
 800f876:	a374      	add	r3, pc, #464	; (adr r3, 800fa48 <atan+0x2b8>)
 800f878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f87c:	4606      	mov	r6, r0
 800f87e:	460f      	mov	r7, r1
 800f880:	f7f0 feba 	bl	80005f8 <__aeabi_dmul>
 800f884:	a372      	add	r3, pc, #456	; (adr r3, 800fa50 <atan+0x2c0>)
 800f886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88a:	f7f0 fcff 	bl	800028c <__adddf3>
 800f88e:	4632      	mov	r2, r6
 800f890:	463b      	mov	r3, r7
 800f892:	f7f0 feb1 	bl	80005f8 <__aeabi_dmul>
 800f896:	a370      	add	r3, pc, #448	; (adr r3, 800fa58 <atan+0x2c8>)
 800f898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f89c:	f7f0 fcf6 	bl	800028c <__adddf3>
 800f8a0:	4632      	mov	r2, r6
 800f8a2:	463b      	mov	r3, r7
 800f8a4:	f7f0 fea8 	bl	80005f8 <__aeabi_dmul>
 800f8a8:	a36d      	add	r3, pc, #436	; (adr r3, 800fa60 <atan+0x2d0>)
 800f8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8ae:	f7f0 fced 	bl	800028c <__adddf3>
 800f8b2:	4632      	mov	r2, r6
 800f8b4:	463b      	mov	r3, r7
 800f8b6:	f7f0 fe9f 	bl	80005f8 <__aeabi_dmul>
 800f8ba:	a36b      	add	r3, pc, #428	; (adr r3, 800fa68 <atan+0x2d8>)
 800f8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8c0:	f7f0 fce4 	bl	800028c <__adddf3>
 800f8c4:	4632      	mov	r2, r6
 800f8c6:	463b      	mov	r3, r7
 800f8c8:	f7f0 fe96 	bl	80005f8 <__aeabi_dmul>
 800f8cc:	a368      	add	r3, pc, #416	; (adr r3, 800fa70 <atan+0x2e0>)
 800f8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d2:	f7f0 fcdb 	bl	800028c <__adddf3>
 800f8d6:	4642      	mov	r2, r8
 800f8d8:	464b      	mov	r3, r9
 800f8da:	f7f0 fe8d 	bl	80005f8 <__aeabi_dmul>
 800f8de:	a366      	add	r3, pc, #408	; (adr r3, 800fa78 <atan+0x2e8>)
 800f8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e4:	4680      	mov	r8, r0
 800f8e6:	4689      	mov	r9, r1
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	4639      	mov	r1, r7
 800f8ec:	f7f0 fe84 	bl	80005f8 <__aeabi_dmul>
 800f8f0:	a363      	add	r3, pc, #396	; (adr r3, 800fa80 <atan+0x2f0>)
 800f8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8f6:	f7f0 fcc7 	bl	8000288 <__aeabi_dsub>
 800f8fa:	4632      	mov	r2, r6
 800f8fc:	463b      	mov	r3, r7
 800f8fe:	f7f0 fe7b 	bl	80005f8 <__aeabi_dmul>
 800f902:	a361      	add	r3, pc, #388	; (adr r3, 800fa88 <atan+0x2f8>)
 800f904:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f908:	f7f0 fcbe 	bl	8000288 <__aeabi_dsub>
 800f90c:	4632      	mov	r2, r6
 800f90e:	463b      	mov	r3, r7
 800f910:	f7f0 fe72 	bl	80005f8 <__aeabi_dmul>
 800f914:	a35e      	add	r3, pc, #376	; (adr r3, 800fa90 <atan+0x300>)
 800f916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f91a:	f7f0 fcb5 	bl	8000288 <__aeabi_dsub>
 800f91e:	4632      	mov	r2, r6
 800f920:	463b      	mov	r3, r7
 800f922:	f7f0 fe69 	bl	80005f8 <__aeabi_dmul>
 800f926:	a35c      	add	r3, pc, #368	; (adr r3, 800fa98 <atan+0x308>)
 800f928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f92c:	f7f0 fcac 	bl	8000288 <__aeabi_dsub>
 800f930:	4632      	mov	r2, r6
 800f932:	463b      	mov	r3, r7
 800f934:	f7f0 fe60 	bl	80005f8 <__aeabi_dmul>
 800f938:	4602      	mov	r2, r0
 800f93a:	460b      	mov	r3, r1
 800f93c:	4640      	mov	r0, r8
 800f93e:	4649      	mov	r1, r9
 800f940:	f7f0 fca4 	bl	800028c <__adddf3>
 800f944:	4622      	mov	r2, r4
 800f946:	462b      	mov	r3, r5
 800f948:	f7f0 fe56 	bl	80005f8 <__aeabi_dmul>
 800f94c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f950:	4602      	mov	r2, r0
 800f952:	460b      	mov	r3, r1
 800f954:	d14b      	bne.n	800f9ee <atan+0x25e>
 800f956:	4620      	mov	r0, r4
 800f958:	4629      	mov	r1, r5
 800f95a:	f7f0 fc95 	bl	8000288 <__aeabi_dsub>
 800f95e:	e72c      	b.n	800f7ba <atan+0x2a>
 800f960:	ee10 0a10 	vmov	r0, s0
 800f964:	4b53      	ldr	r3, [pc, #332]	; (800fab4 <atan+0x324>)
 800f966:	2200      	movs	r2, #0
 800f968:	4629      	mov	r1, r5
 800f96a:	f7f0 fc8d 	bl	8000288 <__aeabi_dsub>
 800f96e:	4b51      	ldr	r3, [pc, #324]	; (800fab4 <atan+0x324>)
 800f970:	4606      	mov	r6, r0
 800f972:	460f      	mov	r7, r1
 800f974:	2200      	movs	r2, #0
 800f976:	4620      	mov	r0, r4
 800f978:	4629      	mov	r1, r5
 800f97a:	f7f0 fc87 	bl	800028c <__adddf3>
 800f97e:	4602      	mov	r2, r0
 800f980:	460b      	mov	r3, r1
 800f982:	4630      	mov	r0, r6
 800f984:	4639      	mov	r1, r7
 800f986:	f7f0 ff61 	bl	800084c <__aeabi_ddiv>
 800f98a:	f04f 0a01 	mov.w	sl, #1
 800f98e:	4604      	mov	r4, r0
 800f990:	460d      	mov	r5, r1
 800f992:	e764      	b.n	800f85e <atan+0xce>
 800f994:	4b49      	ldr	r3, [pc, #292]	; (800fabc <atan+0x32c>)
 800f996:	429e      	cmp	r6, r3
 800f998:	da1d      	bge.n	800f9d6 <atan+0x246>
 800f99a:	ee10 0a10 	vmov	r0, s0
 800f99e:	4b48      	ldr	r3, [pc, #288]	; (800fac0 <atan+0x330>)
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	4629      	mov	r1, r5
 800f9a4:	f7f0 fc70 	bl	8000288 <__aeabi_dsub>
 800f9a8:	4b45      	ldr	r3, [pc, #276]	; (800fac0 <atan+0x330>)
 800f9aa:	4606      	mov	r6, r0
 800f9ac:	460f      	mov	r7, r1
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	4629      	mov	r1, r5
 800f9b4:	f7f0 fe20 	bl	80005f8 <__aeabi_dmul>
 800f9b8:	4b3e      	ldr	r3, [pc, #248]	; (800fab4 <atan+0x324>)
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	f7f0 fc66 	bl	800028c <__adddf3>
 800f9c0:	4602      	mov	r2, r0
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	4630      	mov	r0, r6
 800f9c6:	4639      	mov	r1, r7
 800f9c8:	f7f0 ff40 	bl	800084c <__aeabi_ddiv>
 800f9cc:	f04f 0a02 	mov.w	sl, #2
 800f9d0:	4604      	mov	r4, r0
 800f9d2:	460d      	mov	r5, r1
 800f9d4:	e743      	b.n	800f85e <atan+0xce>
 800f9d6:	462b      	mov	r3, r5
 800f9d8:	ee10 2a10 	vmov	r2, s0
 800f9dc:	4939      	ldr	r1, [pc, #228]	; (800fac4 <atan+0x334>)
 800f9de:	2000      	movs	r0, #0
 800f9e0:	f7f0 ff34 	bl	800084c <__aeabi_ddiv>
 800f9e4:	f04f 0a03 	mov.w	sl, #3
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	460d      	mov	r5, r1
 800f9ec:	e737      	b.n	800f85e <atan+0xce>
 800f9ee:	4b36      	ldr	r3, [pc, #216]	; (800fac8 <atan+0x338>)
 800f9f0:	4e36      	ldr	r6, [pc, #216]	; (800facc <atan+0x33c>)
 800f9f2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f9f6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f9fa:	e9da 2300 	ldrd	r2, r3, [sl]
 800f9fe:	f7f0 fc43 	bl	8000288 <__aeabi_dsub>
 800fa02:	4622      	mov	r2, r4
 800fa04:	462b      	mov	r3, r5
 800fa06:	f7f0 fc3f 	bl	8000288 <__aeabi_dsub>
 800fa0a:	4602      	mov	r2, r0
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fa12:	f7f0 fc39 	bl	8000288 <__aeabi_dsub>
 800fa16:	f1bb 0f00 	cmp.w	fp, #0
 800fa1a:	4604      	mov	r4, r0
 800fa1c:	460d      	mov	r5, r1
 800fa1e:	f6bf aed6 	bge.w	800f7ce <atan+0x3e>
 800fa22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa26:	461d      	mov	r5, r3
 800fa28:	e6d1      	b.n	800f7ce <atan+0x3e>
 800fa2a:	a51d      	add	r5, pc, #116	; (adr r5, 800faa0 <atan+0x310>)
 800fa2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fa30:	e6cd      	b.n	800f7ce <atan+0x3e>
 800fa32:	bf00      	nop
 800fa34:	f3af 8000 	nop.w
 800fa38:	54442d18 	.word	0x54442d18
 800fa3c:	bff921fb 	.word	0xbff921fb
 800fa40:	8800759c 	.word	0x8800759c
 800fa44:	7e37e43c 	.word	0x7e37e43c
 800fa48:	e322da11 	.word	0xe322da11
 800fa4c:	3f90ad3a 	.word	0x3f90ad3a
 800fa50:	24760deb 	.word	0x24760deb
 800fa54:	3fa97b4b 	.word	0x3fa97b4b
 800fa58:	a0d03d51 	.word	0xa0d03d51
 800fa5c:	3fb10d66 	.word	0x3fb10d66
 800fa60:	c54c206e 	.word	0xc54c206e
 800fa64:	3fb745cd 	.word	0x3fb745cd
 800fa68:	920083ff 	.word	0x920083ff
 800fa6c:	3fc24924 	.word	0x3fc24924
 800fa70:	5555550d 	.word	0x5555550d
 800fa74:	3fd55555 	.word	0x3fd55555
 800fa78:	2c6a6c2f 	.word	0x2c6a6c2f
 800fa7c:	bfa2b444 	.word	0xbfa2b444
 800fa80:	52defd9a 	.word	0x52defd9a
 800fa84:	3fadde2d 	.word	0x3fadde2d
 800fa88:	af749a6d 	.word	0xaf749a6d
 800fa8c:	3fb3b0f2 	.word	0x3fb3b0f2
 800fa90:	fe231671 	.word	0xfe231671
 800fa94:	3fbc71c6 	.word	0x3fbc71c6
 800fa98:	9998ebc4 	.word	0x9998ebc4
 800fa9c:	3fc99999 	.word	0x3fc99999
 800faa0:	54442d18 	.word	0x54442d18
 800faa4:	3ff921fb 	.word	0x3ff921fb
 800faa8:	440fffff 	.word	0x440fffff
 800faac:	7ff00000 	.word	0x7ff00000
 800fab0:	3fdbffff 	.word	0x3fdbffff
 800fab4:	3ff00000 	.word	0x3ff00000
 800fab8:	3ff2ffff 	.word	0x3ff2ffff
 800fabc:	40038000 	.word	0x40038000
 800fac0:	3ff80000 	.word	0x3ff80000
 800fac4:	bff00000 	.word	0xbff00000
 800fac8:	080170e8 	.word	0x080170e8
 800facc:	080170c8 	.word	0x080170c8

0800fad0 <cos>:
 800fad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fad2:	ec53 2b10 	vmov	r2, r3, d0
 800fad6:	4826      	ldr	r0, [pc, #152]	; (800fb70 <cos+0xa0>)
 800fad8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fadc:	4281      	cmp	r1, r0
 800fade:	dc06      	bgt.n	800faee <cos+0x1e>
 800fae0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800fb68 <cos+0x98>
 800fae4:	b005      	add	sp, #20
 800fae6:	f85d eb04 	ldr.w	lr, [sp], #4
 800faea:	f001 ba69 	b.w	8010fc0 <__kernel_cos>
 800faee:	4821      	ldr	r0, [pc, #132]	; (800fb74 <cos+0xa4>)
 800faf0:	4281      	cmp	r1, r0
 800faf2:	dd09      	ble.n	800fb08 <cos+0x38>
 800faf4:	ee10 0a10 	vmov	r0, s0
 800faf8:	4619      	mov	r1, r3
 800fafa:	f7f0 fbc5 	bl	8000288 <__aeabi_dsub>
 800fafe:	ec41 0b10 	vmov	d0, r0, r1
 800fb02:	b005      	add	sp, #20
 800fb04:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb08:	4668      	mov	r0, sp
 800fb0a:	f000 faa5 	bl	8010058 <__ieee754_rem_pio2>
 800fb0e:	f000 0003 	and.w	r0, r0, #3
 800fb12:	2801      	cmp	r0, #1
 800fb14:	d00b      	beq.n	800fb2e <cos+0x5e>
 800fb16:	2802      	cmp	r0, #2
 800fb18:	d016      	beq.n	800fb48 <cos+0x78>
 800fb1a:	b9e0      	cbnz	r0, 800fb56 <cos+0x86>
 800fb1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb20:	ed9d 0b00 	vldr	d0, [sp]
 800fb24:	f001 fa4c 	bl	8010fc0 <__kernel_cos>
 800fb28:	ec51 0b10 	vmov	r0, r1, d0
 800fb2c:	e7e7      	b.n	800fafe <cos+0x2e>
 800fb2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb32:	ed9d 0b00 	vldr	d0, [sp]
 800fb36:	f001 fe5b 	bl	80117f0 <__kernel_sin>
 800fb3a:	ec53 2b10 	vmov	r2, r3, d0
 800fb3e:	ee10 0a10 	vmov	r0, s0
 800fb42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fb46:	e7da      	b.n	800fafe <cos+0x2e>
 800fb48:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb4c:	ed9d 0b00 	vldr	d0, [sp]
 800fb50:	f001 fa36 	bl	8010fc0 <__kernel_cos>
 800fb54:	e7f1      	b.n	800fb3a <cos+0x6a>
 800fb56:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fb5a:	ed9d 0b00 	vldr	d0, [sp]
 800fb5e:	2001      	movs	r0, #1
 800fb60:	f001 fe46 	bl	80117f0 <__kernel_sin>
 800fb64:	e7e0      	b.n	800fb28 <cos+0x58>
 800fb66:	bf00      	nop
	...
 800fb70:	3fe921fb 	.word	0x3fe921fb
 800fb74:	7fefffff 	.word	0x7fefffff

0800fb78 <fabs>:
 800fb78:	ec51 0b10 	vmov	r0, r1, d0
 800fb7c:	ee10 2a10 	vmov	r2, s0
 800fb80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fb84:	ec43 2b10 	vmov	d0, r2, r3
 800fb88:	4770      	bx	lr
 800fb8a:	0000      	movs	r0, r0
 800fb8c:	0000      	movs	r0, r0
	...

0800fb90 <sin>:
 800fb90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb92:	ec53 2b10 	vmov	r2, r3, d0
 800fb96:	4828      	ldr	r0, [pc, #160]	; (800fc38 <sin+0xa8>)
 800fb98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fb9c:	4281      	cmp	r1, r0
 800fb9e:	dc07      	bgt.n	800fbb0 <sin+0x20>
 800fba0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800fc30 <sin+0xa0>
 800fba4:	2000      	movs	r0, #0
 800fba6:	b005      	add	sp, #20
 800fba8:	f85d eb04 	ldr.w	lr, [sp], #4
 800fbac:	f001 be20 	b.w	80117f0 <__kernel_sin>
 800fbb0:	4822      	ldr	r0, [pc, #136]	; (800fc3c <sin+0xac>)
 800fbb2:	4281      	cmp	r1, r0
 800fbb4:	dd09      	ble.n	800fbca <sin+0x3a>
 800fbb6:	ee10 0a10 	vmov	r0, s0
 800fbba:	4619      	mov	r1, r3
 800fbbc:	f7f0 fb64 	bl	8000288 <__aeabi_dsub>
 800fbc0:	ec41 0b10 	vmov	d0, r0, r1
 800fbc4:	b005      	add	sp, #20
 800fbc6:	f85d fb04 	ldr.w	pc, [sp], #4
 800fbca:	4668      	mov	r0, sp
 800fbcc:	f000 fa44 	bl	8010058 <__ieee754_rem_pio2>
 800fbd0:	f000 0003 	and.w	r0, r0, #3
 800fbd4:	2801      	cmp	r0, #1
 800fbd6:	d00c      	beq.n	800fbf2 <sin+0x62>
 800fbd8:	2802      	cmp	r0, #2
 800fbda:	d011      	beq.n	800fc00 <sin+0x70>
 800fbdc:	b9f0      	cbnz	r0, 800fc1c <sin+0x8c>
 800fbde:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbe2:	ed9d 0b00 	vldr	d0, [sp]
 800fbe6:	2001      	movs	r0, #1
 800fbe8:	f001 fe02 	bl	80117f0 <__kernel_sin>
 800fbec:	ec51 0b10 	vmov	r0, r1, d0
 800fbf0:	e7e6      	b.n	800fbc0 <sin+0x30>
 800fbf2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fbf6:	ed9d 0b00 	vldr	d0, [sp]
 800fbfa:	f001 f9e1 	bl	8010fc0 <__kernel_cos>
 800fbfe:	e7f5      	b.n	800fbec <sin+0x5c>
 800fc00:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc04:	ed9d 0b00 	vldr	d0, [sp]
 800fc08:	2001      	movs	r0, #1
 800fc0a:	f001 fdf1 	bl	80117f0 <__kernel_sin>
 800fc0e:	ec53 2b10 	vmov	r2, r3, d0
 800fc12:	ee10 0a10 	vmov	r0, s0
 800fc16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fc1a:	e7d1      	b.n	800fbc0 <sin+0x30>
 800fc1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fc20:	ed9d 0b00 	vldr	d0, [sp]
 800fc24:	f001 f9cc 	bl	8010fc0 <__kernel_cos>
 800fc28:	e7f1      	b.n	800fc0e <sin+0x7e>
 800fc2a:	bf00      	nop
 800fc2c:	f3af 8000 	nop.w
	...
 800fc38:	3fe921fb 	.word	0x3fe921fb
 800fc3c:	7fefffff 	.word	0x7fefffff

0800fc40 <atanf>:
 800fc40:	b538      	push	{r3, r4, r5, lr}
 800fc42:	ee10 5a10 	vmov	r5, s0
 800fc46:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fc4a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fc4e:	eef0 7a40 	vmov.f32	s15, s0
 800fc52:	db10      	blt.n	800fc76 <atanf+0x36>
 800fc54:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fc58:	dd04      	ble.n	800fc64 <atanf+0x24>
 800fc5a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fc5e:	eeb0 0a67 	vmov.f32	s0, s15
 800fc62:	bd38      	pop	{r3, r4, r5, pc}
 800fc64:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800fd9c <atanf+0x15c>
 800fc68:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800fda0 <atanf+0x160>
 800fc6c:	2d00      	cmp	r5, #0
 800fc6e:	bfd8      	it	le
 800fc70:	eef0 7a40 	vmovle.f32	s15, s0
 800fc74:	e7f3      	b.n	800fc5e <atanf+0x1e>
 800fc76:	4b4b      	ldr	r3, [pc, #300]	; (800fda4 <atanf+0x164>)
 800fc78:	429c      	cmp	r4, r3
 800fc7a:	dc10      	bgt.n	800fc9e <atanf+0x5e>
 800fc7c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fc80:	da0a      	bge.n	800fc98 <atanf+0x58>
 800fc82:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fda8 <atanf+0x168>
 800fc86:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fc8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fc8e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc96:	dce2      	bgt.n	800fc5e <atanf+0x1e>
 800fc98:	f04f 33ff 	mov.w	r3, #4294967295
 800fc9c:	e013      	b.n	800fcc6 <atanf+0x86>
 800fc9e:	f000 f8e7 	bl	800fe70 <fabsf>
 800fca2:	4b42      	ldr	r3, [pc, #264]	; (800fdac <atanf+0x16c>)
 800fca4:	429c      	cmp	r4, r3
 800fca6:	dc4f      	bgt.n	800fd48 <atanf+0x108>
 800fca8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fcac:	429c      	cmp	r4, r3
 800fcae:	dc41      	bgt.n	800fd34 <atanf+0xf4>
 800fcb0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fcb4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fcb8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fcc2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fcc6:	1c5a      	adds	r2, r3, #1
 800fcc8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800fccc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800fdb0 <atanf+0x170>
 800fcd0:	eddf 5a38 	vldr	s11, [pc, #224]	; 800fdb4 <atanf+0x174>
 800fcd4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800fdb8 <atanf+0x178>
 800fcd8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800fcdc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800fce0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800fdbc <atanf+0x17c>
 800fce4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fce8:	eddf 5a35 	vldr	s11, [pc, #212]	; 800fdc0 <atanf+0x180>
 800fcec:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fcf0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800fdc4 <atanf+0x184>
 800fcf4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800fcf8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fdc8 <atanf+0x188>
 800fcfc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800fd00:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800fdcc <atanf+0x18c>
 800fd04:	eea6 5a87 	vfma.f32	s10, s13, s14
 800fd08:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800fdd0 <atanf+0x190>
 800fd0c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fd10:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800fdd4 <atanf+0x194>
 800fd14:	eea7 5a26 	vfma.f32	s10, s14, s13
 800fd18:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800fdd8 <atanf+0x198>
 800fd1c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800fd20:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fd24:	eea5 7a86 	vfma.f32	s14, s11, s12
 800fd28:	ee27 7a87 	vmul.f32	s14, s15, s14
 800fd2c:	d121      	bne.n	800fd72 <atanf+0x132>
 800fd2e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd32:	e794      	b.n	800fc5e <atanf+0x1e>
 800fd34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fd38:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fd3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fd40:	2301      	movs	r3, #1
 800fd42:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fd46:	e7be      	b.n	800fcc6 <atanf+0x86>
 800fd48:	4b24      	ldr	r3, [pc, #144]	; (800fddc <atanf+0x19c>)
 800fd4a:	429c      	cmp	r4, r3
 800fd4c:	dc0b      	bgt.n	800fd66 <atanf+0x126>
 800fd4e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800fd52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd56:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fd5a:	2302      	movs	r3, #2
 800fd5c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fd60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fd64:	e7af      	b.n	800fcc6 <atanf+0x86>
 800fd66:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fd6a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fd6e:	2303      	movs	r3, #3
 800fd70:	e7a9      	b.n	800fcc6 <atanf+0x86>
 800fd72:	4a1b      	ldr	r2, [pc, #108]	; (800fde0 <atanf+0x1a0>)
 800fd74:	491b      	ldr	r1, [pc, #108]	; (800fde4 <atanf+0x1a4>)
 800fd76:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fd7a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fd7e:	ed93 0a00 	vldr	s0, [r3]
 800fd82:	ee37 7a40 	vsub.f32	s14, s14, s0
 800fd86:	ed92 0a00 	vldr	s0, [r2]
 800fd8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fd8e:	2d00      	cmp	r5, #0
 800fd90:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fd94:	bfb8      	it	lt
 800fd96:	eef1 7a67 	vneglt.f32	s15, s15
 800fd9a:	e760      	b.n	800fc5e <atanf+0x1e>
 800fd9c:	3fc90fdb 	.word	0x3fc90fdb
 800fda0:	bfc90fdb 	.word	0xbfc90fdb
 800fda4:	3edfffff 	.word	0x3edfffff
 800fda8:	7149f2ca 	.word	0x7149f2ca
 800fdac:	3f97ffff 	.word	0x3f97ffff
 800fdb0:	3c8569d7 	.word	0x3c8569d7
 800fdb4:	3d4bda59 	.word	0x3d4bda59
 800fdb8:	bd6ef16b 	.word	0xbd6ef16b
 800fdbc:	3d886b35 	.word	0x3d886b35
 800fdc0:	3dba2e6e 	.word	0x3dba2e6e
 800fdc4:	3e124925 	.word	0x3e124925
 800fdc8:	3eaaaaab 	.word	0x3eaaaaab
 800fdcc:	bd15a221 	.word	0xbd15a221
 800fdd0:	bd9d8795 	.word	0xbd9d8795
 800fdd4:	bde38e38 	.word	0xbde38e38
 800fdd8:	be4ccccd 	.word	0xbe4ccccd
 800fddc:	401bffff 	.word	0x401bffff
 800fde0:	08017108 	.word	0x08017108
 800fde4:	08017118 	.word	0x08017118

0800fde8 <cosf>:
 800fde8:	ee10 3a10 	vmov	r3, s0
 800fdec:	b507      	push	{r0, r1, r2, lr}
 800fdee:	4a1e      	ldr	r2, [pc, #120]	; (800fe68 <cosf+0x80>)
 800fdf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fdf4:	4293      	cmp	r3, r2
 800fdf6:	dc06      	bgt.n	800fe06 <cosf+0x1e>
 800fdf8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800fe6c <cosf+0x84>
 800fdfc:	b003      	add	sp, #12
 800fdfe:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe02:	f001 bdb3 	b.w	801196c <__kernel_cosf>
 800fe06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fe0a:	db04      	blt.n	800fe16 <cosf+0x2e>
 800fe0c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800fe10:	b003      	add	sp, #12
 800fe12:	f85d fb04 	ldr.w	pc, [sp], #4
 800fe16:	4668      	mov	r0, sp
 800fe18:	f000 ff90 	bl	8010d3c <__ieee754_rem_pio2f>
 800fe1c:	f000 0003 	and.w	r0, r0, #3
 800fe20:	2801      	cmp	r0, #1
 800fe22:	d009      	beq.n	800fe38 <cosf+0x50>
 800fe24:	2802      	cmp	r0, #2
 800fe26:	d010      	beq.n	800fe4a <cosf+0x62>
 800fe28:	b9b0      	cbnz	r0, 800fe58 <cosf+0x70>
 800fe2a:	eddd 0a01 	vldr	s1, [sp, #4]
 800fe2e:	ed9d 0a00 	vldr	s0, [sp]
 800fe32:	f001 fd9b 	bl	801196c <__kernel_cosf>
 800fe36:	e7eb      	b.n	800fe10 <cosf+0x28>
 800fe38:	eddd 0a01 	vldr	s1, [sp, #4]
 800fe3c:	ed9d 0a00 	vldr	s0, [sp]
 800fe40:	f002 f86a 	bl	8011f18 <__kernel_sinf>
 800fe44:	eeb1 0a40 	vneg.f32	s0, s0
 800fe48:	e7e2      	b.n	800fe10 <cosf+0x28>
 800fe4a:	eddd 0a01 	vldr	s1, [sp, #4]
 800fe4e:	ed9d 0a00 	vldr	s0, [sp]
 800fe52:	f001 fd8b 	bl	801196c <__kernel_cosf>
 800fe56:	e7f5      	b.n	800fe44 <cosf+0x5c>
 800fe58:	eddd 0a01 	vldr	s1, [sp, #4]
 800fe5c:	ed9d 0a00 	vldr	s0, [sp]
 800fe60:	2001      	movs	r0, #1
 800fe62:	f002 f859 	bl	8011f18 <__kernel_sinf>
 800fe66:	e7d3      	b.n	800fe10 <cosf+0x28>
 800fe68:	3f490fd8 	.word	0x3f490fd8
 800fe6c:	00000000 	.word	0x00000000

0800fe70 <fabsf>:
 800fe70:	ee10 3a10 	vmov	r3, s0
 800fe74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe78:	ee00 3a10 	vmov	s0, r3
 800fe7c:	4770      	bx	lr
	...

0800fe80 <sinf>:
 800fe80:	ee10 3a10 	vmov	r3, s0
 800fe84:	b507      	push	{r0, r1, r2, lr}
 800fe86:	4a1f      	ldr	r2, [pc, #124]	; (800ff04 <sinf+0x84>)
 800fe88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fe8c:	4293      	cmp	r3, r2
 800fe8e:	dc07      	bgt.n	800fea0 <sinf+0x20>
 800fe90:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ff08 <sinf+0x88>
 800fe94:	2000      	movs	r0, #0
 800fe96:	b003      	add	sp, #12
 800fe98:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe9c:	f002 b83c 	b.w	8011f18 <__kernel_sinf>
 800fea0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fea4:	db04      	blt.n	800feb0 <sinf+0x30>
 800fea6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800feaa:	b003      	add	sp, #12
 800feac:	f85d fb04 	ldr.w	pc, [sp], #4
 800feb0:	4668      	mov	r0, sp
 800feb2:	f000 ff43 	bl	8010d3c <__ieee754_rem_pio2f>
 800feb6:	f000 0003 	and.w	r0, r0, #3
 800feba:	2801      	cmp	r0, #1
 800febc:	d00a      	beq.n	800fed4 <sinf+0x54>
 800febe:	2802      	cmp	r0, #2
 800fec0:	d00f      	beq.n	800fee2 <sinf+0x62>
 800fec2:	b9c0      	cbnz	r0, 800fef6 <sinf+0x76>
 800fec4:	eddd 0a01 	vldr	s1, [sp, #4]
 800fec8:	ed9d 0a00 	vldr	s0, [sp]
 800fecc:	2001      	movs	r0, #1
 800fece:	f002 f823 	bl	8011f18 <__kernel_sinf>
 800fed2:	e7ea      	b.n	800feaa <sinf+0x2a>
 800fed4:	eddd 0a01 	vldr	s1, [sp, #4]
 800fed8:	ed9d 0a00 	vldr	s0, [sp]
 800fedc:	f001 fd46 	bl	801196c <__kernel_cosf>
 800fee0:	e7e3      	b.n	800feaa <sinf+0x2a>
 800fee2:	eddd 0a01 	vldr	s1, [sp, #4]
 800fee6:	ed9d 0a00 	vldr	s0, [sp]
 800feea:	2001      	movs	r0, #1
 800feec:	f002 f814 	bl	8011f18 <__kernel_sinf>
 800fef0:	eeb1 0a40 	vneg.f32	s0, s0
 800fef4:	e7d9      	b.n	800feaa <sinf+0x2a>
 800fef6:	eddd 0a01 	vldr	s1, [sp, #4]
 800fefa:	ed9d 0a00 	vldr	s0, [sp]
 800fefe:	f001 fd35 	bl	801196c <__kernel_cosf>
 800ff02:	e7f5      	b.n	800fef0 <sinf+0x70>
 800ff04:	3f490fd8 	.word	0x3f490fd8
 800ff08:	00000000 	.word	0x00000000

0800ff0c <acosf>:
 800ff0c:	b508      	push	{r3, lr}
 800ff0e:	ed2d 8b02 	vpush	{d8}
 800ff12:	eeb0 8a40 	vmov.f32	s16, s0
 800ff16:	f000 faab 	bl	8010470 <__ieee754_acosf>
 800ff1a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ff1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff22:	eef0 8a40 	vmov.f32	s17, s0
 800ff26:	d615      	bvs.n	800ff54 <acosf+0x48>
 800ff28:	eeb0 0a48 	vmov.f32	s0, s16
 800ff2c:	f7ff ffa0 	bl	800fe70 <fabsf>
 800ff30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ff34:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ff38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff3c:	dd0a      	ble.n	800ff54 <acosf+0x48>
 800ff3e:	f002 fa2d 	bl	801239c <__errno>
 800ff42:	ecbd 8b02 	vpop	{d8}
 800ff46:	2321      	movs	r3, #33	; 0x21
 800ff48:	6003      	str	r3, [r0, #0]
 800ff4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ff4e:	4804      	ldr	r0, [pc, #16]	; (800ff60 <acosf+0x54>)
 800ff50:	f002 b9a4 	b.w	801229c <nanf>
 800ff54:	eeb0 0a68 	vmov.f32	s0, s17
 800ff58:	ecbd 8b02 	vpop	{d8}
 800ff5c:	bd08      	pop	{r3, pc}
 800ff5e:	bf00      	nop
 800ff60:	08017ba0 	.word	0x08017ba0

0800ff64 <atan2f>:
 800ff64:	f000 bb7c 	b.w	8010660 <__ieee754_atan2f>

0800ff68 <powf>:
 800ff68:	b508      	push	{r3, lr}
 800ff6a:	ed2d 8b04 	vpush	{d8-d9}
 800ff6e:	eeb0 8a60 	vmov.f32	s16, s1
 800ff72:	eeb0 9a40 	vmov.f32	s18, s0
 800ff76:	f000 fc13 	bl	80107a0 <__ieee754_powf>
 800ff7a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ff7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff82:	eef0 8a40 	vmov.f32	s17, s0
 800ff86:	d63e      	bvs.n	8010006 <powf+0x9e>
 800ff88:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ff8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff90:	d112      	bne.n	800ffb8 <powf+0x50>
 800ff92:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ff96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9a:	d039      	beq.n	8010010 <powf+0xa8>
 800ff9c:	eeb0 0a48 	vmov.f32	s0, s16
 800ffa0:	f002 f92c 	bl	80121fc <finitef>
 800ffa4:	b378      	cbz	r0, 8010006 <powf+0x9e>
 800ffa6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ffaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffae:	d52a      	bpl.n	8010006 <powf+0x9e>
 800ffb0:	f002 f9f4 	bl	801239c <__errno>
 800ffb4:	2322      	movs	r3, #34	; 0x22
 800ffb6:	e014      	b.n	800ffe2 <powf+0x7a>
 800ffb8:	f002 f920 	bl	80121fc <finitef>
 800ffbc:	b998      	cbnz	r0, 800ffe6 <powf+0x7e>
 800ffbe:	eeb0 0a49 	vmov.f32	s0, s18
 800ffc2:	f002 f91b 	bl	80121fc <finitef>
 800ffc6:	b170      	cbz	r0, 800ffe6 <powf+0x7e>
 800ffc8:	eeb0 0a48 	vmov.f32	s0, s16
 800ffcc:	f002 f916 	bl	80121fc <finitef>
 800ffd0:	b148      	cbz	r0, 800ffe6 <powf+0x7e>
 800ffd2:	eef4 8a68 	vcmp.f32	s17, s17
 800ffd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffda:	d7e9      	bvc.n	800ffb0 <powf+0x48>
 800ffdc:	f002 f9de 	bl	801239c <__errno>
 800ffe0:	2321      	movs	r3, #33	; 0x21
 800ffe2:	6003      	str	r3, [r0, #0]
 800ffe4:	e00f      	b.n	8010006 <powf+0x9e>
 800ffe6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ffea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffee:	d10a      	bne.n	8010006 <powf+0x9e>
 800fff0:	eeb0 0a49 	vmov.f32	s0, s18
 800fff4:	f002 f902 	bl	80121fc <finitef>
 800fff8:	b128      	cbz	r0, 8010006 <powf+0x9e>
 800fffa:	eeb0 0a48 	vmov.f32	s0, s16
 800fffe:	f002 f8fd 	bl	80121fc <finitef>
 8010002:	2800      	cmp	r0, #0
 8010004:	d1d4      	bne.n	800ffb0 <powf+0x48>
 8010006:	eeb0 0a68 	vmov.f32	s0, s17
 801000a:	ecbd 8b04 	vpop	{d8-d9}
 801000e:	bd08      	pop	{r3, pc}
 8010010:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010014:	e7f7      	b.n	8010006 <powf+0x9e>
	...

08010018 <sqrtf>:
 8010018:	b508      	push	{r3, lr}
 801001a:	ed2d 8b02 	vpush	{d8}
 801001e:	eeb0 8a40 	vmov.f32	s16, s0
 8010022:	f000 ffc7 	bl	8010fb4 <__ieee754_sqrtf>
 8010026:	eeb4 8a48 	vcmp.f32	s16, s16
 801002a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801002e:	d60c      	bvs.n	801004a <sqrtf+0x32>
 8010030:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010050 <sqrtf+0x38>
 8010034:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801003c:	d505      	bpl.n	801004a <sqrtf+0x32>
 801003e:	f002 f9ad 	bl	801239c <__errno>
 8010042:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010046:	2321      	movs	r3, #33	; 0x21
 8010048:	6003      	str	r3, [r0, #0]
 801004a:	ecbd 8b02 	vpop	{d8}
 801004e:	bd08      	pop	{r3, pc}
	...

08010058 <__ieee754_rem_pio2>:
 8010058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801005c:	ed2d 8b02 	vpush	{d8}
 8010060:	ec55 4b10 	vmov	r4, r5, d0
 8010064:	4bca      	ldr	r3, [pc, #808]	; (8010390 <__ieee754_rem_pio2+0x338>)
 8010066:	b08b      	sub	sp, #44	; 0x2c
 8010068:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 801006c:	4598      	cmp	r8, r3
 801006e:	4682      	mov	sl, r0
 8010070:	9502      	str	r5, [sp, #8]
 8010072:	dc08      	bgt.n	8010086 <__ieee754_rem_pio2+0x2e>
 8010074:	2200      	movs	r2, #0
 8010076:	2300      	movs	r3, #0
 8010078:	ed80 0b00 	vstr	d0, [r0]
 801007c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010080:	f04f 0b00 	mov.w	fp, #0
 8010084:	e028      	b.n	80100d8 <__ieee754_rem_pio2+0x80>
 8010086:	4bc3      	ldr	r3, [pc, #780]	; (8010394 <__ieee754_rem_pio2+0x33c>)
 8010088:	4598      	cmp	r8, r3
 801008a:	dc78      	bgt.n	801017e <__ieee754_rem_pio2+0x126>
 801008c:	9b02      	ldr	r3, [sp, #8]
 801008e:	4ec2      	ldr	r6, [pc, #776]	; (8010398 <__ieee754_rem_pio2+0x340>)
 8010090:	2b00      	cmp	r3, #0
 8010092:	ee10 0a10 	vmov	r0, s0
 8010096:	a3b0      	add	r3, pc, #704	; (adr r3, 8010358 <__ieee754_rem_pio2+0x300>)
 8010098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801009c:	4629      	mov	r1, r5
 801009e:	dd39      	ble.n	8010114 <__ieee754_rem_pio2+0xbc>
 80100a0:	f7f0 f8f2 	bl	8000288 <__aeabi_dsub>
 80100a4:	45b0      	cmp	r8, r6
 80100a6:	4604      	mov	r4, r0
 80100a8:	460d      	mov	r5, r1
 80100aa:	d01b      	beq.n	80100e4 <__ieee754_rem_pio2+0x8c>
 80100ac:	a3ac      	add	r3, pc, #688	; (adr r3, 8010360 <__ieee754_rem_pio2+0x308>)
 80100ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b2:	f7f0 f8e9 	bl	8000288 <__aeabi_dsub>
 80100b6:	4602      	mov	r2, r0
 80100b8:	460b      	mov	r3, r1
 80100ba:	e9ca 2300 	strd	r2, r3, [sl]
 80100be:	4620      	mov	r0, r4
 80100c0:	4629      	mov	r1, r5
 80100c2:	f7f0 f8e1 	bl	8000288 <__aeabi_dsub>
 80100c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8010360 <__ieee754_rem_pio2+0x308>)
 80100c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100cc:	f7f0 f8dc 	bl	8000288 <__aeabi_dsub>
 80100d0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80100d4:	f04f 0b01 	mov.w	fp, #1
 80100d8:	4658      	mov	r0, fp
 80100da:	b00b      	add	sp, #44	; 0x2c
 80100dc:	ecbd 8b02 	vpop	{d8}
 80100e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100e4:	a3a0      	add	r3, pc, #640	; (adr r3, 8010368 <__ieee754_rem_pio2+0x310>)
 80100e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100ea:	f7f0 f8cd 	bl	8000288 <__aeabi_dsub>
 80100ee:	a3a0      	add	r3, pc, #640	; (adr r3, 8010370 <__ieee754_rem_pio2+0x318>)
 80100f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f4:	4604      	mov	r4, r0
 80100f6:	460d      	mov	r5, r1
 80100f8:	f7f0 f8c6 	bl	8000288 <__aeabi_dsub>
 80100fc:	4602      	mov	r2, r0
 80100fe:	460b      	mov	r3, r1
 8010100:	e9ca 2300 	strd	r2, r3, [sl]
 8010104:	4620      	mov	r0, r4
 8010106:	4629      	mov	r1, r5
 8010108:	f7f0 f8be 	bl	8000288 <__aeabi_dsub>
 801010c:	a398      	add	r3, pc, #608	; (adr r3, 8010370 <__ieee754_rem_pio2+0x318>)
 801010e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010112:	e7db      	b.n	80100cc <__ieee754_rem_pio2+0x74>
 8010114:	f7f0 f8ba 	bl	800028c <__adddf3>
 8010118:	45b0      	cmp	r8, r6
 801011a:	4604      	mov	r4, r0
 801011c:	460d      	mov	r5, r1
 801011e:	d016      	beq.n	801014e <__ieee754_rem_pio2+0xf6>
 8010120:	a38f      	add	r3, pc, #572	; (adr r3, 8010360 <__ieee754_rem_pio2+0x308>)
 8010122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010126:	f7f0 f8b1 	bl	800028c <__adddf3>
 801012a:	4602      	mov	r2, r0
 801012c:	460b      	mov	r3, r1
 801012e:	e9ca 2300 	strd	r2, r3, [sl]
 8010132:	4620      	mov	r0, r4
 8010134:	4629      	mov	r1, r5
 8010136:	f7f0 f8a7 	bl	8000288 <__aeabi_dsub>
 801013a:	a389      	add	r3, pc, #548	; (adr r3, 8010360 <__ieee754_rem_pio2+0x308>)
 801013c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010140:	f7f0 f8a4 	bl	800028c <__adddf3>
 8010144:	f04f 3bff 	mov.w	fp, #4294967295
 8010148:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801014c:	e7c4      	b.n	80100d8 <__ieee754_rem_pio2+0x80>
 801014e:	a386      	add	r3, pc, #536	; (adr r3, 8010368 <__ieee754_rem_pio2+0x310>)
 8010150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010154:	f7f0 f89a 	bl	800028c <__adddf3>
 8010158:	a385      	add	r3, pc, #532	; (adr r3, 8010370 <__ieee754_rem_pio2+0x318>)
 801015a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015e:	4604      	mov	r4, r0
 8010160:	460d      	mov	r5, r1
 8010162:	f7f0 f893 	bl	800028c <__adddf3>
 8010166:	4602      	mov	r2, r0
 8010168:	460b      	mov	r3, r1
 801016a:	e9ca 2300 	strd	r2, r3, [sl]
 801016e:	4620      	mov	r0, r4
 8010170:	4629      	mov	r1, r5
 8010172:	f7f0 f889 	bl	8000288 <__aeabi_dsub>
 8010176:	a37e      	add	r3, pc, #504	; (adr r3, 8010370 <__ieee754_rem_pio2+0x318>)
 8010178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017c:	e7e0      	b.n	8010140 <__ieee754_rem_pio2+0xe8>
 801017e:	4b87      	ldr	r3, [pc, #540]	; (801039c <__ieee754_rem_pio2+0x344>)
 8010180:	4598      	cmp	r8, r3
 8010182:	f300 80d9 	bgt.w	8010338 <__ieee754_rem_pio2+0x2e0>
 8010186:	f7ff fcf7 	bl	800fb78 <fabs>
 801018a:	ec55 4b10 	vmov	r4, r5, d0
 801018e:	ee10 0a10 	vmov	r0, s0
 8010192:	a379      	add	r3, pc, #484	; (adr r3, 8010378 <__ieee754_rem_pio2+0x320>)
 8010194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010198:	4629      	mov	r1, r5
 801019a:	f7f0 fa2d 	bl	80005f8 <__aeabi_dmul>
 801019e:	4b80      	ldr	r3, [pc, #512]	; (80103a0 <__ieee754_rem_pio2+0x348>)
 80101a0:	2200      	movs	r2, #0
 80101a2:	f7f0 f873 	bl	800028c <__adddf3>
 80101a6:	f7f0 fcd7 	bl	8000b58 <__aeabi_d2iz>
 80101aa:	4683      	mov	fp, r0
 80101ac:	f7f0 f9ba 	bl	8000524 <__aeabi_i2d>
 80101b0:	4602      	mov	r2, r0
 80101b2:	460b      	mov	r3, r1
 80101b4:	ec43 2b18 	vmov	d8, r2, r3
 80101b8:	a367      	add	r3, pc, #412	; (adr r3, 8010358 <__ieee754_rem_pio2+0x300>)
 80101ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101be:	f7f0 fa1b 	bl	80005f8 <__aeabi_dmul>
 80101c2:	4602      	mov	r2, r0
 80101c4:	460b      	mov	r3, r1
 80101c6:	4620      	mov	r0, r4
 80101c8:	4629      	mov	r1, r5
 80101ca:	f7f0 f85d 	bl	8000288 <__aeabi_dsub>
 80101ce:	a364      	add	r3, pc, #400	; (adr r3, 8010360 <__ieee754_rem_pio2+0x308>)
 80101d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101d4:	4606      	mov	r6, r0
 80101d6:	460f      	mov	r7, r1
 80101d8:	ec51 0b18 	vmov	r0, r1, d8
 80101dc:	f7f0 fa0c 	bl	80005f8 <__aeabi_dmul>
 80101e0:	f1bb 0f1f 	cmp.w	fp, #31
 80101e4:	4604      	mov	r4, r0
 80101e6:	460d      	mov	r5, r1
 80101e8:	dc0d      	bgt.n	8010206 <__ieee754_rem_pio2+0x1ae>
 80101ea:	4b6e      	ldr	r3, [pc, #440]	; (80103a4 <__ieee754_rem_pio2+0x34c>)
 80101ec:	f10b 32ff 	add.w	r2, fp, #4294967295
 80101f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101f4:	4543      	cmp	r3, r8
 80101f6:	d006      	beq.n	8010206 <__ieee754_rem_pio2+0x1ae>
 80101f8:	4622      	mov	r2, r4
 80101fa:	462b      	mov	r3, r5
 80101fc:	4630      	mov	r0, r6
 80101fe:	4639      	mov	r1, r7
 8010200:	f7f0 f842 	bl	8000288 <__aeabi_dsub>
 8010204:	e00f      	b.n	8010226 <__ieee754_rem_pio2+0x1ce>
 8010206:	462b      	mov	r3, r5
 8010208:	4622      	mov	r2, r4
 801020a:	4630      	mov	r0, r6
 801020c:	4639      	mov	r1, r7
 801020e:	f7f0 f83b 	bl	8000288 <__aeabi_dsub>
 8010212:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010216:	9303      	str	r3, [sp, #12]
 8010218:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801021c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8010220:	f1b8 0f10 	cmp.w	r8, #16
 8010224:	dc02      	bgt.n	801022c <__ieee754_rem_pio2+0x1d4>
 8010226:	e9ca 0100 	strd	r0, r1, [sl]
 801022a:	e039      	b.n	80102a0 <__ieee754_rem_pio2+0x248>
 801022c:	a34e      	add	r3, pc, #312	; (adr r3, 8010368 <__ieee754_rem_pio2+0x310>)
 801022e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010232:	ec51 0b18 	vmov	r0, r1, d8
 8010236:	f7f0 f9df 	bl	80005f8 <__aeabi_dmul>
 801023a:	4604      	mov	r4, r0
 801023c:	460d      	mov	r5, r1
 801023e:	4602      	mov	r2, r0
 8010240:	460b      	mov	r3, r1
 8010242:	4630      	mov	r0, r6
 8010244:	4639      	mov	r1, r7
 8010246:	f7f0 f81f 	bl	8000288 <__aeabi_dsub>
 801024a:	4602      	mov	r2, r0
 801024c:	460b      	mov	r3, r1
 801024e:	4680      	mov	r8, r0
 8010250:	4689      	mov	r9, r1
 8010252:	4630      	mov	r0, r6
 8010254:	4639      	mov	r1, r7
 8010256:	f7f0 f817 	bl	8000288 <__aeabi_dsub>
 801025a:	4622      	mov	r2, r4
 801025c:	462b      	mov	r3, r5
 801025e:	f7f0 f813 	bl	8000288 <__aeabi_dsub>
 8010262:	a343      	add	r3, pc, #268	; (adr r3, 8010370 <__ieee754_rem_pio2+0x318>)
 8010264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010268:	4604      	mov	r4, r0
 801026a:	460d      	mov	r5, r1
 801026c:	ec51 0b18 	vmov	r0, r1, d8
 8010270:	f7f0 f9c2 	bl	80005f8 <__aeabi_dmul>
 8010274:	4622      	mov	r2, r4
 8010276:	462b      	mov	r3, r5
 8010278:	f7f0 f806 	bl	8000288 <__aeabi_dsub>
 801027c:	4602      	mov	r2, r0
 801027e:	460b      	mov	r3, r1
 8010280:	4604      	mov	r4, r0
 8010282:	460d      	mov	r5, r1
 8010284:	4640      	mov	r0, r8
 8010286:	4649      	mov	r1, r9
 8010288:	f7ef fffe 	bl	8000288 <__aeabi_dsub>
 801028c:	9a03      	ldr	r2, [sp, #12]
 801028e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010292:	1ad3      	subs	r3, r2, r3
 8010294:	2b31      	cmp	r3, #49	; 0x31
 8010296:	dc24      	bgt.n	80102e2 <__ieee754_rem_pio2+0x28a>
 8010298:	e9ca 0100 	strd	r0, r1, [sl]
 801029c:	4646      	mov	r6, r8
 801029e:	464f      	mov	r7, r9
 80102a0:	e9da 8900 	ldrd	r8, r9, [sl]
 80102a4:	4630      	mov	r0, r6
 80102a6:	4642      	mov	r2, r8
 80102a8:	464b      	mov	r3, r9
 80102aa:	4639      	mov	r1, r7
 80102ac:	f7ef ffec 	bl	8000288 <__aeabi_dsub>
 80102b0:	462b      	mov	r3, r5
 80102b2:	4622      	mov	r2, r4
 80102b4:	f7ef ffe8 	bl	8000288 <__aeabi_dsub>
 80102b8:	9b02      	ldr	r3, [sp, #8]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80102c0:	f6bf af0a 	bge.w	80100d8 <__ieee754_rem_pio2+0x80>
 80102c4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80102c8:	f8ca 3004 	str.w	r3, [sl, #4]
 80102cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80102d0:	f8ca 8000 	str.w	r8, [sl]
 80102d4:	f8ca 0008 	str.w	r0, [sl, #8]
 80102d8:	f8ca 300c 	str.w	r3, [sl, #12]
 80102dc:	f1cb 0b00 	rsb	fp, fp, #0
 80102e0:	e6fa      	b.n	80100d8 <__ieee754_rem_pio2+0x80>
 80102e2:	a327      	add	r3, pc, #156	; (adr r3, 8010380 <__ieee754_rem_pio2+0x328>)
 80102e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102e8:	ec51 0b18 	vmov	r0, r1, d8
 80102ec:	f7f0 f984 	bl	80005f8 <__aeabi_dmul>
 80102f0:	4604      	mov	r4, r0
 80102f2:	460d      	mov	r5, r1
 80102f4:	4602      	mov	r2, r0
 80102f6:	460b      	mov	r3, r1
 80102f8:	4640      	mov	r0, r8
 80102fa:	4649      	mov	r1, r9
 80102fc:	f7ef ffc4 	bl	8000288 <__aeabi_dsub>
 8010300:	4602      	mov	r2, r0
 8010302:	460b      	mov	r3, r1
 8010304:	4606      	mov	r6, r0
 8010306:	460f      	mov	r7, r1
 8010308:	4640      	mov	r0, r8
 801030a:	4649      	mov	r1, r9
 801030c:	f7ef ffbc 	bl	8000288 <__aeabi_dsub>
 8010310:	4622      	mov	r2, r4
 8010312:	462b      	mov	r3, r5
 8010314:	f7ef ffb8 	bl	8000288 <__aeabi_dsub>
 8010318:	a31b      	add	r3, pc, #108	; (adr r3, 8010388 <__ieee754_rem_pio2+0x330>)
 801031a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801031e:	4604      	mov	r4, r0
 8010320:	460d      	mov	r5, r1
 8010322:	ec51 0b18 	vmov	r0, r1, d8
 8010326:	f7f0 f967 	bl	80005f8 <__aeabi_dmul>
 801032a:	4622      	mov	r2, r4
 801032c:	462b      	mov	r3, r5
 801032e:	f7ef ffab 	bl	8000288 <__aeabi_dsub>
 8010332:	4604      	mov	r4, r0
 8010334:	460d      	mov	r5, r1
 8010336:	e75f      	b.n	80101f8 <__ieee754_rem_pio2+0x1a0>
 8010338:	4b1b      	ldr	r3, [pc, #108]	; (80103a8 <__ieee754_rem_pio2+0x350>)
 801033a:	4598      	cmp	r8, r3
 801033c:	dd36      	ble.n	80103ac <__ieee754_rem_pio2+0x354>
 801033e:	ee10 2a10 	vmov	r2, s0
 8010342:	462b      	mov	r3, r5
 8010344:	4620      	mov	r0, r4
 8010346:	4629      	mov	r1, r5
 8010348:	f7ef ff9e 	bl	8000288 <__aeabi_dsub>
 801034c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8010350:	e9ca 0100 	strd	r0, r1, [sl]
 8010354:	e694      	b.n	8010080 <__ieee754_rem_pio2+0x28>
 8010356:	bf00      	nop
 8010358:	54400000 	.word	0x54400000
 801035c:	3ff921fb 	.word	0x3ff921fb
 8010360:	1a626331 	.word	0x1a626331
 8010364:	3dd0b461 	.word	0x3dd0b461
 8010368:	1a600000 	.word	0x1a600000
 801036c:	3dd0b461 	.word	0x3dd0b461
 8010370:	2e037073 	.word	0x2e037073
 8010374:	3ba3198a 	.word	0x3ba3198a
 8010378:	6dc9c883 	.word	0x6dc9c883
 801037c:	3fe45f30 	.word	0x3fe45f30
 8010380:	2e000000 	.word	0x2e000000
 8010384:	3ba3198a 	.word	0x3ba3198a
 8010388:	252049c1 	.word	0x252049c1
 801038c:	397b839a 	.word	0x397b839a
 8010390:	3fe921fb 	.word	0x3fe921fb
 8010394:	4002d97b 	.word	0x4002d97b
 8010398:	3ff921fb 	.word	0x3ff921fb
 801039c:	413921fb 	.word	0x413921fb
 80103a0:	3fe00000 	.word	0x3fe00000
 80103a4:	08017128 	.word	0x08017128
 80103a8:	7fefffff 	.word	0x7fefffff
 80103ac:	ea4f 5428 	mov.w	r4, r8, asr #20
 80103b0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80103b4:	ee10 0a10 	vmov	r0, s0
 80103b8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80103bc:	ee10 6a10 	vmov	r6, s0
 80103c0:	460f      	mov	r7, r1
 80103c2:	f7f0 fbc9 	bl	8000b58 <__aeabi_d2iz>
 80103c6:	f7f0 f8ad 	bl	8000524 <__aeabi_i2d>
 80103ca:	4602      	mov	r2, r0
 80103cc:	460b      	mov	r3, r1
 80103ce:	4630      	mov	r0, r6
 80103d0:	4639      	mov	r1, r7
 80103d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80103d6:	f7ef ff57 	bl	8000288 <__aeabi_dsub>
 80103da:	4b23      	ldr	r3, [pc, #140]	; (8010468 <__ieee754_rem_pio2+0x410>)
 80103dc:	2200      	movs	r2, #0
 80103de:	f7f0 f90b 	bl	80005f8 <__aeabi_dmul>
 80103e2:	460f      	mov	r7, r1
 80103e4:	4606      	mov	r6, r0
 80103e6:	f7f0 fbb7 	bl	8000b58 <__aeabi_d2iz>
 80103ea:	f7f0 f89b 	bl	8000524 <__aeabi_i2d>
 80103ee:	4602      	mov	r2, r0
 80103f0:	460b      	mov	r3, r1
 80103f2:	4630      	mov	r0, r6
 80103f4:	4639      	mov	r1, r7
 80103f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80103fa:	f7ef ff45 	bl	8000288 <__aeabi_dsub>
 80103fe:	4b1a      	ldr	r3, [pc, #104]	; (8010468 <__ieee754_rem_pio2+0x410>)
 8010400:	2200      	movs	r2, #0
 8010402:	f7f0 f8f9 	bl	80005f8 <__aeabi_dmul>
 8010406:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801040a:	ad04      	add	r5, sp, #16
 801040c:	f04f 0803 	mov.w	r8, #3
 8010410:	46a9      	mov	r9, r5
 8010412:	2600      	movs	r6, #0
 8010414:	2700      	movs	r7, #0
 8010416:	4632      	mov	r2, r6
 8010418:	463b      	mov	r3, r7
 801041a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801041e:	46c3      	mov	fp, r8
 8010420:	3d08      	subs	r5, #8
 8010422:	f108 38ff 	add.w	r8, r8, #4294967295
 8010426:	f7f0 fb4f 	bl	8000ac8 <__aeabi_dcmpeq>
 801042a:	2800      	cmp	r0, #0
 801042c:	d1f3      	bne.n	8010416 <__ieee754_rem_pio2+0x3be>
 801042e:	4b0f      	ldr	r3, [pc, #60]	; (801046c <__ieee754_rem_pio2+0x414>)
 8010430:	9301      	str	r3, [sp, #4]
 8010432:	2302      	movs	r3, #2
 8010434:	9300      	str	r3, [sp, #0]
 8010436:	4622      	mov	r2, r4
 8010438:	465b      	mov	r3, fp
 801043a:	4651      	mov	r1, sl
 801043c:	4648      	mov	r0, r9
 801043e:	f000 fe87 	bl	8011150 <__kernel_rem_pio2>
 8010442:	9b02      	ldr	r3, [sp, #8]
 8010444:	2b00      	cmp	r3, #0
 8010446:	4683      	mov	fp, r0
 8010448:	f6bf ae46 	bge.w	80100d8 <__ieee754_rem_pio2+0x80>
 801044c:	e9da 2100 	ldrd	r2, r1, [sl]
 8010450:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010454:	e9ca 2300 	strd	r2, r3, [sl]
 8010458:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 801045c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010460:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8010464:	e73a      	b.n	80102dc <__ieee754_rem_pio2+0x284>
 8010466:	bf00      	nop
 8010468:	41700000 	.word	0x41700000
 801046c:	080171a8 	.word	0x080171a8

08010470 <__ieee754_acosf>:
 8010470:	b508      	push	{r3, lr}
 8010472:	ee10 3a10 	vmov	r3, s0
 8010476:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801047a:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801047e:	ed2d 8b0c 	vpush	{d8-d13}
 8010482:	d10a      	bne.n	801049a <__ieee754_acosf+0x2a>
 8010484:	ed9f 0a65 	vldr	s0, [pc, #404]	; 801061c <__ieee754_acosf+0x1ac>
 8010488:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8010620 <__ieee754_acosf+0x1b0>
 801048c:	2b00      	cmp	r3, #0
 801048e:	bfd8      	it	le
 8010490:	eeb0 0a48 	vmovle.f32	s0, s16
 8010494:	ecbd 8b0c 	vpop	{d8-d13}
 8010498:	bd08      	pop	{r3, pc}
 801049a:	dd04      	ble.n	80104a6 <__ieee754_acosf+0x36>
 801049c:	ee30 8a40 	vsub.f32	s16, s0, s0
 80104a0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80104a4:	e7f6      	b.n	8010494 <__ieee754_acosf+0x24>
 80104a6:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80104aa:	da3c      	bge.n	8010526 <__ieee754_acosf+0xb6>
 80104ac:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80104b0:	f340 80b1 	ble.w	8010616 <__ieee754_acosf+0x1a6>
 80104b4:	ee60 7a00 	vmul.f32	s15, s0, s0
 80104b8:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8010624 <__ieee754_acosf+0x1b4>
 80104bc:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8010628 <__ieee754_acosf+0x1b8>
 80104c0:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 801062c <__ieee754_acosf+0x1bc>
 80104c4:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8010630 <__ieee754_acosf+0x1c0>
 80104c8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80104cc:	eddf 6a59 	vldr	s13, [pc, #356]	; 8010634 <__ieee754_acosf+0x1c4>
 80104d0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80104d4:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8010638 <__ieee754_acosf+0x1c8>
 80104d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80104dc:	eddf 6a57 	vldr	s13, [pc, #348]	; 801063c <__ieee754_acosf+0x1cc>
 80104e0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80104e4:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8010640 <__ieee754_acosf+0x1d0>
 80104e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80104ec:	eddf 6a55 	vldr	s13, [pc, #340]	; 8010644 <__ieee754_acosf+0x1d4>
 80104f0:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80104f4:	eddf 6a54 	vldr	s13, [pc, #336]	; 8010648 <__ieee754_acosf+0x1d8>
 80104f8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80104fc:	ed9f 6a53 	vldr	s12, [pc, #332]	; 801064c <__ieee754_acosf+0x1dc>
 8010500:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010508:	eee6 6a27 	vfma.f32	s13, s12, s15
 801050c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010510:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010514:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010518:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8010650 <__ieee754_acosf+0x1e0>
 801051c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8010520:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010524:	e7b6      	b.n	8010494 <__ieee754_acosf+0x24>
 8010526:	2b00      	cmp	r3, #0
 8010528:	eddf da3e 	vldr	s27, [pc, #248]	; 8010624 <__ieee754_acosf+0x1b4>
 801052c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8010628 <__ieee754_acosf+0x1b8>
 8010530:	ed9f ca40 	vldr	s24, [pc, #256]	; 8010634 <__ieee754_acosf+0x1c4>
 8010534:	eddf ba40 	vldr	s23, [pc, #256]	; 8010638 <__ieee754_acosf+0x1c8>
 8010538:	ed9f ba40 	vldr	s22, [pc, #256]	; 801063c <__ieee754_acosf+0x1cc>
 801053c:	eddf 8a40 	vldr	s17, [pc, #256]	; 8010640 <__ieee754_acosf+0x1d0>
 8010540:	ed9f da40 	vldr	s26, [pc, #256]	; 8010644 <__ieee754_acosf+0x1d4>
 8010544:	eddf aa39 	vldr	s21, [pc, #228]	; 801062c <__ieee754_acosf+0x1bc>
 8010548:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8010648 <__ieee754_acosf+0x1d8>
 801054c:	eddf 9a3f 	vldr	s19, [pc, #252]	; 801064c <__ieee754_acosf+0x1dc>
 8010550:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8010554:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010558:	da28      	bge.n	80105ac <__ieee754_acosf+0x13c>
 801055a:	ee30 0a09 	vadd.f32	s0, s0, s18
 801055e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010562:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8010566:	eee0 aa0d 	vfma.f32	s21, s0, s26
 801056a:	eeac ca80 	vfma.f32	s24, s25, s0
 801056e:	eeaa aa80 	vfma.f32	s20, s21, s0
 8010572:	eeec ba00 	vfma.f32	s23, s24, s0
 8010576:	eeea 9a00 	vfma.f32	s19, s20, s0
 801057a:	eeab ba80 	vfma.f32	s22, s23, s0
 801057e:	eea9 9a80 	vfma.f32	s18, s19, s0
 8010582:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8010586:	ee68 8a80 	vmul.f32	s17, s17, s0
 801058a:	f000 fd13 	bl	8010fb4 <__ieee754_sqrtf>
 801058e:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8010592:	eddf 7a30 	vldr	s15, [pc, #192]	; 8010654 <__ieee754_acosf+0x1e4>
 8010596:	eee0 7a07 	vfma.f32	s15, s0, s14
 801059a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801059e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80105a2:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8010658 <__ieee754_acosf+0x1e8>
 80105a6:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80105aa:	e773      	b.n	8010494 <__ieee754_acosf+0x24>
 80105ac:	ee39 8a40 	vsub.f32	s16, s18, s0
 80105b0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80105b4:	eeb0 0a48 	vmov.f32	s0, s16
 80105b8:	f000 fcfc 	bl	8010fb4 <__ieee754_sqrtf>
 80105bc:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80105c0:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80105c4:	eeac ca88 	vfma.f32	s24, s25, s16
 80105c8:	eeaa aa88 	vfma.f32	s20, s21, s16
 80105cc:	eeec ba08 	vfma.f32	s23, s24, s16
 80105d0:	ee10 3a10 	vmov	r3, s0
 80105d4:	eeab ba88 	vfma.f32	s22, s23, s16
 80105d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80105dc:	f023 030f 	bic.w	r3, r3, #15
 80105e0:	eeea 9a08 	vfma.f32	s19, s20, s16
 80105e4:	ee07 3a90 	vmov	s15, r3
 80105e8:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80105ec:	eeb0 6a48 	vmov.f32	s12, s16
 80105f0:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80105f4:	eea9 9a88 	vfma.f32	s18, s19, s16
 80105f8:	ee70 6a27 	vadd.f32	s13, s0, s15
 80105fc:	ee68 8a88 	vmul.f32	s17, s17, s16
 8010600:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010604:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8010608:	eea0 7a26 	vfma.f32	s14, s0, s13
 801060c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010610:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010614:	e73e      	b.n	8010494 <__ieee754_acosf+0x24>
 8010616:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801065c <__ieee754_acosf+0x1ec>
 801061a:	e73b      	b.n	8010494 <__ieee754_acosf+0x24>
 801061c:	00000000 	.word	0x00000000
 8010620:	40490fdb 	.word	0x40490fdb
 8010624:	3811ef08 	.word	0x3811ef08
 8010628:	3a4f7f04 	.word	0x3a4f7f04
 801062c:	bf303361 	.word	0xbf303361
 8010630:	33a22168 	.word	0x33a22168
 8010634:	bd241146 	.word	0xbd241146
 8010638:	3e4e0aa8 	.word	0x3e4e0aa8
 801063c:	bea6b090 	.word	0xbea6b090
 8010640:	3e2aaaab 	.word	0x3e2aaaab
 8010644:	3d9dc62e 	.word	0x3d9dc62e
 8010648:	4001572d 	.word	0x4001572d
 801064c:	c019d139 	.word	0xc019d139
 8010650:	3fc90fda 	.word	0x3fc90fda
 8010654:	b3a22168 	.word	0xb3a22168
 8010658:	40490fda 	.word	0x40490fda
 801065c:	3fc90fdb 	.word	0x3fc90fdb

08010660 <__ieee754_atan2f>:
 8010660:	ee10 2a90 	vmov	r2, s1
 8010664:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8010668:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801066c:	b510      	push	{r4, lr}
 801066e:	eef0 7a40 	vmov.f32	s15, s0
 8010672:	dc06      	bgt.n	8010682 <__ieee754_atan2f+0x22>
 8010674:	ee10 0a10 	vmov	r0, s0
 8010678:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 801067c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8010680:	dd04      	ble.n	801068c <__ieee754_atan2f+0x2c>
 8010682:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010686:	eeb0 0a67 	vmov.f32	s0, s15
 801068a:	bd10      	pop	{r4, pc}
 801068c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8010690:	d103      	bne.n	801069a <__ieee754_atan2f+0x3a>
 8010692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010696:	f7ff bad3 	b.w	800fc40 <atanf>
 801069a:	1794      	asrs	r4, r2, #30
 801069c:	f004 0402 	and.w	r4, r4, #2
 80106a0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80106a4:	b943      	cbnz	r3, 80106b8 <__ieee754_atan2f+0x58>
 80106a6:	2c02      	cmp	r4, #2
 80106a8:	d05e      	beq.n	8010768 <__ieee754_atan2f+0x108>
 80106aa:	ed9f 7a34 	vldr	s14, [pc, #208]	; 801077c <__ieee754_atan2f+0x11c>
 80106ae:	2c03      	cmp	r4, #3
 80106b0:	bf08      	it	eq
 80106b2:	eef0 7a47 	vmoveq.f32	s15, s14
 80106b6:	e7e6      	b.n	8010686 <__ieee754_atan2f+0x26>
 80106b8:	b941      	cbnz	r1, 80106cc <__ieee754_atan2f+0x6c>
 80106ba:	eddf 7a31 	vldr	s15, [pc, #196]	; 8010780 <__ieee754_atan2f+0x120>
 80106be:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8010784 <__ieee754_atan2f+0x124>
 80106c2:	2800      	cmp	r0, #0
 80106c4:	bfb8      	it	lt
 80106c6:	eef0 7a40 	vmovlt.f32	s15, s0
 80106ca:	e7dc      	b.n	8010686 <__ieee754_atan2f+0x26>
 80106cc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80106d0:	d110      	bne.n	80106f4 <__ieee754_atan2f+0x94>
 80106d2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80106d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80106da:	d107      	bne.n	80106ec <__ieee754_atan2f+0x8c>
 80106dc:	2c02      	cmp	r4, #2
 80106de:	d846      	bhi.n	801076e <__ieee754_atan2f+0x10e>
 80106e0:	4b29      	ldr	r3, [pc, #164]	; (8010788 <__ieee754_atan2f+0x128>)
 80106e2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80106e6:	edd4 7a00 	vldr	s15, [r4]
 80106ea:	e7cc      	b.n	8010686 <__ieee754_atan2f+0x26>
 80106ec:	2c02      	cmp	r4, #2
 80106ee:	d841      	bhi.n	8010774 <__ieee754_atan2f+0x114>
 80106f0:	4b26      	ldr	r3, [pc, #152]	; (801078c <__ieee754_atan2f+0x12c>)
 80106f2:	e7f6      	b.n	80106e2 <__ieee754_atan2f+0x82>
 80106f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80106f8:	d0df      	beq.n	80106ba <__ieee754_atan2f+0x5a>
 80106fa:	1a5b      	subs	r3, r3, r1
 80106fc:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 8010700:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010704:	da1a      	bge.n	801073c <__ieee754_atan2f+0xdc>
 8010706:	2a00      	cmp	r2, #0
 8010708:	da01      	bge.n	801070e <__ieee754_atan2f+0xae>
 801070a:	313c      	adds	r1, #60	; 0x3c
 801070c:	db19      	blt.n	8010742 <__ieee754_atan2f+0xe2>
 801070e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010712:	f7ff fbad 	bl	800fe70 <fabsf>
 8010716:	f7ff fa93 	bl	800fc40 <atanf>
 801071a:	eef0 7a40 	vmov.f32	s15, s0
 801071e:	2c01      	cmp	r4, #1
 8010720:	d012      	beq.n	8010748 <__ieee754_atan2f+0xe8>
 8010722:	2c02      	cmp	r4, #2
 8010724:	d017      	beq.n	8010756 <__ieee754_atan2f+0xf6>
 8010726:	2c00      	cmp	r4, #0
 8010728:	d0ad      	beq.n	8010686 <__ieee754_atan2f+0x26>
 801072a:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8010790 <__ieee754_atan2f+0x130>
 801072e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010732:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8010794 <__ieee754_atan2f+0x134>
 8010736:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801073a:	e7a4      	b.n	8010686 <__ieee754_atan2f+0x26>
 801073c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8010780 <__ieee754_atan2f+0x120>
 8010740:	e7ed      	b.n	801071e <__ieee754_atan2f+0xbe>
 8010742:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010798 <__ieee754_atan2f+0x138>
 8010746:	e7ea      	b.n	801071e <__ieee754_atan2f+0xbe>
 8010748:	ee17 3a90 	vmov	r3, s15
 801074c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010750:	ee07 3a90 	vmov	s15, r3
 8010754:	e797      	b.n	8010686 <__ieee754_atan2f+0x26>
 8010756:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010790 <__ieee754_atan2f+0x130>
 801075a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801075e:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8010794 <__ieee754_atan2f+0x134>
 8010762:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010766:	e78e      	b.n	8010686 <__ieee754_atan2f+0x26>
 8010768:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8010794 <__ieee754_atan2f+0x134>
 801076c:	e78b      	b.n	8010686 <__ieee754_atan2f+0x26>
 801076e:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801079c <__ieee754_atan2f+0x13c>
 8010772:	e788      	b.n	8010686 <__ieee754_atan2f+0x26>
 8010774:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010798 <__ieee754_atan2f+0x138>
 8010778:	e785      	b.n	8010686 <__ieee754_atan2f+0x26>
 801077a:	bf00      	nop
 801077c:	c0490fdb 	.word	0xc0490fdb
 8010780:	3fc90fdb 	.word	0x3fc90fdb
 8010784:	bfc90fdb 	.word	0xbfc90fdb
 8010788:	080172b0 	.word	0x080172b0
 801078c:	080172bc 	.word	0x080172bc
 8010790:	33bbbd2e 	.word	0x33bbbd2e
 8010794:	40490fdb 	.word	0x40490fdb
 8010798:	00000000 	.word	0x00000000
 801079c:	3f490fdb 	.word	0x3f490fdb

080107a0 <__ieee754_powf>:
 80107a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80107a4:	ee10 4a90 	vmov	r4, s1
 80107a8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80107ac:	ed2d 8b02 	vpush	{d8}
 80107b0:	ee10 6a10 	vmov	r6, s0
 80107b4:	eeb0 8a40 	vmov.f32	s16, s0
 80107b8:	eef0 8a60 	vmov.f32	s17, s1
 80107bc:	d10c      	bne.n	80107d8 <__ieee754_powf+0x38>
 80107be:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 80107c2:	0076      	lsls	r6, r6, #1
 80107c4:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 80107c8:	f240 8296 	bls.w	8010cf8 <__ieee754_powf+0x558>
 80107cc:	ee38 0a28 	vadd.f32	s0, s16, s17
 80107d0:	ecbd 8b02 	vpop	{d8}
 80107d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80107d8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80107dc:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80107e0:	dcf4      	bgt.n	80107cc <__ieee754_powf+0x2c>
 80107e2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80107e6:	dd08      	ble.n	80107fa <__ieee754_powf+0x5a>
 80107e8:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80107ec:	d1ee      	bne.n	80107cc <__ieee754_powf+0x2c>
 80107ee:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80107f2:	0064      	lsls	r4, r4, #1
 80107f4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80107f8:	e7e6      	b.n	80107c8 <__ieee754_powf+0x28>
 80107fa:	2e00      	cmp	r6, #0
 80107fc:	da20      	bge.n	8010840 <__ieee754_powf+0xa0>
 80107fe:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8010802:	da2d      	bge.n	8010860 <__ieee754_powf+0xc0>
 8010804:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8010808:	f2c0 827f 	blt.w	8010d0a <__ieee754_powf+0x56a>
 801080c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8010810:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8010814:	fa48 f703 	asr.w	r7, r8, r3
 8010818:	fa07 f303 	lsl.w	r3, r7, r3
 801081c:	4543      	cmp	r3, r8
 801081e:	f040 8274 	bne.w	8010d0a <__ieee754_powf+0x56a>
 8010822:	f007 0701 	and.w	r7, r7, #1
 8010826:	f1c7 0702 	rsb	r7, r7, #2
 801082a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 801082e:	d11f      	bne.n	8010870 <__ieee754_powf+0xd0>
 8010830:	2c00      	cmp	r4, #0
 8010832:	f280 8267 	bge.w	8010d04 <__ieee754_powf+0x564>
 8010836:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801083a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801083e:	e7c7      	b.n	80107d0 <__ieee754_powf+0x30>
 8010840:	2700      	movs	r7, #0
 8010842:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8010846:	d1f0      	bne.n	801082a <__ieee754_powf+0x8a>
 8010848:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 801084c:	f000 8254 	beq.w	8010cf8 <__ieee754_powf+0x558>
 8010850:	dd08      	ble.n	8010864 <__ieee754_powf+0xc4>
 8010852:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8010b5c <__ieee754_powf+0x3bc>
 8010856:	2c00      	cmp	r4, #0
 8010858:	bfa8      	it	ge
 801085a:	eeb0 0a68 	vmovge.f32	s0, s17
 801085e:	e7b7      	b.n	80107d0 <__ieee754_powf+0x30>
 8010860:	2702      	movs	r7, #2
 8010862:	e7ee      	b.n	8010842 <__ieee754_powf+0xa2>
 8010864:	2c00      	cmp	r4, #0
 8010866:	f280 824a 	bge.w	8010cfe <__ieee754_powf+0x55e>
 801086a:	eeb1 0a68 	vneg.f32	s0, s17
 801086e:	e7af      	b.n	80107d0 <__ieee754_powf+0x30>
 8010870:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8010874:	d102      	bne.n	801087c <__ieee754_powf+0xdc>
 8010876:	ee28 0a08 	vmul.f32	s0, s16, s16
 801087a:	e7a9      	b.n	80107d0 <__ieee754_powf+0x30>
 801087c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8010880:	eeb0 0a48 	vmov.f32	s0, s16
 8010884:	d107      	bne.n	8010896 <__ieee754_powf+0xf6>
 8010886:	2e00      	cmp	r6, #0
 8010888:	db05      	blt.n	8010896 <__ieee754_powf+0xf6>
 801088a:	ecbd 8b02 	vpop	{d8}
 801088e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010892:	f000 bb8f 	b.w	8010fb4 <__ieee754_sqrtf>
 8010896:	f7ff faeb 	bl	800fe70 <fabsf>
 801089a:	b125      	cbz	r5, 80108a6 <__ieee754_powf+0x106>
 801089c:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 80108a0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80108a4:	d116      	bne.n	80108d4 <__ieee754_powf+0x134>
 80108a6:	2c00      	cmp	r4, #0
 80108a8:	bfbc      	itt	lt
 80108aa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80108ae:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80108b2:	2e00      	cmp	r6, #0
 80108b4:	da8c      	bge.n	80107d0 <__ieee754_powf+0x30>
 80108b6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80108ba:	ea55 0307 	orrs.w	r3, r5, r7
 80108be:	d104      	bne.n	80108ca <__ieee754_powf+0x12a>
 80108c0:	ee70 7a40 	vsub.f32	s15, s0, s0
 80108c4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80108c8:	e782      	b.n	80107d0 <__ieee754_powf+0x30>
 80108ca:	2f01      	cmp	r7, #1
 80108cc:	d180      	bne.n	80107d0 <__ieee754_powf+0x30>
 80108ce:	eeb1 0a40 	vneg.f32	s0, s0
 80108d2:	e77d      	b.n	80107d0 <__ieee754_powf+0x30>
 80108d4:	0ff0      	lsrs	r0, r6, #31
 80108d6:	3801      	subs	r0, #1
 80108d8:	ea57 0300 	orrs.w	r3, r7, r0
 80108dc:	d104      	bne.n	80108e8 <__ieee754_powf+0x148>
 80108de:	ee38 8a48 	vsub.f32	s16, s16, s16
 80108e2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80108e6:	e773      	b.n	80107d0 <__ieee754_powf+0x30>
 80108e8:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80108ec:	dd74      	ble.n	80109d8 <__ieee754_powf+0x238>
 80108ee:	4b9c      	ldr	r3, [pc, #624]	; (8010b60 <__ieee754_powf+0x3c0>)
 80108f0:	429d      	cmp	r5, r3
 80108f2:	dc08      	bgt.n	8010906 <__ieee754_powf+0x166>
 80108f4:	2c00      	cmp	r4, #0
 80108f6:	da0b      	bge.n	8010910 <__ieee754_powf+0x170>
 80108f8:	2000      	movs	r0, #0
 80108fa:	ecbd 8b02 	vpop	{d8}
 80108fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010902:	f001 bb6d 	b.w	8011fe0 <__math_oflowf>
 8010906:	4b97      	ldr	r3, [pc, #604]	; (8010b64 <__ieee754_powf+0x3c4>)
 8010908:	429d      	cmp	r5, r3
 801090a:	dd08      	ble.n	801091e <__ieee754_powf+0x17e>
 801090c:	2c00      	cmp	r4, #0
 801090e:	dcf3      	bgt.n	80108f8 <__ieee754_powf+0x158>
 8010910:	2000      	movs	r0, #0
 8010912:	ecbd 8b02 	vpop	{d8}
 8010916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801091a:	f001 bb5b 	b.w	8011fd4 <__math_uflowf>
 801091e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010922:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010926:	eddf 6a90 	vldr	s13, [pc, #576]	; 8010b68 <__ieee754_powf+0x3c8>
 801092a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801092e:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010932:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010936:	eee6 7ac0 	vfms.f32	s15, s13, s0
 801093a:	ee20 7a00 	vmul.f32	s14, s0, s0
 801093e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010942:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8010b6c <__ieee754_powf+0x3cc>
 8010946:	ee67 7a67 	vnmul.f32	s15, s14, s15
 801094a:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8010b70 <__ieee754_powf+0x3d0>
 801094e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010952:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8010b74 <__ieee754_powf+0x3d4>
 8010956:	eef0 6a67 	vmov.f32	s13, s15
 801095a:	eee0 6a07 	vfma.f32	s13, s0, s14
 801095e:	ee16 3a90 	vmov	r3, s13
 8010962:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010966:	f023 030f 	bic.w	r3, r3, #15
 801096a:	ee00 3a90 	vmov	s1, r3
 801096e:	eee0 0a47 	vfms.f32	s1, s0, s14
 8010972:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8010976:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 801097a:	f024 040f 	bic.w	r4, r4, #15
 801097e:	ee07 4a10 	vmov	s14, r4
 8010982:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010986:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801098a:	ee07 3a90 	vmov	s15, r3
 801098e:	eee7 0a27 	vfma.f32	s1, s14, s15
 8010992:	3f01      	subs	r7, #1
 8010994:	ea57 0200 	orrs.w	r2, r7, r0
 8010998:	ee07 4a10 	vmov	s14, r4
 801099c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80109a0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80109a4:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80109a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80109ac:	ee17 4a10 	vmov	r4, s14
 80109b0:	bf08      	it	eq
 80109b2:	eeb0 8a40 	vmoveq.f32	s16, s0
 80109b6:	2c00      	cmp	r4, #0
 80109b8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80109bc:	f340 817e 	ble.w	8010cbc <__ieee754_powf+0x51c>
 80109c0:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80109c4:	f340 80f8 	ble.w	8010bb8 <__ieee754_powf+0x418>
 80109c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80109cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d0:	bf4c      	ite	mi
 80109d2:	2001      	movmi	r0, #1
 80109d4:	2000      	movpl	r0, #0
 80109d6:	e790      	b.n	80108fa <__ieee754_powf+0x15a>
 80109d8:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80109dc:	bf01      	itttt	eq
 80109de:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8010b78 <__ieee754_powf+0x3d8>
 80109e2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80109e6:	f06f 0217 	mvneq.w	r2, #23
 80109ea:	ee17 5a90 	vmoveq	r5, s15
 80109ee:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80109f2:	bf18      	it	ne
 80109f4:	2200      	movne	r2, #0
 80109f6:	3b7f      	subs	r3, #127	; 0x7f
 80109f8:	4413      	add	r3, r2
 80109fa:	4a60      	ldr	r2, [pc, #384]	; (8010b7c <__ieee754_powf+0x3dc>)
 80109fc:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8010a00:	4295      	cmp	r5, r2
 8010a02:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8010a06:	dd06      	ble.n	8010a16 <__ieee754_powf+0x276>
 8010a08:	4a5d      	ldr	r2, [pc, #372]	; (8010b80 <__ieee754_powf+0x3e0>)
 8010a0a:	4295      	cmp	r5, r2
 8010a0c:	f340 80a4 	ble.w	8010b58 <__ieee754_powf+0x3b8>
 8010a10:	3301      	adds	r3, #1
 8010a12:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8010a16:	2500      	movs	r5, #0
 8010a18:	4a5a      	ldr	r2, [pc, #360]	; (8010b84 <__ieee754_powf+0x3e4>)
 8010a1a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8010a1e:	ee07 1a90 	vmov	s15, r1
 8010a22:	ed92 7a00 	vldr	s14, [r2]
 8010a26:	4a58      	ldr	r2, [pc, #352]	; (8010b88 <__ieee754_powf+0x3e8>)
 8010a28:	ee37 6a27 	vadd.f32	s12, s14, s15
 8010a2c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8010a30:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8010a34:	1049      	asrs	r1, r1, #1
 8010a36:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8010a3a:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8010a3e:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8010a42:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8010a46:	ee06 1a10 	vmov	s12, r1
 8010a4a:	ee65 4a26 	vmul.f32	s9, s10, s13
 8010a4e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8010a52:	ee14 6a90 	vmov	r6, s9
 8010a56:	4016      	ands	r6, r2
 8010a58:	ee05 6a90 	vmov	s11, r6
 8010a5c:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8010a60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010a64:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010b8c <__ieee754_powf+0x3ec>
 8010a68:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8010a6c:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8010a70:	ee25 6a26 	vmul.f32	s12, s10, s13
 8010a74:	eddf 6a46 	vldr	s13, [pc, #280]	; 8010b90 <__ieee754_powf+0x3f0>
 8010a78:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010a7c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8010b94 <__ieee754_powf+0x3f4>
 8010a80:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010a84:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8010b68 <__ieee754_powf+0x3c8>
 8010a88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010a8c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8010b98 <__ieee754_powf+0x3f8>
 8010a90:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010a94:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8010b9c <__ieee754_powf+0x3fc>
 8010a98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010a9c:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8010aa0:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8010aa4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010aa8:	eee5 6a07 	vfma.f32	s13, s10, s14
 8010aac:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8010ab0:	eef0 7a45 	vmov.f32	s15, s10
 8010ab4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8010ab8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010abc:	ee17 1a90 	vmov	r1, s15
 8010ac0:	4011      	ands	r1, r2
 8010ac2:	ee07 1a90 	vmov	s15, r1
 8010ac6:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8010aca:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8010ace:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8010ad2:	ee27 7a24 	vmul.f32	s14, s14, s9
 8010ad6:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010ada:	eeb0 6a47 	vmov.f32	s12, s14
 8010ade:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8010ae2:	ee16 1a10 	vmov	r1, s12
 8010ae6:	4011      	ands	r1, r2
 8010ae8:	ee06 1a90 	vmov	s13, r1
 8010aec:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8010af0:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010ba0 <__ieee754_powf+0x400>
 8010af4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8010ba4 <__ieee754_powf+0x404>
 8010af8:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010afc:	ee06 1a10 	vmov	s12, r1
 8010b00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010b04:	eddf 7a28 	vldr	s15, [pc, #160]	; 8010ba8 <__ieee754_powf+0x408>
 8010b08:	4928      	ldr	r1, [pc, #160]	; (8010bac <__ieee754_powf+0x40c>)
 8010b0a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8010b0e:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8010b12:	edd1 7a00 	vldr	s15, [r1]
 8010b16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010b1a:	ee07 3a90 	vmov	s15, r3
 8010b1e:	4b24      	ldr	r3, [pc, #144]	; (8010bb0 <__ieee754_powf+0x410>)
 8010b20:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8010b24:	eef0 7a47 	vmov.f32	s15, s14
 8010b28:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010b2c:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8010b30:	edd5 0a00 	vldr	s1, [r5]
 8010b34:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010b3c:	ee17 3a90 	vmov	r3, s15
 8010b40:	4013      	ands	r3, r2
 8010b42:	ee07 3a90 	vmov	s15, r3
 8010b46:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8010b4a:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8010b4e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8010b52:	ee77 7a66 	vsub.f32	s15, s14, s13
 8010b56:	e70e      	b.n	8010976 <__ieee754_powf+0x1d6>
 8010b58:	2501      	movs	r5, #1
 8010b5a:	e75d      	b.n	8010a18 <__ieee754_powf+0x278>
 8010b5c:	00000000 	.word	0x00000000
 8010b60:	3f7ffff3 	.word	0x3f7ffff3
 8010b64:	3f800007 	.word	0x3f800007
 8010b68:	3eaaaaab 	.word	0x3eaaaaab
 8010b6c:	3fb8aa3b 	.word	0x3fb8aa3b
 8010b70:	36eca570 	.word	0x36eca570
 8010b74:	3fb8aa00 	.word	0x3fb8aa00
 8010b78:	4b800000 	.word	0x4b800000
 8010b7c:	001cc471 	.word	0x001cc471
 8010b80:	005db3d6 	.word	0x005db3d6
 8010b84:	080172c8 	.word	0x080172c8
 8010b88:	fffff000 	.word	0xfffff000
 8010b8c:	3e6c3255 	.word	0x3e6c3255
 8010b90:	3e53f142 	.word	0x3e53f142
 8010b94:	3e8ba305 	.word	0x3e8ba305
 8010b98:	3edb6db7 	.word	0x3edb6db7
 8010b9c:	3f19999a 	.word	0x3f19999a
 8010ba0:	3f76384f 	.word	0x3f76384f
 8010ba4:	3f763800 	.word	0x3f763800
 8010ba8:	369dc3a0 	.word	0x369dc3a0
 8010bac:	080172d8 	.word	0x080172d8
 8010bb0:	080172d0 	.word	0x080172d0
 8010bb4:	3338aa3c 	.word	0x3338aa3c
 8010bb8:	f040 8095 	bne.w	8010ce6 <__ieee754_powf+0x546>
 8010bbc:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8010bb4 <__ieee754_powf+0x414>
 8010bc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010bc4:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8010bc8:	eef4 6ac7 	vcmpe.f32	s13, s14
 8010bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd0:	f73f aefa 	bgt.w	80109c8 <__ieee754_powf+0x228>
 8010bd4:	15db      	asrs	r3, r3, #23
 8010bd6:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8010bda:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010bde:	4103      	asrs	r3, r0
 8010be0:	4423      	add	r3, r4
 8010be2:	494b      	ldr	r1, [pc, #300]	; (8010d10 <__ieee754_powf+0x570>)
 8010be4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010be8:	3a7f      	subs	r2, #127	; 0x7f
 8010bea:	4111      	asrs	r1, r2
 8010bec:	ea23 0101 	bic.w	r1, r3, r1
 8010bf0:	ee07 1a10 	vmov	s14, r1
 8010bf4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8010bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8010bfc:	f1c2 0217 	rsb	r2, r2, #23
 8010c00:	4110      	asrs	r0, r2
 8010c02:	2c00      	cmp	r4, #0
 8010c04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010c08:	bfb8      	it	lt
 8010c0a:	4240      	neglt	r0, r0
 8010c0c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8010c10:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8010d14 <__ieee754_powf+0x574>
 8010c14:	eddf 6a40 	vldr	s13, [pc, #256]	; 8010d18 <__ieee754_powf+0x578>
 8010c18:	ee17 3a10 	vmov	r3, s14
 8010c1c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8010c20:	f023 030f 	bic.w	r3, r3, #15
 8010c24:	ee07 3a10 	vmov	s14, r3
 8010c28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010c2c:	ee27 0a00 	vmul.f32	s0, s14, s0
 8010c30:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8010c34:	eddf 7a39 	vldr	s15, [pc, #228]	; 8010d1c <__ieee754_powf+0x57c>
 8010c38:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8010c3c:	eef0 7a40 	vmov.f32	s15, s0
 8010c40:	eee7 7a26 	vfma.f32	s15, s14, s13
 8010c44:	eeb0 6a67 	vmov.f32	s12, s15
 8010c48:	eea7 6a66 	vfms.f32	s12, s14, s13
 8010c4c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8010c50:	ee30 0a46 	vsub.f32	s0, s0, s12
 8010c54:	eddf 6a32 	vldr	s13, [pc, #200]	; 8010d20 <__ieee754_powf+0x580>
 8010c58:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8010d24 <__ieee754_powf+0x584>
 8010c5c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8010c60:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8010d28 <__ieee754_powf+0x588>
 8010c64:	eea6 6a87 	vfma.f32	s12, s13, s14
 8010c68:	eddf 6a30 	vldr	s13, [pc, #192]	; 8010d2c <__ieee754_powf+0x58c>
 8010c6c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8010c70:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8010d30 <__ieee754_powf+0x590>
 8010c74:	eea6 6a87 	vfma.f32	s12, s13, s14
 8010c78:	eef0 6a67 	vmov.f32	s13, s15
 8010c7c:	eee6 6a47 	vfms.f32	s13, s12, s14
 8010c80:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8010c84:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8010c88:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8010c8c:	eea7 0a80 	vfma.f32	s0, s15, s0
 8010c90:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8010c94:	ee37 0a40 	vsub.f32	s0, s14, s0
 8010c98:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010c9c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010ca0:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010ca4:	ee10 3a10 	vmov	r3, s0
 8010ca8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8010cac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010cb0:	da1f      	bge.n	8010cf2 <__ieee754_powf+0x552>
 8010cb2:	f001 faf9 	bl	80122a8 <scalbnf>
 8010cb6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010cba:	e589      	b.n	80107d0 <__ieee754_powf+0x30>
 8010cbc:	4a1d      	ldr	r2, [pc, #116]	; (8010d34 <__ieee754_powf+0x594>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	dd07      	ble.n	8010cd2 <__ieee754_powf+0x532>
 8010cc2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cca:	bf4c      	ite	mi
 8010ccc:	2001      	movmi	r0, #1
 8010cce:	2000      	movpl	r0, #0
 8010cd0:	e61f      	b.n	8010912 <__ieee754_powf+0x172>
 8010cd2:	d108      	bne.n	8010ce6 <__ieee754_powf+0x546>
 8010cd4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010cd8:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8010cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce0:	f6ff af78 	blt.w	8010bd4 <__ieee754_powf+0x434>
 8010ce4:	e7ed      	b.n	8010cc2 <__ieee754_powf+0x522>
 8010ce6:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8010cea:	f73f af73 	bgt.w	8010bd4 <__ieee754_powf+0x434>
 8010cee:	2000      	movs	r0, #0
 8010cf0:	e78c      	b.n	8010c0c <__ieee754_powf+0x46c>
 8010cf2:	ee00 3a10 	vmov	s0, r3
 8010cf6:	e7de      	b.n	8010cb6 <__ieee754_powf+0x516>
 8010cf8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010cfc:	e568      	b.n	80107d0 <__ieee754_powf+0x30>
 8010cfe:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8010d38 <__ieee754_powf+0x598>
 8010d02:	e565      	b.n	80107d0 <__ieee754_powf+0x30>
 8010d04:	eeb0 0a48 	vmov.f32	s0, s16
 8010d08:	e562      	b.n	80107d0 <__ieee754_powf+0x30>
 8010d0a:	2700      	movs	r7, #0
 8010d0c:	e58d      	b.n	801082a <__ieee754_powf+0x8a>
 8010d0e:	bf00      	nop
 8010d10:	007fffff 	.word	0x007fffff
 8010d14:	35bfbe8c 	.word	0x35bfbe8c
 8010d18:	3f317200 	.word	0x3f317200
 8010d1c:	3f317218 	.word	0x3f317218
 8010d20:	b5ddea0e 	.word	0xb5ddea0e
 8010d24:	3331bb4c 	.word	0x3331bb4c
 8010d28:	388ab355 	.word	0x388ab355
 8010d2c:	bb360b61 	.word	0xbb360b61
 8010d30:	3e2aaaab 	.word	0x3e2aaaab
 8010d34:	43160000 	.word	0x43160000
 8010d38:	00000000 	.word	0x00000000

08010d3c <__ieee754_rem_pio2f>:
 8010d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d3e:	ee10 6a10 	vmov	r6, s0
 8010d42:	4b8e      	ldr	r3, [pc, #568]	; (8010f7c <__ieee754_rem_pio2f+0x240>)
 8010d44:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8010d48:	429d      	cmp	r5, r3
 8010d4a:	b087      	sub	sp, #28
 8010d4c:	eef0 7a40 	vmov.f32	s15, s0
 8010d50:	4604      	mov	r4, r0
 8010d52:	dc05      	bgt.n	8010d60 <__ieee754_rem_pio2f+0x24>
 8010d54:	2300      	movs	r3, #0
 8010d56:	ed80 0a00 	vstr	s0, [r0]
 8010d5a:	6043      	str	r3, [r0, #4]
 8010d5c:	2000      	movs	r0, #0
 8010d5e:	e01a      	b.n	8010d96 <__ieee754_rem_pio2f+0x5a>
 8010d60:	4b87      	ldr	r3, [pc, #540]	; (8010f80 <__ieee754_rem_pio2f+0x244>)
 8010d62:	429d      	cmp	r5, r3
 8010d64:	dc46      	bgt.n	8010df4 <__ieee754_rem_pio2f+0xb8>
 8010d66:	2e00      	cmp	r6, #0
 8010d68:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8010f84 <__ieee754_rem_pio2f+0x248>
 8010d6c:	4b86      	ldr	r3, [pc, #536]	; (8010f88 <__ieee754_rem_pio2f+0x24c>)
 8010d6e:	f025 050f 	bic.w	r5, r5, #15
 8010d72:	dd1f      	ble.n	8010db4 <__ieee754_rem_pio2f+0x78>
 8010d74:	429d      	cmp	r5, r3
 8010d76:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010d7a:	d00e      	beq.n	8010d9a <__ieee754_rem_pio2f+0x5e>
 8010d7c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8010f8c <__ieee754_rem_pio2f+0x250>
 8010d80:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8010d84:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010d88:	ed80 0a00 	vstr	s0, [r0]
 8010d8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d90:	2001      	movs	r0, #1
 8010d92:	edc4 7a01 	vstr	s15, [r4, #4]
 8010d96:	b007      	add	sp, #28
 8010d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d9a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8010f90 <__ieee754_rem_pio2f+0x254>
 8010d9e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8010f94 <__ieee754_rem_pio2f+0x258>
 8010da2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010da6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8010daa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010dae:	edc0 6a00 	vstr	s13, [r0]
 8010db2:	e7eb      	b.n	8010d8c <__ieee754_rem_pio2f+0x50>
 8010db4:	429d      	cmp	r5, r3
 8010db6:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010dba:	d00e      	beq.n	8010dda <__ieee754_rem_pio2f+0x9e>
 8010dbc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8010f8c <__ieee754_rem_pio2f+0x250>
 8010dc0:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010dc4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8010dc8:	ed80 0a00 	vstr	s0, [r0]
 8010dcc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8010dd4:	edc4 7a01 	vstr	s15, [r4, #4]
 8010dd8:	e7dd      	b.n	8010d96 <__ieee754_rem_pio2f+0x5a>
 8010dda:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8010f90 <__ieee754_rem_pio2f+0x254>
 8010dde:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8010f94 <__ieee754_rem_pio2f+0x258>
 8010de2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8010de6:	ee77 6a87 	vadd.f32	s13, s15, s14
 8010dea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010dee:	edc0 6a00 	vstr	s13, [r0]
 8010df2:	e7eb      	b.n	8010dcc <__ieee754_rem_pio2f+0x90>
 8010df4:	4b68      	ldr	r3, [pc, #416]	; (8010f98 <__ieee754_rem_pio2f+0x25c>)
 8010df6:	429d      	cmp	r5, r3
 8010df8:	dc72      	bgt.n	8010ee0 <__ieee754_rem_pio2f+0x1a4>
 8010dfa:	f7ff f839 	bl	800fe70 <fabsf>
 8010dfe:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8010f9c <__ieee754_rem_pio2f+0x260>
 8010e02:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010e06:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010e0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010e12:	ee17 0a90 	vmov	r0, s15
 8010e16:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8010f84 <__ieee754_rem_pio2f+0x248>
 8010e1a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010e1e:	281f      	cmp	r0, #31
 8010e20:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8010f8c <__ieee754_rem_pio2f+0x250>
 8010e24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010e28:	eeb1 6a47 	vneg.f32	s12, s14
 8010e2c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010e30:	ee16 2a90 	vmov	r2, s13
 8010e34:	dc1c      	bgt.n	8010e70 <__ieee754_rem_pio2f+0x134>
 8010e36:	495a      	ldr	r1, [pc, #360]	; (8010fa0 <__ieee754_rem_pio2f+0x264>)
 8010e38:	1e47      	subs	r7, r0, #1
 8010e3a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8010e3e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8010e42:	428b      	cmp	r3, r1
 8010e44:	d014      	beq.n	8010e70 <__ieee754_rem_pio2f+0x134>
 8010e46:	6022      	str	r2, [r4, #0]
 8010e48:	ed94 7a00 	vldr	s14, [r4]
 8010e4c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010e50:	2e00      	cmp	r6, #0
 8010e52:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010e56:	ed84 0a01 	vstr	s0, [r4, #4]
 8010e5a:	da9c      	bge.n	8010d96 <__ieee754_rem_pio2f+0x5a>
 8010e5c:	eeb1 7a47 	vneg.f32	s14, s14
 8010e60:	eeb1 0a40 	vneg.f32	s0, s0
 8010e64:	ed84 7a00 	vstr	s14, [r4]
 8010e68:	ed84 0a01 	vstr	s0, [r4, #4]
 8010e6c:	4240      	negs	r0, r0
 8010e6e:	e792      	b.n	8010d96 <__ieee754_rem_pio2f+0x5a>
 8010e70:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010e74:	15eb      	asrs	r3, r5, #23
 8010e76:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8010e7a:	2d08      	cmp	r5, #8
 8010e7c:	dde3      	ble.n	8010e46 <__ieee754_rem_pio2f+0x10a>
 8010e7e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8010f90 <__ieee754_rem_pio2f+0x254>
 8010e82:	eddf 5a44 	vldr	s11, [pc, #272]	; 8010f94 <__ieee754_rem_pio2f+0x258>
 8010e86:	eef0 6a40 	vmov.f32	s13, s0
 8010e8a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010e8e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8010e92:	eea6 0a27 	vfma.f32	s0, s12, s15
 8010e96:	eef0 7a40 	vmov.f32	s15, s0
 8010e9a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8010e9e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8010ea2:	ee15 2a90 	vmov	r2, s11
 8010ea6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8010eaa:	1a5b      	subs	r3, r3, r1
 8010eac:	2b19      	cmp	r3, #25
 8010eae:	dc04      	bgt.n	8010eba <__ieee754_rem_pio2f+0x17e>
 8010eb0:	edc4 5a00 	vstr	s11, [r4]
 8010eb4:	eeb0 0a66 	vmov.f32	s0, s13
 8010eb8:	e7c6      	b.n	8010e48 <__ieee754_rem_pio2f+0x10c>
 8010eba:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8010fa4 <__ieee754_rem_pio2f+0x268>
 8010ebe:	eeb0 0a66 	vmov.f32	s0, s13
 8010ec2:	eea6 0a25 	vfma.f32	s0, s12, s11
 8010ec6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8010eca:	eddf 6a37 	vldr	s13, [pc, #220]	; 8010fa8 <__ieee754_rem_pio2f+0x26c>
 8010ece:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010ed2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8010ed6:	ee30 7a67 	vsub.f32	s14, s0, s15
 8010eda:	ed84 7a00 	vstr	s14, [r4]
 8010ede:	e7b3      	b.n	8010e48 <__ieee754_rem_pio2f+0x10c>
 8010ee0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010ee4:	db06      	blt.n	8010ef4 <__ieee754_rem_pio2f+0x1b8>
 8010ee6:	ee70 7a40 	vsub.f32	s15, s0, s0
 8010eea:	edc0 7a01 	vstr	s15, [r0, #4]
 8010eee:	edc0 7a00 	vstr	s15, [r0]
 8010ef2:	e733      	b.n	8010d5c <__ieee754_rem_pio2f+0x20>
 8010ef4:	15ea      	asrs	r2, r5, #23
 8010ef6:	3a86      	subs	r2, #134	; 0x86
 8010ef8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010efc:	ee07 3a90 	vmov	s15, r3
 8010f00:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010f04:	eddf 6a29 	vldr	s13, [pc, #164]	; 8010fac <__ieee754_rem_pio2f+0x270>
 8010f08:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010f0c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f10:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010f14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010f18:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010f1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010f20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010f24:	ed8d 7a04 	vstr	s14, [sp, #16]
 8010f28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010f2c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f34:	edcd 7a05 	vstr	s15, [sp, #20]
 8010f38:	d11e      	bne.n	8010f78 <__ieee754_rem_pio2f+0x23c>
 8010f3a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f42:	bf14      	ite	ne
 8010f44:	2302      	movne	r3, #2
 8010f46:	2301      	moveq	r3, #1
 8010f48:	4919      	ldr	r1, [pc, #100]	; (8010fb0 <__ieee754_rem_pio2f+0x274>)
 8010f4a:	9101      	str	r1, [sp, #4]
 8010f4c:	2102      	movs	r1, #2
 8010f4e:	9100      	str	r1, [sp, #0]
 8010f50:	a803      	add	r0, sp, #12
 8010f52:	4621      	mov	r1, r4
 8010f54:	f000 fd6a 	bl	8011a2c <__kernel_rem_pio2f>
 8010f58:	2e00      	cmp	r6, #0
 8010f5a:	f6bf af1c 	bge.w	8010d96 <__ieee754_rem_pio2f+0x5a>
 8010f5e:	edd4 7a00 	vldr	s15, [r4]
 8010f62:	eef1 7a67 	vneg.f32	s15, s15
 8010f66:	edc4 7a00 	vstr	s15, [r4]
 8010f6a:	edd4 7a01 	vldr	s15, [r4, #4]
 8010f6e:	eef1 7a67 	vneg.f32	s15, s15
 8010f72:	edc4 7a01 	vstr	s15, [r4, #4]
 8010f76:	e779      	b.n	8010e6c <__ieee754_rem_pio2f+0x130>
 8010f78:	2303      	movs	r3, #3
 8010f7a:	e7e5      	b.n	8010f48 <__ieee754_rem_pio2f+0x20c>
 8010f7c:	3f490fd8 	.word	0x3f490fd8
 8010f80:	4016cbe3 	.word	0x4016cbe3
 8010f84:	3fc90f80 	.word	0x3fc90f80
 8010f88:	3fc90fd0 	.word	0x3fc90fd0
 8010f8c:	37354443 	.word	0x37354443
 8010f90:	37354400 	.word	0x37354400
 8010f94:	2e85a308 	.word	0x2e85a308
 8010f98:	43490f80 	.word	0x43490f80
 8010f9c:	3f22f984 	.word	0x3f22f984
 8010fa0:	080172e0 	.word	0x080172e0
 8010fa4:	2e85a300 	.word	0x2e85a300
 8010fa8:	248d3132 	.word	0x248d3132
 8010fac:	43800000 	.word	0x43800000
 8010fb0:	08017360 	.word	0x08017360

08010fb4 <__ieee754_sqrtf>:
 8010fb4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010fb8:	4770      	bx	lr
 8010fba:	0000      	movs	r0, r0
 8010fbc:	0000      	movs	r0, r0
	...

08010fc0 <__kernel_cos>:
 8010fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fc4:	ec57 6b10 	vmov	r6, r7, d0
 8010fc8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010fcc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8010fd0:	ed8d 1b00 	vstr	d1, [sp]
 8010fd4:	da07      	bge.n	8010fe6 <__kernel_cos+0x26>
 8010fd6:	ee10 0a10 	vmov	r0, s0
 8010fda:	4639      	mov	r1, r7
 8010fdc:	f7ef fdbc 	bl	8000b58 <__aeabi_d2iz>
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	f000 8088 	beq.w	80110f6 <__kernel_cos+0x136>
 8010fe6:	4632      	mov	r2, r6
 8010fe8:	463b      	mov	r3, r7
 8010fea:	4630      	mov	r0, r6
 8010fec:	4639      	mov	r1, r7
 8010fee:	f7ef fb03 	bl	80005f8 <__aeabi_dmul>
 8010ff2:	4b51      	ldr	r3, [pc, #324]	; (8011138 <__kernel_cos+0x178>)
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	4604      	mov	r4, r0
 8010ff8:	460d      	mov	r5, r1
 8010ffa:	f7ef fafd 	bl	80005f8 <__aeabi_dmul>
 8010ffe:	a340      	add	r3, pc, #256	; (adr r3, 8011100 <__kernel_cos+0x140>)
 8011000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011004:	4682      	mov	sl, r0
 8011006:	468b      	mov	fp, r1
 8011008:	4620      	mov	r0, r4
 801100a:	4629      	mov	r1, r5
 801100c:	f7ef faf4 	bl	80005f8 <__aeabi_dmul>
 8011010:	a33d      	add	r3, pc, #244	; (adr r3, 8011108 <__kernel_cos+0x148>)
 8011012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011016:	f7ef f939 	bl	800028c <__adddf3>
 801101a:	4622      	mov	r2, r4
 801101c:	462b      	mov	r3, r5
 801101e:	f7ef faeb 	bl	80005f8 <__aeabi_dmul>
 8011022:	a33b      	add	r3, pc, #236	; (adr r3, 8011110 <__kernel_cos+0x150>)
 8011024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011028:	f7ef f92e 	bl	8000288 <__aeabi_dsub>
 801102c:	4622      	mov	r2, r4
 801102e:	462b      	mov	r3, r5
 8011030:	f7ef fae2 	bl	80005f8 <__aeabi_dmul>
 8011034:	a338      	add	r3, pc, #224	; (adr r3, 8011118 <__kernel_cos+0x158>)
 8011036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801103a:	f7ef f927 	bl	800028c <__adddf3>
 801103e:	4622      	mov	r2, r4
 8011040:	462b      	mov	r3, r5
 8011042:	f7ef fad9 	bl	80005f8 <__aeabi_dmul>
 8011046:	a336      	add	r3, pc, #216	; (adr r3, 8011120 <__kernel_cos+0x160>)
 8011048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801104c:	f7ef f91c 	bl	8000288 <__aeabi_dsub>
 8011050:	4622      	mov	r2, r4
 8011052:	462b      	mov	r3, r5
 8011054:	f7ef fad0 	bl	80005f8 <__aeabi_dmul>
 8011058:	a333      	add	r3, pc, #204	; (adr r3, 8011128 <__kernel_cos+0x168>)
 801105a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801105e:	f7ef f915 	bl	800028c <__adddf3>
 8011062:	4622      	mov	r2, r4
 8011064:	462b      	mov	r3, r5
 8011066:	f7ef fac7 	bl	80005f8 <__aeabi_dmul>
 801106a:	4622      	mov	r2, r4
 801106c:	462b      	mov	r3, r5
 801106e:	f7ef fac3 	bl	80005f8 <__aeabi_dmul>
 8011072:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011076:	4604      	mov	r4, r0
 8011078:	460d      	mov	r5, r1
 801107a:	4630      	mov	r0, r6
 801107c:	4639      	mov	r1, r7
 801107e:	f7ef fabb 	bl	80005f8 <__aeabi_dmul>
 8011082:	460b      	mov	r3, r1
 8011084:	4602      	mov	r2, r0
 8011086:	4629      	mov	r1, r5
 8011088:	4620      	mov	r0, r4
 801108a:	f7ef f8fd 	bl	8000288 <__aeabi_dsub>
 801108e:	4b2b      	ldr	r3, [pc, #172]	; (801113c <__kernel_cos+0x17c>)
 8011090:	4598      	cmp	r8, r3
 8011092:	4606      	mov	r6, r0
 8011094:	460f      	mov	r7, r1
 8011096:	dc10      	bgt.n	80110ba <__kernel_cos+0xfa>
 8011098:	4602      	mov	r2, r0
 801109a:	460b      	mov	r3, r1
 801109c:	4650      	mov	r0, sl
 801109e:	4659      	mov	r1, fp
 80110a0:	f7ef f8f2 	bl	8000288 <__aeabi_dsub>
 80110a4:	460b      	mov	r3, r1
 80110a6:	4926      	ldr	r1, [pc, #152]	; (8011140 <__kernel_cos+0x180>)
 80110a8:	4602      	mov	r2, r0
 80110aa:	2000      	movs	r0, #0
 80110ac:	f7ef f8ec 	bl	8000288 <__aeabi_dsub>
 80110b0:	ec41 0b10 	vmov	d0, r0, r1
 80110b4:	b003      	add	sp, #12
 80110b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110ba:	4b22      	ldr	r3, [pc, #136]	; (8011144 <__kernel_cos+0x184>)
 80110bc:	4920      	ldr	r1, [pc, #128]	; (8011140 <__kernel_cos+0x180>)
 80110be:	4598      	cmp	r8, r3
 80110c0:	bfcc      	ite	gt
 80110c2:	4d21      	ldrgt	r5, [pc, #132]	; (8011148 <__kernel_cos+0x188>)
 80110c4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80110c8:	2400      	movs	r4, #0
 80110ca:	4622      	mov	r2, r4
 80110cc:	462b      	mov	r3, r5
 80110ce:	2000      	movs	r0, #0
 80110d0:	f7ef f8da 	bl	8000288 <__aeabi_dsub>
 80110d4:	4622      	mov	r2, r4
 80110d6:	4680      	mov	r8, r0
 80110d8:	4689      	mov	r9, r1
 80110da:	462b      	mov	r3, r5
 80110dc:	4650      	mov	r0, sl
 80110de:	4659      	mov	r1, fp
 80110e0:	f7ef f8d2 	bl	8000288 <__aeabi_dsub>
 80110e4:	4632      	mov	r2, r6
 80110e6:	463b      	mov	r3, r7
 80110e8:	f7ef f8ce 	bl	8000288 <__aeabi_dsub>
 80110ec:	4602      	mov	r2, r0
 80110ee:	460b      	mov	r3, r1
 80110f0:	4640      	mov	r0, r8
 80110f2:	4649      	mov	r1, r9
 80110f4:	e7da      	b.n	80110ac <__kernel_cos+0xec>
 80110f6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011130 <__kernel_cos+0x170>
 80110fa:	e7db      	b.n	80110b4 <__kernel_cos+0xf4>
 80110fc:	f3af 8000 	nop.w
 8011100:	be8838d4 	.word	0xbe8838d4
 8011104:	bda8fae9 	.word	0xbda8fae9
 8011108:	bdb4b1c4 	.word	0xbdb4b1c4
 801110c:	3e21ee9e 	.word	0x3e21ee9e
 8011110:	809c52ad 	.word	0x809c52ad
 8011114:	3e927e4f 	.word	0x3e927e4f
 8011118:	19cb1590 	.word	0x19cb1590
 801111c:	3efa01a0 	.word	0x3efa01a0
 8011120:	16c15177 	.word	0x16c15177
 8011124:	3f56c16c 	.word	0x3f56c16c
 8011128:	5555554c 	.word	0x5555554c
 801112c:	3fa55555 	.word	0x3fa55555
 8011130:	00000000 	.word	0x00000000
 8011134:	3ff00000 	.word	0x3ff00000
 8011138:	3fe00000 	.word	0x3fe00000
 801113c:	3fd33332 	.word	0x3fd33332
 8011140:	3ff00000 	.word	0x3ff00000
 8011144:	3fe90000 	.word	0x3fe90000
 8011148:	3fd20000 	.word	0x3fd20000
 801114c:	00000000 	.word	0x00000000

08011150 <__kernel_rem_pio2>:
 8011150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011154:	ed2d 8b02 	vpush	{d8}
 8011158:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801115c:	f112 0f14 	cmn.w	r2, #20
 8011160:	9308      	str	r3, [sp, #32]
 8011162:	9101      	str	r1, [sp, #4]
 8011164:	4bc4      	ldr	r3, [pc, #784]	; (8011478 <__kernel_rem_pio2+0x328>)
 8011166:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011168:	900b      	str	r0, [sp, #44]	; 0x2c
 801116a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801116e:	9302      	str	r3, [sp, #8]
 8011170:	9b08      	ldr	r3, [sp, #32]
 8011172:	f103 33ff 	add.w	r3, r3, #4294967295
 8011176:	bfa8      	it	ge
 8011178:	1ed4      	subge	r4, r2, #3
 801117a:	9306      	str	r3, [sp, #24]
 801117c:	bfb2      	itee	lt
 801117e:	2400      	movlt	r4, #0
 8011180:	2318      	movge	r3, #24
 8011182:	fb94 f4f3 	sdivge	r4, r4, r3
 8011186:	f06f 0317 	mvn.w	r3, #23
 801118a:	fb04 3303 	mla	r3, r4, r3, r3
 801118e:	eb03 0a02 	add.w	sl, r3, r2
 8011192:	9b02      	ldr	r3, [sp, #8]
 8011194:	9a06      	ldr	r2, [sp, #24]
 8011196:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011468 <__kernel_rem_pio2+0x318>
 801119a:	eb03 0802 	add.w	r8, r3, r2
 801119e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80111a0:	1aa7      	subs	r7, r4, r2
 80111a2:	ae22      	add	r6, sp, #136	; 0x88
 80111a4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80111a8:	2500      	movs	r5, #0
 80111aa:	4545      	cmp	r5, r8
 80111ac:	dd13      	ble.n	80111d6 <__kernel_rem_pio2+0x86>
 80111ae:	9b08      	ldr	r3, [sp, #32]
 80111b0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011468 <__kernel_rem_pio2+0x318>
 80111b4:	aa22      	add	r2, sp, #136	; 0x88
 80111b6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80111ba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80111be:	f04f 0800 	mov.w	r8, #0
 80111c2:	9b02      	ldr	r3, [sp, #8]
 80111c4:	4598      	cmp	r8, r3
 80111c6:	dc2f      	bgt.n	8011228 <__kernel_rem_pio2+0xd8>
 80111c8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80111cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80111d0:	462f      	mov	r7, r5
 80111d2:	2600      	movs	r6, #0
 80111d4:	e01b      	b.n	801120e <__kernel_rem_pio2+0xbe>
 80111d6:	42ef      	cmn	r7, r5
 80111d8:	d407      	bmi.n	80111ea <__kernel_rem_pio2+0x9a>
 80111da:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80111de:	f7ef f9a1 	bl	8000524 <__aeabi_i2d>
 80111e2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80111e6:	3501      	adds	r5, #1
 80111e8:	e7df      	b.n	80111aa <__kernel_rem_pio2+0x5a>
 80111ea:	ec51 0b18 	vmov	r0, r1, d8
 80111ee:	e7f8      	b.n	80111e2 <__kernel_rem_pio2+0x92>
 80111f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80111f4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80111f8:	f7ef f9fe 	bl	80005f8 <__aeabi_dmul>
 80111fc:	4602      	mov	r2, r0
 80111fe:	460b      	mov	r3, r1
 8011200:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011204:	f7ef f842 	bl	800028c <__adddf3>
 8011208:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801120c:	3601      	adds	r6, #1
 801120e:	9b06      	ldr	r3, [sp, #24]
 8011210:	429e      	cmp	r6, r3
 8011212:	f1a7 0708 	sub.w	r7, r7, #8
 8011216:	ddeb      	ble.n	80111f0 <__kernel_rem_pio2+0xa0>
 8011218:	ed9d 7b04 	vldr	d7, [sp, #16]
 801121c:	f108 0801 	add.w	r8, r8, #1
 8011220:	ecab 7b02 	vstmia	fp!, {d7}
 8011224:	3508      	adds	r5, #8
 8011226:	e7cc      	b.n	80111c2 <__kernel_rem_pio2+0x72>
 8011228:	9b02      	ldr	r3, [sp, #8]
 801122a:	aa0e      	add	r2, sp, #56	; 0x38
 801122c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011230:	930d      	str	r3, [sp, #52]	; 0x34
 8011232:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011234:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011238:	9c02      	ldr	r4, [sp, #8]
 801123a:	930c      	str	r3, [sp, #48]	; 0x30
 801123c:	00e3      	lsls	r3, r4, #3
 801123e:	930a      	str	r3, [sp, #40]	; 0x28
 8011240:	ab9a      	add	r3, sp, #616	; 0x268
 8011242:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011246:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801124a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801124e:	ab72      	add	r3, sp, #456	; 0x1c8
 8011250:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8011254:	46c3      	mov	fp, r8
 8011256:	46a1      	mov	r9, r4
 8011258:	f1b9 0f00 	cmp.w	r9, #0
 801125c:	f1a5 0508 	sub.w	r5, r5, #8
 8011260:	dc77      	bgt.n	8011352 <__kernel_rem_pio2+0x202>
 8011262:	ec47 6b10 	vmov	d0, r6, r7
 8011266:	4650      	mov	r0, sl
 8011268:	f000 ff42 	bl	80120f0 <scalbn>
 801126c:	ec57 6b10 	vmov	r6, r7, d0
 8011270:	2200      	movs	r2, #0
 8011272:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011276:	ee10 0a10 	vmov	r0, s0
 801127a:	4639      	mov	r1, r7
 801127c:	f7ef f9bc 	bl	80005f8 <__aeabi_dmul>
 8011280:	ec41 0b10 	vmov	d0, r0, r1
 8011284:	f000 feb4 	bl	8011ff0 <floor>
 8011288:	4b7c      	ldr	r3, [pc, #496]	; (801147c <__kernel_rem_pio2+0x32c>)
 801128a:	ec51 0b10 	vmov	r0, r1, d0
 801128e:	2200      	movs	r2, #0
 8011290:	f7ef f9b2 	bl	80005f8 <__aeabi_dmul>
 8011294:	4602      	mov	r2, r0
 8011296:	460b      	mov	r3, r1
 8011298:	4630      	mov	r0, r6
 801129a:	4639      	mov	r1, r7
 801129c:	f7ee fff4 	bl	8000288 <__aeabi_dsub>
 80112a0:	460f      	mov	r7, r1
 80112a2:	4606      	mov	r6, r0
 80112a4:	f7ef fc58 	bl	8000b58 <__aeabi_d2iz>
 80112a8:	9004      	str	r0, [sp, #16]
 80112aa:	f7ef f93b 	bl	8000524 <__aeabi_i2d>
 80112ae:	4602      	mov	r2, r0
 80112b0:	460b      	mov	r3, r1
 80112b2:	4630      	mov	r0, r6
 80112b4:	4639      	mov	r1, r7
 80112b6:	f7ee ffe7 	bl	8000288 <__aeabi_dsub>
 80112ba:	f1ba 0f00 	cmp.w	sl, #0
 80112be:	4606      	mov	r6, r0
 80112c0:	460f      	mov	r7, r1
 80112c2:	dd6d      	ble.n	80113a0 <__kernel_rem_pio2+0x250>
 80112c4:	1e62      	subs	r2, r4, #1
 80112c6:	ab0e      	add	r3, sp, #56	; 0x38
 80112c8:	9d04      	ldr	r5, [sp, #16]
 80112ca:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80112ce:	f1ca 0118 	rsb	r1, sl, #24
 80112d2:	fa40 f301 	asr.w	r3, r0, r1
 80112d6:	441d      	add	r5, r3
 80112d8:	408b      	lsls	r3, r1
 80112da:	1ac0      	subs	r0, r0, r3
 80112dc:	ab0e      	add	r3, sp, #56	; 0x38
 80112de:	9504      	str	r5, [sp, #16]
 80112e0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80112e4:	f1ca 0317 	rsb	r3, sl, #23
 80112e8:	fa40 fb03 	asr.w	fp, r0, r3
 80112ec:	f1bb 0f00 	cmp.w	fp, #0
 80112f0:	dd65      	ble.n	80113be <__kernel_rem_pio2+0x26e>
 80112f2:	9b04      	ldr	r3, [sp, #16]
 80112f4:	2200      	movs	r2, #0
 80112f6:	3301      	adds	r3, #1
 80112f8:	9304      	str	r3, [sp, #16]
 80112fa:	4615      	mov	r5, r2
 80112fc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011300:	4294      	cmp	r4, r2
 8011302:	f300 809c 	bgt.w	801143e <__kernel_rem_pio2+0x2ee>
 8011306:	f1ba 0f00 	cmp.w	sl, #0
 801130a:	dd07      	ble.n	801131c <__kernel_rem_pio2+0x1cc>
 801130c:	f1ba 0f01 	cmp.w	sl, #1
 8011310:	f000 80c0 	beq.w	8011494 <__kernel_rem_pio2+0x344>
 8011314:	f1ba 0f02 	cmp.w	sl, #2
 8011318:	f000 80c6 	beq.w	80114a8 <__kernel_rem_pio2+0x358>
 801131c:	f1bb 0f02 	cmp.w	fp, #2
 8011320:	d14d      	bne.n	80113be <__kernel_rem_pio2+0x26e>
 8011322:	4632      	mov	r2, r6
 8011324:	463b      	mov	r3, r7
 8011326:	4956      	ldr	r1, [pc, #344]	; (8011480 <__kernel_rem_pio2+0x330>)
 8011328:	2000      	movs	r0, #0
 801132a:	f7ee ffad 	bl	8000288 <__aeabi_dsub>
 801132e:	4606      	mov	r6, r0
 8011330:	460f      	mov	r7, r1
 8011332:	2d00      	cmp	r5, #0
 8011334:	d043      	beq.n	80113be <__kernel_rem_pio2+0x26e>
 8011336:	4650      	mov	r0, sl
 8011338:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011470 <__kernel_rem_pio2+0x320>
 801133c:	f000 fed8 	bl	80120f0 <scalbn>
 8011340:	4630      	mov	r0, r6
 8011342:	4639      	mov	r1, r7
 8011344:	ec53 2b10 	vmov	r2, r3, d0
 8011348:	f7ee ff9e 	bl	8000288 <__aeabi_dsub>
 801134c:	4606      	mov	r6, r0
 801134e:	460f      	mov	r7, r1
 8011350:	e035      	b.n	80113be <__kernel_rem_pio2+0x26e>
 8011352:	4b4c      	ldr	r3, [pc, #304]	; (8011484 <__kernel_rem_pio2+0x334>)
 8011354:	2200      	movs	r2, #0
 8011356:	4630      	mov	r0, r6
 8011358:	4639      	mov	r1, r7
 801135a:	f7ef f94d 	bl	80005f8 <__aeabi_dmul>
 801135e:	f7ef fbfb 	bl	8000b58 <__aeabi_d2iz>
 8011362:	f7ef f8df 	bl	8000524 <__aeabi_i2d>
 8011366:	4602      	mov	r2, r0
 8011368:	460b      	mov	r3, r1
 801136a:	ec43 2b18 	vmov	d8, r2, r3
 801136e:	4b46      	ldr	r3, [pc, #280]	; (8011488 <__kernel_rem_pio2+0x338>)
 8011370:	2200      	movs	r2, #0
 8011372:	f7ef f941 	bl	80005f8 <__aeabi_dmul>
 8011376:	4602      	mov	r2, r0
 8011378:	460b      	mov	r3, r1
 801137a:	4630      	mov	r0, r6
 801137c:	4639      	mov	r1, r7
 801137e:	f7ee ff83 	bl	8000288 <__aeabi_dsub>
 8011382:	f7ef fbe9 	bl	8000b58 <__aeabi_d2iz>
 8011386:	e9d5 2300 	ldrd	r2, r3, [r5]
 801138a:	f84b 0b04 	str.w	r0, [fp], #4
 801138e:	ec51 0b18 	vmov	r0, r1, d8
 8011392:	f7ee ff7b 	bl	800028c <__adddf3>
 8011396:	f109 39ff 	add.w	r9, r9, #4294967295
 801139a:	4606      	mov	r6, r0
 801139c:	460f      	mov	r7, r1
 801139e:	e75b      	b.n	8011258 <__kernel_rem_pio2+0x108>
 80113a0:	d106      	bne.n	80113b0 <__kernel_rem_pio2+0x260>
 80113a2:	1e63      	subs	r3, r4, #1
 80113a4:	aa0e      	add	r2, sp, #56	; 0x38
 80113a6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80113aa:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80113ae:	e79d      	b.n	80112ec <__kernel_rem_pio2+0x19c>
 80113b0:	4b36      	ldr	r3, [pc, #216]	; (801148c <__kernel_rem_pio2+0x33c>)
 80113b2:	2200      	movs	r2, #0
 80113b4:	f7ef fba6 	bl	8000b04 <__aeabi_dcmpge>
 80113b8:	2800      	cmp	r0, #0
 80113ba:	d13d      	bne.n	8011438 <__kernel_rem_pio2+0x2e8>
 80113bc:	4683      	mov	fp, r0
 80113be:	2200      	movs	r2, #0
 80113c0:	2300      	movs	r3, #0
 80113c2:	4630      	mov	r0, r6
 80113c4:	4639      	mov	r1, r7
 80113c6:	f7ef fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80113ca:	2800      	cmp	r0, #0
 80113cc:	f000 80c0 	beq.w	8011550 <__kernel_rem_pio2+0x400>
 80113d0:	1e65      	subs	r5, r4, #1
 80113d2:	462b      	mov	r3, r5
 80113d4:	2200      	movs	r2, #0
 80113d6:	9902      	ldr	r1, [sp, #8]
 80113d8:	428b      	cmp	r3, r1
 80113da:	da6c      	bge.n	80114b6 <__kernel_rem_pio2+0x366>
 80113dc:	2a00      	cmp	r2, #0
 80113de:	f000 8089 	beq.w	80114f4 <__kernel_rem_pio2+0x3a4>
 80113e2:	ab0e      	add	r3, sp, #56	; 0x38
 80113e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80113e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	f000 80ad 	beq.w	801154c <__kernel_rem_pio2+0x3fc>
 80113f2:	4650      	mov	r0, sl
 80113f4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011470 <__kernel_rem_pio2+0x320>
 80113f8:	f000 fe7a 	bl	80120f0 <scalbn>
 80113fc:	ab9a      	add	r3, sp, #616	; 0x268
 80113fe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011402:	ec57 6b10 	vmov	r6, r7, d0
 8011406:	00ec      	lsls	r4, r5, #3
 8011408:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801140c:	46aa      	mov	sl, r5
 801140e:	f1ba 0f00 	cmp.w	sl, #0
 8011412:	f280 80d6 	bge.w	80115c2 <__kernel_rem_pio2+0x472>
 8011416:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011468 <__kernel_rem_pio2+0x318>
 801141a:	462e      	mov	r6, r5
 801141c:	2e00      	cmp	r6, #0
 801141e:	f2c0 8104 	blt.w	801162a <__kernel_rem_pio2+0x4da>
 8011422:	ab72      	add	r3, sp, #456	; 0x1c8
 8011424:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011428:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011490 <__kernel_rem_pio2+0x340>
 801142c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011430:	f04f 0800 	mov.w	r8, #0
 8011434:	1baf      	subs	r7, r5, r6
 8011436:	e0ea      	b.n	801160e <__kernel_rem_pio2+0x4be>
 8011438:	f04f 0b02 	mov.w	fp, #2
 801143c:	e759      	b.n	80112f2 <__kernel_rem_pio2+0x1a2>
 801143e:	f8d8 3000 	ldr.w	r3, [r8]
 8011442:	b955      	cbnz	r5, 801145a <__kernel_rem_pio2+0x30a>
 8011444:	b123      	cbz	r3, 8011450 <__kernel_rem_pio2+0x300>
 8011446:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801144a:	f8c8 3000 	str.w	r3, [r8]
 801144e:	2301      	movs	r3, #1
 8011450:	3201      	adds	r2, #1
 8011452:	f108 0804 	add.w	r8, r8, #4
 8011456:	461d      	mov	r5, r3
 8011458:	e752      	b.n	8011300 <__kernel_rem_pio2+0x1b0>
 801145a:	1acb      	subs	r3, r1, r3
 801145c:	f8c8 3000 	str.w	r3, [r8]
 8011460:	462b      	mov	r3, r5
 8011462:	e7f5      	b.n	8011450 <__kernel_rem_pio2+0x300>
 8011464:	f3af 8000 	nop.w
	...
 8011474:	3ff00000 	.word	0x3ff00000
 8011478:	080176b8 	.word	0x080176b8
 801147c:	40200000 	.word	0x40200000
 8011480:	3ff00000 	.word	0x3ff00000
 8011484:	3e700000 	.word	0x3e700000
 8011488:	41700000 	.word	0x41700000
 801148c:	3fe00000 	.word	0x3fe00000
 8011490:	08017678 	.word	0x08017678
 8011494:	1e62      	subs	r2, r4, #1
 8011496:	ab0e      	add	r3, sp, #56	; 0x38
 8011498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801149c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80114a0:	a90e      	add	r1, sp, #56	; 0x38
 80114a2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80114a6:	e739      	b.n	801131c <__kernel_rem_pio2+0x1cc>
 80114a8:	1e62      	subs	r2, r4, #1
 80114aa:	ab0e      	add	r3, sp, #56	; 0x38
 80114ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80114b4:	e7f4      	b.n	80114a0 <__kernel_rem_pio2+0x350>
 80114b6:	a90e      	add	r1, sp, #56	; 0x38
 80114b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80114bc:	3b01      	subs	r3, #1
 80114be:	430a      	orrs	r2, r1
 80114c0:	e789      	b.n	80113d6 <__kernel_rem_pio2+0x286>
 80114c2:	3301      	adds	r3, #1
 80114c4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80114c8:	2900      	cmp	r1, #0
 80114ca:	d0fa      	beq.n	80114c2 <__kernel_rem_pio2+0x372>
 80114cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114ce:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80114d2:	446a      	add	r2, sp
 80114d4:	3a98      	subs	r2, #152	; 0x98
 80114d6:	920a      	str	r2, [sp, #40]	; 0x28
 80114d8:	9a08      	ldr	r2, [sp, #32]
 80114da:	18e3      	adds	r3, r4, r3
 80114dc:	18a5      	adds	r5, r4, r2
 80114de:	aa22      	add	r2, sp, #136	; 0x88
 80114e0:	f104 0801 	add.w	r8, r4, #1
 80114e4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80114e8:	9304      	str	r3, [sp, #16]
 80114ea:	9b04      	ldr	r3, [sp, #16]
 80114ec:	4543      	cmp	r3, r8
 80114ee:	da04      	bge.n	80114fa <__kernel_rem_pio2+0x3aa>
 80114f0:	461c      	mov	r4, r3
 80114f2:	e6a3      	b.n	801123c <__kernel_rem_pio2+0xec>
 80114f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80114f6:	2301      	movs	r3, #1
 80114f8:	e7e4      	b.n	80114c4 <__kernel_rem_pio2+0x374>
 80114fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80114fc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011500:	f7ef f810 	bl	8000524 <__aeabi_i2d>
 8011504:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011508:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801150a:	46ab      	mov	fp, r5
 801150c:	461c      	mov	r4, r3
 801150e:	f04f 0900 	mov.w	r9, #0
 8011512:	2600      	movs	r6, #0
 8011514:	2700      	movs	r7, #0
 8011516:	9b06      	ldr	r3, [sp, #24]
 8011518:	4599      	cmp	r9, r3
 801151a:	dd06      	ble.n	801152a <__kernel_rem_pio2+0x3da>
 801151c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801151e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011522:	f108 0801 	add.w	r8, r8, #1
 8011526:	930a      	str	r3, [sp, #40]	; 0x28
 8011528:	e7df      	b.n	80114ea <__kernel_rem_pio2+0x39a>
 801152a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801152e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011532:	f7ef f861 	bl	80005f8 <__aeabi_dmul>
 8011536:	4602      	mov	r2, r0
 8011538:	460b      	mov	r3, r1
 801153a:	4630      	mov	r0, r6
 801153c:	4639      	mov	r1, r7
 801153e:	f7ee fea5 	bl	800028c <__adddf3>
 8011542:	f109 0901 	add.w	r9, r9, #1
 8011546:	4606      	mov	r6, r0
 8011548:	460f      	mov	r7, r1
 801154a:	e7e4      	b.n	8011516 <__kernel_rem_pio2+0x3c6>
 801154c:	3d01      	subs	r5, #1
 801154e:	e748      	b.n	80113e2 <__kernel_rem_pio2+0x292>
 8011550:	ec47 6b10 	vmov	d0, r6, r7
 8011554:	f1ca 0000 	rsb	r0, sl, #0
 8011558:	f000 fdca 	bl	80120f0 <scalbn>
 801155c:	ec57 6b10 	vmov	r6, r7, d0
 8011560:	4ba0      	ldr	r3, [pc, #640]	; (80117e4 <__kernel_rem_pio2+0x694>)
 8011562:	ee10 0a10 	vmov	r0, s0
 8011566:	2200      	movs	r2, #0
 8011568:	4639      	mov	r1, r7
 801156a:	f7ef facb 	bl	8000b04 <__aeabi_dcmpge>
 801156e:	b1f8      	cbz	r0, 80115b0 <__kernel_rem_pio2+0x460>
 8011570:	4b9d      	ldr	r3, [pc, #628]	; (80117e8 <__kernel_rem_pio2+0x698>)
 8011572:	2200      	movs	r2, #0
 8011574:	4630      	mov	r0, r6
 8011576:	4639      	mov	r1, r7
 8011578:	f7ef f83e 	bl	80005f8 <__aeabi_dmul>
 801157c:	f7ef faec 	bl	8000b58 <__aeabi_d2iz>
 8011580:	4680      	mov	r8, r0
 8011582:	f7ee ffcf 	bl	8000524 <__aeabi_i2d>
 8011586:	4b97      	ldr	r3, [pc, #604]	; (80117e4 <__kernel_rem_pio2+0x694>)
 8011588:	2200      	movs	r2, #0
 801158a:	f7ef f835 	bl	80005f8 <__aeabi_dmul>
 801158e:	460b      	mov	r3, r1
 8011590:	4602      	mov	r2, r0
 8011592:	4639      	mov	r1, r7
 8011594:	4630      	mov	r0, r6
 8011596:	f7ee fe77 	bl	8000288 <__aeabi_dsub>
 801159a:	f7ef fadd 	bl	8000b58 <__aeabi_d2iz>
 801159e:	1c65      	adds	r5, r4, #1
 80115a0:	ab0e      	add	r3, sp, #56	; 0x38
 80115a2:	f10a 0a18 	add.w	sl, sl, #24
 80115a6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80115aa:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80115ae:	e720      	b.n	80113f2 <__kernel_rem_pio2+0x2a2>
 80115b0:	4630      	mov	r0, r6
 80115b2:	4639      	mov	r1, r7
 80115b4:	f7ef fad0 	bl	8000b58 <__aeabi_d2iz>
 80115b8:	ab0e      	add	r3, sp, #56	; 0x38
 80115ba:	4625      	mov	r5, r4
 80115bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80115c0:	e717      	b.n	80113f2 <__kernel_rem_pio2+0x2a2>
 80115c2:	ab0e      	add	r3, sp, #56	; 0x38
 80115c4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80115c8:	f7ee ffac 	bl	8000524 <__aeabi_i2d>
 80115cc:	4632      	mov	r2, r6
 80115ce:	463b      	mov	r3, r7
 80115d0:	f7ef f812 	bl	80005f8 <__aeabi_dmul>
 80115d4:	4b84      	ldr	r3, [pc, #528]	; (80117e8 <__kernel_rem_pio2+0x698>)
 80115d6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80115da:	2200      	movs	r2, #0
 80115dc:	4630      	mov	r0, r6
 80115de:	4639      	mov	r1, r7
 80115e0:	f7ef f80a 	bl	80005f8 <__aeabi_dmul>
 80115e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80115e8:	4606      	mov	r6, r0
 80115ea:	460f      	mov	r7, r1
 80115ec:	e70f      	b.n	801140e <__kernel_rem_pio2+0x2be>
 80115ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80115f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80115f6:	f7ee ffff 	bl	80005f8 <__aeabi_dmul>
 80115fa:	4602      	mov	r2, r0
 80115fc:	460b      	mov	r3, r1
 80115fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011602:	f7ee fe43 	bl	800028c <__adddf3>
 8011606:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801160a:	f108 0801 	add.w	r8, r8, #1
 801160e:	9b02      	ldr	r3, [sp, #8]
 8011610:	4598      	cmp	r8, r3
 8011612:	dc01      	bgt.n	8011618 <__kernel_rem_pio2+0x4c8>
 8011614:	45b8      	cmp	r8, r7
 8011616:	ddea      	ble.n	80115ee <__kernel_rem_pio2+0x49e>
 8011618:	ed9d 7b06 	vldr	d7, [sp, #24]
 801161c:	ab4a      	add	r3, sp, #296	; 0x128
 801161e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011622:	ed87 7b00 	vstr	d7, [r7]
 8011626:	3e01      	subs	r6, #1
 8011628:	e6f8      	b.n	801141c <__kernel_rem_pio2+0x2cc>
 801162a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801162c:	2b02      	cmp	r3, #2
 801162e:	dc0b      	bgt.n	8011648 <__kernel_rem_pio2+0x4f8>
 8011630:	2b00      	cmp	r3, #0
 8011632:	dc35      	bgt.n	80116a0 <__kernel_rem_pio2+0x550>
 8011634:	d059      	beq.n	80116ea <__kernel_rem_pio2+0x59a>
 8011636:	9b04      	ldr	r3, [sp, #16]
 8011638:	f003 0007 	and.w	r0, r3, #7
 801163c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011640:	ecbd 8b02 	vpop	{d8}
 8011644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011648:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801164a:	2b03      	cmp	r3, #3
 801164c:	d1f3      	bne.n	8011636 <__kernel_rem_pio2+0x4e6>
 801164e:	ab4a      	add	r3, sp, #296	; 0x128
 8011650:	4423      	add	r3, r4
 8011652:	9306      	str	r3, [sp, #24]
 8011654:	461c      	mov	r4, r3
 8011656:	469a      	mov	sl, r3
 8011658:	9502      	str	r5, [sp, #8]
 801165a:	9b02      	ldr	r3, [sp, #8]
 801165c:	2b00      	cmp	r3, #0
 801165e:	f1aa 0a08 	sub.w	sl, sl, #8
 8011662:	dc6b      	bgt.n	801173c <__kernel_rem_pio2+0x5ec>
 8011664:	46aa      	mov	sl, r5
 8011666:	f1ba 0f01 	cmp.w	sl, #1
 801166a:	f1a4 0408 	sub.w	r4, r4, #8
 801166e:	f300 8085 	bgt.w	801177c <__kernel_rem_pio2+0x62c>
 8011672:	9c06      	ldr	r4, [sp, #24]
 8011674:	2000      	movs	r0, #0
 8011676:	3408      	adds	r4, #8
 8011678:	2100      	movs	r1, #0
 801167a:	2d01      	cmp	r5, #1
 801167c:	f300 809d 	bgt.w	80117ba <__kernel_rem_pio2+0x66a>
 8011680:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011684:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011688:	f1bb 0f00 	cmp.w	fp, #0
 801168c:	f040 809b 	bne.w	80117c6 <__kernel_rem_pio2+0x676>
 8011690:	9b01      	ldr	r3, [sp, #4]
 8011692:	e9c3 5600 	strd	r5, r6, [r3]
 8011696:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801169a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801169e:	e7ca      	b.n	8011636 <__kernel_rem_pio2+0x4e6>
 80116a0:	3408      	adds	r4, #8
 80116a2:	ab4a      	add	r3, sp, #296	; 0x128
 80116a4:	441c      	add	r4, r3
 80116a6:	462e      	mov	r6, r5
 80116a8:	2000      	movs	r0, #0
 80116aa:	2100      	movs	r1, #0
 80116ac:	2e00      	cmp	r6, #0
 80116ae:	da36      	bge.n	801171e <__kernel_rem_pio2+0x5ce>
 80116b0:	f1bb 0f00 	cmp.w	fp, #0
 80116b4:	d039      	beq.n	801172a <__kernel_rem_pio2+0x5da>
 80116b6:	4602      	mov	r2, r0
 80116b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80116bc:	9c01      	ldr	r4, [sp, #4]
 80116be:	e9c4 2300 	strd	r2, r3, [r4]
 80116c2:	4602      	mov	r2, r0
 80116c4:	460b      	mov	r3, r1
 80116c6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80116ca:	f7ee fddd 	bl	8000288 <__aeabi_dsub>
 80116ce:	ae4c      	add	r6, sp, #304	; 0x130
 80116d0:	2401      	movs	r4, #1
 80116d2:	42a5      	cmp	r5, r4
 80116d4:	da2c      	bge.n	8011730 <__kernel_rem_pio2+0x5e0>
 80116d6:	f1bb 0f00 	cmp.w	fp, #0
 80116da:	d002      	beq.n	80116e2 <__kernel_rem_pio2+0x592>
 80116dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80116e0:	4619      	mov	r1, r3
 80116e2:	9b01      	ldr	r3, [sp, #4]
 80116e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80116e8:	e7a5      	b.n	8011636 <__kernel_rem_pio2+0x4e6>
 80116ea:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80116ee:	eb0d 0403 	add.w	r4, sp, r3
 80116f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80116f6:	2000      	movs	r0, #0
 80116f8:	2100      	movs	r1, #0
 80116fa:	2d00      	cmp	r5, #0
 80116fc:	da09      	bge.n	8011712 <__kernel_rem_pio2+0x5c2>
 80116fe:	f1bb 0f00 	cmp.w	fp, #0
 8011702:	d002      	beq.n	801170a <__kernel_rem_pio2+0x5ba>
 8011704:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011708:	4619      	mov	r1, r3
 801170a:	9b01      	ldr	r3, [sp, #4]
 801170c:	e9c3 0100 	strd	r0, r1, [r3]
 8011710:	e791      	b.n	8011636 <__kernel_rem_pio2+0x4e6>
 8011712:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011716:	f7ee fdb9 	bl	800028c <__adddf3>
 801171a:	3d01      	subs	r5, #1
 801171c:	e7ed      	b.n	80116fa <__kernel_rem_pio2+0x5aa>
 801171e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011722:	f7ee fdb3 	bl	800028c <__adddf3>
 8011726:	3e01      	subs	r6, #1
 8011728:	e7c0      	b.n	80116ac <__kernel_rem_pio2+0x55c>
 801172a:	4602      	mov	r2, r0
 801172c:	460b      	mov	r3, r1
 801172e:	e7c5      	b.n	80116bc <__kernel_rem_pio2+0x56c>
 8011730:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011734:	f7ee fdaa 	bl	800028c <__adddf3>
 8011738:	3401      	adds	r4, #1
 801173a:	e7ca      	b.n	80116d2 <__kernel_rem_pio2+0x582>
 801173c:	e9da 8900 	ldrd	r8, r9, [sl]
 8011740:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011744:	9b02      	ldr	r3, [sp, #8]
 8011746:	3b01      	subs	r3, #1
 8011748:	9302      	str	r3, [sp, #8]
 801174a:	4632      	mov	r2, r6
 801174c:	463b      	mov	r3, r7
 801174e:	4640      	mov	r0, r8
 8011750:	4649      	mov	r1, r9
 8011752:	f7ee fd9b 	bl	800028c <__adddf3>
 8011756:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801175a:	4602      	mov	r2, r0
 801175c:	460b      	mov	r3, r1
 801175e:	4640      	mov	r0, r8
 8011760:	4649      	mov	r1, r9
 8011762:	f7ee fd91 	bl	8000288 <__aeabi_dsub>
 8011766:	4632      	mov	r2, r6
 8011768:	463b      	mov	r3, r7
 801176a:	f7ee fd8f 	bl	800028c <__adddf3>
 801176e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011772:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011776:	ed8a 7b00 	vstr	d7, [sl]
 801177a:	e76e      	b.n	801165a <__kernel_rem_pio2+0x50a>
 801177c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011780:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011784:	4640      	mov	r0, r8
 8011786:	4632      	mov	r2, r6
 8011788:	463b      	mov	r3, r7
 801178a:	4649      	mov	r1, r9
 801178c:	f7ee fd7e 	bl	800028c <__adddf3>
 8011790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011794:	4602      	mov	r2, r0
 8011796:	460b      	mov	r3, r1
 8011798:	4640      	mov	r0, r8
 801179a:	4649      	mov	r1, r9
 801179c:	f7ee fd74 	bl	8000288 <__aeabi_dsub>
 80117a0:	4632      	mov	r2, r6
 80117a2:	463b      	mov	r3, r7
 80117a4:	f7ee fd72 	bl	800028c <__adddf3>
 80117a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80117ac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80117b0:	ed84 7b00 	vstr	d7, [r4]
 80117b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80117b8:	e755      	b.n	8011666 <__kernel_rem_pio2+0x516>
 80117ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80117be:	f7ee fd65 	bl	800028c <__adddf3>
 80117c2:	3d01      	subs	r5, #1
 80117c4:	e759      	b.n	801167a <__kernel_rem_pio2+0x52a>
 80117c6:	9b01      	ldr	r3, [sp, #4]
 80117c8:	9a01      	ldr	r2, [sp, #4]
 80117ca:	601d      	str	r5, [r3, #0]
 80117cc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80117d0:	605c      	str	r4, [r3, #4]
 80117d2:	609f      	str	r7, [r3, #8]
 80117d4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80117d8:	60d3      	str	r3, [r2, #12]
 80117da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80117de:	6110      	str	r0, [r2, #16]
 80117e0:	6153      	str	r3, [r2, #20]
 80117e2:	e728      	b.n	8011636 <__kernel_rem_pio2+0x4e6>
 80117e4:	41700000 	.word	0x41700000
 80117e8:	3e700000 	.word	0x3e700000
 80117ec:	00000000 	.word	0x00000000

080117f0 <__kernel_sin>:
 80117f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117f4:	ed2d 8b04 	vpush	{d8-d9}
 80117f8:	eeb0 8a41 	vmov.f32	s16, s2
 80117fc:	eef0 8a61 	vmov.f32	s17, s3
 8011800:	ec55 4b10 	vmov	r4, r5, d0
 8011804:	b083      	sub	sp, #12
 8011806:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801180a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801180e:	9001      	str	r0, [sp, #4]
 8011810:	da06      	bge.n	8011820 <__kernel_sin+0x30>
 8011812:	ee10 0a10 	vmov	r0, s0
 8011816:	4629      	mov	r1, r5
 8011818:	f7ef f99e 	bl	8000b58 <__aeabi_d2iz>
 801181c:	2800      	cmp	r0, #0
 801181e:	d051      	beq.n	80118c4 <__kernel_sin+0xd4>
 8011820:	4622      	mov	r2, r4
 8011822:	462b      	mov	r3, r5
 8011824:	4620      	mov	r0, r4
 8011826:	4629      	mov	r1, r5
 8011828:	f7ee fee6 	bl	80005f8 <__aeabi_dmul>
 801182c:	4682      	mov	sl, r0
 801182e:	468b      	mov	fp, r1
 8011830:	4602      	mov	r2, r0
 8011832:	460b      	mov	r3, r1
 8011834:	4620      	mov	r0, r4
 8011836:	4629      	mov	r1, r5
 8011838:	f7ee fede 	bl	80005f8 <__aeabi_dmul>
 801183c:	a341      	add	r3, pc, #260	; (adr r3, 8011944 <__kernel_sin+0x154>)
 801183e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011842:	4680      	mov	r8, r0
 8011844:	4689      	mov	r9, r1
 8011846:	4650      	mov	r0, sl
 8011848:	4659      	mov	r1, fp
 801184a:	f7ee fed5 	bl	80005f8 <__aeabi_dmul>
 801184e:	a33f      	add	r3, pc, #252	; (adr r3, 801194c <__kernel_sin+0x15c>)
 8011850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011854:	f7ee fd18 	bl	8000288 <__aeabi_dsub>
 8011858:	4652      	mov	r2, sl
 801185a:	465b      	mov	r3, fp
 801185c:	f7ee fecc 	bl	80005f8 <__aeabi_dmul>
 8011860:	a33c      	add	r3, pc, #240	; (adr r3, 8011954 <__kernel_sin+0x164>)
 8011862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011866:	f7ee fd11 	bl	800028c <__adddf3>
 801186a:	4652      	mov	r2, sl
 801186c:	465b      	mov	r3, fp
 801186e:	f7ee fec3 	bl	80005f8 <__aeabi_dmul>
 8011872:	a33a      	add	r3, pc, #232	; (adr r3, 801195c <__kernel_sin+0x16c>)
 8011874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011878:	f7ee fd06 	bl	8000288 <__aeabi_dsub>
 801187c:	4652      	mov	r2, sl
 801187e:	465b      	mov	r3, fp
 8011880:	f7ee feba 	bl	80005f8 <__aeabi_dmul>
 8011884:	a337      	add	r3, pc, #220	; (adr r3, 8011964 <__kernel_sin+0x174>)
 8011886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801188a:	f7ee fcff 	bl	800028c <__adddf3>
 801188e:	9b01      	ldr	r3, [sp, #4]
 8011890:	4606      	mov	r6, r0
 8011892:	460f      	mov	r7, r1
 8011894:	b9eb      	cbnz	r3, 80118d2 <__kernel_sin+0xe2>
 8011896:	4602      	mov	r2, r0
 8011898:	460b      	mov	r3, r1
 801189a:	4650      	mov	r0, sl
 801189c:	4659      	mov	r1, fp
 801189e:	f7ee feab 	bl	80005f8 <__aeabi_dmul>
 80118a2:	a325      	add	r3, pc, #148	; (adr r3, 8011938 <__kernel_sin+0x148>)
 80118a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a8:	f7ee fcee 	bl	8000288 <__aeabi_dsub>
 80118ac:	4642      	mov	r2, r8
 80118ae:	464b      	mov	r3, r9
 80118b0:	f7ee fea2 	bl	80005f8 <__aeabi_dmul>
 80118b4:	4602      	mov	r2, r0
 80118b6:	460b      	mov	r3, r1
 80118b8:	4620      	mov	r0, r4
 80118ba:	4629      	mov	r1, r5
 80118bc:	f7ee fce6 	bl	800028c <__adddf3>
 80118c0:	4604      	mov	r4, r0
 80118c2:	460d      	mov	r5, r1
 80118c4:	ec45 4b10 	vmov	d0, r4, r5
 80118c8:	b003      	add	sp, #12
 80118ca:	ecbd 8b04 	vpop	{d8-d9}
 80118ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d2:	4b1b      	ldr	r3, [pc, #108]	; (8011940 <__kernel_sin+0x150>)
 80118d4:	ec51 0b18 	vmov	r0, r1, d8
 80118d8:	2200      	movs	r2, #0
 80118da:	f7ee fe8d 	bl	80005f8 <__aeabi_dmul>
 80118de:	4632      	mov	r2, r6
 80118e0:	ec41 0b19 	vmov	d9, r0, r1
 80118e4:	463b      	mov	r3, r7
 80118e6:	4640      	mov	r0, r8
 80118e8:	4649      	mov	r1, r9
 80118ea:	f7ee fe85 	bl	80005f8 <__aeabi_dmul>
 80118ee:	4602      	mov	r2, r0
 80118f0:	460b      	mov	r3, r1
 80118f2:	ec51 0b19 	vmov	r0, r1, d9
 80118f6:	f7ee fcc7 	bl	8000288 <__aeabi_dsub>
 80118fa:	4652      	mov	r2, sl
 80118fc:	465b      	mov	r3, fp
 80118fe:	f7ee fe7b 	bl	80005f8 <__aeabi_dmul>
 8011902:	ec53 2b18 	vmov	r2, r3, d8
 8011906:	f7ee fcbf 	bl	8000288 <__aeabi_dsub>
 801190a:	a30b      	add	r3, pc, #44	; (adr r3, 8011938 <__kernel_sin+0x148>)
 801190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011910:	4606      	mov	r6, r0
 8011912:	460f      	mov	r7, r1
 8011914:	4640      	mov	r0, r8
 8011916:	4649      	mov	r1, r9
 8011918:	f7ee fe6e 	bl	80005f8 <__aeabi_dmul>
 801191c:	4602      	mov	r2, r0
 801191e:	460b      	mov	r3, r1
 8011920:	4630      	mov	r0, r6
 8011922:	4639      	mov	r1, r7
 8011924:	f7ee fcb2 	bl	800028c <__adddf3>
 8011928:	4602      	mov	r2, r0
 801192a:	460b      	mov	r3, r1
 801192c:	4620      	mov	r0, r4
 801192e:	4629      	mov	r1, r5
 8011930:	f7ee fcaa 	bl	8000288 <__aeabi_dsub>
 8011934:	e7c4      	b.n	80118c0 <__kernel_sin+0xd0>
 8011936:	bf00      	nop
 8011938:	55555549 	.word	0x55555549
 801193c:	3fc55555 	.word	0x3fc55555
 8011940:	3fe00000 	.word	0x3fe00000
 8011944:	5acfd57c 	.word	0x5acfd57c
 8011948:	3de5d93a 	.word	0x3de5d93a
 801194c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011950:	3e5ae5e6 	.word	0x3e5ae5e6
 8011954:	57b1fe7d 	.word	0x57b1fe7d
 8011958:	3ec71de3 	.word	0x3ec71de3
 801195c:	19c161d5 	.word	0x19c161d5
 8011960:	3f2a01a0 	.word	0x3f2a01a0
 8011964:	1110f8a6 	.word	0x1110f8a6
 8011968:	3f811111 	.word	0x3f811111

0801196c <__kernel_cosf>:
 801196c:	ee10 3a10 	vmov	r3, s0
 8011970:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011974:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8011978:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801197c:	da05      	bge.n	801198a <__kernel_cosf+0x1e>
 801197e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011982:	ee17 2a90 	vmov	r2, s15
 8011986:	2a00      	cmp	r2, #0
 8011988:	d03d      	beq.n	8011a06 <__kernel_cosf+0x9a>
 801198a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801198e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8011a0c <__kernel_cosf+0xa0>
 8011992:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8011a10 <__kernel_cosf+0xa4>
 8011996:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8011a14 <__kernel_cosf+0xa8>
 801199a:	4a1f      	ldr	r2, [pc, #124]	; (8011a18 <__kernel_cosf+0xac>)
 801199c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80119a0:	4293      	cmp	r3, r2
 80119a2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8011a1c <__kernel_cosf+0xb0>
 80119a6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80119aa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8011a20 <__kernel_cosf+0xb4>
 80119ae:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80119b2:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8011a24 <__kernel_cosf+0xb8>
 80119b6:	eee7 7a25 	vfma.f32	s15, s14, s11
 80119ba:	eeb0 7a66 	vmov.f32	s14, s13
 80119be:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80119c2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80119c6:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80119ca:	ee67 6a25 	vmul.f32	s13, s14, s11
 80119ce:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80119d2:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80119d6:	dc04      	bgt.n	80119e2 <__kernel_cosf+0x76>
 80119d8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80119dc:	ee36 0a47 	vsub.f32	s0, s12, s14
 80119e0:	4770      	bx	lr
 80119e2:	4a11      	ldr	r2, [pc, #68]	; (8011a28 <__kernel_cosf+0xbc>)
 80119e4:	4293      	cmp	r3, r2
 80119e6:	bfda      	itte	le
 80119e8:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80119ec:	ee06 3a90 	vmovle	s13, r3
 80119f0:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80119f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80119f8:	ee36 0a66 	vsub.f32	s0, s12, s13
 80119fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011a00:	ee30 0a67 	vsub.f32	s0, s0, s15
 8011a04:	4770      	bx	lr
 8011a06:	eeb0 0a46 	vmov.f32	s0, s12
 8011a0a:	4770      	bx	lr
 8011a0c:	ad47d74e 	.word	0xad47d74e
 8011a10:	310f74f6 	.word	0x310f74f6
 8011a14:	3d2aaaab 	.word	0x3d2aaaab
 8011a18:	3e999999 	.word	0x3e999999
 8011a1c:	b493f27c 	.word	0xb493f27c
 8011a20:	37d00d01 	.word	0x37d00d01
 8011a24:	bab60b61 	.word	0xbab60b61
 8011a28:	3f480000 	.word	0x3f480000

08011a2c <__kernel_rem_pio2f>:
 8011a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a30:	ed2d 8b04 	vpush	{d8-d9}
 8011a34:	b0d9      	sub	sp, #356	; 0x164
 8011a36:	4688      	mov	r8, r1
 8011a38:	9002      	str	r0, [sp, #8]
 8011a3a:	49bb      	ldr	r1, [pc, #748]	; (8011d28 <__kernel_rem_pio2f+0x2fc>)
 8011a3c:	9866      	ldr	r0, [sp, #408]	; 0x198
 8011a3e:	9301      	str	r3, [sp, #4]
 8011a40:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8011a44:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8011a48:	1e59      	subs	r1, r3, #1
 8011a4a:	1d13      	adds	r3, r2, #4
 8011a4c:	db27      	blt.n	8011a9e <__kernel_rem_pio2f+0x72>
 8011a4e:	f1b2 0b03 	subs.w	fp, r2, #3
 8011a52:	bf48      	it	mi
 8011a54:	f102 0b04 	addmi.w	fp, r2, #4
 8011a58:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8011a5c:	1c45      	adds	r5, r0, #1
 8011a5e:	00ec      	lsls	r4, r5, #3
 8011a60:	1a47      	subs	r7, r0, r1
 8011a62:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8011d38 <__kernel_rem_pio2f+0x30c>
 8011a66:	9403      	str	r4, [sp, #12]
 8011a68:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8011a6c:	eb0a 0c01 	add.w	ip, sl, r1
 8011a70:	ae1c      	add	r6, sp, #112	; 0x70
 8011a72:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8011a76:	2400      	movs	r4, #0
 8011a78:	4564      	cmp	r4, ip
 8011a7a:	dd12      	ble.n	8011aa2 <__kernel_rem_pio2f+0x76>
 8011a7c:	9b01      	ldr	r3, [sp, #4]
 8011a7e:	ac1c      	add	r4, sp, #112	; 0x70
 8011a80:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8011a84:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8011a88:	f04f 0c00 	mov.w	ip, #0
 8011a8c:	45d4      	cmp	ip, sl
 8011a8e:	dc27      	bgt.n	8011ae0 <__kernel_rem_pio2f+0xb4>
 8011a90:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8011a94:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8011d38 <__kernel_rem_pio2f+0x30c>
 8011a98:	4627      	mov	r7, r4
 8011a9a:	2600      	movs	r6, #0
 8011a9c:	e016      	b.n	8011acc <__kernel_rem_pio2f+0xa0>
 8011a9e:	2000      	movs	r0, #0
 8011aa0:	e7dc      	b.n	8011a5c <__kernel_rem_pio2f+0x30>
 8011aa2:	42e7      	cmn	r7, r4
 8011aa4:	bf5d      	ittte	pl
 8011aa6:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8011aaa:	ee07 3a90 	vmovpl	s15, r3
 8011aae:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8011ab2:	eef0 7a47 	vmovmi.f32	s15, s14
 8011ab6:	ece6 7a01 	vstmia	r6!, {s15}
 8011aba:	3401      	adds	r4, #1
 8011abc:	e7dc      	b.n	8011a78 <__kernel_rem_pio2f+0x4c>
 8011abe:	ecf9 6a01 	vldmia	r9!, {s13}
 8011ac2:	ed97 7a00 	vldr	s14, [r7]
 8011ac6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011aca:	3601      	adds	r6, #1
 8011acc:	428e      	cmp	r6, r1
 8011ace:	f1a7 0704 	sub.w	r7, r7, #4
 8011ad2:	ddf4      	ble.n	8011abe <__kernel_rem_pio2f+0x92>
 8011ad4:	eceb 7a01 	vstmia	fp!, {s15}
 8011ad8:	f10c 0c01 	add.w	ip, ip, #1
 8011adc:	3404      	adds	r4, #4
 8011ade:	e7d5      	b.n	8011a8c <__kernel_rem_pio2f+0x60>
 8011ae0:	ab08      	add	r3, sp, #32
 8011ae2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8011ae6:	eddf 8a93 	vldr	s17, [pc, #588]	; 8011d34 <__kernel_rem_pio2f+0x308>
 8011aea:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8011d30 <__kernel_rem_pio2f+0x304>
 8011aee:	9304      	str	r3, [sp, #16]
 8011af0:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8011af4:	4656      	mov	r6, sl
 8011af6:	00b3      	lsls	r3, r6, #2
 8011af8:	9305      	str	r3, [sp, #20]
 8011afa:	ab58      	add	r3, sp, #352	; 0x160
 8011afc:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8011b00:	ac08      	add	r4, sp, #32
 8011b02:	ab44      	add	r3, sp, #272	; 0x110
 8011b04:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8011b08:	46a4      	mov	ip, r4
 8011b0a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8011b0e:	4637      	mov	r7, r6
 8011b10:	2f00      	cmp	r7, #0
 8011b12:	f1a0 0004 	sub.w	r0, r0, #4
 8011b16:	dc4f      	bgt.n	8011bb8 <__kernel_rem_pio2f+0x18c>
 8011b18:	4628      	mov	r0, r5
 8011b1a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8011b1e:	f000 fbc3 	bl	80122a8 <scalbnf>
 8011b22:	eeb0 8a40 	vmov.f32	s16, s0
 8011b26:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8011b2a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8011b2e:	f000 fb73 	bl	8012218 <floorf>
 8011b32:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8011b36:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011b3a:	2d00      	cmp	r5, #0
 8011b3c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8011b40:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8011b44:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8011b48:	ee17 9a90 	vmov	r9, s15
 8011b4c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011b50:	dd44      	ble.n	8011bdc <__kernel_rem_pio2f+0x1b0>
 8011b52:	f106 3cff 	add.w	ip, r6, #4294967295
 8011b56:	ab08      	add	r3, sp, #32
 8011b58:	f1c5 0e08 	rsb	lr, r5, #8
 8011b5c:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8011b60:	fa47 f00e 	asr.w	r0, r7, lr
 8011b64:	4481      	add	r9, r0
 8011b66:	fa00 f00e 	lsl.w	r0, r0, lr
 8011b6a:	1a3f      	subs	r7, r7, r0
 8011b6c:	f1c5 0007 	rsb	r0, r5, #7
 8011b70:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8011b74:	4107      	asrs	r7, r0
 8011b76:	2f00      	cmp	r7, #0
 8011b78:	dd3f      	ble.n	8011bfa <__kernel_rem_pio2f+0x1ce>
 8011b7a:	f04f 0e00 	mov.w	lr, #0
 8011b7e:	f109 0901 	add.w	r9, r9, #1
 8011b82:	4673      	mov	r3, lr
 8011b84:	4576      	cmp	r6, lr
 8011b86:	dc6b      	bgt.n	8011c60 <__kernel_rem_pio2f+0x234>
 8011b88:	2d00      	cmp	r5, #0
 8011b8a:	dd04      	ble.n	8011b96 <__kernel_rem_pio2f+0x16a>
 8011b8c:	2d01      	cmp	r5, #1
 8011b8e:	d078      	beq.n	8011c82 <__kernel_rem_pio2f+0x256>
 8011b90:	2d02      	cmp	r5, #2
 8011b92:	f000 8081 	beq.w	8011c98 <__kernel_rem_pio2f+0x26c>
 8011b96:	2f02      	cmp	r7, #2
 8011b98:	d12f      	bne.n	8011bfa <__kernel_rem_pio2f+0x1ce>
 8011b9a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011b9e:	ee30 8a48 	vsub.f32	s16, s0, s16
 8011ba2:	b353      	cbz	r3, 8011bfa <__kernel_rem_pio2f+0x1ce>
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8011baa:	f000 fb7d 	bl	80122a8 <scalbnf>
 8011bae:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8011bb2:	ee38 8a40 	vsub.f32	s16, s16, s0
 8011bb6:	e020      	b.n	8011bfa <__kernel_rem_pio2f+0x1ce>
 8011bb8:	ee60 7a28 	vmul.f32	s15, s0, s17
 8011bbc:	3f01      	subs	r7, #1
 8011bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011bc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011bc6:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8011bca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011bce:	ecac 0a01 	vstmia	ip!, {s0}
 8011bd2:	ed90 0a00 	vldr	s0, [r0]
 8011bd6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8011bda:	e799      	b.n	8011b10 <__kernel_rem_pio2f+0xe4>
 8011bdc:	d105      	bne.n	8011bea <__kernel_rem_pio2f+0x1be>
 8011bde:	1e70      	subs	r0, r6, #1
 8011be0:	ab08      	add	r3, sp, #32
 8011be2:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8011be6:	11ff      	asrs	r7, r7, #7
 8011be8:	e7c5      	b.n	8011b76 <__kernel_rem_pio2f+0x14a>
 8011bea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011bee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8011bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bf6:	da31      	bge.n	8011c5c <__kernel_rem_pio2f+0x230>
 8011bf8:	2700      	movs	r7, #0
 8011bfa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c02:	f040 809b 	bne.w	8011d3c <__kernel_rem_pio2f+0x310>
 8011c06:	1e74      	subs	r4, r6, #1
 8011c08:	46a4      	mov	ip, r4
 8011c0a:	2000      	movs	r0, #0
 8011c0c:	45d4      	cmp	ip, sl
 8011c0e:	da4a      	bge.n	8011ca6 <__kernel_rem_pio2f+0x27a>
 8011c10:	2800      	cmp	r0, #0
 8011c12:	d07a      	beq.n	8011d0a <__kernel_rem_pio2f+0x2de>
 8011c14:	ab08      	add	r3, sp, #32
 8011c16:	3d08      	subs	r5, #8
 8011c18:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	f000 8081 	beq.w	8011d24 <__kernel_rem_pio2f+0x2f8>
 8011c22:	4628      	mov	r0, r5
 8011c24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8011c28:	00a5      	lsls	r5, r4, #2
 8011c2a:	f000 fb3d 	bl	80122a8 <scalbnf>
 8011c2e:	aa44      	add	r2, sp, #272	; 0x110
 8011c30:	1d2b      	adds	r3, r5, #4
 8011c32:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8011d34 <__kernel_rem_pio2f+0x308>
 8011c36:	18d1      	adds	r1, r2, r3
 8011c38:	4622      	mov	r2, r4
 8011c3a:	2a00      	cmp	r2, #0
 8011c3c:	f280 80ae 	bge.w	8011d9c <__kernel_rem_pio2f+0x370>
 8011c40:	4622      	mov	r2, r4
 8011c42:	2a00      	cmp	r2, #0
 8011c44:	f2c0 80cc 	blt.w	8011de0 <__kernel_rem_pio2f+0x3b4>
 8011c48:	a944      	add	r1, sp, #272	; 0x110
 8011c4a:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8011c4e:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8011d2c <__kernel_rem_pio2f+0x300>
 8011c52:	eddf 7a39 	vldr	s15, [pc, #228]	; 8011d38 <__kernel_rem_pio2f+0x30c>
 8011c56:	2000      	movs	r0, #0
 8011c58:	1aa1      	subs	r1, r4, r2
 8011c5a:	e0b6      	b.n	8011dca <__kernel_rem_pio2f+0x39e>
 8011c5c:	2702      	movs	r7, #2
 8011c5e:	e78c      	b.n	8011b7a <__kernel_rem_pio2f+0x14e>
 8011c60:	6820      	ldr	r0, [r4, #0]
 8011c62:	b94b      	cbnz	r3, 8011c78 <__kernel_rem_pio2f+0x24c>
 8011c64:	b118      	cbz	r0, 8011c6e <__kernel_rem_pio2f+0x242>
 8011c66:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8011c6a:	6020      	str	r0, [r4, #0]
 8011c6c:	2001      	movs	r0, #1
 8011c6e:	f10e 0e01 	add.w	lr, lr, #1
 8011c72:	3404      	adds	r4, #4
 8011c74:	4603      	mov	r3, r0
 8011c76:	e785      	b.n	8011b84 <__kernel_rem_pio2f+0x158>
 8011c78:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8011c7c:	6020      	str	r0, [r4, #0]
 8011c7e:	4618      	mov	r0, r3
 8011c80:	e7f5      	b.n	8011c6e <__kernel_rem_pio2f+0x242>
 8011c82:	1e74      	subs	r4, r6, #1
 8011c84:	a808      	add	r0, sp, #32
 8011c86:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011c8a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8011c8e:	f10d 0c20 	add.w	ip, sp, #32
 8011c92:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8011c96:	e77e      	b.n	8011b96 <__kernel_rem_pio2f+0x16a>
 8011c98:	1e74      	subs	r4, r6, #1
 8011c9a:	a808      	add	r0, sp, #32
 8011c9c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8011ca0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8011ca4:	e7f3      	b.n	8011c8e <__kernel_rem_pio2f+0x262>
 8011ca6:	ab08      	add	r3, sp, #32
 8011ca8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8011cac:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011cb0:	4318      	orrs	r0, r3
 8011cb2:	e7ab      	b.n	8011c0c <__kernel_rem_pio2f+0x1e0>
 8011cb4:	f10c 0c01 	add.w	ip, ip, #1
 8011cb8:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8011cbc:	2c00      	cmp	r4, #0
 8011cbe:	d0f9      	beq.n	8011cb4 <__kernel_rem_pio2f+0x288>
 8011cc0:	9b05      	ldr	r3, [sp, #20]
 8011cc2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8011cc6:	eb0d 0003 	add.w	r0, sp, r3
 8011cca:	9b01      	ldr	r3, [sp, #4]
 8011ccc:	18f4      	adds	r4, r6, r3
 8011cce:	ab1c      	add	r3, sp, #112	; 0x70
 8011cd0:	1c77      	adds	r7, r6, #1
 8011cd2:	384c      	subs	r0, #76	; 0x4c
 8011cd4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011cd8:	4466      	add	r6, ip
 8011cda:	42be      	cmp	r6, r7
 8011cdc:	f6ff af0b 	blt.w	8011af6 <__kernel_rem_pio2f+0xca>
 8011ce0:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8011ce4:	f8dd e008 	ldr.w	lr, [sp, #8]
 8011ce8:	ee07 3a90 	vmov	s15, r3
 8011cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011cf0:	f04f 0c00 	mov.w	ip, #0
 8011cf4:	ece4 7a01 	vstmia	r4!, {s15}
 8011cf8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8011d38 <__kernel_rem_pio2f+0x30c>
 8011cfc:	46a1      	mov	r9, r4
 8011cfe:	458c      	cmp	ip, r1
 8011d00:	dd07      	ble.n	8011d12 <__kernel_rem_pio2f+0x2e6>
 8011d02:	ece0 7a01 	vstmia	r0!, {s15}
 8011d06:	3701      	adds	r7, #1
 8011d08:	e7e7      	b.n	8011cda <__kernel_rem_pio2f+0x2ae>
 8011d0a:	9804      	ldr	r0, [sp, #16]
 8011d0c:	f04f 0c01 	mov.w	ip, #1
 8011d10:	e7d2      	b.n	8011cb8 <__kernel_rem_pio2f+0x28c>
 8011d12:	ecfe 6a01 	vldmia	lr!, {s13}
 8011d16:	ed39 7a01 	vldmdb	r9!, {s14}
 8011d1a:	f10c 0c01 	add.w	ip, ip, #1
 8011d1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011d22:	e7ec      	b.n	8011cfe <__kernel_rem_pio2f+0x2d2>
 8011d24:	3c01      	subs	r4, #1
 8011d26:	e775      	b.n	8011c14 <__kernel_rem_pio2f+0x1e8>
 8011d28:	080176f4 	.word	0x080176f4
 8011d2c:	080176c8 	.word	0x080176c8
 8011d30:	43800000 	.word	0x43800000
 8011d34:	3b800000 	.word	0x3b800000
 8011d38:	00000000 	.word	0x00000000
 8011d3c:	9b03      	ldr	r3, [sp, #12]
 8011d3e:	eeb0 0a48 	vmov.f32	s0, s16
 8011d42:	1a98      	subs	r0, r3, r2
 8011d44:	f000 fab0 	bl	80122a8 <scalbnf>
 8011d48:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8011d30 <__kernel_rem_pio2f+0x304>
 8011d4c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8011d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d54:	db19      	blt.n	8011d8a <__kernel_rem_pio2f+0x35e>
 8011d56:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8011d34 <__kernel_rem_pio2f+0x308>
 8011d5a:	ee60 7a27 	vmul.f32	s15, s0, s15
 8011d5e:	aa08      	add	r2, sp, #32
 8011d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d64:	1c74      	adds	r4, r6, #1
 8011d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d6a:	3508      	adds	r5, #8
 8011d6c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011d74:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011d78:	ee10 3a10 	vmov	r3, s0
 8011d7c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011d80:	ee17 3a90 	vmov	r3, s15
 8011d84:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8011d88:	e74b      	b.n	8011c22 <__kernel_rem_pio2f+0x1f6>
 8011d8a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8011d8e:	aa08      	add	r2, sp, #32
 8011d90:	ee10 3a10 	vmov	r3, s0
 8011d94:	4634      	mov	r4, r6
 8011d96:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8011d9a:	e742      	b.n	8011c22 <__kernel_rem_pio2f+0x1f6>
 8011d9c:	a808      	add	r0, sp, #32
 8011d9e:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011da2:	9001      	str	r0, [sp, #4]
 8011da4:	ee07 0a90 	vmov	s15, r0
 8011da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011dac:	3a01      	subs	r2, #1
 8011dae:	ee67 7a80 	vmul.f32	s15, s15, s0
 8011db2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8011db6:	ed61 7a01 	vstmdb	r1!, {s15}
 8011dba:	e73e      	b.n	8011c3a <__kernel_rem_pio2f+0x20e>
 8011dbc:	ecfc 6a01 	vldmia	ip!, {s13}
 8011dc0:	ecb6 7a01 	vldmia	r6!, {s14}
 8011dc4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8011dc8:	3001      	adds	r0, #1
 8011dca:	4550      	cmp	r0, sl
 8011dcc:	dc01      	bgt.n	8011dd2 <__kernel_rem_pio2f+0x3a6>
 8011dce:	4288      	cmp	r0, r1
 8011dd0:	ddf4      	ble.n	8011dbc <__kernel_rem_pio2f+0x390>
 8011dd2:	a858      	add	r0, sp, #352	; 0x160
 8011dd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011dd8:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8011ddc:	3a01      	subs	r2, #1
 8011dde:	e730      	b.n	8011c42 <__kernel_rem_pio2f+0x216>
 8011de0:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8011de2:	2a02      	cmp	r2, #2
 8011de4:	dc09      	bgt.n	8011dfa <__kernel_rem_pio2f+0x3ce>
 8011de6:	2a00      	cmp	r2, #0
 8011de8:	dc2a      	bgt.n	8011e40 <__kernel_rem_pio2f+0x414>
 8011dea:	d043      	beq.n	8011e74 <__kernel_rem_pio2f+0x448>
 8011dec:	f009 0007 	and.w	r0, r9, #7
 8011df0:	b059      	add	sp, #356	; 0x164
 8011df2:	ecbd 8b04 	vpop	{d8-d9}
 8011df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dfa:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8011dfc:	2b03      	cmp	r3, #3
 8011dfe:	d1f5      	bne.n	8011dec <__kernel_rem_pio2f+0x3c0>
 8011e00:	ab30      	add	r3, sp, #192	; 0xc0
 8011e02:	442b      	add	r3, r5
 8011e04:	461a      	mov	r2, r3
 8011e06:	4619      	mov	r1, r3
 8011e08:	4620      	mov	r0, r4
 8011e0a:	2800      	cmp	r0, #0
 8011e0c:	f1a1 0104 	sub.w	r1, r1, #4
 8011e10:	dc51      	bgt.n	8011eb6 <__kernel_rem_pio2f+0x48a>
 8011e12:	4621      	mov	r1, r4
 8011e14:	2901      	cmp	r1, #1
 8011e16:	f1a2 0204 	sub.w	r2, r2, #4
 8011e1a:	dc5c      	bgt.n	8011ed6 <__kernel_rem_pio2f+0x4aa>
 8011e1c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8011d38 <__kernel_rem_pio2f+0x30c>
 8011e20:	3304      	adds	r3, #4
 8011e22:	2c01      	cmp	r4, #1
 8011e24:	dc67      	bgt.n	8011ef6 <__kernel_rem_pio2f+0x4ca>
 8011e26:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8011e2a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8011e2e:	2f00      	cmp	r7, #0
 8011e30:	d167      	bne.n	8011f02 <__kernel_rem_pio2f+0x4d6>
 8011e32:	edc8 6a00 	vstr	s13, [r8]
 8011e36:	ed88 7a01 	vstr	s14, [r8, #4]
 8011e3a:	edc8 7a02 	vstr	s15, [r8, #8]
 8011e3e:	e7d5      	b.n	8011dec <__kernel_rem_pio2f+0x3c0>
 8011e40:	aa30      	add	r2, sp, #192	; 0xc0
 8011e42:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8011d38 <__kernel_rem_pio2f+0x30c>
 8011e46:	4413      	add	r3, r2
 8011e48:	4622      	mov	r2, r4
 8011e4a:	2a00      	cmp	r2, #0
 8011e4c:	da24      	bge.n	8011e98 <__kernel_rem_pio2f+0x46c>
 8011e4e:	b34f      	cbz	r7, 8011ea4 <__kernel_rem_pio2f+0x478>
 8011e50:	eef1 7a47 	vneg.f32	s15, s14
 8011e54:	edc8 7a00 	vstr	s15, [r8]
 8011e58:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8011e5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e60:	aa31      	add	r2, sp, #196	; 0xc4
 8011e62:	2301      	movs	r3, #1
 8011e64:	429c      	cmp	r4, r3
 8011e66:	da20      	bge.n	8011eaa <__kernel_rem_pio2f+0x47e>
 8011e68:	b10f      	cbz	r7, 8011e6e <__kernel_rem_pio2f+0x442>
 8011e6a:	eef1 7a67 	vneg.f32	s15, s15
 8011e6e:	edc8 7a01 	vstr	s15, [r8, #4]
 8011e72:	e7bb      	b.n	8011dec <__kernel_rem_pio2f+0x3c0>
 8011e74:	aa30      	add	r2, sp, #192	; 0xc0
 8011e76:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8011d38 <__kernel_rem_pio2f+0x30c>
 8011e7a:	4413      	add	r3, r2
 8011e7c:	2c00      	cmp	r4, #0
 8011e7e:	da05      	bge.n	8011e8c <__kernel_rem_pio2f+0x460>
 8011e80:	b10f      	cbz	r7, 8011e86 <__kernel_rem_pio2f+0x45a>
 8011e82:	eef1 7a67 	vneg.f32	s15, s15
 8011e86:	edc8 7a00 	vstr	s15, [r8]
 8011e8a:	e7af      	b.n	8011dec <__kernel_rem_pio2f+0x3c0>
 8011e8c:	ed33 7a01 	vldmdb	r3!, {s14}
 8011e90:	3c01      	subs	r4, #1
 8011e92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011e96:	e7f1      	b.n	8011e7c <__kernel_rem_pio2f+0x450>
 8011e98:	ed73 7a01 	vldmdb	r3!, {s15}
 8011e9c:	3a01      	subs	r2, #1
 8011e9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011ea2:	e7d2      	b.n	8011e4a <__kernel_rem_pio2f+0x41e>
 8011ea4:	eef0 7a47 	vmov.f32	s15, s14
 8011ea8:	e7d4      	b.n	8011e54 <__kernel_rem_pio2f+0x428>
 8011eaa:	ecb2 7a01 	vldmia	r2!, {s14}
 8011eae:	3301      	adds	r3, #1
 8011eb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011eb4:	e7d6      	b.n	8011e64 <__kernel_rem_pio2f+0x438>
 8011eb6:	edd1 7a00 	vldr	s15, [r1]
 8011eba:	edd1 6a01 	vldr	s13, [r1, #4]
 8011ebe:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011ec2:	3801      	subs	r0, #1
 8011ec4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ec8:	ed81 7a00 	vstr	s14, [r1]
 8011ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ed0:	edc1 7a01 	vstr	s15, [r1, #4]
 8011ed4:	e799      	b.n	8011e0a <__kernel_rem_pio2f+0x3de>
 8011ed6:	edd2 7a00 	vldr	s15, [r2]
 8011eda:	edd2 6a01 	vldr	s13, [r2, #4]
 8011ede:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8011ee2:	3901      	subs	r1, #1
 8011ee4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ee8:	ed82 7a00 	vstr	s14, [r2]
 8011eec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ef0:	edc2 7a01 	vstr	s15, [r2, #4]
 8011ef4:	e78e      	b.n	8011e14 <__kernel_rem_pio2f+0x3e8>
 8011ef6:	ed33 7a01 	vldmdb	r3!, {s14}
 8011efa:	3c01      	subs	r4, #1
 8011efc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011f00:	e78f      	b.n	8011e22 <__kernel_rem_pio2f+0x3f6>
 8011f02:	eef1 6a66 	vneg.f32	s13, s13
 8011f06:	eeb1 7a47 	vneg.f32	s14, s14
 8011f0a:	edc8 6a00 	vstr	s13, [r8]
 8011f0e:	ed88 7a01 	vstr	s14, [r8, #4]
 8011f12:	eef1 7a67 	vneg.f32	s15, s15
 8011f16:	e790      	b.n	8011e3a <__kernel_rem_pio2f+0x40e>

08011f18 <__kernel_sinf>:
 8011f18:	ee10 3a10 	vmov	r3, s0
 8011f1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f20:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8011f24:	da04      	bge.n	8011f30 <__kernel_sinf+0x18>
 8011f26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8011f2a:	ee17 3a90 	vmov	r3, s15
 8011f2e:	b35b      	cbz	r3, 8011f88 <__kernel_sinf+0x70>
 8011f30:	ee20 7a00 	vmul.f32	s14, s0, s0
 8011f34:	eddf 7a15 	vldr	s15, [pc, #84]	; 8011f8c <__kernel_sinf+0x74>
 8011f38:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8011f90 <__kernel_sinf+0x78>
 8011f3c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011f40:	eddf 7a14 	vldr	s15, [pc, #80]	; 8011f94 <__kernel_sinf+0x7c>
 8011f44:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011f48:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8011f98 <__kernel_sinf+0x80>
 8011f4c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8011f50:	eddf 7a12 	vldr	s15, [pc, #72]	; 8011f9c <__kernel_sinf+0x84>
 8011f54:	ee60 6a07 	vmul.f32	s13, s0, s14
 8011f58:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011f5c:	b930      	cbnz	r0, 8011f6c <__kernel_sinf+0x54>
 8011f5e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8011fa0 <__kernel_sinf+0x88>
 8011f62:	eea7 6a27 	vfma.f32	s12, s14, s15
 8011f66:	eea6 0a26 	vfma.f32	s0, s12, s13
 8011f6a:	4770      	bx	lr
 8011f6c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8011f70:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011f74:	eee0 7a86 	vfma.f32	s15, s1, s12
 8011f78:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8011f7c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8011fa4 <__kernel_sinf+0x8c>
 8011f80:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8011f84:	ee30 0a60 	vsub.f32	s0, s0, s1
 8011f88:	4770      	bx	lr
 8011f8a:	bf00      	nop
 8011f8c:	2f2ec9d3 	.word	0x2f2ec9d3
 8011f90:	b2d72f34 	.word	0xb2d72f34
 8011f94:	3638ef1b 	.word	0x3638ef1b
 8011f98:	b9500d01 	.word	0xb9500d01
 8011f9c:	3c088889 	.word	0x3c088889
 8011fa0:	be2aaaab 	.word	0xbe2aaaab
 8011fa4:	3e2aaaab 	.word	0x3e2aaaab

08011fa8 <with_errnof>:
 8011fa8:	b513      	push	{r0, r1, r4, lr}
 8011faa:	4604      	mov	r4, r0
 8011fac:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011fb0:	f000 f9f4 	bl	801239c <__errno>
 8011fb4:	ed9d 0a01 	vldr	s0, [sp, #4]
 8011fb8:	6004      	str	r4, [r0, #0]
 8011fba:	b002      	add	sp, #8
 8011fbc:	bd10      	pop	{r4, pc}

08011fbe <xflowf>:
 8011fbe:	b130      	cbz	r0, 8011fce <xflowf+0x10>
 8011fc0:	eef1 7a40 	vneg.f32	s15, s0
 8011fc4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011fc8:	2022      	movs	r0, #34	; 0x22
 8011fca:	f7ff bfed 	b.w	8011fa8 <with_errnof>
 8011fce:	eef0 7a40 	vmov.f32	s15, s0
 8011fd2:	e7f7      	b.n	8011fc4 <xflowf+0x6>

08011fd4 <__math_uflowf>:
 8011fd4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011fdc <__math_uflowf+0x8>
 8011fd8:	f7ff bff1 	b.w	8011fbe <xflowf>
 8011fdc:	10000000 	.word	0x10000000

08011fe0 <__math_oflowf>:
 8011fe0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8011fe8 <__math_oflowf+0x8>
 8011fe4:	f7ff bfeb 	b.w	8011fbe <xflowf>
 8011fe8:	70000000 	.word	0x70000000
 8011fec:	00000000 	.word	0x00000000

08011ff0 <floor>:
 8011ff0:	ec51 0b10 	vmov	r0, r1, d0
 8011ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ff8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011ffc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012000:	2e13      	cmp	r6, #19
 8012002:	ee10 5a10 	vmov	r5, s0
 8012006:	ee10 8a10 	vmov	r8, s0
 801200a:	460c      	mov	r4, r1
 801200c:	dc32      	bgt.n	8012074 <floor+0x84>
 801200e:	2e00      	cmp	r6, #0
 8012010:	da14      	bge.n	801203c <floor+0x4c>
 8012012:	a333      	add	r3, pc, #204	; (adr r3, 80120e0 <floor+0xf0>)
 8012014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012018:	f7ee f938 	bl	800028c <__adddf3>
 801201c:	2200      	movs	r2, #0
 801201e:	2300      	movs	r3, #0
 8012020:	f7ee fd7a 	bl	8000b18 <__aeabi_dcmpgt>
 8012024:	b138      	cbz	r0, 8012036 <floor+0x46>
 8012026:	2c00      	cmp	r4, #0
 8012028:	da57      	bge.n	80120da <floor+0xea>
 801202a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801202e:	431d      	orrs	r5, r3
 8012030:	d001      	beq.n	8012036 <floor+0x46>
 8012032:	4c2d      	ldr	r4, [pc, #180]	; (80120e8 <floor+0xf8>)
 8012034:	2500      	movs	r5, #0
 8012036:	4621      	mov	r1, r4
 8012038:	4628      	mov	r0, r5
 801203a:	e025      	b.n	8012088 <floor+0x98>
 801203c:	4f2b      	ldr	r7, [pc, #172]	; (80120ec <floor+0xfc>)
 801203e:	4137      	asrs	r7, r6
 8012040:	ea01 0307 	and.w	r3, r1, r7
 8012044:	4303      	orrs	r3, r0
 8012046:	d01f      	beq.n	8012088 <floor+0x98>
 8012048:	a325      	add	r3, pc, #148	; (adr r3, 80120e0 <floor+0xf0>)
 801204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204e:	f7ee f91d 	bl	800028c <__adddf3>
 8012052:	2200      	movs	r2, #0
 8012054:	2300      	movs	r3, #0
 8012056:	f7ee fd5f 	bl	8000b18 <__aeabi_dcmpgt>
 801205a:	2800      	cmp	r0, #0
 801205c:	d0eb      	beq.n	8012036 <floor+0x46>
 801205e:	2c00      	cmp	r4, #0
 8012060:	bfbe      	ittt	lt
 8012062:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012066:	fa43 f606 	asrlt.w	r6, r3, r6
 801206a:	19a4      	addlt	r4, r4, r6
 801206c:	ea24 0407 	bic.w	r4, r4, r7
 8012070:	2500      	movs	r5, #0
 8012072:	e7e0      	b.n	8012036 <floor+0x46>
 8012074:	2e33      	cmp	r6, #51	; 0x33
 8012076:	dd0b      	ble.n	8012090 <floor+0xa0>
 8012078:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801207c:	d104      	bne.n	8012088 <floor+0x98>
 801207e:	ee10 2a10 	vmov	r2, s0
 8012082:	460b      	mov	r3, r1
 8012084:	f7ee f902 	bl	800028c <__adddf3>
 8012088:	ec41 0b10 	vmov	d0, r0, r1
 801208c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012090:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012094:	f04f 33ff 	mov.w	r3, #4294967295
 8012098:	fa23 f707 	lsr.w	r7, r3, r7
 801209c:	4207      	tst	r7, r0
 801209e:	d0f3      	beq.n	8012088 <floor+0x98>
 80120a0:	a30f      	add	r3, pc, #60	; (adr r3, 80120e0 <floor+0xf0>)
 80120a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a6:	f7ee f8f1 	bl	800028c <__adddf3>
 80120aa:	2200      	movs	r2, #0
 80120ac:	2300      	movs	r3, #0
 80120ae:	f7ee fd33 	bl	8000b18 <__aeabi_dcmpgt>
 80120b2:	2800      	cmp	r0, #0
 80120b4:	d0bf      	beq.n	8012036 <floor+0x46>
 80120b6:	2c00      	cmp	r4, #0
 80120b8:	da02      	bge.n	80120c0 <floor+0xd0>
 80120ba:	2e14      	cmp	r6, #20
 80120bc:	d103      	bne.n	80120c6 <floor+0xd6>
 80120be:	3401      	adds	r4, #1
 80120c0:	ea25 0507 	bic.w	r5, r5, r7
 80120c4:	e7b7      	b.n	8012036 <floor+0x46>
 80120c6:	2301      	movs	r3, #1
 80120c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80120cc:	fa03 f606 	lsl.w	r6, r3, r6
 80120d0:	4435      	add	r5, r6
 80120d2:	4545      	cmp	r5, r8
 80120d4:	bf38      	it	cc
 80120d6:	18e4      	addcc	r4, r4, r3
 80120d8:	e7f2      	b.n	80120c0 <floor+0xd0>
 80120da:	2500      	movs	r5, #0
 80120dc:	462c      	mov	r4, r5
 80120de:	e7aa      	b.n	8012036 <floor+0x46>
 80120e0:	8800759c 	.word	0x8800759c
 80120e4:	7e37e43c 	.word	0x7e37e43c
 80120e8:	bff00000 	.word	0xbff00000
 80120ec:	000fffff 	.word	0x000fffff

080120f0 <scalbn>:
 80120f0:	b570      	push	{r4, r5, r6, lr}
 80120f2:	ec55 4b10 	vmov	r4, r5, d0
 80120f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80120fa:	4606      	mov	r6, r0
 80120fc:	462b      	mov	r3, r5
 80120fe:	b99a      	cbnz	r2, 8012128 <scalbn+0x38>
 8012100:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012104:	4323      	orrs	r3, r4
 8012106:	d036      	beq.n	8012176 <scalbn+0x86>
 8012108:	4b39      	ldr	r3, [pc, #228]	; (80121f0 <scalbn+0x100>)
 801210a:	4629      	mov	r1, r5
 801210c:	ee10 0a10 	vmov	r0, s0
 8012110:	2200      	movs	r2, #0
 8012112:	f7ee fa71 	bl	80005f8 <__aeabi_dmul>
 8012116:	4b37      	ldr	r3, [pc, #220]	; (80121f4 <scalbn+0x104>)
 8012118:	429e      	cmp	r6, r3
 801211a:	4604      	mov	r4, r0
 801211c:	460d      	mov	r5, r1
 801211e:	da10      	bge.n	8012142 <scalbn+0x52>
 8012120:	a32b      	add	r3, pc, #172	; (adr r3, 80121d0 <scalbn+0xe0>)
 8012122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012126:	e03a      	b.n	801219e <scalbn+0xae>
 8012128:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801212c:	428a      	cmp	r2, r1
 801212e:	d10c      	bne.n	801214a <scalbn+0x5a>
 8012130:	ee10 2a10 	vmov	r2, s0
 8012134:	4620      	mov	r0, r4
 8012136:	4629      	mov	r1, r5
 8012138:	f7ee f8a8 	bl	800028c <__adddf3>
 801213c:	4604      	mov	r4, r0
 801213e:	460d      	mov	r5, r1
 8012140:	e019      	b.n	8012176 <scalbn+0x86>
 8012142:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012146:	460b      	mov	r3, r1
 8012148:	3a36      	subs	r2, #54	; 0x36
 801214a:	4432      	add	r2, r6
 801214c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012150:	428a      	cmp	r2, r1
 8012152:	dd08      	ble.n	8012166 <scalbn+0x76>
 8012154:	2d00      	cmp	r5, #0
 8012156:	a120      	add	r1, pc, #128	; (adr r1, 80121d8 <scalbn+0xe8>)
 8012158:	e9d1 0100 	ldrd	r0, r1, [r1]
 801215c:	da1c      	bge.n	8012198 <scalbn+0xa8>
 801215e:	a120      	add	r1, pc, #128	; (adr r1, 80121e0 <scalbn+0xf0>)
 8012160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012164:	e018      	b.n	8012198 <scalbn+0xa8>
 8012166:	2a00      	cmp	r2, #0
 8012168:	dd08      	ble.n	801217c <scalbn+0x8c>
 801216a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801216e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012172:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012176:	ec45 4b10 	vmov	d0, r4, r5
 801217a:	bd70      	pop	{r4, r5, r6, pc}
 801217c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012180:	da19      	bge.n	80121b6 <scalbn+0xc6>
 8012182:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012186:	429e      	cmp	r6, r3
 8012188:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801218c:	dd0a      	ble.n	80121a4 <scalbn+0xb4>
 801218e:	a112      	add	r1, pc, #72	; (adr r1, 80121d8 <scalbn+0xe8>)
 8012190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d1e2      	bne.n	801215e <scalbn+0x6e>
 8012198:	a30f      	add	r3, pc, #60	; (adr r3, 80121d8 <scalbn+0xe8>)
 801219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801219e:	f7ee fa2b 	bl	80005f8 <__aeabi_dmul>
 80121a2:	e7cb      	b.n	801213c <scalbn+0x4c>
 80121a4:	a10a      	add	r1, pc, #40	; (adr r1, 80121d0 <scalbn+0xe0>)
 80121a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d0b8      	beq.n	8012120 <scalbn+0x30>
 80121ae:	a10e      	add	r1, pc, #56	; (adr r1, 80121e8 <scalbn+0xf8>)
 80121b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80121b4:	e7b4      	b.n	8012120 <scalbn+0x30>
 80121b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80121ba:	3236      	adds	r2, #54	; 0x36
 80121bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80121c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80121c4:	4620      	mov	r0, r4
 80121c6:	4b0c      	ldr	r3, [pc, #48]	; (80121f8 <scalbn+0x108>)
 80121c8:	2200      	movs	r2, #0
 80121ca:	e7e8      	b.n	801219e <scalbn+0xae>
 80121cc:	f3af 8000 	nop.w
 80121d0:	c2f8f359 	.word	0xc2f8f359
 80121d4:	01a56e1f 	.word	0x01a56e1f
 80121d8:	8800759c 	.word	0x8800759c
 80121dc:	7e37e43c 	.word	0x7e37e43c
 80121e0:	8800759c 	.word	0x8800759c
 80121e4:	fe37e43c 	.word	0xfe37e43c
 80121e8:	c2f8f359 	.word	0xc2f8f359
 80121ec:	81a56e1f 	.word	0x81a56e1f
 80121f0:	43500000 	.word	0x43500000
 80121f4:	ffff3cb0 	.word	0xffff3cb0
 80121f8:	3c900000 	.word	0x3c900000

080121fc <finitef>:
 80121fc:	b082      	sub	sp, #8
 80121fe:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012202:	9801      	ldr	r0, [sp, #4]
 8012204:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012208:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801220c:	bfac      	ite	ge
 801220e:	2000      	movge	r0, #0
 8012210:	2001      	movlt	r0, #1
 8012212:	b002      	add	sp, #8
 8012214:	4770      	bx	lr
	...

08012218 <floorf>:
 8012218:	ee10 3a10 	vmov	r3, s0
 801221c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012220:	3a7f      	subs	r2, #127	; 0x7f
 8012222:	2a16      	cmp	r2, #22
 8012224:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012228:	dc2a      	bgt.n	8012280 <floorf+0x68>
 801222a:	2a00      	cmp	r2, #0
 801222c:	da11      	bge.n	8012252 <floorf+0x3a>
 801222e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8012290 <floorf+0x78>
 8012232:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012236:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801223a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801223e:	dd05      	ble.n	801224c <floorf+0x34>
 8012240:	2b00      	cmp	r3, #0
 8012242:	da23      	bge.n	801228c <floorf+0x74>
 8012244:	4a13      	ldr	r2, [pc, #76]	; (8012294 <floorf+0x7c>)
 8012246:	2900      	cmp	r1, #0
 8012248:	bf18      	it	ne
 801224a:	4613      	movne	r3, r2
 801224c:	ee00 3a10 	vmov	s0, r3
 8012250:	4770      	bx	lr
 8012252:	4911      	ldr	r1, [pc, #68]	; (8012298 <floorf+0x80>)
 8012254:	4111      	asrs	r1, r2
 8012256:	420b      	tst	r3, r1
 8012258:	d0fa      	beq.n	8012250 <floorf+0x38>
 801225a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8012290 <floorf+0x78>
 801225e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8012262:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8012266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801226a:	ddef      	ble.n	801224c <floorf+0x34>
 801226c:	2b00      	cmp	r3, #0
 801226e:	bfbe      	ittt	lt
 8012270:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8012274:	fa40 f202 	asrlt.w	r2, r0, r2
 8012278:	189b      	addlt	r3, r3, r2
 801227a:	ea23 0301 	bic.w	r3, r3, r1
 801227e:	e7e5      	b.n	801224c <floorf+0x34>
 8012280:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012284:	d3e4      	bcc.n	8012250 <floorf+0x38>
 8012286:	ee30 0a00 	vadd.f32	s0, s0, s0
 801228a:	4770      	bx	lr
 801228c:	2300      	movs	r3, #0
 801228e:	e7dd      	b.n	801224c <floorf+0x34>
 8012290:	7149f2ca 	.word	0x7149f2ca
 8012294:	bf800000 	.word	0xbf800000
 8012298:	007fffff 	.word	0x007fffff

0801229c <nanf>:
 801229c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80122a4 <nanf+0x8>
 80122a0:	4770      	bx	lr
 80122a2:	bf00      	nop
 80122a4:	7fc00000 	.word	0x7fc00000

080122a8 <scalbnf>:
 80122a8:	ee10 3a10 	vmov	r3, s0
 80122ac:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80122b0:	d025      	beq.n	80122fe <scalbnf+0x56>
 80122b2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80122b6:	d302      	bcc.n	80122be <scalbnf+0x16>
 80122b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80122bc:	4770      	bx	lr
 80122be:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80122c2:	d122      	bne.n	801230a <scalbnf+0x62>
 80122c4:	4b2a      	ldr	r3, [pc, #168]	; (8012370 <scalbnf+0xc8>)
 80122c6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8012374 <scalbnf+0xcc>
 80122ca:	4298      	cmp	r0, r3
 80122cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80122d0:	db16      	blt.n	8012300 <scalbnf+0x58>
 80122d2:	ee10 3a10 	vmov	r3, s0
 80122d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80122da:	3a19      	subs	r2, #25
 80122dc:	4402      	add	r2, r0
 80122de:	2afe      	cmp	r2, #254	; 0xfe
 80122e0:	dd15      	ble.n	801230e <scalbnf+0x66>
 80122e2:	ee10 3a10 	vmov	r3, s0
 80122e6:	eddf 7a24 	vldr	s15, [pc, #144]	; 8012378 <scalbnf+0xd0>
 80122ea:	eddf 6a24 	vldr	s13, [pc, #144]	; 801237c <scalbnf+0xd4>
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	eeb0 7a67 	vmov.f32	s14, s15
 80122f4:	bfb8      	it	lt
 80122f6:	eef0 7a66 	vmovlt.f32	s15, s13
 80122fa:	ee27 0a27 	vmul.f32	s0, s14, s15
 80122fe:	4770      	bx	lr
 8012300:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8012380 <scalbnf+0xd8>
 8012304:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012308:	4770      	bx	lr
 801230a:	0dd2      	lsrs	r2, r2, #23
 801230c:	e7e6      	b.n	80122dc <scalbnf+0x34>
 801230e:	2a00      	cmp	r2, #0
 8012310:	dd06      	ble.n	8012320 <scalbnf+0x78>
 8012312:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012316:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801231a:	ee00 3a10 	vmov	s0, r3
 801231e:	4770      	bx	lr
 8012320:	f112 0f16 	cmn.w	r2, #22
 8012324:	da1a      	bge.n	801235c <scalbnf+0xb4>
 8012326:	f24c 3350 	movw	r3, #50000	; 0xc350
 801232a:	4298      	cmp	r0, r3
 801232c:	ee10 3a10 	vmov	r3, s0
 8012330:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012334:	dd0a      	ble.n	801234c <scalbnf+0xa4>
 8012336:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8012378 <scalbnf+0xd0>
 801233a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801237c <scalbnf+0xd4>
 801233e:	eef0 7a40 	vmov.f32	s15, s0
 8012342:	2b00      	cmp	r3, #0
 8012344:	bf18      	it	ne
 8012346:	eeb0 0a47 	vmovne.f32	s0, s14
 801234a:	e7db      	b.n	8012304 <scalbnf+0x5c>
 801234c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8012380 <scalbnf+0xd8>
 8012350:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8012384 <scalbnf+0xdc>
 8012354:	eef0 7a40 	vmov.f32	s15, s0
 8012358:	2b00      	cmp	r3, #0
 801235a:	e7f3      	b.n	8012344 <scalbnf+0x9c>
 801235c:	3219      	adds	r2, #25
 801235e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012362:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012366:	eddf 7a08 	vldr	s15, [pc, #32]	; 8012388 <scalbnf+0xe0>
 801236a:	ee07 3a10 	vmov	s14, r3
 801236e:	e7c4      	b.n	80122fa <scalbnf+0x52>
 8012370:	ffff3cb0 	.word	0xffff3cb0
 8012374:	4c000000 	.word	0x4c000000
 8012378:	7149f2ca 	.word	0x7149f2ca
 801237c:	f149f2ca 	.word	0xf149f2ca
 8012380:	0da24260 	.word	0x0da24260
 8012384:	8da24260 	.word	0x8da24260
 8012388:	33000000 	.word	0x33000000

0801238c <abort>:
 801238c:	b508      	push	{r3, lr}
 801238e:	2006      	movs	r0, #6
 8012390:	f001 f8f6 	bl	8013580 <raise>
 8012394:	2001      	movs	r0, #1
 8012396:	f7f2 fd73 	bl	8004e80 <_exit>
	...

0801239c <__errno>:
 801239c:	4b01      	ldr	r3, [pc, #4]	; (80123a4 <__errno+0x8>)
 801239e:	6818      	ldr	r0, [r3, #0]
 80123a0:	4770      	bx	lr
 80123a2:	bf00      	nop
 80123a4:	20000014 	.word	0x20000014

080123a8 <std>:
 80123a8:	2300      	movs	r3, #0
 80123aa:	b510      	push	{r4, lr}
 80123ac:	4604      	mov	r4, r0
 80123ae:	e9c0 3300 	strd	r3, r3, [r0]
 80123b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80123b6:	6083      	str	r3, [r0, #8]
 80123b8:	8181      	strh	r1, [r0, #12]
 80123ba:	6643      	str	r3, [r0, #100]	; 0x64
 80123bc:	81c2      	strh	r2, [r0, #14]
 80123be:	6183      	str	r3, [r0, #24]
 80123c0:	4619      	mov	r1, r3
 80123c2:	2208      	movs	r2, #8
 80123c4:	305c      	adds	r0, #92	; 0x5c
 80123c6:	f000 f91a 	bl	80125fe <memset>
 80123ca:	4b05      	ldr	r3, [pc, #20]	; (80123e0 <std+0x38>)
 80123cc:	6263      	str	r3, [r4, #36]	; 0x24
 80123ce:	4b05      	ldr	r3, [pc, #20]	; (80123e4 <std+0x3c>)
 80123d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80123d2:	4b05      	ldr	r3, [pc, #20]	; (80123e8 <std+0x40>)
 80123d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80123d6:	4b05      	ldr	r3, [pc, #20]	; (80123ec <std+0x44>)
 80123d8:	6224      	str	r4, [r4, #32]
 80123da:	6323      	str	r3, [r4, #48]	; 0x30
 80123dc:	bd10      	pop	{r4, pc}
 80123de:	bf00      	nop
 80123e0:	080135f9 	.word	0x080135f9
 80123e4:	0801361b 	.word	0x0801361b
 80123e8:	08013653 	.word	0x08013653
 80123ec:	08013677 	.word	0x08013677

080123f0 <_cleanup_r>:
 80123f0:	4901      	ldr	r1, [pc, #4]	; (80123f8 <_cleanup_r+0x8>)
 80123f2:	f000 b8af 	b.w	8012554 <_fwalk_reent>
 80123f6:	bf00      	nop
 80123f8:	08015221 	.word	0x08015221

080123fc <__sfmoreglue>:
 80123fc:	b570      	push	{r4, r5, r6, lr}
 80123fe:	2268      	movs	r2, #104	; 0x68
 8012400:	1e4d      	subs	r5, r1, #1
 8012402:	4355      	muls	r5, r2
 8012404:	460e      	mov	r6, r1
 8012406:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801240a:	f000 f921 	bl	8012650 <_malloc_r>
 801240e:	4604      	mov	r4, r0
 8012410:	b140      	cbz	r0, 8012424 <__sfmoreglue+0x28>
 8012412:	2100      	movs	r1, #0
 8012414:	e9c0 1600 	strd	r1, r6, [r0]
 8012418:	300c      	adds	r0, #12
 801241a:	60a0      	str	r0, [r4, #8]
 801241c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012420:	f000 f8ed 	bl	80125fe <memset>
 8012424:	4620      	mov	r0, r4
 8012426:	bd70      	pop	{r4, r5, r6, pc}

08012428 <__sfp_lock_acquire>:
 8012428:	4801      	ldr	r0, [pc, #4]	; (8012430 <__sfp_lock_acquire+0x8>)
 801242a:	f000 b8d8 	b.w	80125de <__retarget_lock_acquire_recursive>
 801242e:	bf00      	nop
 8012430:	20014b59 	.word	0x20014b59

08012434 <__sfp_lock_release>:
 8012434:	4801      	ldr	r0, [pc, #4]	; (801243c <__sfp_lock_release+0x8>)
 8012436:	f000 b8d3 	b.w	80125e0 <__retarget_lock_release_recursive>
 801243a:	bf00      	nop
 801243c:	20014b59 	.word	0x20014b59

08012440 <__sinit_lock_acquire>:
 8012440:	4801      	ldr	r0, [pc, #4]	; (8012448 <__sinit_lock_acquire+0x8>)
 8012442:	f000 b8cc 	b.w	80125de <__retarget_lock_acquire_recursive>
 8012446:	bf00      	nop
 8012448:	20014b5a 	.word	0x20014b5a

0801244c <__sinit_lock_release>:
 801244c:	4801      	ldr	r0, [pc, #4]	; (8012454 <__sinit_lock_release+0x8>)
 801244e:	f000 b8c7 	b.w	80125e0 <__retarget_lock_release_recursive>
 8012452:	bf00      	nop
 8012454:	20014b5a 	.word	0x20014b5a

08012458 <__sinit>:
 8012458:	b510      	push	{r4, lr}
 801245a:	4604      	mov	r4, r0
 801245c:	f7ff fff0 	bl	8012440 <__sinit_lock_acquire>
 8012460:	69a3      	ldr	r3, [r4, #24]
 8012462:	b11b      	cbz	r3, 801246c <__sinit+0x14>
 8012464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012468:	f7ff bff0 	b.w	801244c <__sinit_lock_release>
 801246c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012470:	6523      	str	r3, [r4, #80]	; 0x50
 8012472:	4b13      	ldr	r3, [pc, #76]	; (80124c0 <__sinit+0x68>)
 8012474:	4a13      	ldr	r2, [pc, #76]	; (80124c4 <__sinit+0x6c>)
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	62a2      	str	r2, [r4, #40]	; 0x28
 801247a:	42a3      	cmp	r3, r4
 801247c:	bf04      	itt	eq
 801247e:	2301      	moveq	r3, #1
 8012480:	61a3      	streq	r3, [r4, #24]
 8012482:	4620      	mov	r0, r4
 8012484:	f000 f820 	bl	80124c8 <__sfp>
 8012488:	6060      	str	r0, [r4, #4]
 801248a:	4620      	mov	r0, r4
 801248c:	f000 f81c 	bl	80124c8 <__sfp>
 8012490:	60a0      	str	r0, [r4, #8]
 8012492:	4620      	mov	r0, r4
 8012494:	f000 f818 	bl	80124c8 <__sfp>
 8012498:	2200      	movs	r2, #0
 801249a:	60e0      	str	r0, [r4, #12]
 801249c:	2104      	movs	r1, #4
 801249e:	6860      	ldr	r0, [r4, #4]
 80124a0:	f7ff ff82 	bl	80123a8 <std>
 80124a4:	68a0      	ldr	r0, [r4, #8]
 80124a6:	2201      	movs	r2, #1
 80124a8:	2109      	movs	r1, #9
 80124aa:	f7ff ff7d 	bl	80123a8 <std>
 80124ae:	68e0      	ldr	r0, [r4, #12]
 80124b0:	2202      	movs	r2, #2
 80124b2:	2112      	movs	r1, #18
 80124b4:	f7ff ff78 	bl	80123a8 <std>
 80124b8:	2301      	movs	r3, #1
 80124ba:	61a3      	str	r3, [r4, #24]
 80124bc:	e7d2      	b.n	8012464 <__sinit+0xc>
 80124be:	bf00      	nop
 80124c0:	08017760 	.word	0x08017760
 80124c4:	080123f1 	.word	0x080123f1

080124c8 <__sfp>:
 80124c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ca:	4607      	mov	r7, r0
 80124cc:	f7ff ffac 	bl	8012428 <__sfp_lock_acquire>
 80124d0:	4b1e      	ldr	r3, [pc, #120]	; (801254c <__sfp+0x84>)
 80124d2:	681e      	ldr	r6, [r3, #0]
 80124d4:	69b3      	ldr	r3, [r6, #24]
 80124d6:	b913      	cbnz	r3, 80124de <__sfp+0x16>
 80124d8:	4630      	mov	r0, r6
 80124da:	f7ff ffbd 	bl	8012458 <__sinit>
 80124de:	3648      	adds	r6, #72	; 0x48
 80124e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80124e4:	3b01      	subs	r3, #1
 80124e6:	d503      	bpl.n	80124f0 <__sfp+0x28>
 80124e8:	6833      	ldr	r3, [r6, #0]
 80124ea:	b30b      	cbz	r3, 8012530 <__sfp+0x68>
 80124ec:	6836      	ldr	r6, [r6, #0]
 80124ee:	e7f7      	b.n	80124e0 <__sfp+0x18>
 80124f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80124f4:	b9d5      	cbnz	r5, 801252c <__sfp+0x64>
 80124f6:	4b16      	ldr	r3, [pc, #88]	; (8012550 <__sfp+0x88>)
 80124f8:	60e3      	str	r3, [r4, #12]
 80124fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80124fe:	6665      	str	r5, [r4, #100]	; 0x64
 8012500:	f000 f86c 	bl	80125dc <__retarget_lock_init_recursive>
 8012504:	f7ff ff96 	bl	8012434 <__sfp_lock_release>
 8012508:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801250c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8012510:	6025      	str	r5, [r4, #0]
 8012512:	61a5      	str	r5, [r4, #24]
 8012514:	2208      	movs	r2, #8
 8012516:	4629      	mov	r1, r5
 8012518:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801251c:	f000 f86f 	bl	80125fe <memset>
 8012520:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012524:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012528:	4620      	mov	r0, r4
 801252a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801252c:	3468      	adds	r4, #104	; 0x68
 801252e:	e7d9      	b.n	80124e4 <__sfp+0x1c>
 8012530:	2104      	movs	r1, #4
 8012532:	4638      	mov	r0, r7
 8012534:	f7ff ff62 	bl	80123fc <__sfmoreglue>
 8012538:	4604      	mov	r4, r0
 801253a:	6030      	str	r0, [r6, #0]
 801253c:	2800      	cmp	r0, #0
 801253e:	d1d5      	bne.n	80124ec <__sfp+0x24>
 8012540:	f7ff ff78 	bl	8012434 <__sfp_lock_release>
 8012544:	230c      	movs	r3, #12
 8012546:	603b      	str	r3, [r7, #0]
 8012548:	e7ee      	b.n	8012528 <__sfp+0x60>
 801254a:	bf00      	nop
 801254c:	08017760 	.word	0x08017760
 8012550:	ffff0001 	.word	0xffff0001

08012554 <_fwalk_reent>:
 8012554:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012558:	4606      	mov	r6, r0
 801255a:	4688      	mov	r8, r1
 801255c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012560:	2700      	movs	r7, #0
 8012562:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012566:	f1b9 0901 	subs.w	r9, r9, #1
 801256a:	d505      	bpl.n	8012578 <_fwalk_reent+0x24>
 801256c:	6824      	ldr	r4, [r4, #0]
 801256e:	2c00      	cmp	r4, #0
 8012570:	d1f7      	bne.n	8012562 <_fwalk_reent+0xe>
 8012572:	4638      	mov	r0, r7
 8012574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012578:	89ab      	ldrh	r3, [r5, #12]
 801257a:	2b01      	cmp	r3, #1
 801257c:	d907      	bls.n	801258e <_fwalk_reent+0x3a>
 801257e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012582:	3301      	adds	r3, #1
 8012584:	d003      	beq.n	801258e <_fwalk_reent+0x3a>
 8012586:	4629      	mov	r1, r5
 8012588:	4630      	mov	r0, r6
 801258a:	47c0      	blx	r8
 801258c:	4307      	orrs	r7, r0
 801258e:	3568      	adds	r5, #104	; 0x68
 8012590:	e7e9      	b.n	8012566 <_fwalk_reent+0x12>
	...

08012594 <__libc_init_array>:
 8012594:	b570      	push	{r4, r5, r6, lr}
 8012596:	4d0d      	ldr	r5, [pc, #52]	; (80125cc <__libc_init_array+0x38>)
 8012598:	4c0d      	ldr	r4, [pc, #52]	; (80125d0 <__libc_init_array+0x3c>)
 801259a:	1b64      	subs	r4, r4, r5
 801259c:	10a4      	asrs	r4, r4, #2
 801259e:	2600      	movs	r6, #0
 80125a0:	42a6      	cmp	r6, r4
 80125a2:	d109      	bne.n	80125b8 <__libc_init_array+0x24>
 80125a4:	4d0b      	ldr	r5, [pc, #44]	; (80125d4 <__libc_init_array+0x40>)
 80125a6:	4c0c      	ldr	r4, [pc, #48]	; (80125d8 <__libc_init_array+0x44>)
 80125a8:	f004 fc00 	bl	8016dac <_init>
 80125ac:	1b64      	subs	r4, r4, r5
 80125ae:	10a4      	asrs	r4, r4, #2
 80125b0:	2600      	movs	r6, #0
 80125b2:	42a6      	cmp	r6, r4
 80125b4:	d105      	bne.n	80125c2 <__libc_init_array+0x2e>
 80125b6:	bd70      	pop	{r4, r5, r6, pc}
 80125b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80125bc:	4798      	blx	r3
 80125be:	3601      	adds	r6, #1
 80125c0:	e7ee      	b.n	80125a0 <__libc_init_array+0xc>
 80125c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80125c6:	4798      	blx	r3
 80125c8:	3601      	adds	r6, #1
 80125ca:	e7f2      	b.n	80125b2 <__libc_init_array+0x1e>
 80125cc:	08017bac 	.word	0x08017bac
 80125d0:	08017bac 	.word	0x08017bac
 80125d4:	08017bac 	.word	0x08017bac
 80125d8:	08017bb4 	.word	0x08017bb4

080125dc <__retarget_lock_init_recursive>:
 80125dc:	4770      	bx	lr

080125de <__retarget_lock_acquire_recursive>:
 80125de:	4770      	bx	lr

080125e0 <__retarget_lock_release_recursive>:
 80125e0:	4770      	bx	lr

080125e2 <memcpy>:
 80125e2:	440a      	add	r2, r1
 80125e4:	4291      	cmp	r1, r2
 80125e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80125ea:	d100      	bne.n	80125ee <memcpy+0xc>
 80125ec:	4770      	bx	lr
 80125ee:	b510      	push	{r4, lr}
 80125f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80125f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80125f8:	4291      	cmp	r1, r2
 80125fa:	d1f9      	bne.n	80125f0 <memcpy+0xe>
 80125fc:	bd10      	pop	{r4, pc}

080125fe <memset>:
 80125fe:	4402      	add	r2, r0
 8012600:	4603      	mov	r3, r0
 8012602:	4293      	cmp	r3, r2
 8012604:	d100      	bne.n	8012608 <memset+0xa>
 8012606:	4770      	bx	lr
 8012608:	f803 1b01 	strb.w	r1, [r3], #1
 801260c:	e7f9      	b.n	8012602 <memset+0x4>
	...

08012610 <sbrk_aligned>:
 8012610:	b570      	push	{r4, r5, r6, lr}
 8012612:	4e0e      	ldr	r6, [pc, #56]	; (801264c <sbrk_aligned+0x3c>)
 8012614:	460c      	mov	r4, r1
 8012616:	6831      	ldr	r1, [r6, #0]
 8012618:	4605      	mov	r5, r0
 801261a:	b911      	cbnz	r1, 8012622 <sbrk_aligned+0x12>
 801261c:	f000 ff78 	bl	8013510 <_sbrk_r>
 8012620:	6030      	str	r0, [r6, #0]
 8012622:	4621      	mov	r1, r4
 8012624:	4628      	mov	r0, r5
 8012626:	f000 ff73 	bl	8013510 <_sbrk_r>
 801262a:	1c43      	adds	r3, r0, #1
 801262c:	d00a      	beq.n	8012644 <sbrk_aligned+0x34>
 801262e:	1cc4      	adds	r4, r0, #3
 8012630:	f024 0403 	bic.w	r4, r4, #3
 8012634:	42a0      	cmp	r0, r4
 8012636:	d007      	beq.n	8012648 <sbrk_aligned+0x38>
 8012638:	1a21      	subs	r1, r4, r0
 801263a:	4628      	mov	r0, r5
 801263c:	f000 ff68 	bl	8013510 <_sbrk_r>
 8012640:	3001      	adds	r0, #1
 8012642:	d101      	bne.n	8012648 <sbrk_aligned+0x38>
 8012644:	f04f 34ff 	mov.w	r4, #4294967295
 8012648:	4620      	mov	r0, r4
 801264a:	bd70      	pop	{r4, r5, r6, pc}
 801264c:	20014b60 	.word	0x20014b60

08012650 <_malloc_r>:
 8012650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012654:	1ccd      	adds	r5, r1, #3
 8012656:	f025 0503 	bic.w	r5, r5, #3
 801265a:	3508      	adds	r5, #8
 801265c:	2d0c      	cmp	r5, #12
 801265e:	bf38      	it	cc
 8012660:	250c      	movcc	r5, #12
 8012662:	2d00      	cmp	r5, #0
 8012664:	4607      	mov	r7, r0
 8012666:	db01      	blt.n	801266c <_malloc_r+0x1c>
 8012668:	42a9      	cmp	r1, r5
 801266a:	d905      	bls.n	8012678 <_malloc_r+0x28>
 801266c:	230c      	movs	r3, #12
 801266e:	603b      	str	r3, [r7, #0]
 8012670:	2600      	movs	r6, #0
 8012672:	4630      	mov	r0, r6
 8012674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012678:	4e2e      	ldr	r6, [pc, #184]	; (8012734 <_malloc_r+0xe4>)
 801267a:	f003 f9ad 	bl	80159d8 <__malloc_lock>
 801267e:	6833      	ldr	r3, [r6, #0]
 8012680:	461c      	mov	r4, r3
 8012682:	bb34      	cbnz	r4, 80126d2 <_malloc_r+0x82>
 8012684:	4629      	mov	r1, r5
 8012686:	4638      	mov	r0, r7
 8012688:	f7ff ffc2 	bl	8012610 <sbrk_aligned>
 801268c:	1c43      	adds	r3, r0, #1
 801268e:	4604      	mov	r4, r0
 8012690:	d14d      	bne.n	801272e <_malloc_r+0xde>
 8012692:	6834      	ldr	r4, [r6, #0]
 8012694:	4626      	mov	r6, r4
 8012696:	2e00      	cmp	r6, #0
 8012698:	d140      	bne.n	801271c <_malloc_r+0xcc>
 801269a:	6823      	ldr	r3, [r4, #0]
 801269c:	4631      	mov	r1, r6
 801269e:	4638      	mov	r0, r7
 80126a0:	eb04 0803 	add.w	r8, r4, r3
 80126a4:	f000 ff34 	bl	8013510 <_sbrk_r>
 80126a8:	4580      	cmp	r8, r0
 80126aa:	d13a      	bne.n	8012722 <_malloc_r+0xd2>
 80126ac:	6821      	ldr	r1, [r4, #0]
 80126ae:	3503      	adds	r5, #3
 80126b0:	1a6d      	subs	r5, r5, r1
 80126b2:	f025 0503 	bic.w	r5, r5, #3
 80126b6:	3508      	adds	r5, #8
 80126b8:	2d0c      	cmp	r5, #12
 80126ba:	bf38      	it	cc
 80126bc:	250c      	movcc	r5, #12
 80126be:	4629      	mov	r1, r5
 80126c0:	4638      	mov	r0, r7
 80126c2:	f7ff ffa5 	bl	8012610 <sbrk_aligned>
 80126c6:	3001      	adds	r0, #1
 80126c8:	d02b      	beq.n	8012722 <_malloc_r+0xd2>
 80126ca:	6823      	ldr	r3, [r4, #0]
 80126cc:	442b      	add	r3, r5
 80126ce:	6023      	str	r3, [r4, #0]
 80126d0:	e00e      	b.n	80126f0 <_malloc_r+0xa0>
 80126d2:	6822      	ldr	r2, [r4, #0]
 80126d4:	1b52      	subs	r2, r2, r5
 80126d6:	d41e      	bmi.n	8012716 <_malloc_r+0xc6>
 80126d8:	2a0b      	cmp	r2, #11
 80126da:	d916      	bls.n	801270a <_malloc_r+0xba>
 80126dc:	1961      	adds	r1, r4, r5
 80126de:	42a3      	cmp	r3, r4
 80126e0:	6025      	str	r5, [r4, #0]
 80126e2:	bf18      	it	ne
 80126e4:	6059      	strne	r1, [r3, #4]
 80126e6:	6863      	ldr	r3, [r4, #4]
 80126e8:	bf08      	it	eq
 80126ea:	6031      	streq	r1, [r6, #0]
 80126ec:	5162      	str	r2, [r4, r5]
 80126ee:	604b      	str	r3, [r1, #4]
 80126f0:	4638      	mov	r0, r7
 80126f2:	f104 060b 	add.w	r6, r4, #11
 80126f6:	f003 f975 	bl	80159e4 <__malloc_unlock>
 80126fa:	f026 0607 	bic.w	r6, r6, #7
 80126fe:	1d23      	adds	r3, r4, #4
 8012700:	1af2      	subs	r2, r6, r3
 8012702:	d0b6      	beq.n	8012672 <_malloc_r+0x22>
 8012704:	1b9b      	subs	r3, r3, r6
 8012706:	50a3      	str	r3, [r4, r2]
 8012708:	e7b3      	b.n	8012672 <_malloc_r+0x22>
 801270a:	6862      	ldr	r2, [r4, #4]
 801270c:	42a3      	cmp	r3, r4
 801270e:	bf0c      	ite	eq
 8012710:	6032      	streq	r2, [r6, #0]
 8012712:	605a      	strne	r2, [r3, #4]
 8012714:	e7ec      	b.n	80126f0 <_malloc_r+0xa0>
 8012716:	4623      	mov	r3, r4
 8012718:	6864      	ldr	r4, [r4, #4]
 801271a:	e7b2      	b.n	8012682 <_malloc_r+0x32>
 801271c:	4634      	mov	r4, r6
 801271e:	6876      	ldr	r6, [r6, #4]
 8012720:	e7b9      	b.n	8012696 <_malloc_r+0x46>
 8012722:	230c      	movs	r3, #12
 8012724:	603b      	str	r3, [r7, #0]
 8012726:	4638      	mov	r0, r7
 8012728:	f003 f95c 	bl	80159e4 <__malloc_unlock>
 801272c:	e7a1      	b.n	8012672 <_malloc_r+0x22>
 801272e:	6025      	str	r5, [r4, #0]
 8012730:	e7de      	b.n	80126f0 <_malloc_r+0xa0>
 8012732:	bf00      	nop
 8012734:	20014b5c 	.word	0x20014b5c

08012738 <__cvt>:
 8012738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801273c:	ec55 4b10 	vmov	r4, r5, d0
 8012740:	2d00      	cmp	r5, #0
 8012742:	460e      	mov	r6, r1
 8012744:	4619      	mov	r1, r3
 8012746:	462b      	mov	r3, r5
 8012748:	bfbb      	ittet	lt
 801274a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801274e:	461d      	movlt	r5, r3
 8012750:	2300      	movge	r3, #0
 8012752:	232d      	movlt	r3, #45	; 0x2d
 8012754:	700b      	strb	r3, [r1, #0]
 8012756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012758:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801275c:	4691      	mov	r9, r2
 801275e:	f023 0820 	bic.w	r8, r3, #32
 8012762:	bfbc      	itt	lt
 8012764:	4622      	movlt	r2, r4
 8012766:	4614      	movlt	r4, r2
 8012768:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801276c:	d005      	beq.n	801277a <__cvt+0x42>
 801276e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012772:	d100      	bne.n	8012776 <__cvt+0x3e>
 8012774:	3601      	adds	r6, #1
 8012776:	2102      	movs	r1, #2
 8012778:	e000      	b.n	801277c <__cvt+0x44>
 801277a:	2103      	movs	r1, #3
 801277c:	ab03      	add	r3, sp, #12
 801277e:	9301      	str	r3, [sp, #4]
 8012780:	ab02      	add	r3, sp, #8
 8012782:	9300      	str	r3, [sp, #0]
 8012784:	ec45 4b10 	vmov	d0, r4, r5
 8012788:	4653      	mov	r3, sl
 801278a:	4632      	mov	r2, r6
 801278c:	f001 fed4 	bl	8014538 <_dtoa_r>
 8012790:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012794:	4607      	mov	r7, r0
 8012796:	d102      	bne.n	801279e <__cvt+0x66>
 8012798:	f019 0f01 	tst.w	r9, #1
 801279c:	d022      	beq.n	80127e4 <__cvt+0xac>
 801279e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80127a2:	eb07 0906 	add.w	r9, r7, r6
 80127a6:	d110      	bne.n	80127ca <__cvt+0x92>
 80127a8:	783b      	ldrb	r3, [r7, #0]
 80127aa:	2b30      	cmp	r3, #48	; 0x30
 80127ac:	d10a      	bne.n	80127c4 <__cvt+0x8c>
 80127ae:	2200      	movs	r2, #0
 80127b0:	2300      	movs	r3, #0
 80127b2:	4620      	mov	r0, r4
 80127b4:	4629      	mov	r1, r5
 80127b6:	f7ee f987 	bl	8000ac8 <__aeabi_dcmpeq>
 80127ba:	b918      	cbnz	r0, 80127c4 <__cvt+0x8c>
 80127bc:	f1c6 0601 	rsb	r6, r6, #1
 80127c0:	f8ca 6000 	str.w	r6, [sl]
 80127c4:	f8da 3000 	ldr.w	r3, [sl]
 80127c8:	4499      	add	r9, r3
 80127ca:	2200      	movs	r2, #0
 80127cc:	2300      	movs	r3, #0
 80127ce:	4620      	mov	r0, r4
 80127d0:	4629      	mov	r1, r5
 80127d2:	f7ee f979 	bl	8000ac8 <__aeabi_dcmpeq>
 80127d6:	b108      	cbz	r0, 80127dc <__cvt+0xa4>
 80127d8:	f8cd 900c 	str.w	r9, [sp, #12]
 80127dc:	2230      	movs	r2, #48	; 0x30
 80127de:	9b03      	ldr	r3, [sp, #12]
 80127e0:	454b      	cmp	r3, r9
 80127e2:	d307      	bcc.n	80127f4 <__cvt+0xbc>
 80127e4:	9b03      	ldr	r3, [sp, #12]
 80127e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80127e8:	1bdb      	subs	r3, r3, r7
 80127ea:	4638      	mov	r0, r7
 80127ec:	6013      	str	r3, [r2, #0]
 80127ee:	b004      	add	sp, #16
 80127f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127f4:	1c59      	adds	r1, r3, #1
 80127f6:	9103      	str	r1, [sp, #12]
 80127f8:	701a      	strb	r2, [r3, #0]
 80127fa:	e7f0      	b.n	80127de <__cvt+0xa6>

080127fc <__exponent>:
 80127fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80127fe:	4603      	mov	r3, r0
 8012800:	2900      	cmp	r1, #0
 8012802:	bfb8      	it	lt
 8012804:	4249      	neglt	r1, r1
 8012806:	f803 2b02 	strb.w	r2, [r3], #2
 801280a:	bfb4      	ite	lt
 801280c:	222d      	movlt	r2, #45	; 0x2d
 801280e:	222b      	movge	r2, #43	; 0x2b
 8012810:	2909      	cmp	r1, #9
 8012812:	7042      	strb	r2, [r0, #1]
 8012814:	dd2a      	ble.n	801286c <__exponent+0x70>
 8012816:	f10d 0407 	add.w	r4, sp, #7
 801281a:	46a4      	mov	ip, r4
 801281c:	270a      	movs	r7, #10
 801281e:	46a6      	mov	lr, r4
 8012820:	460a      	mov	r2, r1
 8012822:	fb91 f6f7 	sdiv	r6, r1, r7
 8012826:	fb07 1516 	mls	r5, r7, r6, r1
 801282a:	3530      	adds	r5, #48	; 0x30
 801282c:	2a63      	cmp	r2, #99	; 0x63
 801282e:	f104 34ff 	add.w	r4, r4, #4294967295
 8012832:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012836:	4631      	mov	r1, r6
 8012838:	dcf1      	bgt.n	801281e <__exponent+0x22>
 801283a:	3130      	adds	r1, #48	; 0x30
 801283c:	f1ae 0502 	sub.w	r5, lr, #2
 8012840:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012844:	1c44      	adds	r4, r0, #1
 8012846:	4629      	mov	r1, r5
 8012848:	4561      	cmp	r1, ip
 801284a:	d30a      	bcc.n	8012862 <__exponent+0x66>
 801284c:	f10d 0209 	add.w	r2, sp, #9
 8012850:	eba2 020e 	sub.w	r2, r2, lr
 8012854:	4565      	cmp	r5, ip
 8012856:	bf88      	it	hi
 8012858:	2200      	movhi	r2, #0
 801285a:	4413      	add	r3, r2
 801285c:	1a18      	subs	r0, r3, r0
 801285e:	b003      	add	sp, #12
 8012860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012866:	f804 2f01 	strb.w	r2, [r4, #1]!
 801286a:	e7ed      	b.n	8012848 <__exponent+0x4c>
 801286c:	2330      	movs	r3, #48	; 0x30
 801286e:	3130      	adds	r1, #48	; 0x30
 8012870:	7083      	strb	r3, [r0, #2]
 8012872:	70c1      	strb	r1, [r0, #3]
 8012874:	1d03      	adds	r3, r0, #4
 8012876:	e7f1      	b.n	801285c <__exponent+0x60>

08012878 <_printf_float>:
 8012878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801287c:	ed2d 8b02 	vpush	{d8}
 8012880:	b08d      	sub	sp, #52	; 0x34
 8012882:	460c      	mov	r4, r1
 8012884:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012888:	4616      	mov	r6, r2
 801288a:	461f      	mov	r7, r3
 801288c:	4605      	mov	r5, r0
 801288e:	f003 f873 	bl	8015978 <_localeconv_r>
 8012892:	f8d0 a000 	ldr.w	sl, [r0]
 8012896:	4650      	mov	r0, sl
 8012898:	f7ed fc9a 	bl	80001d0 <strlen>
 801289c:	2300      	movs	r3, #0
 801289e:	930a      	str	r3, [sp, #40]	; 0x28
 80128a0:	6823      	ldr	r3, [r4, #0]
 80128a2:	9305      	str	r3, [sp, #20]
 80128a4:	f8d8 3000 	ldr.w	r3, [r8]
 80128a8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80128ac:	3307      	adds	r3, #7
 80128ae:	f023 0307 	bic.w	r3, r3, #7
 80128b2:	f103 0208 	add.w	r2, r3, #8
 80128b6:	f8c8 2000 	str.w	r2, [r8]
 80128ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128be:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80128c2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80128c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80128ca:	9307      	str	r3, [sp, #28]
 80128cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80128d0:	ee08 0a10 	vmov	s16, r0
 80128d4:	4b9f      	ldr	r3, [pc, #636]	; (8012b54 <_printf_float+0x2dc>)
 80128d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128da:	f04f 32ff 	mov.w	r2, #4294967295
 80128de:	f7ee f925 	bl	8000b2c <__aeabi_dcmpun>
 80128e2:	bb88      	cbnz	r0, 8012948 <_printf_float+0xd0>
 80128e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128e8:	4b9a      	ldr	r3, [pc, #616]	; (8012b54 <_printf_float+0x2dc>)
 80128ea:	f04f 32ff 	mov.w	r2, #4294967295
 80128ee:	f7ee f8ff 	bl	8000af0 <__aeabi_dcmple>
 80128f2:	bb48      	cbnz	r0, 8012948 <_printf_float+0xd0>
 80128f4:	2200      	movs	r2, #0
 80128f6:	2300      	movs	r3, #0
 80128f8:	4640      	mov	r0, r8
 80128fa:	4649      	mov	r1, r9
 80128fc:	f7ee f8ee 	bl	8000adc <__aeabi_dcmplt>
 8012900:	b110      	cbz	r0, 8012908 <_printf_float+0x90>
 8012902:	232d      	movs	r3, #45	; 0x2d
 8012904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012908:	4b93      	ldr	r3, [pc, #588]	; (8012b58 <_printf_float+0x2e0>)
 801290a:	4894      	ldr	r0, [pc, #592]	; (8012b5c <_printf_float+0x2e4>)
 801290c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012910:	bf94      	ite	ls
 8012912:	4698      	movls	r8, r3
 8012914:	4680      	movhi	r8, r0
 8012916:	2303      	movs	r3, #3
 8012918:	6123      	str	r3, [r4, #16]
 801291a:	9b05      	ldr	r3, [sp, #20]
 801291c:	f023 0204 	bic.w	r2, r3, #4
 8012920:	6022      	str	r2, [r4, #0]
 8012922:	f04f 0900 	mov.w	r9, #0
 8012926:	9700      	str	r7, [sp, #0]
 8012928:	4633      	mov	r3, r6
 801292a:	aa0b      	add	r2, sp, #44	; 0x2c
 801292c:	4621      	mov	r1, r4
 801292e:	4628      	mov	r0, r5
 8012930:	f000 f9d8 	bl	8012ce4 <_printf_common>
 8012934:	3001      	adds	r0, #1
 8012936:	f040 8090 	bne.w	8012a5a <_printf_float+0x1e2>
 801293a:	f04f 30ff 	mov.w	r0, #4294967295
 801293e:	b00d      	add	sp, #52	; 0x34
 8012940:	ecbd 8b02 	vpop	{d8}
 8012944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012948:	4642      	mov	r2, r8
 801294a:	464b      	mov	r3, r9
 801294c:	4640      	mov	r0, r8
 801294e:	4649      	mov	r1, r9
 8012950:	f7ee f8ec 	bl	8000b2c <__aeabi_dcmpun>
 8012954:	b140      	cbz	r0, 8012968 <_printf_float+0xf0>
 8012956:	464b      	mov	r3, r9
 8012958:	2b00      	cmp	r3, #0
 801295a:	bfbc      	itt	lt
 801295c:	232d      	movlt	r3, #45	; 0x2d
 801295e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012962:	487f      	ldr	r0, [pc, #508]	; (8012b60 <_printf_float+0x2e8>)
 8012964:	4b7f      	ldr	r3, [pc, #508]	; (8012b64 <_printf_float+0x2ec>)
 8012966:	e7d1      	b.n	801290c <_printf_float+0x94>
 8012968:	6863      	ldr	r3, [r4, #4]
 801296a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801296e:	9206      	str	r2, [sp, #24]
 8012970:	1c5a      	adds	r2, r3, #1
 8012972:	d13f      	bne.n	80129f4 <_printf_float+0x17c>
 8012974:	2306      	movs	r3, #6
 8012976:	6063      	str	r3, [r4, #4]
 8012978:	9b05      	ldr	r3, [sp, #20]
 801297a:	6861      	ldr	r1, [r4, #4]
 801297c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012980:	2300      	movs	r3, #0
 8012982:	9303      	str	r3, [sp, #12]
 8012984:	ab0a      	add	r3, sp, #40	; 0x28
 8012986:	e9cd b301 	strd	fp, r3, [sp, #4]
 801298a:	ab09      	add	r3, sp, #36	; 0x24
 801298c:	ec49 8b10 	vmov	d0, r8, r9
 8012990:	9300      	str	r3, [sp, #0]
 8012992:	6022      	str	r2, [r4, #0]
 8012994:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012998:	4628      	mov	r0, r5
 801299a:	f7ff fecd 	bl	8012738 <__cvt>
 801299e:	9b06      	ldr	r3, [sp, #24]
 80129a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80129a2:	2b47      	cmp	r3, #71	; 0x47
 80129a4:	4680      	mov	r8, r0
 80129a6:	d108      	bne.n	80129ba <_printf_float+0x142>
 80129a8:	1cc8      	adds	r0, r1, #3
 80129aa:	db02      	blt.n	80129b2 <_printf_float+0x13a>
 80129ac:	6863      	ldr	r3, [r4, #4]
 80129ae:	4299      	cmp	r1, r3
 80129b0:	dd41      	ble.n	8012a36 <_printf_float+0x1be>
 80129b2:	f1ab 0b02 	sub.w	fp, fp, #2
 80129b6:	fa5f fb8b 	uxtb.w	fp, fp
 80129ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80129be:	d820      	bhi.n	8012a02 <_printf_float+0x18a>
 80129c0:	3901      	subs	r1, #1
 80129c2:	465a      	mov	r2, fp
 80129c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80129c8:	9109      	str	r1, [sp, #36]	; 0x24
 80129ca:	f7ff ff17 	bl	80127fc <__exponent>
 80129ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80129d0:	1813      	adds	r3, r2, r0
 80129d2:	2a01      	cmp	r2, #1
 80129d4:	4681      	mov	r9, r0
 80129d6:	6123      	str	r3, [r4, #16]
 80129d8:	dc02      	bgt.n	80129e0 <_printf_float+0x168>
 80129da:	6822      	ldr	r2, [r4, #0]
 80129dc:	07d2      	lsls	r2, r2, #31
 80129de:	d501      	bpl.n	80129e4 <_printf_float+0x16c>
 80129e0:	3301      	adds	r3, #1
 80129e2:	6123      	str	r3, [r4, #16]
 80129e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d09c      	beq.n	8012926 <_printf_float+0xae>
 80129ec:	232d      	movs	r3, #45	; 0x2d
 80129ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80129f2:	e798      	b.n	8012926 <_printf_float+0xae>
 80129f4:	9a06      	ldr	r2, [sp, #24]
 80129f6:	2a47      	cmp	r2, #71	; 0x47
 80129f8:	d1be      	bne.n	8012978 <_printf_float+0x100>
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d1bc      	bne.n	8012978 <_printf_float+0x100>
 80129fe:	2301      	movs	r3, #1
 8012a00:	e7b9      	b.n	8012976 <_printf_float+0xfe>
 8012a02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012a06:	d118      	bne.n	8012a3a <_printf_float+0x1c2>
 8012a08:	2900      	cmp	r1, #0
 8012a0a:	6863      	ldr	r3, [r4, #4]
 8012a0c:	dd0b      	ble.n	8012a26 <_printf_float+0x1ae>
 8012a0e:	6121      	str	r1, [r4, #16]
 8012a10:	b913      	cbnz	r3, 8012a18 <_printf_float+0x1a0>
 8012a12:	6822      	ldr	r2, [r4, #0]
 8012a14:	07d0      	lsls	r0, r2, #31
 8012a16:	d502      	bpl.n	8012a1e <_printf_float+0x1a6>
 8012a18:	3301      	adds	r3, #1
 8012a1a:	440b      	add	r3, r1
 8012a1c:	6123      	str	r3, [r4, #16]
 8012a1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012a20:	f04f 0900 	mov.w	r9, #0
 8012a24:	e7de      	b.n	80129e4 <_printf_float+0x16c>
 8012a26:	b913      	cbnz	r3, 8012a2e <_printf_float+0x1b6>
 8012a28:	6822      	ldr	r2, [r4, #0]
 8012a2a:	07d2      	lsls	r2, r2, #31
 8012a2c:	d501      	bpl.n	8012a32 <_printf_float+0x1ba>
 8012a2e:	3302      	adds	r3, #2
 8012a30:	e7f4      	b.n	8012a1c <_printf_float+0x1a4>
 8012a32:	2301      	movs	r3, #1
 8012a34:	e7f2      	b.n	8012a1c <_printf_float+0x1a4>
 8012a36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a3c:	4299      	cmp	r1, r3
 8012a3e:	db05      	blt.n	8012a4c <_printf_float+0x1d4>
 8012a40:	6823      	ldr	r3, [r4, #0]
 8012a42:	6121      	str	r1, [r4, #16]
 8012a44:	07d8      	lsls	r0, r3, #31
 8012a46:	d5ea      	bpl.n	8012a1e <_printf_float+0x1a6>
 8012a48:	1c4b      	adds	r3, r1, #1
 8012a4a:	e7e7      	b.n	8012a1c <_printf_float+0x1a4>
 8012a4c:	2900      	cmp	r1, #0
 8012a4e:	bfd4      	ite	le
 8012a50:	f1c1 0202 	rsble	r2, r1, #2
 8012a54:	2201      	movgt	r2, #1
 8012a56:	4413      	add	r3, r2
 8012a58:	e7e0      	b.n	8012a1c <_printf_float+0x1a4>
 8012a5a:	6823      	ldr	r3, [r4, #0]
 8012a5c:	055a      	lsls	r2, r3, #21
 8012a5e:	d407      	bmi.n	8012a70 <_printf_float+0x1f8>
 8012a60:	6923      	ldr	r3, [r4, #16]
 8012a62:	4642      	mov	r2, r8
 8012a64:	4631      	mov	r1, r6
 8012a66:	4628      	mov	r0, r5
 8012a68:	47b8      	blx	r7
 8012a6a:	3001      	adds	r0, #1
 8012a6c:	d12c      	bne.n	8012ac8 <_printf_float+0x250>
 8012a6e:	e764      	b.n	801293a <_printf_float+0xc2>
 8012a70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012a74:	f240 80e0 	bls.w	8012c38 <_printf_float+0x3c0>
 8012a78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	2300      	movs	r3, #0
 8012a80:	f7ee f822 	bl	8000ac8 <__aeabi_dcmpeq>
 8012a84:	2800      	cmp	r0, #0
 8012a86:	d034      	beq.n	8012af2 <_printf_float+0x27a>
 8012a88:	4a37      	ldr	r2, [pc, #220]	; (8012b68 <_printf_float+0x2f0>)
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	4631      	mov	r1, r6
 8012a8e:	4628      	mov	r0, r5
 8012a90:	47b8      	blx	r7
 8012a92:	3001      	adds	r0, #1
 8012a94:	f43f af51 	beq.w	801293a <_printf_float+0xc2>
 8012a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a9c:	429a      	cmp	r2, r3
 8012a9e:	db02      	blt.n	8012aa6 <_printf_float+0x22e>
 8012aa0:	6823      	ldr	r3, [r4, #0]
 8012aa2:	07d8      	lsls	r0, r3, #31
 8012aa4:	d510      	bpl.n	8012ac8 <_printf_float+0x250>
 8012aa6:	ee18 3a10 	vmov	r3, s16
 8012aaa:	4652      	mov	r2, sl
 8012aac:	4631      	mov	r1, r6
 8012aae:	4628      	mov	r0, r5
 8012ab0:	47b8      	blx	r7
 8012ab2:	3001      	adds	r0, #1
 8012ab4:	f43f af41 	beq.w	801293a <_printf_float+0xc2>
 8012ab8:	f04f 0800 	mov.w	r8, #0
 8012abc:	f104 091a 	add.w	r9, r4, #26
 8012ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ac2:	3b01      	subs	r3, #1
 8012ac4:	4543      	cmp	r3, r8
 8012ac6:	dc09      	bgt.n	8012adc <_printf_float+0x264>
 8012ac8:	6823      	ldr	r3, [r4, #0]
 8012aca:	079b      	lsls	r3, r3, #30
 8012acc:	f100 8105 	bmi.w	8012cda <_printf_float+0x462>
 8012ad0:	68e0      	ldr	r0, [r4, #12]
 8012ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ad4:	4298      	cmp	r0, r3
 8012ad6:	bfb8      	it	lt
 8012ad8:	4618      	movlt	r0, r3
 8012ada:	e730      	b.n	801293e <_printf_float+0xc6>
 8012adc:	2301      	movs	r3, #1
 8012ade:	464a      	mov	r2, r9
 8012ae0:	4631      	mov	r1, r6
 8012ae2:	4628      	mov	r0, r5
 8012ae4:	47b8      	blx	r7
 8012ae6:	3001      	adds	r0, #1
 8012ae8:	f43f af27 	beq.w	801293a <_printf_float+0xc2>
 8012aec:	f108 0801 	add.w	r8, r8, #1
 8012af0:	e7e6      	b.n	8012ac0 <_printf_float+0x248>
 8012af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	dc39      	bgt.n	8012b6c <_printf_float+0x2f4>
 8012af8:	4a1b      	ldr	r2, [pc, #108]	; (8012b68 <_printf_float+0x2f0>)
 8012afa:	2301      	movs	r3, #1
 8012afc:	4631      	mov	r1, r6
 8012afe:	4628      	mov	r0, r5
 8012b00:	47b8      	blx	r7
 8012b02:	3001      	adds	r0, #1
 8012b04:	f43f af19 	beq.w	801293a <_printf_float+0xc2>
 8012b08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b0c:	4313      	orrs	r3, r2
 8012b0e:	d102      	bne.n	8012b16 <_printf_float+0x29e>
 8012b10:	6823      	ldr	r3, [r4, #0]
 8012b12:	07d9      	lsls	r1, r3, #31
 8012b14:	d5d8      	bpl.n	8012ac8 <_printf_float+0x250>
 8012b16:	ee18 3a10 	vmov	r3, s16
 8012b1a:	4652      	mov	r2, sl
 8012b1c:	4631      	mov	r1, r6
 8012b1e:	4628      	mov	r0, r5
 8012b20:	47b8      	blx	r7
 8012b22:	3001      	adds	r0, #1
 8012b24:	f43f af09 	beq.w	801293a <_printf_float+0xc2>
 8012b28:	f04f 0900 	mov.w	r9, #0
 8012b2c:	f104 0a1a 	add.w	sl, r4, #26
 8012b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b32:	425b      	negs	r3, r3
 8012b34:	454b      	cmp	r3, r9
 8012b36:	dc01      	bgt.n	8012b3c <_printf_float+0x2c4>
 8012b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b3a:	e792      	b.n	8012a62 <_printf_float+0x1ea>
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	4652      	mov	r2, sl
 8012b40:	4631      	mov	r1, r6
 8012b42:	4628      	mov	r0, r5
 8012b44:	47b8      	blx	r7
 8012b46:	3001      	adds	r0, #1
 8012b48:	f43f aef7 	beq.w	801293a <_printf_float+0xc2>
 8012b4c:	f109 0901 	add.w	r9, r9, #1
 8012b50:	e7ee      	b.n	8012b30 <_printf_float+0x2b8>
 8012b52:	bf00      	nop
 8012b54:	7fefffff 	.word	0x7fefffff
 8012b58:	08017764 	.word	0x08017764
 8012b5c:	08017768 	.word	0x08017768
 8012b60:	08017770 	.word	0x08017770
 8012b64:	0801776c 	.word	0x0801776c
 8012b68:	08017774 	.word	0x08017774
 8012b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012b70:	429a      	cmp	r2, r3
 8012b72:	bfa8      	it	ge
 8012b74:	461a      	movge	r2, r3
 8012b76:	2a00      	cmp	r2, #0
 8012b78:	4691      	mov	r9, r2
 8012b7a:	dc37      	bgt.n	8012bec <_printf_float+0x374>
 8012b7c:	f04f 0b00 	mov.w	fp, #0
 8012b80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012b84:	f104 021a 	add.w	r2, r4, #26
 8012b88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012b8a:	9305      	str	r3, [sp, #20]
 8012b8c:	eba3 0309 	sub.w	r3, r3, r9
 8012b90:	455b      	cmp	r3, fp
 8012b92:	dc33      	bgt.n	8012bfc <_printf_float+0x384>
 8012b94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	db3b      	blt.n	8012c14 <_printf_float+0x39c>
 8012b9c:	6823      	ldr	r3, [r4, #0]
 8012b9e:	07da      	lsls	r2, r3, #31
 8012ba0:	d438      	bmi.n	8012c14 <_printf_float+0x39c>
 8012ba2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ba4:	9a05      	ldr	r2, [sp, #20]
 8012ba6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ba8:	1a9a      	subs	r2, r3, r2
 8012baa:	eba3 0901 	sub.w	r9, r3, r1
 8012bae:	4591      	cmp	r9, r2
 8012bb0:	bfa8      	it	ge
 8012bb2:	4691      	movge	r9, r2
 8012bb4:	f1b9 0f00 	cmp.w	r9, #0
 8012bb8:	dc35      	bgt.n	8012c26 <_printf_float+0x3ae>
 8012bba:	f04f 0800 	mov.w	r8, #0
 8012bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012bc2:	f104 0a1a 	add.w	sl, r4, #26
 8012bc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012bca:	1a9b      	subs	r3, r3, r2
 8012bcc:	eba3 0309 	sub.w	r3, r3, r9
 8012bd0:	4543      	cmp	r3, r8
 8012bd2:	f77f af79 	ble.w	8012ac8 <_printf_float+0x250>
 8012bd6:	2301      	movs	r3, #1
 8012bd8:	4652      	mov	r2, sl
 8012bda:	4631      	mov	r1, r6
 8012bdc:	4628      	mov	r0, r5
 8012bde:	47b8      	blx	r7
 8012be0:	3001      	adds	r0, #1
 8012be2:	f43f aeaa 	beq.w	801293a <_printf_float+0xc2>
 8012be6:	f108 0801 	add.w	r8, r8, #1
 8012bea:	e7ec      	b.n	8012bc6 <_printf_float+0x34e>
 8012bec:	4613      	mov	r3, r2
 8012bee:	4631      	mov	r1, r6
 8012bf0:	4642      	mov	r2, r8
 8012bf2:	4628      	mov	r0, r5
 8012bf4:	47b8      	blx	r7
 8012bf6:	3001      	adds	r0, #1
 8012bf8:	d1c0      	bne.n	8012b7c <_printf_float+0x304>
 8012bfa:	e69e      	b.n	801293a <_printf_float+0xc2>
 8012bfc:	2301      	movs	r3, #1
 8012bfe:	4631      	mov	r1, r6
 8012c00:	4628      	mov	r0, r5
 8012c02:	9205      	str	r2, [sp, #20]
 8012c04:	47b8      	blx	r7
 8012c06:	3001      	adds	r0, #1
 8012c08:	f43f ae97 	beq.w	801293a <_printf_float+0xc2>
 8012c0c:	9a05      	ldr	r2, [sp, #20]
 8012c0e:	f10b 0b01 	add.w	fp, fp, #1
 8012c12:	e7b9      	b.n	8012b88 <_printf_float+0x310>
 8012c14:	ee18 3a10 	vmov	r3, s16
 8012c18:	4652      	mov	r2, sl
 8012c1a:	4631      	mov	r1, r6
 8012c1c:	4628      	mov	r0, r5
 8012c1e:	47b8      	blx	r7
 8012c20:	3001      	adds	r0, #1
 8012c22:	d1be      	bne.n	8012ba2 <_printf_float+0x32a>
 8012c24:	e689      	b.n	801293a <_printf_float+0xc2>
 8012c26:	9a05      	ldr	r2, [sp, #20]
 8012c28:	464b      	mov	r3, r9
 8012c2a:	4442      	add	r2, r8
 8012c2c:	4631      	mov	r1, r6
 8012c2e:	4628      	mov	r0, r5
 8012c30:	47b8      	blx	r7
 8012c32:	3001      	adds	r0, #1
 8012c34:	d1c1      	bne.n	8012bba <_printf_float+0x342>
 8012c36:	e680      	b.n	801293a <_printf_float+0xc2>
 8012c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012c3a:	2a01      	cmp	r2, #1
 8012c3c:	dc01      	bgt.n	8012c42 <_printf_float+0x3ca>
 8012c3e:	07db      	lsls	r3, r3, #31
 8012c40:	d538      	bpl.n	8012cb4 <_printf_float+0x43c>
 8012c42:	2301      	movs	r3, #1
 8012c44:	4642      	mov	r2, r8
 8012c46:	4631      	mov	r1, r6
 8012c48:	4628      	mov	r0, r5
 8012c4a:	47b8      	blx	r7
 8012c4c:	3001      	adds	r0, #1
 8012c4e:	f43f ae74 	beq.w	801293a <_printf_float+0xc2>
 8012c52:	ee18 3a10 	vmov	r3, s16
 8012c56:	4652      	mov	r2, sl
 8012c58:	4631      	mov	r1, r6
 8012c5a:	4628      	mov	r0, r5
 8012c5c:	47b8      	blx	r7
 8012c5e:	3001      	adds	r0, #1
 8012c60:	f43f ae6b 	beq.w	801293a <_printf_float+0xc2>
 8012c64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012c68:	2200      	movs	r2, #0
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	f7ed ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c70:	b9d8      	cbnz	r0, 8012caa <_printf_float+0x432>
 8012c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c74:	f108 0201 	add.w	r2, r8, #1
 8012c78:	3b01      	subs	r3, #1
 8012c7a:	4631      	mov	r1, r6
 8012c7c:	4628      	mov	r0, r5
 8012c7e:	47b8      	blx	r7
 8012c80:	3001      	adds	r0, #1
 8012c82:	d10e      	bne.n	8012ca2 <_printf_float+0x42a>
 8012c84:	e659      	b.n	801293a <_printf_float+0xc2>
 8012c86:	2301      	movs	r3, #1
 8012c88:	4652      	mov	r2, sl
 8012c8a:	4631      	mov	r1, r6
 8012c8c:	4628      	mov	r0, r5
 8012c8e:	47b8      	blx	r7
 8012c90:	3001      	adds	r0, #1
 8012c92:	f43f ae52 	beq.w	801293a <_printf_float+0xc2>
 8012c96:	f108 0801 	add.w	r8, r8, #1
 8012c9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c9c:	3b01      	subs	r3, #1
 8012c9e:	4543      	cmp	r3, r8
 8012ca0:	dcf1      	bgt.n	8012c86 <_printf_float+0x40e>
 8012ca2:	464b      	mov	r3, r9
 8012ca4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012ca8:	e6dc      	b.n	8012a64 <_printf_float+0x1ec>
 8012caa:	f04f 0800 	mov.w	r8, #0
 8012cae:	f104 0a1a 	add.w	sl, r4, #26
 8012cb2:	e7f2      	b.n	8012c9a <_printf_float+0x422>
 8012cb4:	2301      	movs	r3, #1
 8012cb6:	4642      	mov	r2, r8
 8012cb8:	e7df      	b.n	8012c7a <_printf_float+0x402>
 8012cba:	2301      	movs	r3, #1
 8012cbc:	464a      	mov	r2, r9
 8012cbe:	4631      	mov	r1, r6
 8012cc0:	4628      	mov	r0, r5
 8012cc2:	47b8      	blx	r7
 8012cc4:	3001      	adds	r0, #1
 8012cc6:	f43f ae38 	beq.w	801293a <_printf_float+0xc2>
 8012cca:	f108 0801 	add.w	r8, r8, #1
 8012cce:	68e3      	ldr	r3, [r4, #12]
 8012cd0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012cd2:	1a5b      	subs	r3, r3, r1
 8012cd4:	4543      	cmp	r3, r8
 8012cd6:	dcf0      	bgt.n	8012cba <_printf_float+0x442>
 8012cd8:	e6fa      	b.n	8012ad0 <_printf_float+0x258>
 8012cda:	f04f 0800 	mov.w	r8, #0
 8012cde:	f104 0919 	add.w	r9, r4, #25
 8012ce2:	e7f4      	b.n	8012cce <_printf_float+0x456>

08012ce4 <_printf_common>:
 8012ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce8:	4616      	mov	r6, r2
 8012cea:	4699      	mov	r9, r3
 8012cec:	688a      	ldr	r2, [r1, #8]
 8012cee:	690b      	ldr	r3, [r1, #16]
 8012cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012cf4:	4293      	cmp	r3, r2
 8012cf6:	bfb8      	it	lt
 8012cf8:	4613      	movlt	r3, r2
 8012cfa:	6033      	str	r3, [r6, #0]
 8012cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012d00:	4607      	mov	r7, r0
 8012d02:	460c      	mov	r4, r1
 8012d04:	b10a      	cbz	r2, 8012d0a <_printf_common+0x26>
 8012d06:	3301      	adds	r3, #1
 8012d08:	6033      	str	r3, [r6, #0]
 8012d0a:	6823      	ldr	r3, [r4, #0]
 8012d0c:	0699      	lsls	r1, r3, #26
 8012d0e:	bf42      	ittt	mi
 8012d10:	6833      	ldrmi	r3, [r6, #0]
 8012d12:	3302      	addmi	r3, #2
 8012d14:	6033      	strmi	r3, [r6, #0]
 8012d16:	6825      	ldr	r5, [r4, #0]
 8012d18:	f015 0506 	ands.w	r5, r5, #6
 8012d1c:	d106      	bne.n	8012d2c <_printf_common+0x48>
 8012d1e:	f104 0a19 	add.w	sl, r4, #25
 8012d22:	68e3      	ldr	r3, [r4, #12]
 8012d24:	6832      	ldr	r2, [r6, #0]
 8012d26:	1a9b      	subs	r3, r3, r2
 8012d28:	42ab      	cmp	r3, r5
 8012d2a:	dc26      	bgt.n	8012d7a <_printf_common+0x96>
 8012d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012d30:	1e13      	subs	r3, r2, #0
 8012d32:	6822      	ldr	r2, [r4, #0]
 8012d34:	bf18      	it	ne
 8012d36:	2301      	movne	r3, #1
 8012d38:	0692      	lsls	r2, r2, #26
 8012d3a:	d42b      	bmi.n	8012d94 <_printf_common+0xb0>
 8012d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d40:	4649      	mov	r1, r9
 8012d42:	4638      	mov	r0, r7
 8012d44:	47c0      	blx	r8
 8012d46:	3001      	adds	r0, #1
 8012d48:	d01e      	beq.n	8012d88 <_printf_common+0xa4>
 8012d4a:	6823      	ldr	r3, [r4, #0]
 8012d4c:	68e5      	ldr	r5, [r4, #12]
 8012d4e:	6832      	ldr	r2, [r6, #0]
 8012d50:	f003 0306 	and.w	r3, r3, #6
 8012d54:	2b04      	cmp	r3, #4
 8012d56:	bf08      	it	eq
 8012d58:	1aad      	subeq	r5, r5, r2
 8012d5a:	68a3      	ldr	r3, [r4, #8]
 8012d5c:	6922      	ldr	r2, [r4, #16]
 8012d5e:	bf0c      	ite	eq
 8012d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d64:	2500      	movne	r5, #0
 8012d66:	4293      	cmp	r3, r2
 8012d68:	bfc4      	itt	gt
 8012d6a:	1a9b      	subgt	r3, r3, r2
 8012d6c:	18ed      	addgt	r5, r5, r3
 8012d6e:	2600      	movs	r6, #0
 8012d70:	341a      	adds	r4, #26
 8012d72:	42b5      	cmp	r5, r6
 8012d74:	d11a      	bne.n	8012dac <_printf_common+0xc8>
 8012d76:	2000      	movs	r0, #0
 8012d78:	e008      	b.n	8012d8c <_printf_common+0xa8>
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	4652      	mov	r2, sl
 8012d7e:	4649      	mov	r1, r9
 8012d80:	4638      	mov	r0, r7
 8012d82:	47c0      	blx	r8
 8012d84:	3001      	adds	r0, #1
 8012d86:	d103      	bne.n	8012d90 <_printf_common+0xac>
 8012d88:	f04f 30ff 	mov.w	r0, #4294967295
 8012d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d90:	3501      	adds	r5, #1
 8012d92:	e7c6      	b.n	8012d22 <_printf_common+0x3e>
 8012d94:	18e1      	adds	r1, r4, r3
 8012d96:	1c5a      	adds	r2, r3, #1
 8012d98:	2030      	movs	r0, #48	; 0x30
 8012d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d9e:	4422      	add	r2, r4
 8012da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012da8:	3302      	adds	r3, #2
 8012daa:	e7c7      	b.n	8012d3c <_printf_common+0x58>
 8012dac:	2301      	movs	r3, #1
 8012dae:	4622      	mov	r2, r4
 8012db0:	4649      	mov	r1, r9
 8012db2:	4638      	mov	r0, r7
 8012db4:	47c0      	blx	r8
 8012db6:	3001      	adds	r0, #1
 8012db8:	d0e6      	beq.n	8012d88 <_printf_common+0xa4>
 8012dba:	3601      	adds	r6, #1
 8012dbc:	e7d9      	b.n	8012d72 <_printf_common+0x8e>
	...

08012dc0 <_printf_i>:
 8012dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012dc4:	7e0f      	ldrb	r7, [r1, #24]
 8012dc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012dc8:	2f78      	cmp	r7, #120	; 0x78
 8012dca:	4691      	mov	r9, r2
 8012dcc:	4680      	mov	r8, r0
 8012dce:	460c      	mov	r4, r1
 8012dd0:	469a      	mov	sl, r3
 8012dd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012dd6:	d807      	bhi.n	8012de8 <_printf_i+0x28>
 8012dd8:	2f62      	cmp	r7, #98	; 0x62
 8012dda:	d80a      	bhi.n	8012df2 <_printf_i+0x32>
 8012ddc:	2f00      	cmp	r7, #0
 8012dde:	f000 80d8 	beq.w	8012f92 <_printf_i+0x1d2>
 8012de2:	2f58      	cmp	r7, #88	; 0x58
 8012de4:	f000 80a3 	beq.w	8012f2e <_printf_i+0x16e>
 8012de8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012df0:	e03a      	b.n	8012e68 <_printf_i+0xa8>
 8012df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012df6:	2b15      	cmp	r3, #21
 8012df8:	d8f6      	bhi.n	8012de8 <_printf_i+0x28>
 8012dfa:	a101      	add	r1, pc, #4	; (adr r1, 8012e00 <_printf_i+0x40>)
 8012dfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012e00:	08012e59 	.word	0x08012e59
 8012e04:	08012e6d 	.word	0x08012e6d
 8012e08:	08012de9 	.word	0x08012de9
 8012e0c:	08012de9 	.word	0x08012de9
 8012e10:	08012de9 	.word	0x08012de9
 8012e14:	08012de9 	.word	0x08012de9
 8012e18:	08012e6d 	.word	0x08012e6d
 8012e1c:	08012de9 	.word	0x08012de9
 8012e20:	08012de9 	.word	0x08012de9
 8012e24:	08012de9 	.word	0x08012de9
 8012e28:	08012de9 	.word	0x08012de9
 8012e2c:	08012f79 	.word	0x08012f79
 8012e30:	08012e9d 	.word	0x08012e9d
 8012e34:	08012f5b 	.word	0x08012f5b
 8012e38:	08012de9 	.word	0x08012de9
 8012e3c:	08012de9 	.word	0x08012de9
 8012e40:	08012f9b 	.word	0x08012f9b
 8012e44:	08012de9 	.word	0x08012de9
 8012e48:	08012e9d 	.word	0x08012e9d
 8012e4c:	08012de9 	.word	0x08012de9
 8012e50:	08012de9 	.word	0x08012de9
 8012e54:	08012f63 	.word	0x08012f63
 8012e58:	682b      	ldr	r3, [r5, #0]
 8012e5a:	1d1a      	adds	r2, r3, #4
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	602a      	str	r2, [r5, #0]
 8012e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e68:	2301      	movs	r3, #1
 8012e6a:	e0a3      	b.n	8012fb4 <_printf_i+0x1f4>
 8012e6c:	6820      	ldr	r0, [r4, #0]
 8012e6e:	6829      	ldr	r1, [r5, #0]
 8012e70:	0606      	lsls	r6, r0, #24
 8012e72:	f101 0304 	add.w	r3, r1, #4
 8012e76:	d50a      	bpl.n	8012e8e <_printf_i+0xce>
 8012e78:	680e      	ldr	r6, [r1, #0]
 8012e7a:	602b      	str	r3, [r5, #0]
 8012e7c:	2e00      	cmp	r6, #0
 8012e7e:	da03      	bge.n	8012e88 <_printf_i+0xc8>
 8012e80:	232d      	movs	r3, #45	; 0x2d
 8012e82:	4276      	negs	r6, r6
 8012e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e88:	485e      	ldr	r0, [pc, #376]	; (8013004 <_printf_i+0x244>)
 8012e8a:	230a      	movs	r3, #10
 8012e8c:	e019      	b.n	8012ec2 <_printf_i+0x102>
 8012e8e:	680e      	ldr	r6, [r1, #0]
 8012e90:	602b      	str	r3, [r5, #0]
 8012e92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012e96:	bf18      	it	ne
 8012e98:	b236      	sxthne	r6, r6
 8012e9a:	e7ef      	b.n	8012e7c <_printf_i+0xbc>
 8012e9c:	682b      	ldr	r3, [r5, #0]
 8012e9e:	6820      	ldr	r0, [r4, #0]
 8012ea0:	1d19      	adds	r1, r3, #4
 8012ea2:	6029      	str	r1, [r5, #0]
 8012ea4:	0601      	lsls	r1, r0, #24
 8012ea6:	d501      	bpl.n	8012eac <_printf_i+0xec>
 8012ea8:	681e      	ldr	r6, [r3, #0]
 8012eaa:	e002      	b.n	8012eb2 <_printf_i+0xf2>
 8012eac:	0646      	lsls	r6, r0, #25
 8012eae:	d5fb      	bpl.n	8012ea8 <_printf_i+0xe8>
 8012eb0:	881e      	ldrh	r6, [r3, #0]
 8012eb2:	4854      	ldr	r0, [pc, #336]	; (8013004 <_printf_i+0x244>)
 8012eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8012eb6:	bf0c      	ite	eq
 8012eb8:	2308      	moveq	r3, #8
 8012eba:	230a      	movne	r3, #10
 8012ebc:	2100      	movs	r1, #0
 8012ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012ec2:	6865      	ldr	r5, [r4, #4]
 8012ec4:	60a5      	str	r5, [r4, #8]
 8012ec6:	2d00      	cmp	r5, #0
 8012ec8:	bfa2      	ittt	ge
 8012eca:	6821      	ldrge	r1, [r4, #0]
 8012ecc:	f021 0104 	bicge.w	r1, r1, #4
 8012ed0:	6021      	strge	r1, [r4, #0]
 8012ed2:	b90e      	cbnz	r6, 8012ed8 <_printf_i+0x118>
 8012ed4:	2d00      	cmp	r5, #0
 8012ed6:	d04d      	beq.n	8012f74 <_printf_i+0x1b4>
 8012ed8:	4615      	mov	r5, r2
 8012eda:	fbb6 f1f3 	udiv	r1, r6, r3
 8012ede:	fb03 6711 	mls	r7, r3, r1, r6
 8012ee2:	5dc7      	ldrb	r7, [r0, r7]
 8012ee4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012ee8:	4637      	mov	r7, r6
 8012eea:	42bb      	cmp	r3, r7
 8012eec:	460e      	mov	r6, r1
 8012eee:	d9f4      	bls.n	8012eda <_printf_i+0x11a>
 8012ef0:	2b08      	cmp	r3, #8
 8012ef2:	d10b      	bne.n	8012f0c <_printf_i+0x14c>
 8012ef4:	6823      	ldr	r3, [r4, #0]
 8012ef6:	07de      	lsls	r6, r3, #31
 8012ef8:	d508      	bpl.n	8012f0c <_printf_i+0x14c>
 8012efa:	6923      	ldr	r3, [r4, #16]
 8012efc:	6861      	ldr	r1, [r4, #4]
 8012efe:	4299      	cmp	r1, r3
 8012f00:	bfde      	ittt	le
 8012f02:	2330      	movle	r3, #48	; 0x30
 8012f04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012f08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012f0c:	1b52      	subs	r2, r2, r5
 8012f0e:	6122      	str	r2, [r4, #16]
 8012f10:	f8cd a000 	str.w	sl, [sp]
 8012f14:	464b      	mov	r3, r9
 8012f16:	aa03      	add	r2, sp, #12
 8012f18:	4621      	mov	r1, r4
 8012f1a:	4640      	mov	r0, r8
 8012f1c:	f7ff fee2 	bl	8012ce4 <_printf_common>
 8012f20:	3001      	adds	r0, #1
 8012f22:	d14c      	bne.n	8012fbe <_printf_i+0x1fe>
 8012f24:	f04f 30ff 	mov.w	r0, #4294967295
 8012f28:	b004      	add	sp, #16
 8012f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f2e:	4835      	ldr	r0, [pc, #212]	; (8013004 <_printf_i+0x244>)
 8012f30:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012f34:	6829      	ldr	r1, [r5, #0]
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	f851 6b04 	ldr.w	r6, [r1], #4
 8012f3c:	6029      	str	r1, [r5, #0]
 8012f3e:	061d      	lsls	r5, r3, #24
 8012f40:	d514      	bpl.n	8012f6c <_printf_i+0x1ac>
 8012f42:	07df      	lsls	r7, r3, #31
 8012f44:	bf44      	itt	mi
 8012f46:	f043 0320 	orrmi.w	r3, r3, #32
 8012f4a:	6023      	strmi	r3, [r4, #0]
 8012f4c:	b91e      	cbnz	r6, 8012f56 <_printf_i+0x196>
 8012f4e:	6823      	ldr	r3, [r4, #0]
 8012f50:	f023 0320 	bic.w	r3, r3, #32
 8012f54:	6023      	str	r3, [r4, #0]
 8012f56:	2310      	movs	r3, #16
 8012f58:	e7b0      	b.n	8012ebc <_printf_i+0xfc>
 8012f5a:	6823      	ldr	r3, [r4, #0]
 8012f5c:	f043 0320 	orr.w	r3, r3, #32
 8012f60:	6023      	str	r3, [r4, #0]
 8012f62:	2378      	movs	r3, #120	; 0x78
 8012f64:	4828      	ldr	r0, [pc, #160]	; (8013008 <_printf_i+0x248>)
 8012f66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012f6a:	e7e3      	b.n	8012f34 <_printf_i+0x174>
 8012f6c:	0659      	lsls	r1, r3, #25
 8012f6e:	bf48      	it	mi
 8012f70:	b2b6      	uxthmi	r6, r6
 8012f72:	e7e6      	b.n	8012f42 <_printf_i+0x182>
 8012f74:	4615      	mov	r5, r2
 8012f76:	e7bb      	b.n	8012ef0 <_printf_i+0x130>
 8012f78:	682b      	ldr	r3, [r5, #0]
 8012f7a:	6826      	ldr	r6, [r4, #0]
 8012f7c:	6961      	ldr	r1, [r4, #20]
 8012f7e:	1d18      	adds	r0, r3, #4
 8012f80:	6028      	str	r0, [r5, #0]
 8012f82:	0635      	lsls	r5, r6, #24
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	d501      	bpl.n	8012f8c <_printf_i+0x1cc>
 8012f88:	6019      	str	r1, [r3, #0]
 8012f8a:	e002      	b.n	8012f92 <_printf_i+0x1d2>
 8012f8c:	0670      	lsls	r0, r6, #25
 8012f8e:	d5fb      	bpl.n	8012f88 <_printf_i+0x1c8>
 8012f90:	8019      	strh	r1, [r3, #0]
 8012f92:	2300      	movs	r3, #0
 8012f94:	6123      	str	r3, [r4, #16]
 8012f96:	4615      	mov	r5, r2
 8012f98:	e7ba      	b.n	8012f10 <_printf_i+0x150>
 8012f9a:	682b      	ldr	r3, [r5, #0]
 8012f9c:	1d1a      	adds	r2, r3, #4
 8012f9e:	602a      	str	r2, [r5, #0]
 8012fa0:	681d      	ldr	r5, [r3, #0]
 8012fa2:	6862      	ldr	r2, [r4, #4]
 8012fa4:	2100      	movs	r1, #0
 8012fa6:	4628      	mov	r0, r5
 8012fa8:	f7ed f91a 	bl	80001e0 <memchr>
 8012fac:	b108      	cbz	r0, 8012fb2 <_printf_i+0x1f2>
 8012fae:	1b40      	subs	r0, r0, r5
 8012fb0:	6060      	str	r0, [r4, #4]
 8012fb2:	6863      	ldr	r3, [r4, #4]
 8012fb4:	6123      	str	r3, [r4, #16]
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012fbc:	e7a8      	b.n	8012f10 <_printf_i+0x150>
 8012fbe:	6923      	ldr	r3, [r4, #16]
 8012fc0:	462a      	mov	r2, r5
 8012fc2:	4649      	mov	r1, r9
 8012fc4:	4640      	mov	r0, r8
 8012fc6:	47d0      	blx	sl
 8012fc8:	3001      	adds	r0, #1
 8012fca:	d0ab      	beq.n	8012f24 <_printf_i+0x164>
 8012fcc:	6823      	ldr	r3, [r4, #0]
 8012fce:	079b      	lsls	r3, r3, #30
 8012fd0:	d413      	bmi.n	8012ffa <_printf_i+0x23a>
 8012fd2:	68e0      	ldr	r0, [r4, #12]
 8012fd4:	9b03      	ldr	r3, [sp, #12]
 8012fd6:	4298      	cmp	r0, r3
 8012fd8:	bfb8      	it	lt
 8012fda:	4618      	movlt	r0, r3
 8012fdc:	e7a4      	b.n	8012f28 <_printf_i+0x168>
 8012fde:	2301      	movs	r3, #1
 8012fe0:	4632      	mov	r2, r6
 8012fe2:	4649      	mov	r1, r9
 8012fe4:	4640      	mov	r0, r8
 8012fe6:	47d0      	blx	sl
 8012fe8:	3001      	adds	r0, #1
 8012fea:	d09b      	beq.n	8012f24 <_printf_i+0x164>
 8012fec:	3501      	adds	r5, #1
 8012fee:	68e3      	ldr	r3, [r4, #12]
 8012ff0:	9903      	ldr	r1, [sp, #12]
 8012ff2:	1a5b      	subs	r3, r3, r1
 8012ff4:	42ab      	cmp	r3, r5
 8012ff6:	dcf2      	bgt.n	8012fde <_printf_i+0x21e>
 8012ff8:	e7eb      	b.n	8012fd2 <_printf_i+0x212>
 8012ffa:	2500      	movs	r5, #0
 8012ffc:	f104 0619 	add.w	r6, r4, #25
 8013000:	e7f5      	b.n	8012fee <_printf_i+0x22e>
 8013002:	bf00      	nop
 8013004:	08017776 	.word	0x08017776
 8013008:	08017787 	.word	0x08017787

0801300c <_scanf_float>:
 801300c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013010:	b087      	sub	sp, #28
 8013012:	4617      	mov	r7, r2
 8013014:	9303      	str	r3, [sp, #12]
 8013016:	688b      	ldr	r3, [r1, #8]
 8013018:	1e5a      	subs	r2, r3, #1
 801301a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801301e:	bf83      	ittte	hi
 8013020:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8013024:	195b      	addhi	r3, r3, r5
 8013026:	9302      	strhi	r3, [sp, #8]
 8013028:	2300      	movls	r3, #0
 801302a:	bf86      	itte	hi
 801302c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8013030:	608b      	strhi	r3, [r1, #8]
 8013032:	9302      	strls	r3, [sp, #8]
 8013034:	680b      	ldr	r3, [r1, #0]
 8013036:	468b      	mov	fp, r1
 8013038:	2500      	movs	r5, #0
 801303a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801303e:	f84b 3b1c 	str.w	r3, [fp], #28
 8013042:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013046:	4680      	mov	r8, r0
 8013048:	460c      	mov	r4, r1
 801304a:	465e      	mov	r6, fp
 801304c:	46aa      	mov	sl, r5
 801304e:	46a9      	mov	r9, r5
 8013050:	9501      	str	r5, [sp, #4]
 8013052:	68a2      	ldr	r2, [r4, #8]
 8013054:	b152      	cbz	r2, 801306c <_scanf_float+0x60>
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	781b      	ldrb	r3, [r3, #0]
 801305a:	2b4e      	cmp	r3, #78	; 0x4e
 801305c:	d864      	bhi.n	8013128 <_scanf_float+0x11c>
 801305e:	2b40      	cmp	r3, #64	; 0x40
 8013060:	d83c      	bhi.n	80130dc <_scanf_float+0xd0>
 8013062:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8013066:	b2c8      	uxtb	r0, r1
 8013068:	280e      	cmp	r0, #14
 801306a:	d93a      	bls.n	80130e2 <_scanf_float+0xd6>
 801306c:	f1b9 0f00 	cmp.w	r9, #0
 8013070:	d003      	beq.n	801307a <_scanf_float+0x6e>
 8013072:	6823      	ldr	r3, [r4, #0]
 8013074:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013078:	6023      	str	r3, [r4, #0]
 801307a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801307e:	f1ba 0f01 	cmp.w	sl, #1
 8013082:	f200 8113 	bhi.w	80132ac <_scanf_float+0x2a0>
 8013086:	455e      	cmp	r6, fp
 8013088:	f200 8105 	bhi.w	8013296 <_scanf_float+0x28a>
 801308c:	2501      	movs	r5, #1
 801308e:	4628      	mov	r0, r5
 8013090:	b007      	add	sp, #28
 8013092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013096:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801309a:	2a0d      	cmp	r2, #13
 801309c:	d8e6      	bhi.n	801306c <_scanf_float+0x60>
 801309e:	a101      	add	r1, pc, #4	; (adr r1, 80130a4 <_scanf_float+0x98>)
 80130a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80130a4:	080131e3 	.word	0x080131e3
 80130a8:	0801306d 	.word	0x0801306d
 80130ac:	0801306d 	.word	0x0801306d
 80130b0:	0801306d 	.word	0x0801306d
 80130b4:	08013243 	.word	0x08013243
 80130b8:	0801321b 	.word	0x0801321b
 80130bc:	0801306d 	.word	0x0801306d
 80130c0:	0801306d 	.word	0x0801306d
 80130c4:	080131f1 	.word	0x080131f1
 80130c8:	0801306d 	.word	0x0801306d
 80130cc:	0801306d 	.word	0x0801306d
 80130d0:	0801306d 	.word	0x0801306d
 80130d4:	0801306d 	.word	0x0801306d
 80130d8:	080131a9 	.word	0x080131a9
 80130dc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80130e0:	e7db      	b.n	801309a <_scanf_float+0x8e>
 80130e2:	290e      	cmp	r1, #14
 80130e4:	d8c2      	bhi.n	801306c <_scanf_float+0x60>
 80130e6:	a001      	add	r0, pc, #4	; (adr r0, 80130ec <_scanf_float+0xe0>)
 80130e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80130ec:	0801319b 	.word	0x0801319b
 80130f0:	0801306d 	.word	0x0801306d
 80130f4:	0801319b 	.word	0x0801319b
 80130f8:	0801322f 	.word	0x0801322f
 80130fc:	0801306d 	.word	0x0801306d
 8013100:	08013149 	.word	0x08013149
 8013104:	08013185 	.word	0x08013185
 8013108:	08013185 	.word	0x08013185
 801310c:	08013185 	.word	0x08013185
 8013110:	08013185 	.word	0x08013185
 8013114:	08013185 	.word	0x08013185
 8013118:	08013185 	.word	0x08013185
 801311c:	08013185 	.word	0x08013185
 8013120:	08013185 	.word	0x08013185
 8013124:	08013185 	.word	0x08013185
 8013128:	2b6e      	cmp	r3, #110	; 0x6e
 801312a:	d809      	bhi.n	8013140 <_scanf_float+0x134>
 801312c:	2b60      	cmp	r3, #96	; 0x60
 801312e:	d8b2      	bhi.n	8013096 <_scanf_float+0x8a>
 8013130:	2b54      	cmp	r3, #84	; 0x54
 8013132:	d077      	beq.n	8013224 <_scanf_float+0x218>
 8013134:	2b59      	cmp	r3, #89	; 0x59
 8013136:	d199      	bne.n	801306c <_scanf_float+0x60>
 8013138:	2d07      	cmp	r5, #7
 801313a:	d197      	bne.n	801306c <_scanf_float+0x60>
 801313c:	2508      	movs	r5, #8
 801313e:	e029      	b.n	8013194 <_scanf_float+0x188>
 8013140:	2b74      	cmp	r3, #116	; 0x74
 8013142:	d06f      	beq.n	8013224 <_scanf_float+0x218>
 8013144:	2b79      	cmp	r3, #121	; 0x79
 8013146:	e7f6      	b.n	8013136 <_scanf_float+0x12a>
 8013148:	6821      	ldr	r1, [r4, #0]
 801314a:	05c8      	lsls	r0, r1, #23
 801314c:	d51a      	bpl.n	8013184 <_scanf_float+0x178>
 801314e:	9b02      	ldr	r3, [sp, #8]
 8013150:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8013154:	6021      	str	r1, [r4, #0]
 8013156:	f109 0901 	add.w	r9, r9, #1
 801315a:	b11b      	cbz	r3, 8013164 <_scanf_float+0x158>
 801315c:	3b01      	subs	r3, #1
 801315e:	3201      	adds	r2, #1
 8013160:	9302      	str	r3, [sp, #8]
 8013162:	60a2      	str	r2, [r4, #8]
 8013164:	68a3      	ldr	r3, [r4, #8]
 8013166:	3b01      	subs	r3, #1
 8013168:	60a3      	str	r3, [r4, #8]
 801316a:	6923      	ldr	r3, [r4, #16]
 801316c:	3301      	adds	r3, #1
 801316e:	6123      	str	r3, [r4, #16]
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	3b01      	subs	r3, #1
 8013174:	2b00      	cmp	r3, #0
 8013176:	607b      	str	r3, [r7, #4]
 8013178:	f340 8084 	ble.w	8013284 <_scanf_float+0x278>
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	3301      	adds	r3, #1
 8013180:	603b      	str	r3, [r7, #0]
 8013182:	e766      	b.n	8013052 <_scanf_float+0x46>
 8013184:	eb1a 0f05 	cmn.w	sl, r5
 8013188:	f47f af70 	bne.w	801306c <_scanf_float+0x60>
 801318c:	6822      	ldr	r2, [r4, #0]
 801318e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013192:	6022      	str	r2, [r4, #0]
 8013194:	f806 3b01 	strb.w	r3, [r6], #1
 8013198:	e7e4      	b.n	8013164 <_scanf_float+0x158>
 801319a:	6822      	ldr	r2, [r4, #0]
 801319c:	0610      	lsls	r0, r2, #24
 801319e:	f57f af65 	bpl.w	801306c <_scanf_float+0x60>
 80131a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80131a6:	e7f4      	b.n	8013192 <_scanf_float+0x186>
 80131a8:	f1ba 0f00 	cmp.w	sl, #0
 80131ac:	d10e      	bne.n	80131cc <_scanf_float+0x1c0>
 80131ae:	f1b9 0f00 	cmp.w	r9, #0
 80131b2:	d10e      	bne.n	80131d2 <_scanf_float+0x1c6>
 80131b4:	6822      	ldr	r2, [r4, #0]
 80131b6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80131ba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80131be:	d108      	bne.n	80131d2 <_scanf_float+0x1c6>
 80131c0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80131c4:	6022      	str	r2, [r4, #0]
 80131c6:	f04f 0a01 	mov.w	sl, #1
 80131ca:	e7e3      	b.n	8013194 <_scanf_float+0x188>
 80131cc:	f1ba 0f02 	cmp.w	sl, #2
 80131d0:	d055      	beq.n	801327e <_scanf_float+0x272>
 80131d2:	2d01      	cmp	r5, #1
 80131d4:	d002      	beq.n	80131dc <_scanf_float+0x1d0>
 80131d6:	2d04      	cmp	r5, #4
 80131d8:	f47f af48 	bne.w	801306c <_scanf_float+0x60>
 80131dc:	3501      	adds	r5, #1
 80131de:	b2ed      	uxtb	r5, r5
 80131e0:	e7d8      	b.n	8013194 <_scanf_float+0x188>
 80131e2:	f1ba 0f01 	cmp.w	sl, #1
 80131e6:	f47f af41 	bne.w	801306c <_scanf_float+0x60>
 80131ea:	f04f 0a02 	mov.w	sl, #2
 80131ee:	e7d1      	b.n	8013194 <_scanf_float+0x188>
 80131f0:	b97d      	cbnz	r5, 8013212 <_scanf_float+0x206>
 80131f2:	f1b9 0f00 	cmp.w	r9, #0
 80131f6:	f47f af3c 	bne.w	8013072 <_scanf_float+0x66>
 80131fa:	6822      	ldr	r2, [r4, #0]
 80131fc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013200:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013204:	f47f af39 	bne.w	801307a <_scanf_float+0x6e>
 8013208:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801320c:	6022      	str	r2, [r4, #0]
 801320e:	2501      	movs	r5, #1
 8013210:	e7c0      	b.n	8013194 <_scanf_float+0x188>
 8013212:	2d03      	cmp	r5, #3
 8013214:	d0e2      	beq.n	80131dc <_scanf_float+0x1d0>
 8013216:	2d05      	cmp	r5, #5
 8013218:	e7de      	b.n	80131d8 <_scanf_float+0x1cc>
 801321a:	2d02      	cmp	r5, #2
 801321c:	f47f af26 	bne.w	801306c <_scanf_float+0x60>
 8013220:	2503      	movs	r5, #3
 8013222:	e7b7      	b.n	8013194 <_scanf_float+0x188>
 8013224:	2d06      	cmp	r5, #6
 8013226:	f47f af21 	bne.w	801306c <_scanf_float+0x60>
 801322a:	2507      	movs	r5, #7
 801322c:	e7b2      	b.n	8013194 <_scanf_float+0x188>
 801322e:	6822      	ldr	r2, [r4, #0]
 8013230:	0591      	lsls	r1, r2, #22
 8013232:	f57f af1b 	bpl.w	801306c <_scanf_float+0x60>
 8013236:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801323a:	6022      	str	r2, [r4, #0]
 801323c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013240:	e7a8      	b.n	8013194 <_scanf_float+0x188>
 8013242:	6822      	ldr	r2, [r4, #0]
 8013244:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8013248:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801324c:	d006      	beq.n	801325c <_scanf_float+0x250>
 801324e:	0550      	lsls	r0, r2, #21
 8013250:	f57f af0c 	bpl.w	801306c <_scanf_float+0x60>
 8013254:	f1b9 0f00 	cmp.w	r9, #0
 8013258:	f43f af0f 	beq.w	801307a <_scanf_float+0x6e>
 801325c:	0591      	lsls	r1, r2, #22
 801325e:	bf58      	it	pl
 8013260:	9901      	ldrpl	r1, [sp, #4]
 8013262:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013266:	bf58      	it	pl
 8013268:	eba9 0101 	subpl.w	r1, r9, r1
 801326c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8013270:	bf58      	it	pl
 8013272:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8013276:	6022      	str	r2, [r4, #0]
 8013278:	f04f 0900 	mov.w	r9, #0
 801327c:	e78a      	b.n	8013194 <_scanf_float+0x188>
 801327e:	f04f 0a03 	mov.w	sl, #3
 8013282:	e787      	b.n	8013194 <_scanf_float+0x188>
 8013284:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8013288:	4639      	mov	r1, r7
 801328a:	4640      	mov	r0, r8
 801328c:	4798      	blx	r3
 801328e:	2800      	cmp	r0, #0
 8013290:	f43f aedf 	beq.w	8013052 <_scanf_float+0x46>
 8013294:	e6ea      	b.n	801306c <_scanf_float+0x60>
 8013296:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801329a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801329e:	463a      	mov	r2, r7
 80132a0:	4640      	mov	r0, r8
 80132a2:	4798      	blx	r3
 80132a4:	6923      	ldr	r3, [r4, #16]
 80132a6:	3b01      	subs	r3, #1
 80132a8:	6123      	str	r3, [r4, #16]
 80132aa:	e6ec      	b.n	8013086 <_scanf_float+0x7a>
 80132ac:	1e6b      	subs	r3, r5, #1
 80132ae:	2b06      	cmp	r3, #6
 80132b0:	d825      	bhi.n	80132fe <_scanf_float+0x2f2>
 80132b2:	2d02      	cmp	r5, #2
 80132b4:	d836      	bhi.n	8013324 <_scanf_float+0x318>
 80132b6:	455e      	cmp	r6, fp
 80132b8:	f67f aee8 	bls.w	801308c <_scanf_float+0x80>
 80132bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132c0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80132c4:	463a      	mov	r2, r7
 80132c6:	4640      	mov	r0, r8
 80132c8:	4798      	blx	r3
 80132ca:	6923      	ldr	r3, [r4, #16]
 80132cc:	3b01      	subs	r3, #1
 80132ce:	6123      	str	r3, [r4, #16]
 80132d0:	e7f1      	b.n	80132b6 <_scanf_float+0x2aa>
 80132d2:	9802      	ldr	r0, [sp, #8]
 80132d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132d8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80132dc:	9002      	str	r0, [sp, #8]
 80132de:	463a      	mov	r2, r7
 80132e0:	4640      	mov	r0, r8
 80132e2:	4798      	blx	r3
 80132e4:	6923      	ldr	r3, [r4, #16]
 80132e6:	3b01      	subs	r3, #1
 80132e8:	6123      	str	r3, [r4, #16]
 80132ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80132ee:	fa5f fa8a 	uxtb.w	sl, sl
 80132f2:	f1ba 0f02 	cmp.w	sl, #2
 80132f6:	d1ec      	bne.n	80132d2 <_scanf_float+0x2c6>
 80132f8:	3d03      	subs	r5, #3
 80132fa:	b2ed      	uxtb	r5, r5
 80132fc:	1b76      	subs	r6, r6, r5
 80132fe:	6823      	ldr	r3, [r4, #0]
 8013300:	05da      	lsls	r2, r3, #23
 8013302:	d52f      	bpl.n	8013364 <_scanf_float+0x358>
 8013304:	055b      	lsls	r3, r3, #21
 8013306:	d510      	bpl.n	801332a <_scanf_float+0x31e>
 8013308:	455e      	cmp	r6, fp
 801330a:	f67f aebf 	bls.w	801308c <_scanf_float+0x80>
 801330e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013312:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013316:	463a      	mov	r2, r7
 8013318:	4640      	mov	r0, r8
 801331a:	4798      	blx	r3
 801331c:	6923      	ldr	r3, [r4, #16]
 801331e:	3b01      	subs	r3, #1
 8013320:	6123      	str	r3, [r4, #16]
 8013322:	e7f1      	b.n	8013308 <_scanf_float+0x2fc>
 8013324:	46aa      	mov	sl, r5
 8013326:	9602      	str	r6, [sp, #8]
 8013328:	e7df      	b.n	80132ea <_scanf_float+0x2de>
 801332a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801332e:	6923      	ldr	r3, [r4, #16]
 8013330:	2965      	cmp	r1, #101	; 0x65
 8013332:	f103 33ff 	add.w	r3, r3, #4294967295
 8013336:	f106 35ff 	add.w	r5, r6, #4294967295
 801333a:	6123      	str	r3, [r4, #16]
 801333c:	d00c      	beq.n	8013358 <_scanf_float+0x34c>
 801333e:	2945      	cmp	r1, #69	; 0x45
 8013340:	d00a      	beq.n	8013358 <_scanf_float+0x34c>
 8013342:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013346:	463a      	mov	r2, r7
 8013348:	4640      	mov	r0, r8
 801334a:	4798      	blx	r3
 801334c:	6923      	ldr	r3, [r4, #16]
 801334e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8013352:	3b01      	subs	r3, #1
 8013354:	1eb5      	subs	r5, r6, #2
 8013356:	6123      	str	r3, [r4, #16]
 8013358:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801335c:	463a      	mov	r2, r7
 801335e:	4640      	mov	r0, r8
 8013360:	4798      	blx	r3
 8013362:	462e      	mov	r6, r5
 8013364:	6825      	ldr	r5, [r4, #0]
 8013366:	f015 0510 	ands.w	r5, r5, #16
 801336a:	d159      	bne.n	8013420 <_scanf_float+0x414>
 801336c:	7035      	strb	r5, [r6, #0]
 801336e:	6823      	ldr	r3, [r4, #0]
 8013370:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8013374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013378:	d11b      	bne.n	80133b2 <_scanf_float+0x3a6>
 801337a:	9b01      	ldr	r3, [sp, #4]
 801337c:	454b      	cmp	r3, r9
 801337e:	eba3 0209 	sub.w	r2, r3, r9
 8013382:	d123      	bne.n	80133cc <_scanf_float+0x3c0>
 8013384:	2200      	movs	r2, #0
 8013386:	4659      	mov	r1, fp
 8013388:	4640      	mov	r0, r8
 801338a:	f000 ff9b 	bl	80142c4 <_strtod_r>
 801338e:	6822      	ldr	r2, [r4, #0]
 8013390:	9b03      	ldr	r3, [sp, #12]
 8013392:	f012 0f02 	tst.w	r2, #2
 8013396:	ec57 6b10 	vmov	r6, r7, d0
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	d021      	beq.n	80133e2 <_scanf_float+0x3d6>
 801339e:	9903      	ldr	r1, [sp, #12]
 80133a0:	1d1a      	adds	r2, r3, #4
 80133a2:	600a      	str	r2, [r1, #0]
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	e9c3 6700 	strd	r6, r7, [r3]
 80133aa:	68e3      	ldr	r3, [r4, #12]
 80133ac:	3301      	adds	r3, #1
 80133ae:	60e3      	str	r3, [r4, #12]
 80133b0:	e66d      	b.n	801308e <_scanf_float+0x82>
 80133b2:	9b04      	ldr	r3, [sp, #16]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d0e5      	beq.n	8013384 <_scanf_float+0x378>
 80133b8:	9905      	ldr	r1, [sp, #20]
 80133ba:	230a      	movs	r3, #10
 80133bc:	462a      	mov	r2, r5
 80133be:	3101      	adds	r1, #1
 80133c0:	4640      	mov	r0, r8
 80133c2:	f001 f807 	bl	80143d4 <_strtol_r>
 80133c6:	9b04      	ldr	r3, [sp, #16]
 80133c8:	9e05      	ldr	r6, [sp, #20]
 80133ca:	1ac2      	subs	r2, r0, r3
 80133cc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80133d0:	429e      	cmp	r6, r3
 80133d2:	bf28      	it	cs
 80133d4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80133d8:	4912      	ldr	r1, [pc, #72]	; (8013424 <_scanf_float+0x418>)
 80133da:	4630      	mov	r0, r6
 80133dc:	f000 f8ec 	bl	80135b8 <siprintf>
 80133e0:	e7d0      	b.n	8013384 <_scanf_float+0x378>
 80133e2:	9903      	ldr	r1, [sp, #12]
 80133e4:	f012 0f04 	tst.w	r2, #4
 80133e8:	f103 0204 	add.w	r2, r3, #4
 80133ec:	600a      	str	r2, [r1, #0]
 80133ee:	d1d9      	bne.n	80133a4 <_scanf_float+0x398>
 80133f0:	f8d3 8000 	ldr.w	r8, [r3]
 80133f4:	ee10 2a10 	vmov	r2, s0
 80133f8:	ee10 0a10 	vmov	r0, s0
 80133fc:	463b      	mov	r3, r7
 80133fe:	4639      	mov	r1, r7
 8013400:	f7ed fb94 	bl	8000b2c <__aeabi_dcmpun>
 8013404:	b128      	cbz	r0, 8013412 <_scanf_float+0x406>
 8013406:	4808      	ldr	r0, [pc, #32]	; (8013428 <_scanf_float+0x41c>)
 8013408:	f7fe ff48 	bl	801229c <nanf>
 801340c:	ed88 0a00 	vstr	s0, [r8]
 8013410:	e7cb      	b.n	80133aa <_scanf_float+0x39e>
 8013412:	4630      	mov	r0, r6
 8013414:	4639      	mov	r1, r7
 8013416:	f7ed fbe7 	bl	8000be8 <__aeabi_d2f>
 801341a:	f8c8 0000 	str.w	r0, [r8]
 801341e:	e7c4      	b.n	80133aa <_scanf_float+0x39e>
 8013420:	2500      	movs	r5, #0
 8013422:	e634      	b.n	801308e <_scanf_float+0x82>
 8013424:	08017798 	.word	0x08017798
 8013428:	08017ba0 	.word	0x08017ba0

0801342c <realloc>:
 801342c:	4b02      	ldr	r3, [pc, #8]	; (8013438 <realloc+0xc>)
 801342e:	460a      	mov	r2, r1
 8013430:	4601      	mov	r1, r0
 8013432:	6818      	ldr	r0, [r3, #0]
 8013434:	f003 b800 	b.w	8016438 <_realloc_r>
 8013438:	20000014 	.word	0x20000014

0801343c <cleanup_glue>:
 801343c:	b538      	push	{r3, r4, r5, lr}
 801343e:	460c      	mov	r4, r1
 8013440:	6809      	ldr	r1, [r1, #0]
 8013442:	4605      	mov	r5, r0
 8013444:	b109      	cbz	r1, 801344a <cleanup_glue+0xe>
 8013446:	f7ff fff9 	bl	801343c <cleanup_glue>
 801344a:	4621      	mov	r1, r4
 801344c:	4628      	mov	r0, r5
 801344e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013452:	f002 bfa5 	b.w	80163a0 <_free_r>
	...

08013458 <_reclaim_reent>:
 8013458:	4b2c      	ldr	r3, [pc, #176]	; (801350c <_reclaim_reent+0xb4>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	4283      	cmp	r3, r0
 801345e:	b570      	push	{r4, r5, r6, lr}
 8013460:	4604      	mov	r4, r0
 8013462:	d051      	beq.n	8013508 <_reclaim_reent+0xb0>
 8013464:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013466:	b143      	cbz	r3, 801347a <_reclaim_reent+0x22>
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d14a      	bne.n	8013504 <_reclaim_reent+0xac>
 801346e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013470:	6819      	ldr	r1, [r3, #0]
 8013472:	b111      	cbz	r1, 801347a <_reclaim_reent+0x22>
 8013474:	4620      	mov	r0, r4
 8013476:	f002 ff93 	bl	80163a0 <_free_r>
 801347a:	6961      	ldr	r1, [r4, #20]
 801347c:	b111      	cbz	r1, 8013484 <_reclaim_reent+0x2c>
 801347e:	4620      	mov	r0, r4
 8013480:	f002 ff8e 	bl	80163a0 <_free_r>
 8013484:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013486:	b111      	cbz	r1, 801348e <_reclaim_reent+0x36>
 8013488:	4620      	mov	r0, r4
 801348a:	f002 ff89 	bl	80163a0 <_free_r>
 801348e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013490:	b111      	cbz	r1, 8013498 <_reclaim_reent+0x40>
 8013492:	4620      	mov	r0, r4
 8013494:	f002 ff84 	bl	80163a0 <_free_r>
 8013498:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801349a:	b111      	cbz	r1, 80134a2 <_reclaim_reent+0x4a>
 801349c:	4620      	mov	r0, r4
 801349e:	f002 ff7f 	bl	80163a0 <_free_r>
 80134a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80134a4:	b111      	cbz	r1, 80134ac <_reclaim_reent+0x54>
 80134a6:	4620      	mov	r0, r4
 80134a8:	f002 ff7a 	bl	80163a0 <_free_r>
 80134ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80134ae:	b111      	cbz	r1, 80134b6 <_reclaim_reent+0x5e>
 80134b0:	4620      	mov	r0, r4
 80134b2:	f002 ff75 	bl	80163a0 <_free_r>
 80134b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80134b8:	b111      	cbz	r1, 80134c0 <_reclaim_reent+0x68>
 80134ba:	4620      	mov	r0, r4
 80134bc:	f002 ff70 	bl	80163a0 <_free_r>
 80134c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80134c2:	b111      	cbz	r1, 80134ca <_reclaim_reent+0x72>
 80134c4:	4620      	mov	r0, r4
 80134c6:	f002 ff6b 	bl	80163a0 <_free_r>
 80134ca:	69a3      	ldr	r3, [r4, #24]
 80134cc:	b1e3      	cbz	r3, 8013508 <_reclaim_reent+0xb0>
 80134ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80134d0:	4620      	mov	r0, r4
 80134d2:	4798      	blx	r3
 80134d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80134d6:	b1b9      	cbz	r1, 8013508 <_reclaim_reent+0xb0>
 80134d8:	4620      	mov	r0, r4
 80134da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134de:	f7ff bfad 	b.w	801343c <cleanup_glue>
 80134e2:	5949      	ldr	r1, [r1, r5]
 80134e4:	b941      	cbnz	r1, 80134f8 <_reclaim_reent+0xa0>
 80134e6:	3504      	adds	r5, #4
 80134e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134ea:	2d80      	cmp	r5, #128	; 0x80
 80134ec:	68d9      	ldr	r1, [r3, #12]
 80134ee:	d1f8      	bne.n	80134e2 <_reclaim_reent+0x8a>
 80134f0:	4620      	mov	r0, r4
 80134f2:	f002 ff55 	bl	80163a0 <_free_r>
 80134f6:	e7ba      	b.n	801346e <_reclaim_reent+0x16>
 80134f8:	680e      	ldr	r6, [r1, #0]
 80134fa:	4620      	mov	r0, r4
 80134fc:	f002 ff50 	bl	80163a0 <_free_r>
 8013500:	4631      	mov	r1, r6
 8013502:	e7ef      	b.n	80134e4 <_reclaim_reent+0x8c>
 8013504:	2500      	movs	r5, #0
 8013506:	e7ef      	b.n	80134e8 <_reclaim_reent+0x90>
 8013508:	bd70      	pop	{r4, r5, r6, pc}
 801350a:	bf00      	nop
 801350c:	20000014 	.word	0x20000014

08013510 <_sbrk_r>:
 8013510:	b538      	push	{r3, r4, r5, lr}
 8013512:	4d06      	ldr	r5, [pc, #24]	; (801352c <_sbrk_r+0x1c>)
 8013514:	2300      	movs	r3, #0
 8013516:	4604      	mov	r4, r0
 8013518:	4608      	mov	r0, r1
 801351a:	602b      	str	r3, [r5, #0]
 801351c:	f7f1 fd28 	bl	8004f70 <_sbrk>
 8013520:	1c43      	adds	r3, r0, #1
 8013522:	d102      	bne.n	801352a <_sbrk_r+0x1a>
 8013524:	682b      	ldr	r3, [r5, #0]
 8013526:	b103      	cbz	r3, 801352a <_sbrk_r+0x1a>
 8013528:	6023      	str	r3, [r4, #0]
 801352a:	bd38      	pop	{r3, r4, r5, pc}
 801352c:	20014b64 	.word	0x20014b64

08013530 <_raise_r>:
 8013530:	291f      	cmp	r1, #31
 8013532:	b538      	push	{r3, r4, r5, lr}
 8013534:	4604      	mov	r4, r0
 8013536:	460d      	mov	r5, r1
 8013538:	d904      	bls.n	8013544 <_raise_r+0x14>
 801353a:	2316      	movs	r3, #22
 801353c:	6003      	str	r3, [r0, #0]
 801353e:	f04f 30ff 	mov.w	r0, #4294967295
 8013542:	bd38      	pop	{r3, r4, r5, pc}
 8013544:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013546:	b112      	cbz	r2, 801354e <_raise_r+0x1e>
 8013548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801354c:	b94b      	cbnz	r3, 8013562 <_raise_r+0x32>
 801354e:	4620      	mov	r0, r4
 8013550:	f000 f830 	bl	80135b4 <_getpid_r>
 8013554:	462a      	mov	r2, r5
 8013556:	4601      	mov	r1, r0
 8013558:	4620      	mov	r0, r4
 801355a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801355e:	f000 b817 	b.w	8013590 <_kill_r>
 8013562:	2b01      	cmp	r3, #1
 8013564:	d00a      	beq.n	801357c <_raise_r+0x4c>
 8013566:	1c59      	adds	r1, r3, #1
 8013568:	d103      	bne.n	8013572 <_raise_r+0x42>
 801356a:	2316      	movs	r3, #22
 801356c:	6003      	str	r3, [r0, #0]
 801356e:	2001      	movs	r0, #1
 8013570:	e7e7      	b.n	8013542 <_raise_r+0x12>
 8013572:	2400      	movs	r4, #0
 8013574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013578:	4628      	mov	r0, r5
 801357a:	4798      	blx	r3
 801357c:	2000      	movs	r0, #0
 801357e:	e7e0      	b.n	8013542 <_raise_r+0x12>

08013580 <raise>:
 8013580:	4b02      	ldr	r3, [pc, #8]	; (801358c <raise+0xc>)
 8013582:	4601      	mov	r1, r0
 8013584:	6818      	ldr	r0, [r3, #0]
 8013586:	f7ff bfd3 	b.w	8013530 <_raise_r>
 801358a:	bf00      	nop
 801358c:	20000014 	.word	0x20000014

08013590 <_kill_r>:
 8013590:	b538      	push	{r3, r4, r5, lr}
 8013592:	4d07      	ldr	r5, [pc, #28]	; (80135b0 <_kill_r+0x20>)
 8013594:	2300      	movs	r3, #0
 8013596:	4604      	mov	r4, r0
 8013598:	4608      	mov	r0, r1
 801359a:	4611      	mov	r1, r2
 801359c:	602b      	str	r3, [r5, #0]
 801359e:	f7f1 fc5f 	bl	8004e60 <_kill>
 80135a2:	1c43      	adds	r3, r0, #1
 80135a4:	d102      	bne.n	80135ac <_kill_r+0x1c>
 80135a6:	682b      	ldr	r3, [r5, #0]
 80135a8:	b103      	cbz	r3, 80135ac <_kill_r+0x1c>
 80135aa:	6023      	str	r3, [r4, #0]
 80135ac:	bd38      	pop	{r3, r4, r5, pc}
 80135ae:	bf00      	nop
 80135b0:	20014b64 	.word	0x20014b64

080135b4 <_getpid_r>:
 80135b4:	f7f1 bc4c 	b.w	8004e50 <_getpid>

080135b8 <siprintf>:
 80135b8:	b40e      	push	{r1, r2, r3}
 80135ba:	b500      	push	{lr}
 80135bc:	b09c      	sub	sp, #112	; 0x70
 80135be:	ab1d      	add	r3, sp, #116	; 0x74
 80135c0:	9002      	str	r0, [sp, #8]
 80135c2:	9006      	str	r0, [sp, #24]
 80135c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80135c8:	4809      	ldr	r0, [pc, #36]	; (80135f0 <siprintf+0x38>)
 80135ca:	9107      	str	r1, [sp, #28]
 80135cc:	9104      	str	r1, [sp, #16]
 80135ce:	4909      	ldr	r1, [pc, #36]	; (80135f4 <siprintf+0x3c>)
 80135d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80135d4:	9105      	str	r1, [sp, #20]
 80135d6:	6800      	ldr	r0, [r0, #0]
 80135d8:	9301      	str	r3, [sp, #4]
 80135da:	a902      	add	r1, sp, #8
 80135dc:	f002 ffb6 	bl	801654c <_svfiprintf_r>
 80135e0:	9b02      	ldr	r3, [sp, #8]
 80135e2:	2200      	movs	r2, #0
 80135e4:	701a      	strb	r2, [r3, #0]
 80135e6:	b01c      	add	sp, #112	; 0x70
 80135e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80135ec:	b003      	add	sp, #12
 80135ee:	4770      	bx	lr
 80135f0:	20000014 	.word	0x20000014
 80135f4:	ffff0208 	.word	0xffff0208

080135f8 <__sread>:
 80135f8:	b510      	push	{r4, lr}
 80135fa:	460c      	mov	r4, r1
 80135fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013600:	f003 f8a4 	bl	801674c <_read_r>
 8013604:	2800      	cmp	r0, #0
 8013606:	bfab      	itete	ge
 8013608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801360a:	89a3      	ldrhlt	r3, [r4, #12]
 801360c:	181b      	addge	r3, r3, r0
 801360e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013612:	bfac      	ite	ge
 8013614:	6563      	strge	r3, [r4, #84]	; 0x54
 8013616:	81a3      	strhlt	r3, [r4, #12]
 8013618:	bd10      	pop	{r4, pc}

0801361a <__swrite>:
 801361a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801361e:	461f      	mov	r7, r3
 8013620:	898b      	ldrh	r3, [r1, #12]
 8013622:	05db      	lsls	r3, r3, #23
 8013624:	4605      	mov	r5, r0
 8013626:	460c      	mov	r4, r1
 8013628:	4616      	mov	r6, r2
 801362a:	d505      	bpl.n	8013638 <__swrite+0x1e>
 801362c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013630:	2302      	movs	r3, #2
 8013632:	2200      	movs	r2, #0
 8013634:	f002 f9a4 	bl	8015980 <_lseek_r>
 8013638:	89a3      	ldrh	r3, [r4, #12]
 801363a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801363e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013642:	81a3      	strh	r3, [r4, #12]
 8013644:	4632      	mov	r2, r6
 8013646:	463b      	mov	r3, r7
 8013648:	4628      	mov	r0, r5
 801364a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801364e:	f000 bec3 	b.w	80143d8 <_write_r>

08013652 <__sseek>:
 8013652:	b510      	push	{r4, lr}
 8013654:	460c      	mov	r4, r1
 8013656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801365a:	f002 f991 	bl	8015980 <_lseek_r>
 801365e:	1c43      	adds	r3, r0, #1
 8013660:	89a3      	ldrh	r3, [r4, #12]
 8013662:	bf15      	itete	ne
 8013664:	6560      	strne	r0, [r4, #84]	; 0x54
 8013666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801366a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801366e:	81a3      	strheq	r3, [r4, #12]
 8013670:	bf18      	it	ne
 8013672:	81a3      	strhne	r3, [r4, #12]
 8013674:	bd10      	pop	{r4, pc}

08013676 <__sclose>:
 8013676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801367a:	f000 bebf 	b.w	80143fc <_close_r>

0801367e <sulp>:
 801367e:	b570      	push	{r4, r5, r6, lr}
 8013680:	4604      	mov	r4, r0
 8013682:	460d      	mov	r5, r1
 8013684:	ec45 4b10 	vmov	d0, r4, r5
 8013688:	4616      	mov	r6, r2
 801368a:	f002 fd23 	bl	80160d4 <__ulp>
 801368e:	ec51 0b10 	vmov	r0, r1, d0
 8013692:	b17e      	cbz	r6, 80136b4 <sulp+0x36>
 8013694:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013698:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801369c:	2b00      	cmp	r3, #0
 801369e:	dd09      	ble.n	80136b4 <sulp+0x36>
 80136a0:	051b      	lsls	r3, r3, #20
 80136a2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80136a6:	2400      	movs	r4, #0
 80136a8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80136ac:	4622      	mov	r2, r4
 80136ae:	462b      	mov	r3, r5
 80136b0:	f7ec ffa2 	bl	80005f8 <__aeabi_dmul>
 80136b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080136b8 <_strtod_l>:
 80136b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136bc:	ed2d 8b02 	vpush	{d8}
 80136c0:	b09d      	sub	sp, #116	; 0x74
 80136c2:	461f      	mov	r7, r3
 80136c4:	2300      	movs	r3, #0
 80136c6:	9318      	str	r3, [sp, #96]	; 0x60
 80136c8:	4ba2      	ldr	r3, [pc, #648]	; (8013954 <_strtod_l+0x29c>)
 80136ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	9305      	str	r3, [sp, #20]
 80136d0:	4604      	mov	r4, r0
 80136d2:	4618      	mov	r0, r3
 80136d4:	4688      	mov	r8, r1
 80136d6:	f7ec fd7b 	bl	80001d0 <strlen>
 80136da:	f04f 0a00 	mov.w	sl, #0
 80136de:	4605      	mov	r5, r0
 80136e0:	f04f 0b00 	mov.w	fp, #0
 80136e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80136e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80136ea:	781a      	ldrb	r2, [r3, #0]
 80136ec:	2a2b      	cmp	r2, #43	; 0x2b
 80136ee:	d04e      	beq.n	801378e <_strtod_l+0xd6>
 80136f0:	d83b      	bhi.n	801376a <_strtod_l+0xb2>
 80136f2:	2a0d      	cmp	r2, #13
 80136f4:	d834      	bhi.n	8013760 <_strtod_l+0xa8>
 80136f6:	2a08      	cmp	r2, #8
 80136f8:	d834      	bhi.n	8013764 <_strtod_l+0xac>
 80136fa:	2a00      	cmp	r2, #0
 80136fc:	d03e      	beq.n	801377c <_strtod_l+0xc4>
 80136fe:	2300      	movs	r3, #0
 8013700:	930a      	str	r3, [sp, #40]	; 0x28
 8013702:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8013704:	7833      	ldrb	r3, [r6, #0]
 8013706:	2b30      	cmp	r3, #48	; 0x30
 8013708:	f040 80b0 	bne.w	801386c <_strtod_l+0x1b4>
 801370c:	7873      	ldrb	r3, [r6, #1]
 801370e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013712:	2b58      	cmp	r3, #88	; 0x58
 8013714:	d168      	bne.n	80137e8 <_strtod_l+0x130>
 8013716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013718:	9301      	str	r3, [sp, #4]
 801371a:	ab18      	add	r3, sp, #96	; 0x60
 801371c:	9702      	str	r7, [sp, #8]
 801371e:	9300      	str	r3, [sp, #0]
 8013720:	4a8d      	ldr	r2, [pc, #564]	; (8013958 <_strtod_l+0x2a0>)
 8013722:	ab19      	add	r3, sp, #100	; 0x64
 8013724:	a917      	add	r1, sp, #92	; 0x5c
 8013726:	4620      	mov	r0, r4
 8013728:	f001 fe1e 	bl	8015368 <__gethex>
 801372c:	f010 0707 	ands.w	r7, r0, #7
 8013730:	4605      	mov	r5, r0
 8013732:	d005      	beq.n	8013740 <_strtod_l+0x88>
 8013734:	2f06      	cmp	r7, #6
 8013736:	d12c      	bne.n	8013792 <_strtod_l+0xda>
 8013738:	3601      	adds	r6, #1
 801373a:	2300      	movs	r3, #0
 801373c:	9617      	str	r6, [sp, #92]	; 0x5c
 801373e:	930a      	str	r3, [sp, #40]	; 0x28
 8013740:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013742:	2b00      	cmp	r3, #0
 8013744:	f040 8590 	bne.w	8014268 <_strtod_l+0xbb0>
 8013748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801374a:	b1eb      	cbz	r3, 8013788 <_strtod_l+0xd0>
 801374c:	4652      	mov	r2, sl
 801374e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8013752:	ec43 2b10 	vmov	d0, r2, r3
 8013756:	b01d      	add	sp, #116	; 0x74
 8013758:	ecbd 8b02 	vpop	{d8}
 801375c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013760:	2a20      	cmp	r2, #32
 8013762:	d1cc      	bne.n	80136fe <_strtod_l+0x46>
 8013764:	3301      	adds	r3, #1
 8013766:	9317      	str	r3, [sp, #92]	; 0x5c
 8013768:	e7be      	b.n	80136e8 <_strtod_l+0x30>
 801376a:	2a2d      	cmp	r2, #45	; 0x2d
 801376c:	d1c7      	bne.n	80136fe <_strtod_l+0x46>
 801376e:	2201      	movs	r2, #1
 8013770:	920a      	str	r2, [sp, #40]	; 0x28
 8013772:	1c5a      	adds	r2, r3, #1
 8013774:	9217      	str	r2, [sp, #92]	; 0x5c
 8013776:	785b      	ldrb	r3, [r3, #1]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d1c2      	bne.n	8013702 <_strtod_l+0x4a>
 801377c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801377e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013782:	2b00      	cmp	r3, #0
 8013784:	f040 856e 	bne.w	8014264 <_strtod_l+0xbac>
 8013788:	4652      	mov	r2, sl
 801378a:	465b      	mov	r3, fp
 801378c:	e7e1      	b.n	8013752 <_strtod_l+0x9a>
 801378e:	2200      	movs	r2, #0
 8013790:	e7ee      	b.n	8013770 <_strtod_l+0xb8>
 8013792:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013794:	b13a      	cbz	r2, 80137a6 <_strtod_l+0xee>
 8013796:	2135      	movs	r1, #53	; 0x35
 8013798:	a81a      	add	r0, sp, #104	; 0x68
 801379a:	f002 fda6 	bl	80162ea <__copybits>
 801379e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80137a0:	4620      	mov	r0, r4
 80137a2:	f002 f965 	bl	8015a70 <_Bfree>
 80137a6:	3f01      	subs	r7, #1
 80137a8:	2f04      	cmp	r7, #4
 80137aa:	d806      	bhi.n	80137ba <_strtod_l+0x102>
 80137ac:	e8df f007 	tbb	[pc, r7]
 80137b0:	1714030a 	.word	0x1714030a
 80137b4:	0a          	.byte	0x0a
 80137b5:	00          	.byte	0x00
 80137b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80137ba:	0728      	lsls	r0, r5, #28
 80137bc:	d5c0      	bpl.n	8013740 <_strtod_l+0x88>
 80137be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80137c2:	e7bd      	b.n	8013740 <_strtod_l+0x88>
 80137c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80137c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80137ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80137ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80137d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80137d6:	e7f0      	b.n	80137ba <_strtod_l+0x102>
 80137d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801395c <_strtod_l+0x2a4>
 80137dc:	e7ed      	b.n	80137ba <_strtod_l+0x102>
 80137de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80137e2:	f04f 3aff 	mov.w	sl, #4294967295
 80137e6:	e7e8      	b.n	80137ba <_strtod_l+0x102>
 80137e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137ea:	1c5a      	adds	r2, r3, #1
 80137ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80137ee:	785b      	ldrb	r3, [r3, #1]
 80137f0:	2b30      	cmp	r3, #48	; 0x30
 80137f2:	d0f9      	beq.n	80137e8 <_strtod_l+0x130>
 80137f4:	2b00      	cmp	r3, #0
 80137f6:	d0a3      	beq.n	8013740 <_strtod_l+0x88>
 80137f8:	2301      	movs	r3, #1
 80137fa:	f04f 0900 	mov.w	r9, #0
 80137fe:	9304      	str	r3, [sp, #16]
 8013800:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013802:	9308      	str	r3, [sp, #32]
 8013804:	f8cd 901c 	str.w	r9, [sp, #28]
 8013808:	464f      	mov	r7, r9
 801380a:	220a      	movs	r2, #10
 801380c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801380e:	7806      	ldrb	r6, [r0, #0]
 8013810:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013814:	b2d9      	uxtb	r1, r3
 8013816:	2909      	cmp	r1, #9
 8013818:	d92a      	bls.n	8013870 <_strtod_l+0x1b8>
 801381a:	9905      	ldr	r1, [sp, #20]
 801381c:	462a      	mov	r2, r5
 801381e:	f002 ffaf 	bl	8016780 <strncmp>
 8013822:	b398      	cbz	r0, 801388c <_strtod_l+0x1d4>
 8013824:	2000      	movs	r0, #0
 8013826:	4632      	mov	r2, r6
 8013828:	463d      	mov	r5, r7
 801382a:	9005      	str	r0, [sp, #20]
 801382c:	4603      	mov	r3, r0
 801382e:	2a65      	cmp	r2, #101	; 0x65
 8013830:	d001      	beq.n	8013836 <_strtod_l+0x17e>
 8013832:	2a45      	cmp	r2, #69	; 0x45
 8013834:	d118      	bne.n	8013868 <_strtod_l+0x1b0>
 8013836:	b91d      	cbnz	r5, 8013840 <_strtod_l+0x188>
 8013838:	9a04      	ldr	r2, [sp, #16]
 801383a:	4302      	orrs	r2, r0
 801383c:	d09e      	beq.n	801377c <_strtod_l+0xc4>
 801383e:	2500      	movs	r5, #0
 8013840:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8013844:	f108 0201 	add.w	r2, r8, #1
 8013848:	9217      	str	r2, [sp, #92]	; 0x5c
 801384a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801384e:	2a2b      	cmp	r2, #43	; 0x2b
 8013850:	d075      	beq.n	801393e <_strtod_l+0x286>
 8013852:	2a2d      	cmp	r2, #45	; 0x2d
 8013854:	d07b      	beq.n	801394e <_strtod_l+0x296>
 8013856:	f04f 0c00 	mov.w	ip, #0
 801385a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801385e:	2909      	cmp	r1, #9
 8013860:	f240 8082 	bls.w	8013968 <_strtod_l+0x2b0>
 8013864:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013868:	2600      	movs	r6, #0
 801386a:	e09d      	b.n	80139a8 <_strtod_l+0x2f0>
 801386c:	2300      	movs	r3, #0
 801386e:	e7c4      	b.n	80137fa <_strtod_l+0x142>
 8013870:	2f08      	cmp	r7, #8
 8013872:	bfd8      	it	le
 8013874:	9907      	ldrle	r1, [sp, #28]
 8013876:	f100 0001 	add.w	r0, r0, #1
 801387a:	bfda      	itte	le
 801387c:	fb02 3301 	mlale	r3, r2, r1, r3
 8013880:	9307      	strle	r3, [sp, #28]
 8013882:	fb02 3909 	mlagt	r9, r2, r9, r3
 8013886:	3701      	adds	r7, #1
 8013888:	9017      	str	r0, [sp, #92]	; 0x5c
 801388a:	e7bf      	b.n	801380c <_strtod_l+0x154>
 801388c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801388e:	195a      	adds	r2, r3, r5
 8013890:	9217      	str	r2, [sp, #92]	; 0x5c
 8013892:	5d5a      	ldrb	r2, [r3, r5]
 8013894:	2f00      	cmp	r7, #0
 8013896:	d037      	beq.n	8013908 <_strtod_l+0x250>
 8013898:	9005      	str	r0, [sp, #20]
 801389a:	463d      	mov	r5, r7
 801389c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80138a0:	2b09      	cmp	r3, #9
 80138a2:	d912      	bls.n	80138ca <_strtod_l+0x212>
 80138a4:	2301      	movs	r3, #1
 80138a6:	e7c2      	b.n	801382e <_strtod_l+0x176>
 80138a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80138aa:	1c5a      	adds	r2, r3, #1
 80138ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80138ae:	785a      	ldrb	r2, [r3, #1]
 80138b0:	3001      	adds	r0, #1
 80138b2:	2a30      	cmp	r2, #48	; 0x30
 80138b4:	d0f8      	beq.n	80138a8 <_strtod_l+0x1f0>
 80138b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80138ba:	2b08      	cmp	r3, #8
 80138bc:	f200 84d9 	bhi.w	8014272 <_strtod_l+0xbba>
 80138c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80138c2:	9005      	str	r0, [sp, #20]
 80138c4:	2000      	movs	r0, #0
 80138c6:	9308      	str	r3, [sp, #32]
 80138c8:	4605      	mov	r5, r0
 80138ca:	3a30      	subs	r2, #48	; 0x30
 80138cc:	f100 0301 	add.w	r3, r0, #1
 80138d0:	d014      	beq.n	80138fc <_strtod_l+0x244>
 80138d2:	9905      	ldr	r1, [sp, #20]
 80138d4:	4419      	add	r1, r3
 80138d6:	9105      	str	r1, [sp, #20]
 80138d8:	462b      	mov	r3, r5
 80138da:	eb00 0e05 	add.w	lr, r0, r5
 80138de:	210a      	movs	r1, #10
 80138e0:	4573      	cmp	r3, lr
 80138e2:	d113      	bne.n	801390c <_strtod_l+0x254>
 80138e4:	182b      	adds	r3, r5, r0
 80138e6:	2b08      	cmp	r3, #8
 80138e8:	f105 0501 	add.w	r5, r5, #1
 80138ec:	4405      	add	r5, r0
 80138ee:	dc1c      	bgt.n	801392a <_strtod_l+0x272>
 80138f0:	9907      	ldr	r1, [sp, #28]
 80138f2:	230a      	movs	r3, #10
 80138f4:	fb03 2301 	mla	r3, r3, r1, r2
 80138f8:	9307      	str	r3, [sp, #28]
 80138fa:	2300      	movs	r3, #0
 80138fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80138fe:	1c51      	adds	r1, r2, #1
 8013900:	9117      	str	r1, [sp, #92]	; 0x5c
 8013902:	7852      	ldrb	r2, [r2, #1]
 8013904:	4618      	mov	r0, r3
 8013906:	e7c9      	b.n	801389c <_strtod_l+0x1e4>
 8013908:	4638      	mov	r0, r7
 801390a:	e7d2      	b.n	80138b2 <_strtod_l+0x1fa>
 801390c:	2b08      	cmp	r3, #8
 801390e:	dc04      	bgt.n	801391a <_strtod_l+0x262>
 8013910:	9e07      	ldr	r6, [sp, #28]
 8013912:	434e      	muls	r6, r1
 8013914:	9607      	str	r6, [sp, #28]
 8013916:	3301      	adds	r3, #1
 8013918:	e7e2      	b.n	80138e0 <_strtod_l+0x228>
 801391a:	f103 0c01 	add.w	ip, r3, #1
 801391e:	f1bc 0f10 	cmp.w	ip, #16
 8013922:	bfd8      	it	le
 8013924:	fb01 f909 	mulle.w	r9, r1, r9
 8013928:	e7f5      	b.n	8013916 <_strtod_l+0x25e>
 801392a:	2d10      	cmp	r5, #16
 801392c:	bfdc      	itt	le
 801392e:	230a      	movle	r3, #10
 8013930:	fb03 2909 	mlale	r9, r3, r9, r2
 8013934:	e7e1      	b.n	80138fa <_strtod_l+0x242>
 8013936:	2300      	movs	r3, #0
 8013938:	9305      	str	r3, [sp, #20]
 801393a:	2301      	movs	r3, #1
 801393c:	e77c      	b.n	8013838 <_strtod_l+0x180>
 801393e:	f04f 0c00 	mov.w	ip, #0
 8013942:	f108 0202 	add.w	r2, r8, #2
 8013946:	9217      	str	r2, [sp, #92]	; 0x5c
 8013948:	f898 2002 	ldrb.w	r2, [r8, #2]
 801394c:	e785      	b.n	801385a <_strtod_l+0x1a2>
 801394e:	f04f 0c01 	mov.w	ip, #1
 8013952:	e7f6      	b.n	8013942 <_strtod_l+0x28a>
 8013954:	080179e8 	.word	0x080179e8
 8013958:	080177a0 	.word	0x080177a0
 801395c:	7ff00000 	.word	0x7ff00000
 8013960:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013962:	1c51      	adds	r1, r2, #1
 8013964:	9117      	str	r1, [sp, #92]	; 0x5c
 8013966:	7852      	ldrb	r2, [r2, #1]
 8013968:	2a30      	cmp	r2, #48	; 0x30
 801396a:	d0f9      	beq.n	8013960 <_strtod_l+0x2a8>
 801396c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013970:	2908      	cmp	r1, #8
 8013972:	f63f af79 	bhi.w	8013868 <_strtod_l+0x1b0>
 8013976:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801397a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801397c:	9206      	str	r2, [sp, #24]
 801397e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013980:	1c51      	adds	r1, r2, #1
 8013982:	9117      	str	r1, [sp, #92]	; 0x5c
 8013984:	7852      	ldrb	r2, [r2, #1]
 8013986:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801398a:	2e09      	cmp	r6, #9
 801398c:	d937      	bls.n	80139fe <_strtod_l+0x346>
 801398e:	9e06      	ldr	r6, [sp, #24]
 8013990:	1b89      	subs	r1, r1, r6
 8013992:	2908      	cmp	r1, #8
 8013994:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013998:	dc02      	bgt.n	80139a0 <_strtod_l+0x2e8>
 801399a:	4576      	cmp	r6, lr
 801399c:	bfa8      	it	ge
 801399e:	4676      	movge	r6, lr
 80139a0:	f1bc 0f00 	cmp.w	ip, #0
 80139a4:	d000      	beq.n	80139a8 <_strtod_l+0x2f0>
 80139a6:	4276      	negs	r6, r6
 80139a8:	2d00      	cmp	r5, #0
 80139aa:	d14d      	bne.n	8013a48 <_strtod_l+0x390>
 80139ac:	9904      	ldr	r1, [sp, #16]
 80139ae:	4301      	orrs	r1, r0
 80139b0:	f47f aec6 	bne.w	8013740 <_strtod_l+0x88>
 80139b4:	2b00      	cmp	r3, #0
 80139b6:	f47f aee1 	bne.w	801377c <_strtod_l+0xc4>
 80139ba:	2a69      	cmp	r2, #105	; 0x69
 80139bc:	d027      	beq.n	8013a0e <_strtod_l+0x356>
 80139be:	dc24      	bgt.n	8013a0a <_strtod_l+0x352>
 80139c0:	2a49      	cmp	r2, #73	; 0x49
 80139c2:	d024      	beq.n	8013a0e <_strtod_l+0x356>
 80139c4:	2a4e      	cmp	r2, #78	; 0x4e
 80139c6:	f47f aed9 	bne.w	801377c <_strtod_l+0xc4>
 80139ca:	499f      	ldr	r1, [pc, #636]	; (8013c48 <_strtod_l+0x590>)
 80139cc:	a817      	add	r0, sp, #92	; 0x5c
 80139ce:	f001 ff23 	bl	8015818 <__match>
 80139d2:	2800      	cmp	r0, #0
 80139d4:	f43f aed2 	beq.w	801377c <_strtod_l+0xc4>
 80139d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80139da:	781b      	ldrb	r3, [r3, #0]
 80139dc:	2b28      	cmp	r3, #40	; 0x28
 80139de:	d12d      	bne.n	8013a3c <_strtod_l+0x384>
 80139e0:	499a      	ldr	r1, [pc, #616]	; (8013c4c <_strtod_l+0x594>)
 80139e2:	aa1a      	add	r2, sp, #104	; 0x68
 80139e4:	a817      	add	r0, sp, #92	; 0x5c
 80139e6:	f001 ff2b 	bl	8015840 <__hexnan>
 80139ea:	2805      	cmp	r0, #5
 80139ec:	d126      	bne.n	8013a3c <_strtod_l+0x384>
 80139ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80139f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80139f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80139fc:	e6a0      	b.n	8013740 <_strtod_l+0x88>
 80139fe:	210a      	movs	r1, #10
 8013a00:	fb01 2e0e 	mla	lr, r1, lr, r2
 8013a04:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013a08:	e7b9      	b.n	801397e <_strtod_l+0x2c6>
 8013a0a:	2a6e      	cmp	r2, #110	; 0x6e
 8013a0c:	e7db      	b.n	80139c6 <_strtod_l+0x30e>
 8013a0e:	4990      	ldr	r1, [pc, #576]	; (8013c50 <_strtod_l+0x598>)
 8013a10:	a817      	add	r0, sp, #92	; 0x5c
 8013a12:	f001 ff01 	bl	8015818 <__match>
 8013a16:	2800      	cmp	r0, #0
 8013a18:	f43f aeb0 	beq.w	801377c <_strtod_l+0xc4>
 8013a1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a1e:	498d      	ldr	r1, [pc, #564]	; (8013c54 <_strtod_l+0x59c>)
 8013a20:	3b01      	subs	r3, #1
 8013a22:	a817      	add	r0, sp, #92	; 0x5c
 8013a24:	9317      	str	r3, [sp, #92]	; 0x5c
 8013a26:	f001 fef7 	bl	8015818 <__match>
 8013a2a:	b910      	cbnz	r0, 8013a32 <_strtod_l+0x37a>
 8013a2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013a2e:	3301      	adds	r3, #1
 8013a30:	9317      	str	r3, [sp, #92]	; 0x5c
 8013a32:	f8df b230 	ldr.w	fp, [pc, #560]	; 8013c64 <_strtod_l+0x5ac>
 8013a36:	f04f 0a00 	mov.w	sl, #0
 8013a3a:	e681      	b.n	8013740 <_strtod_l+0x88>
 8013a3c:	4886      	ldr	r0, [pc, #536]	; (8013c58 <_strtod_l+0x5a0>)
 8013a3e:	f002 fe97 	bl	8016770 <nan>
 8013a42:	ec5b ab10 	vmov	sl, fp, d0
 8013a46:	e67b      	b.n	8013740 <_strtod_l+0x88>
 8013a48:	9b05      	ldr	r3, [sp, #20]
 8013a4a:	9807      	ldr	r0, [sp, #28]
 8013a4c:	1af3      	subs	r3, r6, r3
 8013a4e:	2f00      	cmp	r7, #0
 8013a50:	bf08      	it	eq
 8013a52:	462f      	moveq	r7, r5
 8013a54:	2d10      	cmp	r5, #16
 8013a56:	9306      	str	r3, [sp, #24]
 8013a58:	46a8      	mov	r8, r5
 8013a5a:	bfa8      	it	ge
 8013a5c:	f04f 0810 	movge.w	r8, #16
 8013a60:	f7ec fd50 	bl	8000504 <__aeabi_ui2d>
 8013a64:	2d09      	cmp	r5, #9
 8013a66:	4682      	mov	sl, r0
 8013a68:	468b      	mov	fp, r1
 8013a6a:	dd13      	ble.n	8013a94 <_strtod_l+0x3dc>
 8013a6c:	4b7b      	ldr	r3, [pc, #492]	; (8013c5c <_strtod_l+0x5a4>)
 8013a6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8013a72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013a76:	f7ec fdbf 	bl	80005f8 <__aeabi_dmul>
 8013a7a:	4682      	mov	sl, r0
 8013a7c:	4648      	mov	r0, r9
 8013a7e:	468b      	mov	fp, r1
 8013a80:	f7ec fd40 	bl	8000504 <__aeabi_ui2d>
 8013a84:	4602      	mov	r2, r0
 8013a86:	460b      	mov	r3, r1
 8013a88:	4650      	mov	r0, sl
 8013a8a:	4659      	mov	r1, fp
 8013a8c:	f7ec fbfe 	bl	800028c <__adddf3>
 8013a90:	4682      	mov	sl, r0
 8013a92:	468b      	mov	fp, r1
 8013a94:	2d0f      	cmp	r5, #15
 8013a96:	dc38      	bgt.n	8013b0a <_strtod_l+0x452>
 8013a98:	9b06      	ldr	r3, [sp, #24]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	f43f ae50 	beq.w	8013740 <_strtod_l+0x88>
 8013aa0:	dd24      	ble.n	8013aec <_strtod_l+0x434>
 8013aa2:	2b16      	cmp	r3, #22
 8013aa4:	dc0b      	bgt.n	8013abe <_strtod_l+0x406>
 8013aa6:	496d      	ldr	r1, [pc, #436]	; (8013c5c <_strtod_l+0x5a4>)
 8013aa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013aac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ab0:	4652      	mov	r2, sl
 8013ab2:	465b      	mov	r3, fp
 8013ab4:	f7ec fda0 	bl	80005f8 <__aeabi_dmul>
 8013ab8:	4682      	mov	sl, r0
 8013aba:	468b      	mov	fp, r1
 8013abc:	e640      	b.n	8013740 <_strtod_l+0x88>
 8013abe:	9a06      	ldr	r2, [sp, #24]
 8013ac0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	db20      	blt.n	8013b0a <_strtod_l+0x452>
 8013ac8:	4c64      	ldr	r4, [pc, #400]	; (8013c5c <_strtod_l+0x5a4>)
 8013aca:	f1c5 050f 	rsb	r5, r5, #15
 8013ace:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013ad2:	4652      	mov	r2, sl
 8013ad4:	465b      	mov	r3, fp
 8013ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013ada:	f7ec fd8d 	bl	80005f8 <__aeabi_dmul>
 8013ade:	9b06      	ldr	r3, [sp, #24]
 8013ae0:	1b5d      	subs	r5, r3, r5
 8013ae2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013ae6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013aea:	e7e3      	b.n	8013ab4 <_strtod_l+0x3fc>
 8013aec:	9b06      	ldr	r3, [sp, #24]
 8013aee:	3316      	adds	r3, #22
 8013af0:	db0b      	blt.n	8013b0a <_strtod_l+0x452>
 8013af2:	9b05      	ldr	r3, [sp, #20]
 8013af4:	1b9e      	subs	r6, r3, r6
 8013af6:	4b59      	ldr	r3, [pc, #356]	; (8013c5c <_strtod_l+0x5a4>)
 8013af8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8013afc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013b00:	4650      	mov	r0, sl
 8013b02:	4659      	mov	r1, fp
 8013b04:	f7ec fea2 	bl	800084c <__aeabi_ddiv>
 8013b08:	e7d6      	b.n	8013ab8 <_strtod_l+0x400>
 8013b0a:	9b06      	ldr	r3, [sp, #24]
 8013b0c:	eba5 0808 	sub.w	r8, r5, r8
 8013b10:	4498      	add	r8, r3
 8013b12:	f1b8 0f00 	cmp.w	r8, #0
 8013b16:	dd74      	ble.n	8013c02 <_strtod_l+0x54a>
 8013b18:	f018 030f 	ands.w	r3, r8, #15
 8013b1c:	d00a      	beq.n	8013b34 <_strtod_l+0x47c>
 8013b1e:	494f      	ldr	r1, [pc, #316]	; (8013c5c <_strtod_l+0x5a4>)
 8013b20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b24:	4652      	mov	r2, sl
 8013b26:	465b      	mov	r3, fp
 8013b28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b2c:	f7ec fd64 	bl	80005f8 <__aeabi_dmul>
 8013b30:	4682      	mov	sl, r0
 8013b32:	468b      	mov	fp, r1
 8013b34:	f038 080f 	bics.w	r8, r8, #15
 8013b38:	d04f      	beq.n	8013bda <_strtod_l+0x522>
 8013b3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013b3e:	dd22      	ble.n	8013b86 <_strtod_l+0x4ce>
 8013b40:	2500      	movs	r5, #0
 8013b42:	462e      	mov	r6, r5
 8013b44:	9507      	str	r5, [sp, #28]
 8013b46:	9505      	str	r5, [sp, #20]
 8013b48:	2322      	movs	r3, #34	; 0x22
 8013b4a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8013c64 <_strtod_l+0x5ac>
 8013b4e:	6023      	str	r3, [r4, #0]
 8013b50:	f04f 0a00 	mov.w	sl, #0
 8013b54:	9b07      	ldr	r3, [sp, #28]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	f43f adf2 	beq.w	8013740 <_strtod_l+0x88>
 8013b5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013b5e:	4620      	mov	r0, r4
 8013b60:	f001 ff86 	bl	8015a70 <_Bfree>
 8013b64:	9905      	ldr	r1, [sp, #20]
 8013b66:	4620      	mov	r0, r4
 8013b68:	f001 ff82 	bl	8015a70 <_Bfree>
 8013b6c:	4631      	mov	r1, r6
 8013b6e:	4620      	mov	r0, r4
 8013b70:	f001 ff7e 	bl	8015a70 <_Bfree>
 8013b74:	9907      	ldr	r1, [sp, #28]
 8013b76:	4620      	mov	r0, r4
 8013b78:	f001 ff7a 	bl	8015a70 <_Bfree>
 8013b7c:	4629      	mov	r1, r5
 8013b7e:	4620      	mov	r0, r4
 8013b80:	f001 ff76 	bl	8015a70 <_Bfree>
 8013b84:	e5dc      	b.n	8013740 <_strtod_l+0x88>
 8013b86:	4b36      	ldr	r3, [pc, #216]	; (8013c60 <_strtod_l+0x5a8>)
 8013b88:	9304      	str	r3, [sp, #16]
 8013b8a:	2300      	movs	r3, #0
 8013b8c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013b90:	4650      	mov	r0, sl
 8013b92:	4659      	mov	r1, fp
 8013b94:	4699      	mov	r9, r3
 8013b96:	f1b8 0f01 	cmp.w	r8, #1
 8013b9a:	dc21      	bgt.n	8013be0 <_strtod_l+0x528>
 8013b9c:	b10b      	cbz	r3, 8013ba2 <_strtod_l+0x4ea>
 8013b9e:	4682      	mov	sl, r0
 8013ba0:	468b      	mov	fp, r1
 8013ba2:	4b2f      	ldr	r3, [pc, #188]	; (8013c60 <_strtod_l+0x5a8>)
 8013ba4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013ba8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013bac:	4652      	mov	r2, sl
 8013bae:	465b      	mov	r3, fp
 8013bb0:	e9d9 0100 	ldrd	r0, r1, [r9]
 8013bb4:	f7ec fd20 	bl	80005f8 <__aeabi_dmul>
 8013bb8:	4b2a      	ldr	r3, [pc, #168]	; (8013c64 <_strtod_l+0x5ac>)
 8013bba:	460a      	mov	r2, r1
 8013bbc:	400b      	ands	r3, r1
 8013bbe:	492a      	ldr	r1, [pc, #168]	; (8013c68 <_strtod_l+0x5b0>)
 8013bc0:	428b      	cmp	r3, r1
 8013bc2:	4682      	mov	sl, r0
 8013bc4:	d8bc      	bhi.n	8013b40 <_strtod_l+0x488>
 8013bc6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013bca:	428b      	cmp	r3, r1
 8013bcc:	bf86      	itte	hi
 8013bce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8013c6c <_strtod_l+0x5b4>
 8013bd2:	f04f 3aff 	movhi.w	sl, #4294967295
 8013bd6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013bda:	2300      	movs	r3, #0
 8013bdc:	9304      	str	r3, [sp, #16]
 8013bde:	e084      	b.n	8013cea <_strtod_l+0x632>
 8013be0:	f018 0f01 	tst.w	r8, #1
 8013be4:	d005      	beq.n	8013bf2 <_strtod_l+0x53a>
 8013be6:	9b04      	ldr	r3, [sp, #16]
 8013be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bec:	f7ec fd04 	bl	80005f8 <__aeabi_dmul>
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	9a04      	ldr	r2, [sp, #16]
 8013bf4:	3208      	adds	r2, #8
 8013bf6:	f109 0901 	add.w	r9, r9, #1
 8013bfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013bfe:	9204      	str	r2, [sp, #16]
 8013c00:	e7c9      	b.n	8013b96 <_strtod_l+0x4de>
 8013c02:	d0ea      	beq.n	8013bda <_strtod_l+0x522>
 8013c04:	f1c8 0800 	rsb	r8, r8, #0
 8013c08:	f018 020f 	ands.w	r2, r8, #15
 8013c0c:	d00a      	beq.n	8013c24 <_strtod_l+0x56c>
 8013c0e:	4b13      	ldr	r3, [pc, #76]	; (8013c5c <_strtod_l+0x5a4>)
 8013c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c14:	4650      	mov	r0, sl
 8013c16:	4659      	mov	r1, fp
 8013c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1c:	f7ec fe16 	bl	800084c <__aeabi_ddiv>
 8013c20:	4682      	mov	sl, r0
 8013c22:	468b      	mov	fp, r1
 8013c24:	ea5f 1828 	movs.w	r8, r8, asr #4
 8013c28:	d0d7      	beq.n	8013bda <_strtod_l+0x522>
 8013c2a:	f1b8 0f1f 	cmp.w	r8, #31
 8013c2e:	dd1f      	ble.n	8013c70 <_strtod_l+0x5b8>
 8013c30:	2500      	movs	r5, #0
 8013c32:	462e      	mov	r6, r5
 8013c34:	9507      	str	r5, [sp, #28]
 8013c36:	9505      	str	r5, [sp, #20]
 8013c38:	2322      	movs	r3, #34	; 0x22
 8013c3a:	f04f 0a00 	mov.w	sl, #0
 8013c3e:	f04f 0b00 	mov.w	fp, #0
 8013c42:	6023      	str	r3, [r4, #0]
 8013c44:	e786      	b.n	8013b54 <_strtod_l+0x49c>
 8013c46:	bf00      	nop
 8013c48:	08017771 	.word	0x08017771
 8013c4c:	080177b4 	.word	0x080177b4
 8013c50:	08017769 	.word	0x08017769
 8013c54:	080178f4 	.word	0x080178f4
 8013c58:	08017ba0 	.word	0x08017ba0
 8013c5c:	08017a80 	.word	0x08017a80
 8013c60:	08017a58 	.word	0x08017a58
 8013c64:	7ff00000 	.word	0x7ff00000
 8013c68:	7ca00000 	.word	0x7ca00000
 8013c6c:	7fefffff 	.word	0x7fefffff
 8013c70:	f018 0310 	ands.w	r3, r8, #16
 8013c74:	bf18      	it	ne
 8013c76:	236a      	movne	r3, #106	; 0x6a
 8013c78:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8014028 <_strtod_l+0x970>
 8013c7c:	9304      	str	r3, [sp, #16]
 8013c7e:	4650      	mov	r0, sl
 8013c80:	4659      	mov	r1, fp
 8013c82:	2300      	movs	r3, #0
 8013c84:	f018 0f01 	tst.w	r8, #1
 8013c88:	d004      	beq.n	8013c94 <_strtod_l+0x5dc>
 8013c8a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013c8e:	f7ec fcb3 	bl	80005f8 <__aeabi_dmul>
 8013c92:	2301      	movs	r3, #1
 8013c94:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013c98:	f109 0908 	add.w	r9, r9, #8
 8013c9c:	d1f2      	bne.n	8013c84 <_strtod_l+0x5cc>
 8013c9e:	b10b      	cbz	r3, 8013ca4 <_strtod_l+0x5ec>
 8013ca0:	4682      	mov	sl, r0
 8013ca2:	468b      	mov	fp, r1
 8013ca4:	9b04      	ldr	r3, [sp, #16]
 8013ca6:	b1c3      	cbz	r3, 8013cda <_strtod_l+0x622>
 8013ca8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013cac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	4659      	mov	r1, fp
 8013cb4:	dd11      	ble.n	8013cda <_strtod_l+0x622>
 8013cb6:	2b1f      	cmp	r3, #31
 8013cb8:	f340 8124 	ble.w	8013f04 <_strtod_l+0x84c>
 8013cbc:	2b34      	cmp	r3, #52	; 0x34
 8013cbe:	bfde      	ittt	le
 8013cc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013cc4:	f04f 33ff 	movle.w	r3, #4294967295
 8013cc8:	fa03 f202 	lslle.w	r2, r3, r2
 8013ccc:	f04f 0a00 	mov.w	sl, #0
 8013cd0:	bfcc      	ite	gt
 8013cd2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013cd6:	ea02 0b01 	andle.w	fp, r2, r1
 8013cda:	2200      	movs	r2, #0
 8013cdc:	2300      	movs	r3, #0
 8013cde:	4650      	mov	r0, sl
 8013ce0:	4659      	mov	r1, fp
 8013ce2:	f7ec fef1 	bl	8000ac8 <__aeabi_dcmpeq>
 8013ce6:	2800      	cmp	r0, #0
 8013ce8:	d1a2      	bne.n	8013c30 <_strtod_l+0x578>
 8013cea:	9b07      	ldr	r3, [sp, #28]
 8013cec:	9300      	str	r3, [sp, #0]
 8013cee:	9908      	ldr	r1, [sp, #32]
 8013cf0:	462b      	mov	r3, r5
 8013cf2:	463a      	mov	r2, r7
 8013cf4:	4620      	mov	r0, r4
 8013cf6:	f001 ff23 	bl	8015b40 <__s2b>
 8013cfa:	9007      	str	r0, [sp, #28]
 8013cfc:	2800      	cmp	r0, #0
 8013cfe:	f43f af1f 	beq.w	8013b40 <_strtod_l+0x488>
 8013d02:	9b05      	ldr	r3, [sp, #20]
 8013d04:	1b9e      	subs	r6, r3, r6
 8013d06:	9b06      	ldr	r3, [sp, #24]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	bfb4      	ite	lt
 8013d0c:	4633      	movlt	r3, r6
 8013d0e:	2300      	movge	r3, #0
 8013d10:	930c      	str	r3, [sp, #48]	; 0x30
 8013d12:	9b06      	ldr	r3, [sp, #24]
 8013d14:	2500      	movs	r5, #0
 8013d16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013d1a:	9312      	str	r3, [sp, #72]	; 0x48
 8013d1c:	462e      	mov	r6, r5
 8013d1e:	9b07      	ldr	r3, [sp, #28]
 8013d20:	4620      	mov	r0, r4
 8013d22:	6859      	ldr	r1, [r3, #4]
 8013d24:	f001 fe64 	bl	80159f0 <_Balloc>
 8013d28:	9005      	str	r0, [sp, #20]
 8013d2a:	2800      	cmp	r0, #0
 8013d2c:	f43f af0c 	beq.w	8013b48 <_strtod_l+0x490>
 8013d30:	9b07      	ldr	r3, [sp, #28]
 8013d32:	691a      	ldr	r2, [r3, #16]
 8013d34:	3202      	adds	r2, #2
 8013d36:	f103 010c 	add.w	r1, r3, #12
 8013d3a:	0092      	lsls	r2, r2, #2
 8013d3c:	300c      	adds	r0, #12
 8013d3e:	f7fe fc50 	bl	80125e2 <memcpy>
 8013d42:	ec4b ab10 	vmov	d0, sl, fp
 8013d46:	aa1a      	add	r2, sp, #104	; 0x68
 8013d48:	a919      	add	r1, sp, #100	; 0x64
 8013d4a:	4620      	mov	r0, r4
 8013d4c:	f002 fa3e 	bl	80161cc <__d2b>
 8013d50:	ec4b ab18 	vmov	d8, sl, fp
 8013d54:	9018      	str	r0, [sp, #96]	; 0x60
 8013d56:	2800      	cmp	r0, #0
 8013d58:	f43f aef6 	beq.w	8013b48 <_strtod_l+0x490>
 8013d5c:	2101      	movs	r1, #1
 8013d5e:	4620      	mov	r0, r4
 8013d60:	f001 ff88 	bl	8015c74 <__i2b>
 8013d64:	4606      	mov	r6, r0
 8013d66:	2800      	cmp	r0, #0
 8013d68:	f43f aeee 	beq.w	8013b48 <_strtod_l+0x490>
 8013d6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013d6e:	9904      	ldr	r1, [sp, #16]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	bfab      	itete	ge
 8013d74:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8013d76:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8013d78:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013d7a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8013d7e:	bfac      	ite	ge
 8013d80:	eb03 0902 	addge.w	r9, r3, r2
 8013d84:	1ad7      	sublt	r7, r2, r3
 8013d86:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013d88:	eba3 0801 	sub.w	r8, r3, r1
 8013d8c:	4490      	add	r8, r2
 8013d8e:	4ba1      	ldr	r3, [pc, #644]	; (8014014 <_strtod_l+0x95c>)
 8013d90:	f108 38ff 	add.w	r8, r8, #4294967295
 8013d94:	4598      	cmp	r8, r3
 8013d96:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013d9a:	f280 80c7 	bge.w	8013f2c <_strtod_l+0x874>
 8013d9e:	eba3 0308 	sub.w	r3, r3, r8
 8013da2:	2b1f      	cmp	r3, #31
 8013da4:	eba2 0203 	sub.w	r2, r2, r3
 8013da8:	f04f 0101 	mov.w	r1, #1
 8013dac:	f300 80b1 	bgt.w	8013f12 <_strtod_l+0x85a>
 8013db0:	fa01 f303 	lsl.w	r3, r1, r3
 8013db4:	930d      	str	r3, [sp, #52]	; 0x34
 8013db6:	2300      	movs	r3, #0
 8013db8:	9308      	str	r3, [sp, #32]
 8013dba:	eb09 0802 	add.w	r8, r9, r2
 8013dbe:	9b04      	ldr	r3, [sp, #16]
 8013dc0:	45c1      	cmp	r9, r8
 8013dc2:	4417      	add	r7, r2
 8013dc4:	441f      	add	r7, r3
 8013dc6:	464b      	mov	r3, r9
 8013dc8:	bfa8      	it	ge
 8013dca:	4643      	movge	r3, r8
 8013dcc:	42bb      	cmp	r3, r7
 8013dce:	bfa8      	it	ge
 8013dd0:	463b      	movge	r3, r7
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	bfc2      	ittt	gt
 8013dd6:	eba8 0803 	subgt.w	r8, r8, r3
 8013dda:	1aff      	subgt	r7, r7, r3
 8013ddc:	eba9 0903 	subgt.w	r9, r9, r3
 8013de0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	dd17      	ble.n	8013e16 <_strtod_l+0x75e>
 8013de6:	4631      	mov	r1, r6
 8013de8:	461a      	mov	r2, r3
 8013dea:	4620      	mov	r0, r4
 8013dec:	f002 f802 	bl	8015df4 <__pow5mult>
 8013df0:	4606      	mov	r6, r0
 8013df2:	2800      	cmp	r0, #0
 8013df4:	f43f aea8 	beq.w	8013b48 <_strtod_l+0x490>
 8013df8:	4601      	mov	r1, r0
 8013dfa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013dfc:	4620      	mov	r0, r4
 8013dfe:	f001 ff4f 	bl	8015ca0 <__multiply>
 8013e02:	900b      	str	r0, [sp, #44]	; 0x2c
 8013e04:	2800      	cmp	r0, #0
 8013e06:	f43f ae9f 	beq.w	8013b48 <_strtod_l+0x490>
 8013e0a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013e0c:	4620      	mov	r0, r4
 8013e0e:	f001 fe2f 	bl	8015a70 <_Bfree>
 8013e12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e14:	9318      	str	r3, [sp, #96]	; 0x60
 8013e16:	f1b8 0f00 	cmp.w	r8, #0
 8013e1a:	f300 808c 	bgt.w	8013f36 <_strtod_l+0x87e>
 8013e1e:	9b06      	ldr	r3, [sp, #24]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	dd08      	ble.n	8013e36 <_strtod_l+0x77e>
 8013e24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013e26:	9905      	ldr	r1, [sp, #20]
 8013e28:	4620      	mov	r0, r4
 8013e2a:	f001 ffe3 	bl	8015df4 <__pow5mult>
 8013e2e:	9005      	str	r0, [sp, #20]
 8013e30:	2800      	cmp	r0, #0
 8013e32:	f43f ae89 	beq.w	8013b48 <_strtod_l+0x490>
 8013e36:	2f00      	cmp	r7, #0
 8013e38:	dd08      	ble.n	8013e4c <_strtod_l+0x794>
 8013e3a:	9905      	ldr	r1, [sp, #20]
 8013e3c:	463a      	mov	r2, r7
 8013e3e:	4620      	mov	r0, r4
 8013e40:	f002 f832 	bl	8015ea8 <__lshift>
 8013e44:	9005      	str	r0, [sp, #20]
 8013e46:	2800      	cmp	r0, #0
 8013e48:	f43f ae7e 	beq.w	8013b48 <_strtod_l+0x490>
 8013e4c:	f1b9 0f00 	cmp.w	r9, #0
 8013e50:	dd08      	ble.n	8013e64 <_strtod_l+0x7ac>
 8013e52:	4631      	mov	r1, r6
 8013e54:	464a      	mov	r2, r9
 8013e56:	4620      	mov	r0, r4
 8013e58:	f002 f826 	bl	8015ea8 <__lshift>
 8013e5c:	4606      	mov	r6, r0
 8013e5e:	2800      	cmp	r0, #0
 8013e60:	f43f ae72 	beq.w	8013b48 <_strtod_l+0x490>
 8013e64:	9a05      	ldr	r2, [sp, #20]
 8013e66:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f002 f8a9 	bl	8015fc0 <__mdiff>
 8013e6e:	4605      	mov	r5, r0
 8013e70:	2800      	cmp	r0, #0
 8013e72:	f43f ae69 	beq.w	8013b48 <_strtod_l+0x490>
 8013e76:	68c3      	ldr	r3, [r0, #12]
 8013e78:	930b      	str	r3, [sp, #44]	; 0x2c
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	60c3      	str	r3, [r0, #12]
 8013e7e:	4631      	mov	r1, r6
 8013e80:	f002 f882 	bl	8015f88 <__mcmp>
 8013e84:	2800      	cmp	r0, #0
 8013e86:	da60      	bge.n	8013f4a <_strtod_l+0x892>
 8013e88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e8a:	ea53 030a 	orrs.w	r3, r3, sl
 8013e8e:	f040 8082 	bne.w	8013f96 <_strtod_l+0x8de>
 8013e92:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d17d      	bne.n	8013f96 <_strtod_l+0x8de>
 8013e9a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013e9e:	0d1b      	lsrs	r3, r3, #20
 8013ea0:	051b      	lsls	r3, r3, #20
 8013ea2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013ea6:	d976      	bls.n	8013f96 <_strtod_l+0x8de>
 8013ea8:	696b      	ldr	r3, [r5, #20]
 8013eaa:	b913      	cbnz	r3, 8013eb2 <_strtod_l+0x7fa>
 8013eac:	692b      	ldr	r3, [r5, #16]
 8013eae:	2b01      	cmp	r3, #1
 8013eb0:	dd71      	ble.n	8013f96 <_strtod_l+0x8de>
 8013eb2:	4629      	mov	r1, r5
 8013eb4:	2201      	movs	r2, #1
 8013eb6:	4620      	mov	r0, r4
 8013eb8:	f001 fff6 	bl	8015ea8 <__lshift>
 8013ebc:	4631      	mov	r1, r6
 8013ebe:	4605      	mov	r5, r0
 8013ec0:	f002 f862 	bl	8015f88 <__mcmp>
 8013ec4:	2800      	cmp	r0, #0
 8013ec6:	dd66      	ble.n	8013f96 <_strtod_l+0x8de>
 8013ec8:	9904      	ldr	r1, [sp, #16]
 8013eca:	4a53      	ldr	r2, [pc, #332]	; (8014018 <_strtod_l+0x960>)
 8013ecc:	465b      	mov	r3, fp
 8013ece:	2900      	cmp	r1, #0
 8013ed0:	f000 8081 	beq.w	8013fd6 <_strtod_l+0x91e>
 8013ed4:	ea02 010b 	and.w	r1, r2, fp
 8013ed8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013edc:	dc7b      	bgt.n	8013fd6 <_strtod_l+0x91e>
 8013ede:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013ee2:	f77f aea9 	ble.w	8013c38 <_strtod_l+0x580>
 8013ee6:	4b4d      	ldr	r3, [pc, #308]	; (801401c <_strtod_l+0x964>)
 8013ee8:	4650      	mov	r0, sl
 8013eea:	4659      	mov	r1, fp
 8013eec:	2200      	movs	r2, #0
 8013eee:	f7ec fb83 	bl	80005f8 <__aeabi_dmul>
 8013ef2:	460b      	mov	r3, r1
 8013ef4:	4303      	orrs	r3, r0
 8013ef6:	bf08      	it	eq
 8013ef8:	2322      	moveq	r3, #34	; 0x22
 8013efa:	4682      	mov	sl, r0
 8013efc:	468b      	mov	fp, r1
 8013efe:	bf08      	it	eq
 8013f00:	6023      	streq	r3, [r4, #0]
 8013f02:	e62b      	b.n	8013b5c <_strtod_l+0x4a4>
 8013f04:	f04f 32ff 	mov.w	r2, #4294967295
 8013f08:	fa02 f303 	lsl.w	r3, r2, r3
 8013f0c:	ea03 0a0a 	and.w	sl, r3, sl
 8013f10:	e6e3      	b.n	8013cda <_strtod_l+0x622>
 8013f12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013f16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013f1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013f1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013f22:	fa01 f308 	lsl.w	r3, r1, r8
 8013f26:	9308      	str	r3, [sp, #32]
 8013f28:	910d      	str	r1, [sp, #52]	; 0x34
 8013f2a:	e746      	b.n	8013dba <_strtod_l+0x702>
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	9308      	str	r3, [sp, #32]
 8013f30:	2301      	movs	r3, #1
 8013f32:	930d      	str	r3, [sp, #52]	; 0x34
 8013f34:	e741      	b.n	8013dba <_strtod_l+0x702>
 8013f36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013f38:	4642      	mov	r2, r8
 8013f3a:	4620      	mov	r0, r4
 8013f3c:	f001 ffb4 	bl	8015ea8 <__lshift>
 8013f40:	9018      	str	r0, [sp, #96]	; 0x60
 8013f42:	2800      	cmp	r0, #0
 8013f44:	f47f af6b 	bne.w	8013e1e <_strtod_l+0x766>
 8013f48:	e5fe      	b.n	8013b48 <_strtod_l+0x490>
 8013f4a:	465f      	mov	r7, fp
 8013f4c:	d16e      	bne.n	801402c <_strtod_l+0x974>
 8013f4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f54:	b342      	cbz	r2, 8013fa8 <_strtod_l+0x8f0>
 8013f56:	4a32      	ldr	r2, [pc, #200]	; (8014020 <_strtod_l+0x968>)
 8013f58:	4293      	cmp	r3, r2
 8013f5a:	d128      	bne.n	8013fae <_strtod_l+0x8f6>
 8013f5c:	9b04      	ldr	r3, [sp, #16]
 8013f5e:	4651      	mov	r1, sl
 8013f60:	b1eb      	cbz	r3, 8013f9e <_strtod_l+0x8e6>
 8013f62:	4b2d      	ldr	r3, [pc, #180]	; (8014018 <_strtod_l+0x960>)
 8013f64:	403b      	ands	r3, r7
 8013f66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8013f6e:	d819      	bhi.n	8013fa4 <_strtod_l+0x8ec>
 8013f70:	0d1b      	lsrs	r3, r3, #20
 8013f72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013f76:	fa02 f303 	lsl.w	r3, r2, r3
 8013f7a:	4299      	cmp	r1, r3
 8013f7c:	d117      	bne.n	8013fae <_strtod_l+0x8f6>
 8013f7e:	4b29      	ldr	r3, [pc, #164]	; (8014024 <_strtod_l+0x96c>)
 8013f80:	429f      	cmp	r7, r3
 8013f82:	d102      	bne.n	8013f8a <_strtod_l+0x8d2>
 8013f84:	3101      	adds	r1, #1
 8013f86:	f43f addf 	beq.w	8013b48 <_strtod_l+0x490>
 8013f8a:	4b23      	ldr	r3, [pc, #140]	; (8014018 <_strtod_l+0x960>)
 8013f8c:	403b      	ands	r3, r7
 8013f8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013f92:	f04f 0a00 	mov.w	sl, #0
 8013f96:	9b04      	ldr	r3, [sp, #16]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d1a4      	bne.n	8013ee6 <_strtod_l+0x82e>
 8013f9c:	e5de      	b.n	8013b5c <_strtod_l+0x4a4>
 8013f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8013fa2:	e7ea      	b.n	8013f7a <_strtod_l+0x8c2>
 8013fa4:	4613      	mov	r3, r2
 8013fa6:	e7e8      	b.n	8013f7a <_strtod_l+0x8c2>
 8013fa8:	ea53 030a 	orrs.w	r3, r3, sl
 8013fac:	d08c      	beq.n	8013ec8 <_strtod_l+0x810>
 8013fae:	9b08      	ldr	r3, [sp, #32]
 8013fb0:	b1db      	cbz	r3, 8013fea <_strtod_l+0x932>
 8013fb2:	423b      	tst	r3, r7
 8013fb4:	d0ef      	beq.n	8013f96 <_strtod_l+0x8de>
 8013fb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013fb8:	9a04      	ldr	r2, [sp, #16]
 8013fba:	4650      	mov	r0, sl
 8013fbc:	4659      	mov	r1, fp
 8013fbe:	b1c3      	cbz	r3, 8013ff2 <_strtod_l+0x93a>
 8013fc0:	f7ff fb5d 	bl	801367e <sulp>
 8013fc4:	4602      	mov	r2, r0
 8013fc6:	460b      	mov	r3, r1
 8013fc8:	ec51 0b18 	vmov	r0, r1, d8
 8013fcc:	f7ec f95e 	bl	800028c <__adddf3>
 8013fd0:	4682      	mov	sl, r0
 8013fd2:	468b      	mov	fp, r1
 8013fd4:	e7df      	b.n	8013f96 <_strtod_l+0x8de>
 8013fd6:	4013      	ands	r3, r2
 8013fd8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013fdc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013fe0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013fe4:	f04f 3aff 	mov.w	sl, #4294967295
 8013fe8:	e7d5      	b.n	8013f96 <_strtod_l+0x8de>
 8013fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013fec:	ea13 0f0a 	tst.w	r3, sl
 8013ff0:	e7e0      	b.n	8013fb4 <_strtod_l+0x8fc>
 8013ff2:	f7ff fb44 	bl	801367e <sulp>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	ec51 0b18 	vmov	r0, r1, d8
 8013ffe:	f7ec f943 	bl	8000288 <__aeabi_dsub>
 8014002:	2200      	movs	r2, #0
 8014004:	2300      	movs	r3, #0
 8014006:	4682      	mov	sl, r0
 8014008:	468b      	mov	fp, r1
 801400a:	f7ec fd5d 	bl	8000ac8 <__aeabi_dcmpeq>
 801400e:	2800      	cmp	r0, #0
 8014010:	d0c1      	beq.n	8013f96 <_strtod_l+0x8de>
 8014012:	e611      	b.n	8013c38 <_strtod_l+0x580>
 8014014:	fffffc02 	.word	0xfffffc02
 8014018:	7ff00000 	.word	0x7ff00000
 801401c:	39500000 	.word	0x39500000
 8014020:	000fffff 	.word	0x000fffff
 8014024:	7fefffff 	.word	0x7fefffff
 8014028:	080177c8 	.word	0x080177c8
 801402c:	4631      	mov	r1, r6
 801402e:	4628      	mov	r0, r5
 8014030:	f002 f928 	bl	8016284 <__ratio>
 8014034:	ec59 8b10 	vmov	r8, r9, d0
 8014038:	ee10 0a10 	vmov	r0, s0
 801403c:	2200      	movs	r2, #0
 801403e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014042:	4649      	mov	r1, r9
 8014044:	f7ec fd54 	bl	8000af0 <__aeabi_dcmple>
 8014048:	2800      	cmp	r0, #0
 801404a:	d07a      	beq.n	8014142 <_strtod_l+0xa8a>
 801404c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801404e:	2b00      	cmp	r3, #0
 8014050:	d04a      	beq.n	80140e8 <_strtod_l+0xa30>
 8014052:	4b95      	ldr	r3, [pc, #596]	; (80142a8 <_strtod_l+0xbf0>)
 8014054:	2200      	movs	r2, #0
 8014056:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801405a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80142a8 <_strtod_l+0xbf0>
 801405e:	f04f 0800 	mov.w	r8, #0
 8014062:	4b92      	ldr	r3, [pc, #584]	; (80142ac <_strtod_l+0xbf4>)
 8014064:	403b      	ands	r3, r7
 8014066:	930d      	str	r3, [sp, #52]	; 0x34
 8014068:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801406a:	4b91      	ldr	r3, [pc, #580]	; (80142b0 <_strtod_l+0xbf8>)
 801406c:	429a      	cmp	r2, r3
 801406e:	f040 80b0 	bne.w	80141d2 <_strtod_l+0xb1a>
 8014072:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014076:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801407a:	ec4b ab10 	vmov	d0, sl, fp
 801407e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014082:	f002 f827 	bl	80160d4 <__ulp>
 8014086:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801408a:	ec53 2b10 	vmov	r2, r3, d0
 801408e:	f7ec fab3 	bl	80005f8 <__aeabi_dmul>
 8014092:	4652      	mov	r2, sl
 8014094:	465b      	mov	r3, fp
 8014096:	f7ec f8f9 	bl	800028c <__adddf3>
 801409a:	460b      	mov	r3, r1
 801409c:	4983      	ldr	r1, [pc, #524]	; (80142ac <_strtod_l+0xbf4>)
 801409e:	4a85      	ldr	r2, [pc, #532]	; (80142b4 <_strtod_l+0xbfc>)
 80140a0:	4019      	ands	r1, r3
 80140a2:	4291      	cmp	r1, r2
 80140a4:	4682      	mov	sl, r0
 80140a6:	d960      	bls.n	801416a <_strtod_l+0xab2>
 80140a8:	ee18 3a90 	vmov	r3, s17
 80140ac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80140b0:	4293      	cmp	r3, r2
 80140b2:	d104      	bne.n	80140be <_strtod_l+0xa06>
 80140b4:	ee18 3a10 	vmov	r3, s16
 80140b8:	3301      	adds	r3, #1
 80140ba:	f43f ad45 	beq.w	8013b48 <_strtod_l+0x490>
 80140be:	f8df b200 	ldr.w	fp, [pc, #512]	; 80142c0 <_strtod_l+0xc08>
 80140c2:	f04f 3aff 	mov.w	sl, #4294967295
 80140c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80140c8:	4620      	mov	r0, r4
 80140ca:	f001 fcd1 	bl	8015a70 <_Bfree>
 80140ce:	9905      	ldr	r1, [sp, #20]
 80140d0:	4620      	mov	r0, r4
 80140d2:	f001 fccd 	bl	8015a70 <_Bfree>
 80140d6:	4631      	mov	r1, r6
 80140d8:	4620      	mov	r0, r4
 80140da:	f001 fcc9 	bl	8015a70 <_Bfree>
 80140de:	4629      	mov	r1, r5
 80140e0:	4620      	mov	r0, r4
 80140e2:	f001 fcc5 	bl	8015a70 <_Bfree>
 80140e6:	e61a      	b.n	8013d1e <_strtod_l+0x666>
 80140e8:	f1ba 0f00 	cmp.w	sl, #0
 80140ec:	d11b      	bne.n	8014126 <_strtod_l+0xa6e>
 80140ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80140f2:	b9f3      	cbnz	r3, 8014132 <_strtod_l+0xa7a>
 80140f4:	4b6c      	ldr	r3, [pc, #432]	; (80142a8 <_strtod_l+0xbf0>)
 80140f6:	2200      	movs	r2, #0
 80140f8:	4640      	mov	r0, r8
 80140fa:	4649      	mov	r1, r9
 80140fc:	f7ec fcee 	bl	8000adc <__aeabi_dcmplt>
 8014100:	b9d0      	cbnz	r0, 8014138 <_strtod_l+0xa80>
 8014102:	4640      	mov	r0, r8
 8014104:	4649      	mov	r1, r9
 8014106:	4b6c      	ldr	r3, [pc, #432]	; (80142b8 <_strtod_l+0xc00>)
 8014108:	2200      	movs	r2, #0
 801410a:	f7ec fa75 	bl	80005f8 <__aeabi_dmul>
 801410e:	4680      	mov	r8, r0
 8014110:	4689      	mov	r9, r1
 8014112:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8014116:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 801411a:	9315      	str	r3, [sp, #84]	; 0x54
 801411c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8014120:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014124:	e79d      	b.n	8014062 <_strtod_l+0x9aa>
 8014126:	f1ba 0f01 	cmp.w	sl, #1
 801412a:	d102      	bne.n	8014132 <_strtod_l+0xa7a>
 801412c:	2f00      	cmp	r7, #0
 801412e:	f43f ad83 	beq.w	8013c38 <_strtod_l+0x580>
 8014132:	4b62      	ldr	r3, [pc, #392]	; (80142bc <_strtod_l+0xc04>)
 8014134:	2200      	movs	r2, #0
 8014136:	e78e      	b.n	8014056 <_strtod_l+0x99e>
 8014138:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80142b8 <_strtod_l+0xc00>
 801413c:	f04f 0800 	mov.w	r8, #0
 8014140:	e7e7      	b.n	8014112 <_strtod_l+0xa5a>
 8014142:	4b5d      	ldr	r3, [pc, #372]	; (80142b8 <_strtod_l+0xc00>)
 8014144:	4640      	mov	r0, r8
 8014146:	4649      	mov	r1, r9
 8014148:	2200      	movs	r2, #0
 801414a:	f7ec fa55 	bl	80005f8 <__aeabi_dmul>
 801414e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014150:	4680      	mov	r8, r0
 8014152:	4689      	mov	r9, r1
 8014154:	b933      	cbnz	r3, 8014164 <_strtod_l+0xaac>
 8014156:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801415a:	900e      	str	r0, [sp, #56]	; 0x38
 801415c:	930f      	str	r3, [sp, #60]	; 0x3c
 801415e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8014162:	e7dd      	b.n	8014120 <_strtod_l+0xa68>
 8014164:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8014168:	e7f9      	b.n	801415e <_strtod_l+0xaa6>
 801416a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801416e:	9b04      	ldr	r3, [sp, #16]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d1a8      	bne.n	80140c6 <_strtod_l+0xa0e>
 8014174:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014178:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801417a:	0d1b      	lsrs	r3, r3, #20
 801417c:	051b      	lsls	r3, r3, #20
 801417e:	429a      	cmp	r2, r3
 8014180:	d1a1      	bne.n	80140c6 <_strtod_l+0xa0e>
 8014182:	4640      	mov	r0, r8
 8014184:	4649      	mov	r1, r9
 8014186:	f7ec fd97 	bl	8000cb8 <__aeabi_d2lz>
 801418a:	f7ec fa07 	bl	800059c <__aeabi_l2d>
 801418e:	4602      	mov	r2, r0
 8014190:	460b      	mov	r3, r1
 8014192:	4640      	mov	r0, r8
 8014194:	4649      	mov	r1, r9
 8014196:	f7ec f877 	bl	8000288 <__aeabi_dsub>
 801419a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801419c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80141a0:	ea43 030a 	orr.w	r3, r3, sl
 80141a4:	4313      	orrs	r3, r2
 80141a6:	4680      	mov	r8, r0
 80141a8:	4689      	mov	r9, r1
 80141aa:	d055      	beq.n	8014258 <_strtod_l+0xba0>
 80141ac:	a336      	add	r3, pc, #216	; (adr r3, 8014288 <_strtod_l+0xbd0>)
 80141ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b2:	f7ec fc93 	bl	8000adc <__aeabi_dcmplt>
 80141b6:	2800      	cmp	r0, #0
 80141b8:	f47f acd0 	bne.w	8013b5c <_strtod_l+0x4a4>
 80141bc:	a334      	add	r3, pc, #208	; (adr r3, 8014290 <_strtod_l+0xbd8>)
 80141be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c2:	4640      	mov	r0, r8
 80141c4:	4649      	mov	r1, r9
 80141c6:	f7ec fca7 	bl	8000b18 <__aeabi_dcmpgt>
 80141ca:	2800      	cmp	r0, #0
 80141cc:	f43f af7b 	beq.w	80140c6 <_strtod_l+0xa0e>
 80141d0:	e4c4      	b.n	8013b5c <_strtod_l+0x4a4>
 80141d2:	9b04      	ldr	r3, [sp, #16]
 80141d4:	b333      	cbz	r3, 8014224 <_strtod_l+0xb6c>
 80141d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80141d8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80141dc:	d822      	bhi.n	8014224 <_strtod_l+0xb6c>
 80141de:	a32e      	add	r3, pc, #184	; (adr r3, 8014298 <_strtod_l+0xbe0>)
 80141e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e4:	4640      	mov	r0, r8
 80141e6:	4649      	mov	r1, r9
 80141e8:	f7ec fc82 	bl	8000af0 <__aeabi_dcmple>
 80141ec:	b1a0      	cbz	r0, 8014218 <_strtod_l+0xb60>
 80141ee:	4649      	mov	r1, r9
 80141f0:	4640      	mov	r0, r8
 80141f2:	f7ec fcd9 	bl	8000ba8 <__aeabi_d2uiz>
 80141f6:	2801      	cmp	r0, #1
 80141f8:	bf38      	it	cc
 80141fa:	2001      	movcc	r0, #1
 80141fc:	f7ec f982 	bl	8000504 <__aeabi_ui2d>
 8014200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014202:	4680      	mov	r8, r0
 8014204:	4689      	mov	r9, r1
 8014206:	bb23      	cbnz	r3, 8014252 <_strtod_l+0xb9a>
 8014208:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801420c:	9010      	str	r0, [sp, #64]	; 0x40
 801420e:	9311      	str	r3, [sp, #68]	; 0x44
 8014210:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014214:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801421a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801421c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8014220:	1a9b      	subs	r3, r3, r2
 8014222:	9309      	str	r3, [sp, #36]	; 0x24
 8014224:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014228:	eeb0 0a48 	vmov.f32	s0, s16
 801422c:	eef0 0a68 	vmov.f32	s1, s17
 8014230:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014234:	f001 ff4e 	bl	80160d4 <__ulp>
 8014238:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801423c:	ec53 2b10 	vmov	r2, r3, d0
 8014240:	f7ec f9da 	bl	80005f8 <__aeabi_dmul>
 8014244:	ec53 2b18 	vmov	r2, r3, d8
 8014248:	f7ec f820 	bl	800028c <__adddf3>
 801424c:	4682      	mov	sl, r0
 801424e:	468b      	mov	fp, r1
 8014250:	e78d      	b.n	801416e <_strtod_l+0xab6>
 8014252:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8014256:	e7db      	b.n	8014210 <_strtod_l+0xb58>
 8014258:	a311      	add	r3, pc, #68	; (adr r3, 80142a0 <_strtod_l+0xbe8>)
 801425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801425e:	f7ec fc3d 	bl	8000adc <__aeabi_dcmplt>
 8014262:	e7b2      	b.n	80141ca <_strtod_l+0xb12>
 8014264:	2300      	movs	r3, #0
 8014266:	930a      	str	r3, [sp, #40]	; 0x28
 8014268:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801426a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801426c:	6013      	str	r3, [r2, #0]
 801426e:	f7ff ba6b 	b.w	8013748 <_strtod_l+0x90>
 8014272:	2a65      	cmp	r2, #101	; 0x65
 8014274:	f43f ab5f 	beq.w	8013936 <_strtod_l+0x27e>
 8014278:	2a45      	cmp	r2, #69	; 0x45
 801427a:	f43f ab5c 	beq.w	8013936 <_strtod_l+0x27e>
 801427e:	2301      	movs	r3, #1
 8014280:	f7ff bb94 	b.w	80139ac <_strtod_l+0x2f4>
 8014284:	f3af 8000 	nop.w
 8014288:	94a03595 	.word	0x94a03595
 801428c:	3fdfffff 	.word	0x3fdfffff
 8014290:	35afe535 	.word	0x35afe535
 8014294:	3fe00000 	.word	0x3fe00000
 8014298:	ffc00000 	.word	0xffc00000
 801429c:	41dfffff 	.word	0x41dfffff
 80142a0:	94a03595 	.word	0x94a03595
 80142a4:	3fcfffff 	.word	0x3fcfffff
 80142a8:	3ff00000 	.word	0x3ff00000
 80142ac:	7ff00000 	.word	0x7ff00000
 80142b0:	7fe00000 	.word	0x7fe00000
 80142b4:	7c9fffff 	.word	0x7c9fffff
 80142b8:	3fe00000 	.word	0x3fe00000
 80142bc:	bff00000 	.word	0xbff00000
 80142c0:	7fefffff 	.word	0x7fefffff

080142c4 <_strtod_r>:
 80142c4:	4b01      	ldr	r3, [pc, #4]	; (80142cc <_strtod_r+0x8>)
 80142c6:	f7ff b9f7 	b.w	80136b8 <_strtod_l>
 80142ca:	bf00      	nop
 80142cc:	2000007c 	.word	0x2000007c

080142d0 <_strtol_l.constprop.0>:
 80142d0:	2b01      	cmp	r3, #1
 80142d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80142d6:	d001      	beq.n	80142dc <_strtol_l.constprop.0+0xc>
 80142d8:	2b24      	cmp	r3, #36	; 0x24
 80142da:	d906      	bls.n	80142ea <_strtol_l.constprop.0+0x1a>
 80142dc:	f7fe f85e 	bl	801239c <__errno>
 80142e0:	2316      	movs	r3, #22
 80142e2:	6003      	str	r3, [r0, #0]
 80142e4:	2000      	movs	r0, #0
 80142e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80143d0 <_strtol_l.constprop.0+0x100>
 80142ee:	460d      	mov	r5, r1
 80142f0:	462e      	mov	r6, r5
 80142f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80142f6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80142fa:	f017 0708 	ands.w	r7, r7, #8
 80142fe:	d1f7      	bne.n	80142f0 <_strtol_l.constprop.0+0x20>
 8014300:	2c2d      	cmp	r4, #45	; 0x2d
 8014302:	d132      	bne.n	801436a <_strtol_l.constprop.0+0x9a>
 8014304:	782c      	ldrb	r4, [r5, #0]
 8014306:	2701      	movs	r7, #1
 8014308:	1cb5      	adds	r5, r6, #2
 801430a:	2b00      	cmp	r3, #0
 801430c:	d05b      	beq.n	80143c6 <_strtol_l.constprop.0+0xf6>
 801430e:	2b10      	cmp	r3, #16
 8014310:	d109      	bne.n	8014326 <_strtol_l.constprop.0+0x56>
 8014312:	2c30      	cmp	r4, #48	; 0x30
 8014314:	d107      	bne.n	8014326 <_strtol_l.constprop.0+0x56>
 8014316:	782c      	ldrb	r4, [r5, #0]
 8014318:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801431c:	2c58      	cmp	r4, #88	; 0x58
 801431e:	d14d      	bne.n	80143bc <_strtol_l.constprop.0+0xec>
 8014320:	786c      	ldrb	r4, [r5, #1]
 8014322:	2310      	movs	r3, #16
 8014324:	3502      	adds	r5, #2
 8014326:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801432a:	f108 38ff 	add.w	r8, r8, #4294967295
 801432e:	f04f 0c00 	mov.w	ip, #0
 8014332:	fbb8 f9f3 	udiv	r9, r8, r3
 8014336:	4666      	mov	r6, ip
 8014338:	fb03 8a19 	mls	sl, r3, r9, r8
 801433c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8014340:	f1be 0f09 	cmp.w	lr, #9
 8014344:	d816      	bhi.n	8014374 <_strtol_l.constprop.0+0xa4>
 8014346:	4674      	mov	r4, lr
 8014348:	42a3      	cmp	r3, r4
 801434a:	dd24      	ble.n	8014396 <_strtol_l.constprop.0+0xc6>
 801434c:	f1bc 0f00 	cmp.w	ip, #0
 8014350:	db1e      	blt.n	8014390 <_strtol_l.constprop.0+0xc0>
 8014352:	45b1      	cmp	r9, r6
 8014354:	d31c      	bcc.n	8014390 <_strtol_l.constprop.0+0xc0>
 8014356:	d101      	bne.n	801435c <_strtol_l.constprop.0+0x8c>
 8014358:	45a2      	cmp	sl, r4
 801435a:	db19      	blt.n	8014390 <_strtol_l.constprop.0+0xc0>
 801435c:	fb06 4603 	mla	r6, r6, r3, r4
 8014360:	f04f 0c01 	mov.w	ip, #1
 8014364:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014368:	e7e8      	b.n	801433c <_strtol_l.constprop.0+0x6c>
 801436a:	2c2b      	cmp	r4, #43	; 0x2b
 801436c:	bf04      	itt	eq
 801436e:	782c      	ldrbeq	r4, [r5, #0]
 8014370:	1cb5      	addeq	r5, r6, #2
 8014372:	e7ca      	b.n	801430a <_strtol_l.constprop.0+0x3a>
 8014374:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014378:	f1be 0f19 	cmp.w	lr, #25
 801437c:	d801      	bhi.n	8014382 <_strtol_l.constprop.0+0xb2>
 801437e:	3c37      	subs	r4, #55	; 0x37
 8014380:	e7e2      	b.n	8014348 <_strtol_l.constprop.0+0x78>
 8014382:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8014386:	f1be 0f19 	cmp.w	lr, #25
 801438a:	d804      	bhi.n	8014396 <_strtol_l.constprop.0+0xc6>
 801438c:	3c57      	subs	r4, #87	; 0x57
 801438e:	e7db      	b.n	8014348 <_strtol_l.constprop.0+0x78>
 8014390:	f04f 3cff 	mov.w	ip, #4294967295
 8014394:	e7e6      	b.n	8014364 <_strtol_l.constprop.0+0x94>
 8014396:	f1bc 0f00 	cmp.w	ip, #0
 801439a:	da05      	bge.n	80143a8 <_strtol_l.constprop.0+0xd8>
 801439c:	2322      	movs	r3, #34	; 0x22
 801439e:	6003      	str	r3, [r0, #0]
 80143a0:	4646      	mov	r6, r8
 80143a2:	b942      	cbnz	r2, 80143b6 <_strtol_l.constprop.0+0xe6>
 80143a4:	4630      	mov	r0, r6
 80143a6:	e79e      	b.n	80142e6 <_strtol_l.constprop.0+0x16>
 80143a8:	b107      	cbz	r7, 80143ac <_strtol_l.constprop.0+0xdc>
 80143aa:	4276      	negs	r6, r6
 80143ac:	2a00      	cmp	r2, #0
 80143ae:	d0f9      	beq.n	80143a4 <_strtol_l.constprop.0+0xd4>
 80143b0:	f1bc 0f00 	cmp.w	ip, #0
 80143b4:	d000      	beq.n	80143b8 <_strtol_l.constprop.0+0xe8>
 80143b6:	1e69      	subs	r1, r5, #1
 80143b8:	6011      	str	r1, [r2, #0]
 80143ba:	e7f3      	b.n	80143a4 <_strtol_l.constprop.0+0xd4>
 80143bc:	2430      	movs	r4, #48	; 0x30
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d1b1      	bne.n	8014326 <_strtol_l.constprop.0+0x56>
 80143c2:	2308      	movs	r3, #8
 80143c4:	e7af      	b.n	8014326 <_strtol_l.constprop.0+0x56>
 80143c6:	2c30      	cmp	r4, #48	; 0x30
 80143c8:	d0a5      	beq.n	8014316 <_strtol_l.constprop.0+0x46>
 80143ca:	230a      	movs	r3, #10
 80143cc:	e7ab      	b.n	8014326 <_strtol_l.constprop.0+0x56>
 80143ce:	bf00      	nop
 80143d0:	080177f1 	.word	0x080177f1

080143d4 <_strtol_r>:
 80143d4:	f7ff bf7c 	b.w	80142d0 <_strtol_l.constprop.0>

080143d8 <_write_r>:
 80143d8:	b538      	push	{r3, r4, r5, lr}
 80143da:	4d07      	ldr	r5, [pc, #28]	; (80143f8 <_write_r+0x20>)
 80143dc:	4604      	mov	r4, r0
 80143de:	4608      	mov	r0, r1
 80143e0:	4611      	mov	r1, r2
 80143e2:	2200      	movs	r2, #0
 80143e4:	602a      	str	r2, [r5, #0]
 80143e6:	461a      	mov	r2, r3
 80143e8:	f7f0 fd71 	bl	8004ece <_write>
 80143ec:	1c43      	adds	r3, r0, #1
 80143ee:	d102      	bne.n	80143f6 <_write_r+0x1e>
 80143f0:	682b      	ldr	r3, [r5, #0]
 80143f2:	b103      	cbz	r3, 80143f6 <_write_r+0x1e>
 80143f4:	6023      	str	r3, [r4, #0]
 80143f6:	bd38      	pop	{r3, r4, r5, pc}
 80143f8:	20014b64 	.word	0x20014b64

080143fc <_close_r>:
 80143fc:	b538      	push	{r3, r4, r5, lr}
 80143fe:	4d06      	ldr	r5, [pc, #24]	; (8014418 <_close_r+0x1c>)
 8014400:	2300      	movs	r3, #0
 8014402:	4604      	mov	r4, r0
 8014404:	4608      	mov	r0, r1
 8014406:	602b      	str	r3, [r5, #0]
 8014408:	f7f0 fd7d 	bl	8004f06 <_close>
 801440c:	1c43      	adds	r3, r0, #1
 801440e:	d102      	bne.n	8014416 <_close_r+0x1a>
 8014410:	682b      	ldr	r3, [r5, #0]
 8014412:	b103      	cbz	r3, 8014416 <_close_r+0x1a>
 8014414:	6023      	str	r3, [r4, #0]
 8014416:	bd38      	pop	{r3, r4, r5, pc}
 8014418:	20014b64 	.word	0x20014b64

0801441c <quorem>:
 801441c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014420:	6903      	ldr	r3, [r0, #16]
 8014422:	690c      	ldr	r4, [r1, #16]
 8014424:	42a3      	cmp	r3, r4
 8014426:	4607      	mov	r7, r0
 8014428:	f2c0 8081 	blt.w	801452e <quorem+0x112>
 801442c:	3c01      	subs	r4, #1
 801442e:	f101 0814 	add.w	r8, r1, #20
 8014432:	f100 0514 	add.w	r5, r0, #20
 8014436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801443a:	9301      	str	r3, [sp, #4]
 801443c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014440:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014444:	3301      	adds	r3, #1
 8014446:	429a      	cmp	r2, r3
 8014448:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801444c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014450:	fbb2 f6f3 	udiv	r6, r2, r3
 8014454:	d331      	bcc.n	80144ba <quorem+0x9e>
 8014456:	f04f 0e00 	mov.w	lr, #0
 801445a:	4640      	mov	r0, r8
 801445c:	46ac      	mov	ip, r5
 801445e:	46f2      	mov	sl, lr
 8014460:	f850 2b04 	ldr.w	r2, [r0], #4
 8014464:	b293      	uxth	r3, r2
 8014466:	fb06 e303 	mla	r3, r6, r3, lr
 801446a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801446e:	b29b      	uxth	r3, r3
 8014470:	ebaa 0303 	sub.w	r3, sl, r3
 8014474:	f8dc a000 	ldr.w	sl, [ip]
 8014478:	0c12      	lsrs	r2, r2, #16
 801447a:	fa13 f38a 	uxtah	r3, r3, sl
 801447e:	fb06 e202 	mla	r2, r6, r2, lr
 8014482:	9300      	str	r3, [sp, #0]
 8014484:	9b00      	ldr	r3, [sp, #0]
 8014486:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801448a:	b292      	uxth	r2, r2
 801448c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014490:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014494:	f8bd 3000 	ldrh.w	r3, [sp]
 8014498:	4581      	cmp	r9, r0
 801449a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801449e:	f84c 3b04 	str.w	r3, [ip], #4
 80144a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80144a6:	d2db      	bcs.n	8014460 <quorem+0x44>
 80144a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80144ac:	b92b      	cbnz	r3, 80144ba <quorem+0x9e>
 80144ae:	9b01      	ldr	r3, [sp, #4]
 80144b0:	3b04      	subs	r3, #4
 80144b2:	429d      	cmp	r5, r3
 80144b4:	461a      	mov	r2, r3
 80144b6:	d32e      	bcc.n	8014516 <quorem+0xfa>
 80144b8:	613c      	str	r4, [r7, #16]
 80144ba:	4638      	mov	r0, r7
 80144bc:	f001 fd64 	bl	8015f88 <__mcmp>
 80144c0:	2800      	cmp	r0, #0
 80144c2:	db24      	blt.n	801450e <quorem+0xf2>
 80144c4:	3601      	adds	r6, #1
 80144c6:	4628      	mov	r0, r5
 80144c8:	f04f 0c00 	mov.w	ip, #0
 80144cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80144d0:	f8d0 e000 	ldr.w	lr, [r0]
 80144d4:	b293      	uxth	r3, r2
 80144d6:	ebac 0303 	sub.w	r3, ip, r3
 80144da:	0c12      	lsrs	r2, r2, #16
 80144dc:	fa13 f38e 	uxtah	r3, r3, lr
 80144e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80144e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80144e8:	b29b      	uxth	r3, r3
 80144ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144ee:	45c1      	cmp	r9, r8
 80144f0:	f840 3b04 	str.w	r3, [r0], #4
 80144f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80144f8:	d2e8      	bcs.n	80144cc <quorem+0xb0>
 80144fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80144fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014502:	b922      	cbnz	r2, 801450e <quorem+0xf2>
 8014504:	3b04      	subs	r3, #4
 8014506:	429d      	cmp	r5, r3
 8014508:	461a      	mov	r2, r3
 801450a:	d30a      	bcc.n	8014522 <quorem+0x106>
 801450c:	613c      	str	r4, [r7, #16]
 801450e:	4630      	mov	r0, r6
 8014510:	b003      	add	sp, #12
 8014512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014516:	6812      	ldr	r2, [r2, #0]
 8014518:	3b04      	subs	r3, #4
 801451a:	2a00      	cmp	r2, #0
 801451c:	d1cc      	bne.n	80144b8 <quorem+0x9c>
 801451e:	3c01      	subs	r4, #1
 8014520:	e7c7      	b.n	80144b2 <quorem+0x96>
 8014522:	6812      	ldr	r2, [r2, #0]
 8014524:	3b04      	subs	r3, #4
 8014526:	2a00      	cmp	r2, #0
 8014528:	d1f0      	bne.n	801450c <quorem+0xf0>
 801452a:	3c01      	subs	r4, #1
 801452c:	e7eb      	b.n	8014506 <quorem+0xea>
 801452e:	2000      	movs	r0, #0
 8014530:	e7ee      	b.n	8014510 <quorem+0xf4>
 8014532:	0000      	movs	r0, r0
 8014534:	0000      	movs	r0, r0
	...

08014538 <_dtoa_r>:
 8014538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801453c:	ed2d 8b04 	vpush	{d8-d9}
 8014540:	ec57 6b10 	vmov	r6, r7, d0
 8014544:	b093      	sub	sp, #76	; 0x4c
 8014546:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014548:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801454c:	9106      	str	r1, [sp, #24]
 801454e:	ee10 aa10 	vmov	sl, s0
 8014552:	4604      	mov	r4, r0
 8014554:	9209      	str	r2, [sp, #36]	; 0x24
 8014556:	930c      	str	r3, [sp, #48]	; 0x30
 8014558:	46bb      	mov	fp, r7
 801455a:	b975      	cbnz	r5, 801457a <_dtoa_r+0x42>
 801455c:	2010      	movs	r0, #16
 801455e:	f001 fa21 	bl	80159a4 <malloc>
 8014562:	4602      	mov	r2, r0
 8014564:	6260      	str	r0, [r4, #36]	; 0x24
 8014566:	b920      	cbnz	r0, 8014572 <_dtoa_r+0x3a>
 8014568:	4ba7      	ldr	r3, [pc, #668]	; (8014808 <_dtoa_r+0x2d0>)
 801456a:	21ea      	movs	r1, #234	; 0xea
 801456c:	48a7      	ldr	r0, [pc, #668]	; (801480c <_dtoa_r+0x2d4>)
 801456e:	f002 f929 	bl	80167c4 <__assert_func>
 8014572:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014576:	6005      	str	r5, [r0, #0]
 8014578:	60c5      	str	r5, [r0, #12]
 801457a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801457c:	6819      	ldr	r1, [r3, #0]
 801457e:	b151      	cbz	r1, 8014596 <_dtoa_r+0x5e>
 8014580:	685a      	ldr	r2, [r3, #4]
 8014582:	604a      	str	r2, [r1, #4]
 8014584:	2301      	movs	r3, #1
 8014586:	4093      	lsls	r3, r2
 8014588:	608b      	str	r3, [r1, #8]
 801458a:	4620      	mov	r0, r4
 801458c:	f001 fa70 	bl	8015a70 <_Bfree>
 8014590:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014592:	2200      	movs	r2, #0
 8014594:	601a      	str	r2, [r3, #0]
 8014596:	1e3b      	subs	r3, r7, #0
 8014598:	bfaa      	itet	ge
 801459a:	2300      	movge	r3, #0
 801459c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80145a0:	f8c8 3000 	strge.w	r3, [r8]
 80145a4:	4b9a      	ldr	r3, [pc, #616]	; (8014810 <_dtoa_r+0x2d8>)
 80145a6:	bfbc      	itt	lt
 80145a8:	2201      	movlt	r2, #1
 80145aa:	f8c8 2000 	strlt.w	r2, [r8]
 80145ae:	ea33 030b 	bics.w	r3, r3, fp
 80145b2:	d11b      	bne.n	80145ec <_dtoa_r+0xb4>
 80145b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80145ba:	6013      	str	r3, [r2, #0]
 80145bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80145c0:	4333      	orrs	r3, r6
 80145c2:	f000 8592 	beq.w	80150ea <_dtoa_r+0xbb2>
 80145c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145c8:	b963      	cbnz	r3, 80145e4 <_dtoa_r+0xac>
 80145ca:	4b92      	ldr	r3, [pc, #584]	; (8014814 <_dtoa_r+0x2dc>)
 80145cc:	e022      	b.n	8014614 <_dtoa_r+0xdc>
 80145ce:	4b92      	ldr	r3, [pc, #584]	; (8014818 <_dtoa_r+0x2e0>)
 80145d0:	9301      	str	r3, [sp, #4]
 80145d2:	3308      	adds	r3, #8
 80145d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80145d6:	6013      	str	r3, [r2, #0]
 80145d8:	9801      	ldr	r0, [sp, #4]
 80145da:	b013      	add	sp, #76	; 0x4c
 80145dc:	ecbd 8b04 	vpop	{d8-d9}
 80145e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145e4:	4b8b      	ldr	r3, [pc, #556]	; (8014814 <_dtoa_r+0x2dc>)
 80145e6:	9301      	str	r3, [sp, #4]
 80145e8:	3303      	adds	r3, #3
 80145ea:	e7f3      	b.n	80145d4 <_dtoa_r+0x9c>
 80145ec:	2200      	movs	r2, #0
 80145ee:	2300      	movs	r3, #0
 80145f0:	4650      	mov	r0, sl
 80145f2:	4659      	mov	r1, fp
 80145f4:	f7ec fa68 	bl	8000ac8 <__aeabi_dcmpeq>
 80145f8:	ec4b ab19 	vmov	d9, sl, fp
 80145fc:	4680      	mov	r8, r0
 80145fe:	b158      	cbz	r0, 8014618 <_dtoa_r+0xe0>
 8014600:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014602:	2301      	movs	r3, #1
 8014604:	6013      	str	r3, [r2, #0]
 8014606:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014608:	2b00      	cmp	r3, #0
 801460a:	f000 856b 	beq.w	80150e4 <_dtoa_r+0xbac>
 801460e:	4883      	ldr	r0, [pc, #524]	; (801481c <_dtoa_r+0x2e4>)
 8014610:	6018      	str	r0, [r3, #0]
 8014612:	1e43      	subs	r3, r0, #1
 8014614:	9301      	str	r3, [sp, #4]
 8014616:	e7df      	b.n	80145d8 <_dtoa_r+0xa0>
 8014618:	ec4b ab10 	vmov	d0, sl, fp
 801461c:	aa10      	add	r2, sp, #64	; 0x40
 801461e:	a911      	add	r1, sp, #68	; 0x44
 8014620:	4620      	mov	r0, r4
 8014622:	f001 fdd3 	bl	80161cc <__d2b>
 8014626:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801462a:	ee08 0a10 	vmov	s16, r0
 801462e:	2d00      	cmp	r5, #0
 8014630:	f000 8084 	beq.w	801473c <_dtoa_r+0x204>
 8014634:	ee19 3a90 	vmov	r3, s19
 8014638:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801463c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014640:	4656      	mov	r6, sl
 8014642:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014646:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801464a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801464e:	4b74      	ldr	r3, [pc, #464]	; (8014820 <_dtoa_r+0x2e8>)
 8014650:	2200      	movs	r2, #0
 8014652:	4630      	mov	r0, r6
 8014654:	4639      	mov	r1, r7
 8014656:	f7eb fe17 	bl	8000288 <__aeabi_dsub>
 801465a:	a365      	add	r3, pc, #404	; (adr r3, 80147f0 <_dtoa_r+0x2b8>)
 801465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014660:	f7eb ffca 	bl	80005f8 <__aeabi_dmul>
 8014664:	a364      	add	r3, pc, #400	; (adr r3, 80147f8 <_dtoa_r+0x2c0>)
 8014666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466a:	f7eb fe0f 	bl	800028c <__adddf3>
 801466e:	4606      	mov	r6, r0
 8014670:	4628      	mov	r0, r5
 8014672:	460f      	mov	r7, r1
 8014674:	f7eb ff56 	bl	8000524 <__aeabi_i2d>
 8014678:	a361      	add	r3, pc, #388	; (adr r3, 8014800 <_dtoa_r+0x2c8>)
 801467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467e:	f7eb ffbb 	bl	80005f8 <__aeabi_dmul>
 8014682:	4602      	mov	r2, r0
 8014684:	460b      	mov	r3, r1
 8014686:	4630      	mov	r0, r6
 8014688:	4639      	mov	r1, r7
 801468a:	f7eb fdff 	bl	800028c <__adddf3>
 801468e:	4606      	mov	r6, r0
 8014690:	460f      	mov	r7, r1
 8014692:	f7ec fa61 	bl	8000b58 <__aeabi_d2iz>
 8014696:	2200      	movs	r2, #0
 8014698:	9000      	str	r0, [sp, #0]
 801469a:	2300      	movs	r3, #0
 801469c:	4630      	mov	r0, r6
 801469e:	4639      	mov	r1, r7
 80146a0:	f7ec fa1c 	bl	8000adc <__aeabi_dcmplt>
 80146a4:	b150      	cbz	r0, 80146bc <_dtoa_r+0x184>
 80146a6:	9800      	ldr	r0, [sp, #0]
 80146a8:	f7eb ff3c 	bl	8000524 <__aeabi_i2d>
 80146ac:	4632      	mov	r2, r6
 80146ae:	463b      	mov	r3, r7
 80146b0:	f7ec fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80146b4:	b910      	cbnz	r0, 80146bc <_dtoa_r+0x184>
 80146b6:	9b00      	ldr	r3, [sp, #0]
 80146b8:	3b01      	subs	r3, #1
 80146ba:	9300      	str	r3, [sp, #0]
 80146bc:	9b00      	ldr	r3, [sp, #0]
 80146be:	2b16      	cmp	r3, #22
 80146c0:	d85a      	bhi.n	8014778 <_dtoa_r+0x240>
 80146c2:	9a00      	ldr	r2, [sp, #0]
 80146c4:	4b57      	ldr	r3, [pc, #348]	; (8014824 <_dtoa_r+0x2ec>)
 80146c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80146ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ce:	ec51 0b19 	vmov	r0, r1, d9
 80146d2:	f7ec fa03 	bl	8000adc <__aeabi_dcmplt>
 80146d6:	2800      	cmp	r0, #0
 80146d8:	d050      	beq.n	801477c <_dtoa_r+0x244>
 80146da:	9b00      	ldr	r3, [sp, #0]
 80146dc:	3b01      	subs	r3, #1
 80146de:	9300      	str	r3, [sp, #0]
 80146e0:	2300      	movs	r3, #0
 80146e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80146e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146e6:	1b5d      	subs	r5, r3, r5
 80146e8:	1e6b      	subs	r3, r5, #1
 80146ea:	9305      	str	r3, [sp, #20]
 80146ec:	bf45      	ittet	mi
 80146ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80146f2:	9304      	strmi	r3, [sp, #16]
 80146f4:	2300      	movpl	r3, #0
 80146f6:	2300      	movmi	r3, #0
 80146f8:	bf4c      	ite	mi
 80146fa:	9305      	strmi	r3, [sp, #20]
 80146fc:	9304      	strpl	r3, [sp, #16]
 80146fe:	9b00      	ldr	r3, [sp, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	db3d      	blt.n	8014780 <_dtoa_r+0x248>
 8014704:	9b05      	ldr	r3, [sp, #20]
 8014706:	9a00      	ldr	r2, [sp, #0]
 8014708:	920a      	str	r2, [sp, #40]	; 0x28
 801470a:	4413      	add	r3, r2
 801470c:	9305      	str	r3, [sp, #20]
 801470e:	2300      	movs	r3, #0
 8014710:	9307      	str	r3, [sp, #28]
 8014712:	9b06      	ldr	r3, [sp, #24]
 8014714:	2b09      	cmp	r3, #9
 8014716:	f200 8089 	bhi.w	801482c <_dtoa_r+0x2f4>
 801471a:	2b05      	cmp	r3, #5
 801471c:	bfc4      	itt	gt
 801471e:	3b04      	subgt	r3, #4
 8014720:	9306      	strgt	r3, [sp, #24]
 8014722:	9b06      	ldr	r3, [sp, #24]
 8014724:	f1a3 0302 	sub.w	r3, r3, #2
 8014728:	bfcc      	ite	gt
 801472a:	2500      	movgt	r5, #0
 801472c:	2501      	movle	r5, #1
 801472e:	2b03      	cmp	r3, #3
 8014730:	f200 8087 	bhi.w	8014842 <_dtoa_r+0x30a>
 8014734:	e8df f003 	tbb	[pc, r3]
 8014738:	59383a2d 	.word	0x59383a2d
 801473c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014740:	441d      	add	r5, r3
 8014742:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014746:	2b20      	cmp	r3, #32
 8014748:	bfc1      	itttt	gt
 801474a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801474e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014752:	fa0b f303 	lslgt.w	r3, fp, r3
 8014756:	fa26 f000 	lsrgt.w	r0, r6, r0
 801475a:	bfda      	itte	le
 801475c:	f1c3 0320 	rsble	r3, r3, #32
 8014760:	fa06 f003 	lslle.w	r0, r6, r3
 8014764:	4318      	orrgt	r0, r3
 8014766:	f7eb fecd 	bl	8000504 <__aeabi_ui2d>
 801476a:	2301      	movs	r3, #1
 801476c:	4606      	mov	r6, r0
 801476e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014772:	3d01      	subs	r5, #1
 8014774:	930e      	str	r3, [sp, #56]	; 0x38
 8014776:	e76a      	b.n	801464e <_dtoa_r+0x116>
 8014778:	2301      	movs	r3, #1
 801477a:	e7b2      	b.n	80146e2 <_dtoa_r+0x1aa>
 801477c:	900b      	str	r0, [sp, #44]	; 0x2c
 801477e:	e7b1      	b.n	80146e4 <_dtoa_r+0x1ac>
 8014780:	9b04      	ldr	r3, [sp, #16]
 8014782:	9a00      	ldr	r2, [sp, #0]
 8014784:	1a9b      	subs	r3, r3, r2
 8014786:	9304      	str	r3, [sp, #16]
 8014788:	4253      	negs	r3, r2
 801478a:	9307      	str	r3, [sp, #28]
 801478c:	2300      	movs	r3, #0
 801478e:	930a      	str	r3, [sp, #40]	; 0x28
 8014790:	e7bf      	b.n	8014712 <_dtoa_r+0x1da>
 8014792:	2300      	movs	r3, #0
 8014794:	9308      	str	r3, [sp, #32]
 8014796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014798:	2b00      	cmp	r3, #0
 801479a:	dc55      	bgt.n	8014848 <_dtoa_r+0x310>
 801479c:	2301      	movs	r3, #1
 801479e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80147a2:	461a      	mov	r2, r3
 80147a4:	9209      	str	r2, [sp, #36]	; 0x24
 80147a6:	e00c      	b.n	80147c2 <_dtoa_r+0x28a>
 80147a8:	2301      	movs	r3, #1
 80147aa:	e7f3      	b.n	8014794 <_dtoa_r+0x25c>
 80147ac:	2300      	movs	r3, #0
 80147ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80147b0:	9308      	str	r3, [sp, #32]
 80147b2:	9b00      	ldr	r3, [sp, #0]
 80147b4:	4413      	add	r3, r2
 80147b6:	9302      	str	r3, [sp, #8]
 80147b8:	3301      	adds	r3, #1
 80147ba:	2b01      	cmp	r3, #1
 80147bc:	9303      	str	r3, [sp, #12]
 80147be:	bfb8      	it	lt
 80147c0:	2301      	movlt	r3, #1
 80147c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80147c4:	2200      	movs	r2, #0
 80147c6:	6042      	str	r2, [r0, #4]
 80147c8:	2204      	movs	r2, #4
 80147ca:	f102 0614 	add.w	r6, r2, #20
 80147ce:	429e      	cmp	r6, r3
 80147d0:	6841      	ldr	r1, [r0, #4]
 80147d2:	d93d      	bls.n	8014850 <_dtoa_r+0x318>
 80147d4:	4620      	mov	r0, r4
 80147d6:	f001 f90b 	bl	80159f0 <_Balloc>
 80147da:	9001      	str	r0, [sp, #4]
 80147dc:	2800      	cmp	r0, #0
 80147de:	d13b      	bne.n	8014858 <_dtoa_r+0x320>
 80147e0:	4b11      	ldr	r3, [pc, #68]	; (8014828 <_dtoa_r+0x2f0>)
 80147e2:	4602      	mov	r2, r0
 80147e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80147e8:	e6c0      	b.n	801456c <_dtoa_r+0x34>
 80147ea:	2301      	movs	r3, #1
 80147ec:	e7df      	b.n	80147ae <_dtoa_r+0x276>
 80147ee:	bf00      	nop
 80147f0:	636f4361 	.word	0x636f4361
 80147f4:	3fd287a7 	.word	0x3fd287a7
 80147f8:	8b60c8b3 	.word	0x8b60c8b3
 80147fc:	3fc68a28 	.word	0x3fc68a28
 8014800:	509f79fb 	.word	0x509f79fb
 8014804:	3fd34413 	.word	0x3fd34413
 8014808:	080178fe 	.word	0x080178fe
 801480c:	08017915 	.word	0x08017915
 8014810:	7ff00000 	.word	0x7ff00000
 8014814:	080178fa 	.word	0x080178fa
 8014818:	080178f1 	.word	0x080178f1
 801481c:	08017775 	.word	0x08017775
 8014820:	3ff80000 	.word	0x3ff80000
 8014824:	08017a80 	.word	0x08017a80
 8014828:	08017970 	.word	0x08017970
 801482c:	2501      	movs	r5, #1
 801482e:	2300      	movs	r3, #0
 8014830:	9306      	str	r3, [sp, #24]
 8014832:	9508      	str	r5, [sp, #32]
 8014834:	f04f 33ff 	mov.w	r3, #4294967295
 8014838:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801483c:	2200      	movs	r2, #0
 801483e:	2312      	movs	r3, #18
 8014840:	e7b0      	b.n	80147a4 <_dtoa_r+0x26c>
 8014842:	2301      	movs	r3, #1
 8014844:	9308      	str	r3, [sp, #32]
 8014846:	e7f5      	b.n	8014834 <_dtoa_r+0x2fc>
 8014848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801484a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801484e:	e7b8      	b.n	80147c2 <_dtoa_r+0x28a>
 8014850:	3101      	adds	r1, #1
 8014852:	6041      	str	r1, [r0, #4]
 8014854:	0052      	lsls	r2, r2, #1
 8014856:	e7b8      	b.n	80147ca <_dtoa_r+0x292>
 8014858:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801485a:	9a01      	ldr	r2, [sp, #4]
 801485c:	601a      	str	r2, [r3, #0]
 801485e:	9b03      	ldr	r3, [sp, #12]
 8014860:	2b0e      	cmp	r3, #14
 8014862:	f200 809d 	bhi.w	80149a0 <_dtoa_r+0x468>
 8014866:	2d00      	cmp	r5, #0
 8014868:	f000 809a 	beq.w	80149a0 <_dtoa_r+0x468>
 801486c:	9b00      	ldr	r3, [sp, #0]
 801486e:	2b00      	cmp	r3, #0
 8014870:	dd32      	ble.n	80148d8 <_dtoa_r+0x3a0>
 8014872:	4ab7      	ldr	r2, [pc, #732]	; (8014b50 <_dtoa_r+0x618>)
 8014874:	f003 030f 	and.w	r3, r3, #15
 8014878:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801487c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014880:	9b00      	ldr	r3, [sp, #0]
 8014882:	05d8      	lsls	r0, r3, #23
 8014884:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014888:	d516      	bpl.n	80148b8 <_dtoa_r+0x380>
 801488a:	4bb2      	ldr	r3, [pc, #712]	; (8014b54 <_dtoa_r+0x61c>)
 801488c:	ec51 0b19 	vmov	r0, r1, d9
 8014890:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014894:	f7eb ffda 	bl	800084c <__aeabi_ddiv>
 8014898:	f007 070f 	and.w	r7, r7, #15
 801489c:	4682      	mov	sl, r0
 801489e:	468b      	mov	fp, r1
 80148a0:	2503      	movs	r5, #3
 80148a2:	4eac      	ldr	r6, [pc, #688]	; (8014b54 <_dtoa_r+0x61c>)
 80148a4:	b957      	cbnz	r7, 80148bc <_dtoa_r+0x384>
 80148a6:	4642      	mov	r2, r8
 80148a8:	464b      	mov	r3, r9
 80148aa:	4650      	mov	r0, sl
 80148ac:	4659      	mov	r1, fp
 80148ae:	f7eb ffcd 	bl	800084c <__aeabi_ddiv>
 80148b2:	4682      	mov	sl, r0
 80148b4:	468b      	mov	fp, r1
 80148b6:	e028      	b.n	801490a <_dtoa_r+0x3d2>
 80148b8:	2502      	movs	r5, #2
 80148ba:	e7f2      	b.n	80148a2 <_dtoa_r+0x36a>
 80148bc:	07f9      	lsls	r1, r7, #31
 80148be:	d508      	bpl.n	80148d2 <_dtoa_r+0x39a>
 80148c0:	4640      	mov	r0, r8
 80148c2:	4649      	mov	r1, r9
 80148c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80148c8:	f7eb fe96 	bl	80005f8 <__aeabi_dmul>
 80148cc:	3501      	adds	r5, #1
 80148ce:	4680      	mov	r8, r0
 80148d0:	4689      	mov	r9, r1
 80148d2:	107f      	asrs	r7, r7, #1
 80148d4:	3608      	adds	r6, #8
 80148d6:	e7e5      	b.n	80148a4 <_dtoa_r+0x36c>
 80148d8:	f000 809b 	beq.w	8014a12 <_dtoa_r+0x4da>
 80148dc:	9b00      	ldr	r3, [sp, #0]
 80148de:	4f9d      	ldr	r7, [pc, #628]	; (8014b54 <_dtoa_r+0x61c>)
 80148e0:	425e      	negs	r6, r3
 80148e2:	4b9b      	ldr	r3, [pc, #620]	; (8014b50 <_dtoa_r+0x618>)
 80148e4:	f006 020f 	and.w	r2, r6, #15
 80148e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f0:	ec51 0b19 	vmov	r0, r1, d9
 80148f4:	f7eb fe80 	bl	80005f8 <__aeabi_dmul>
 80148f8:	1136      	asrs	r6, r6, #4
 80148fa:	4682      	mov	sl, r0
 80148fc:	468b      	mov	fp, r1
 80148fe:	2300      	movs	r3, #0
 8014900:	2502      	movs	r5, #2
 8014902:	2e00      	cmp	r6, #0
 8014904:	d17a      	bne.n	80149fc <_dtoa_r+0x4c4>
 8014906:	2b00      	cmp	r3, #0
 8014908:	d1d3      	bne.n	80148b2 <_dtoa_r+0x37a>
 801490a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801490c:	2b00      	cmp	r3, #0
 801490e:	f000 8082 	beq.w	8014a16 <_dtoa_r+0x4de>
 8014912:	4b91      	ldr	r3, [pc, #580]	; (8014b58 <_dtoa_r+0x620>)
 8014914:	2200      	movs	r2, #0
 8014916:	4650      	mov	r0, sl
 8014918:	4659      	mov	r1, fp
 801491a:	f7ec f8df 	bl	8000adc <__aeabi_dcmplt>
 801491e:	2800      	cmp	r0, #0
 8014920:	d079      	beq.n	8014a16 <_dtoa_r+0x4de>
 8014922:	9b03      	ldr	r3, [sp, #12]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d076      	beq.n	8014a16 <_dtoa_r+0x4de>
 8014928:	9b02      	ldr	r3, [sp, #8]
 801492a:	2b00      	cmp	r3, #0
 801492c:	dd36      	ble.n	801499c <_dtoa_r+0x464>
 801492e:	9b00      	ldr	r3, [sp, #0]
 8014930:	4650      	mov	r0, sl
 8014932:	4659      	mov	r1, fp
 8014934:	1e5f      	subs	r7, r3, #1
 8014936:	2200      	movs	r2, #0
 8014938:	4b88      	ldr	r3, [pc, #544]	; (8014b5c <_dtoa_r+0x624>)
 801493a:	f7eb fe5d 	bl	80005f8 <__aeabi_dmul>
 801493e:	9e02      	ldr	r6, [sp, #8]
 8014940:	4682      	mov	sl, r0
 8014942:	468b      	mov	fp, r1
 8014944:	3501      	adds	r5, #1
 8014946:	4628      	mov	r0, r5
 8014948:	f7eb fdec 	bl	8000524 <__aeabi_i2d>
 801494c:	4652      	mov	r2, sl
 801494e:	465b      	mov	r3, fp
 8014950:	f7eb fe52 	bl	80005f8 <__aeabi_dmul>
 8014954:	4b82      	ldr	r3, [pc, #520]	; (8014b60 <_dtoa_r+0x628>)
 8014956:	2200      	movs	r2, #0
 8014958:	f7eb fc98 	bl	800028c <__adddf3>
 801495c:	46d0      	mov	r8, sl
 801495e:	46d9      	mov	r9, fp
 8014960:	4682      	mov	sl, r0
 8014962:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014966:	2e00      	cmp	r6, #0
 8014968:	d158      	bne.n	8014a1c <_dtoa_r+0x4e4>
 801496a:	4b7e      	ldr	r3, [pc, #504]	; (8014b64 <_dtoa_r+0x62c>)
 801496c:	2200      	movs	r2, #0
 801496e:	4640      	mov	r0, r8
 8014970:	4649      	mov	r1, r9
 8014972:	f7eb fc89 	bl	8000288 <__aeabi_dsub>
 8014976:	4652      	mov	r2, sl
 8014978:	465b      	mov	r3, fp
 801497a:	4680      	mov	r8, r0
 801497c:	4689      	mov	r9, r1
 801497e:	f7ec f8cb 	bl	8000b18 <__aeabi_dcmpgt>
 8014982:	2800      	cmp	r0, #0
 8014984:	f040 8295 	bne.w	8014eb2 <_dtoa_r+0x97a>
 8014988:	4652      	mov	r2, sl
 801498a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801498e:	4640      	mov	r0, r8
 8014990:	4649      	mov	r1, r9
 8014992:	f7ec f8a3 	bl	8000adc <__aeabi_dcmplt>
 8014996:	2800      	cmp	r0, #0
 8014998:	f040 8289 	bne.w	8014eae <_dtoa_r+0x976>
 801499c:	ec5b ab19 	vmov	sl, fp, d9
 80149a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	f2c0 8148 	blt.w	8014c38 <_dtoa_r+0x700>
 80149a8:	9a00      	ldr	r2, [sp, #0]
 80149aa:	2a0e      	cmp	r2, #14
 80149ac:	f300 8144 	bgt.w	8014c38 <_dtoa_r+0x700>
 80149b0:	4b67      	ldr	r3, [pc, #412]	; (8014b50 <_dtoa_r+0x618>)
 80149b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80149b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80149ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80149bc:	2b00      	cmp	r3, #0
 80149be:	f280 80d5 	bge.w	8014b6c <_dtoa_r+0x634>
 80149c2:	9b03      	ldr	r3, [sp, #12]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	f300 80d1 	bgt.w	8014b6c <_dtoa_r+0x634>
 80149ca:	f040 826f 	bne.w	8014eac <_dtoa_r+0x974>
 80149ce:	4b65      	ldr	r3, [pc, #404]	; (8014b64 <_dtoa_r+0x62c>)
 80149d0:	2200      	movs	r2, #0
 80149d2:	4640      	mov	r0, r8
 80149d4:	4649      	mov	r1, r9
 80149d6:	f7eb fe0f 	bl	80005f8 <__aeabi_dmul>
 80149da:	4652      	mov	r2, sl
 80149dc:	465b      	mov	r3, fp
 80149de:	f7ec f891 	bl	8000b04 <__aeabi_dcmpge>
 80149e2:	9e03      	ldr	r6, [sp, #12]
 80149e4:	4637      	mov	r7, r6
 80149e6:	2800      	cmp	r0, #0
 80149e8:	f040 8245 	bne.w	8014e76 <_dtoa_r+0x93e>
 80149ec:	9d01      	ldr	r5, [sp, #4]
 80149ee:	2331      	movs	r3, #49	; 0x31
 80149f0:	f805 3b01 	strb.w	r3, [r5], #1
 80149f4:	9b00      	ldr	r3, [sp, #0]
 80149f6:	3301      	adds	r3, #1
 80149f8:	9300      	str	r3, [sp, #0]
 80149fa:	e240      	b.n	8014e7e <_dtoa_r+0x946>
 80149fc:	07f2      	lsls	r2, r6, #31
 80149fe:	d505      	bpl.n	8014a0c <_dtoa_r+0x4d4>
 8014a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a04:	f7eb fdf8 	bl	80005f8 <__aeabi_dmul>
 8014a08:	3501      	adds	r5, #1
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	1076      	asrs	r6, r6, #1
 8014a0e:	3708      	adds	r7, #8
 8014a10:	e777      	b.n	8014902 <_dtoa_r+0x3ca>
 8014a12:	2502      	movs	r5, #2
 8014a14:	e779      	b.n	801490a <_dtoa_r+0x3d2>
 8014a16:	9f00      	ldr	r7, [sp, #0]
 8014a18:	9e03      	ldr	r6, [sp, #12]
 8014a1a:	e794      	b.n	8014946 <_dtoa_r+0x40e>
 8014a1c:	9901      	ldr	r1, [sp, #4]
 8014a1e:	4b4c      	ldr	r3, [pc, #304]	; (8014b50 <_dtoa_r+0x618>)
 8014a20:	4431      	add	r1, r6
 8014a22:	910d      	str	r1, [sp, #52]	; 0x34
 8014a24:	9908      	ldr	r1, [sp, #32]
 8014a26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014a2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014a2e:	2900      	cmp	r1, #0
 8014a30:	d043      	beq.n	8014aba <_dtoa_r+0x582>
 8014a32:	494d      	ldr	r1, [pc, #308]	; (8014b68 <_dtoa_r+0x630>)
 8014a34:	2000      	movs	r0, #0
 8014a36:	f7eb ff09 	bl	800084c <__aeabi_ddiv>
 8014a3a:	4652      	mov	r2, sl
 8014a3c:	465b      	mov	r3, fp
 8014a3e:	f7eb fc23 	bl	8000288 <__aeabi_dsub>
 8014a42:	9d01      	ldr	r5, [sp, #4]
 8014a44:	4682      	mov	sl, r0
 8014a46:	468b      	mov	fp, r1
 8014a48:	4649      	mov	r1, r9
 8014a4a:	4640      	mov	r0, r8
 8014a4c:	f7ec f884 	bl	8000b58 <__aeabi_d2iz>
 8014a50:	4606      	mov	r6, r0
 8014a52:	f7eb fd67 	bl	8000524 <__aeabi_i2d>
 8014a56:	4602      	mov	r2, r0
 8014a58:	460b      	mov	r3, r1
 8014a5a:	4640      	mov	r0, r8
 8014a5c:	4649      	mov	r1, r9
 8014a5e:	f7eb fc13 	bl	8000288 <__aeabi_dsub>
 8014a62:	3630      	adds	r6, #48	; 0x30
 8014a64:	f805 6b01 	strb.w	r6, [r5], #1
 8014a68:	4652      	mov	r2, sl
 8014a6a:	465b      	mov	r3, fp
 8014a6c:	4680      	mov	r8, r0
 8014a6e:	4689      	mov	r9, r1
 8014a70:	f7ec f834 	bl	8000adc <__aeabi_dcmplt>
 8014a74:	2800      	cmp	r0, #0
 8014a76:	d163      	bne.n	8014b40 <_dtoa_r+0x608>
 8014a78:	4642      	mov	r2, r8
 8014a7a:	464b      	mov	r3, r9
 8014a7c:	4936      	ldr	r1, [pc, #216]	; (8014b58 <_dtoa_r+0x620>)
 8014a7e:	2000      	movs	r0, #0
 8014a80:	f7eb fc02 	bl	8000288 <__aeabi_dsub>
 8014a84:	4652      	mov	r2, sl
 8014a86:	465b      	mov	r3, fp
 8014a88:	f7ec f828 	bl	8000adc <__aeabi_dcmplt>
 8014a8c:	2800      	cmp	r0, #0
 8014a8e:	f040 80b5 	bne.w	8014bfc <_dtoa_r+0x6c4>
 8014a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a94:	429d      	cmp	r5, r3
 8014a96:	d081      	beq.n	801499c <_dtoa_r+0x464>
 8014a98:	4b30      	ldr	r3, [pc, #192]	; (8014b5c <_dtoa_r+0x624>)
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	4650      	mov	r0, sl
 8014a9e:	4659      	mov	r1, fp
 8014aa0:	f7eb fdaa 	bl	80005f8 <__aeabi_dmul>
 8014aa4:	4b2d      	ldr	r3, [pc, #180]	; (8014b5c <_dtoa_r+0x624>)
 8014aa6:	4682      	mov	sl, r0
 8014aa8:	468b      	mov	fp, r1
 8014aaa:	4640      	mov	r0, r8
 8014aac:	4649      	mov	r1, r9
 8014aae:	2200      	movs	r2, #0
 8014ab0:	f7eb fda2 	bl	80005f8 <__aeabi_dmul>
 8014ab4:	4680      	mov	r8, r0
 8014ab6:	4689      	mov	r9, r1
 8014ab8:	e7c6      	b.n	8014a48 <_dtoa_r+0x510>
 8014aba:	4650      	mov	r0, sl
 8014abc:	4659      	mov	r1, fp
 8014abe:	f7eb fd9b 	bl	80005f8 <__aeabi_dmul>
 8014ac2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ac4:	9d01      	ldr	r5, [sp, #4]
 8014ac6:	930f      	str	r3, [sp, #60]	; 0x3c
 8014ac8:	4682      	mov	sl, r0
 8014aca:	468b      	mov	fp, r1
 8014acc:	4649      	mov	r1, r9
 8014ace:	4640      	mov	r0, r8
 8014ad0:	f7ec f842 	bl	8000b58 <__aeabi_d2iz>
 8014ad4:	4606      	mov	r6, r0
 8014ad6:	f7eb fd25 	bl	8000524 <__aeabi_i2d>
 8014ada:	3630      	adds	r6, #48	; 0x30
 8014adc:	4602      	mov	r2, r0
 8014ade:	460b      	mov	r3, r1
 8014ae0:	4640      	mov	r0, r8
 8014ae2:	4649      	mov	r1, r9
 8014ae4:	f7eb fbd0 	bl	8000288 <__aeabi_dsub>
 8014ae8:	f805 6b01 	strb.w	r6, [r5], #1
 8014aec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014aee:	429d      	cmp	r5, r3
 8014af0:	4680      	mov	r8, r0
 8014af2:	4689      	mov	r9, r1
 8014af4:	f04f 0200 	mov.w	r2, #0
 8014af8:	d124      	bne.n	8014b44 <_dtoa_r+0x60c>
 8014afa:	4b1b      	ldr	r3, [pc, #108]	; (8014b68 <_dtoa_r+0x630>)
 8014afc:	4650      	mov	r0, sl
 8014afe:	4659      	mov	r1, fp
 8014b00:	f7eb fbc4 	bl	800028c <__adddf3>
 8014b04:	4602      	mov	r2, r0
 8014b06:	460b      	mov	r3, r1
 8014b08:	4640      	mov	r0, r8
 8014b0a:	4649      	mov	r1, r9
 8014b0c:	f7ec f804 	bl	8000b18 <__aeabi_dcmpgt>
 8014b10:	2800      	cmp	r0, #0
 8014b12:	d173      	bne.n	8014bfc <_dtoa_r+0x6c4>
 8014b14:	4652      	mov	r2, sl
 8014b16:	465b      	mov	r3, fp
 8014b18:	4913      	ldr	r1, [pc, #76]	; (8014b68 <_dtoa_r+0x630>)
 8014b1a:	2000      	movs	r0, #0
 8014b1c:	f7eb fbb4 	bl	8000288 <__aeabi_dsub>
 8014b20:	4602      	mov	r2, r0
 8014b22:	460b      	mov	r3, r1
 8014b24:	4640      	mov	r0, r8
 8014b26:	4649      	mov	r1, r9
 8014b28:	f7eb ffd8 	bl	8000adc <__aeabi_dcmplt>
 8014b2c:	2800      	cmp	r0, #0
 8014b2e:	f43f af35 	beq.w	801499c <_dtoa_r+0x464>
 8014b32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014b34:	1e6b      	subs	r3, r5, #1
 8014b36:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014b3c:	2b30      	cmp	r3, #48	; 0x30
 8014b3e:	d0f8      	beq.n	8014b32 <_dtoa_r+0x5fa>
 8014b40:	9700      	str	r7, [sp, #0]
 8014b42:	e049      	b.n	8014bd8 <_dtoa_r+0x6a0>
 8014b44:	4b05      	ldr	r3, [pc, #20]	; (8014b5c <_dtoa_r+0x624>)
 8014b46:	f7eb fd57 	bl	80005f8 <__aeabi_dmul>
 8014b4a:	4680      	mov	r8, r0
 8014b4c:	4689      	mov	r9, r1
 8014b4e:	e7bd      	b.n	8014acc <_dtoa_r+0x594>
 8014b50:	08017a80 	.word	0x08017a80
 8014b54:	08017a58 	.word	0x08017a58
 8014b58:	3ff00000 	.word	0x3ff00000
 8014b5c:	40240000 	.word	0x40240000
 8014b60:	401c0000 	.word	0x401c0000
 8014b64:	40140000 	.word	0x40140000
 8014b68:	3fe00000 	.word	0x3fe00000
 8014b6c:	9d01      	ldr	r5, [sp, #4]
 8014b6e:	4656      	mov	r6, sl
 8014b70:	465f      	mov	r7, fp
 8014b72:	4642      	mov	r2, r8
 8014b74:	464b      	mov	r3, r9
 8014b76:	4630      	mov	r0, r6
 8014b78:	4639      	mov	r1, r7
 8014b7a:	f7eb fe67 	bl	800084c <__aeabi_ddiv>
 8014b7e:	f7eb ffeb 	bl	8000b58 <__aeabi_d2iz>
 8014b82:	4682      	mov	sl, r0
 8014b84:	f7eb fcce 	bl	8000524 <__aeabi_i2d>
 8014b88:	4642      	mov	r2, r8
 8014b8a:	464b      	mov	r3, r9
 8014b8c:	f7eb fd34 	bl	80005f8 <__aeabi_dmul>
 8014b90:	4602      	mov	r2, r0
 8014b92:	460b      	mov	r3, r1
 8014b94:	4630      	mov	r0, r6
 8014b96:	4639      	mov	r1, r7
 8014b98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014b9c:	f7eb fb74 	bl	8000288 <__aeabi_dsub>
 8014ba0:	f805 6b01 	strb.w	r6, [r5], #1
 8014ba4:	9e01      	ldr	r6, [sp, #4]
 8014ba6:	9f03      	ldr	r7, [sp, #12]
 8014ba8:	1bae      	subs	r6, r5, r6
 8014baa:	42b7      	cmp	r7, r6
 8014bac:	4602      	mov	r2, r0
 8014bae:	460b      	mov	r3, r1
 8014bb0:	d135      	bne.n	8014c1e <_dtoa_r+0x6e6>
 8014bb2:	f7eb fb6b 	bl	800028c <__adddf3>
 8014bb6:	4642      	mov	r2, r8
 8014bb8:	464b      	mov	r3, r9
 8014bba:	4606      	mov	r6, r0
 8014bbc:	460f      	mov	r7, r1
 8014bbe:	f7eb ffab 	bl	8000b18 <__aeabi_dcmpgt>
 8014bc2:	b9d0      	cbnz	r0, 8014bfa <_dtoa_r+0x6c2>
 8014bc4:	4642      	mov	r2, r8
 8014bc6:	464b      	mov	r3, r9
 8014bc8:	4630      	mov	r0, r6
 8014bca:	4639      	mov	r1, r7
 8014bcc:	f7eb ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8014bd0:	b110      	cbz	r0, 8014bd8 <_dtoa_r+0x6a0>
 8014bd2:	f01a 0f01 	tst.w	sl, #1
 8014bd6:	d110      	bne.n	8014bfa <_dtoa_r+0x6c2>
 8014bd8:	4620      	mov	r0, r4
 8014bda:	ee18 1a10 	vmov	r1, s16
 8014bde:	f000 ff47 	bl	8015a70 <_Bfree>
 8014be2:	2300      	movs	r3, #0
 8014be4:	9800      	ldr	r0, [sp, #0]
 8014be6:	702b      	strb	r3, [r5, #0]
 8014be8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bea:	3001      	adds	r0, #1
 8014bec:	6018      	str	r0, [r3, #0]
 8014bee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	f43f acf1 	beq.w	80145d8 <_dtoa_r+0xa0>
 8014bf6:	601d      	str	r5, [r3, #0]
 8014bf8:	e4ee      	b.n	80145d8 <_dtoa_r+0xa0>
 8014bfa:	9f00      	ldr	r7, [sp, #0]
 8014bfc:	462b      	mov	r3, r5
 8014bfe:	461d      	mov	r5, r3
 8014c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014c04:	2a39      	cmp	r2, #57	; 0x39
 8014c06:	d106      	bne.n	8014c16 <_dtoa_r+0x6de>
 8014c08:	9a01      	ldr	r2, [sp, #4]
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d1f7      	bne.n	8014bfe <_dtoa_r+0x6c6>
 8014c0e:	9901      	ldr	r1, [sp, #4]
 8014c10:	2230      	movs	r2, #48	; 0x30
 8014c12:	3701      	adds	r7, #1
 8014c14:	700a      	strb	r2, [r1, #0]
 8014c16:	781a      	ldrb	r2, [r3, #0]
 8014c18:	3201      	adds	r2, #1
 8014c1a:	701a      	strb	r2, [r3, #0]
 8014c1c:	e790      	b.n	8014b40 <_dtoa_r+0x608>
 8014c1e:	4ba6      	ldr	r3, [pc, #664]	; (8014eb8 <_dtoa_r+0x980>)
 8014c20:	2200      	movs	r2, #0
 8014c22:	f7eb fce9 	bl	80005f8 <__aeabi_dmul>
 8014c26:	2200      	movs	r2, #0
 8014c28:	2300      	movs	r3, #0
 8014c2a:	4606      	mov	r6, r0
 8014c2c:	460f      	mov	r7, r1
 8014c2e:	f7eb ff4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8014c32:	2800      	cmp	r0, #0
 8014c34:	d09d      	beq.n	8014b72 <_dtoa_r+0x63a>
 8014c36:	e7cf      	b.n	8014bd8 <_dtoa_r+0x6a0>
 8014c38:	9a08      	ldr	r2, [sp, #32]
 8014c3a:	2a00      	cmp	r2, #0
 8014c3c:	f000 80d7 	beq.w	8014dee <_dtoa_r+0x8b6>
 8014c40:	9a06      	ldr	r2, [sp, #24]
 8014c42:	2a01      	cmp	r2, #1
 8014c44:	f300 80ba 	bgt.w	8014dbc <_dtoa_r+0x884>
 8014c48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c4a:	2a00      	cmp	r2, #0
 8014c4c:	f000 80b2 	beq.w	8014db4 <_dtoa_r+0x87c>
 8014c50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014c54:	9e07      	ldr	r6, [sp, #28]
 8014c56:	9d04      	ldr	r5, [sp, #16]
 8014c58:	9a04      	ldr	r2, [sp, #16]
 8014c5a:	441a      	add	r2, r3
 8014c5c:	9204      	str	r2, [sp, #16]
 8014c5e:	9a05      	ldr	r2, [sp, #20]
 8014c60:	2101      	movs	r1, #1
 8014c62:	441a      	add	r2, r3
 8014c64:	4620      	mov	r0, r4
 8014c66:	9205      	str	r2, [sp, #20]
 8014c68:	f001 f804 	bl	8015c74 <__i2b>
 8014c6c:	4607      	mov	r7, r0
 8014c6e:	2d00      	cmp	r5, #0
 8014c70:	dd0c      	ble.n	8014c8c <_dtoa_r+0x754>
 8014c72:	9b05      	ldr	r3, [sp, #20]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	dd09      	ble.n	8014c8c <_dtoa_r+0x754>
 8014c78:	42ab      	cmp	r3, r5
 8014c7a:	9a04      	ldr	r2, [sp, #16]
 8014c7c:	bfa8      	it	ge
 8014c7e:	462b      	movge	r3, r5
 8014c80:	1ad2      	subs	r2, r2, r3
 8014c82:	9204      	str	r2, [sp, #16]
 8014c84:	9a05      	ldr	r2, [sp, #20]
 8014c86:	1aed      	subs	r5, r5, r3
 8014c88:	1ad3      	subs	r3, r2, r3
 8014c8a:	9305      	str	r3, [sp, #20]
 8014c8c:	9b07      	ldr	r3, [sp, #28]
 8014c8e:	b31b      	cbz	r3, 8014cd8 <_dtoa_r+0x7a0>
 8014c90:	9b08      	ldr	r3, [sp, #32]
 8014c92:	2b00      	cmp	r3, #0
 8014c94:	f000 80af 	beq.w	8014df6 <_dtoa_r+0x8be>
 8014c98:	2e00      	cmp	r6, #0
 8014c9a:	dd13      	ble.n	8014cc4 <_dtoa_r+0x78c>
 8014c9c:	4639      	mov	r1, r7
 8014c9e:	4632      	mov	r2, r6
 8014ca0:	4620      	mov	r0, r4
 8014ca2:	f001 f8a7 	bl	8015df4 <__pow5mult>
 8014ca6:	ee18 2a10 	vmov	r2, s16
 8014caa:	4601      	mov	r1, r0
 8014cac:	4607      	mov	r7, r0
 8014cae:	4620      	mov	r0, r4
 8014cb0:	f000 fff6 	bl	8015ca0 <__multiply>
 8014cb4:	ee18 1a10 	vmov	r1, s16
 8014cb8:	4680      	mov	r8, r0
 8014cba:	4620      	mov	r0, r4
 8014cbc:	f000 fed8 	bl	8015a70 <_Bfree>
 8014cc0:	ee08 8a10 	vmov	s16, r8
 8014cc4:	9b07      	ldr	r3, [sp, #28]
 8014cc6:	1b9a      	subs	r2, r3, r6
 8014cc8:	d006      	beq.n	8014cd8 <_dtoa_r+0x7a0>
 8014cca:	ee18 1a10 	vmov	r1, s16
 8014cce:	4620      	mov	r0, r4
 8014cd0:	f001 f890 	bl	8015df4 <__pow5mult>
 8014cd4:	ee08 0a10 	vmov	s16, r0
 8014cd8:	2101      	movs	r1, #1
 8014cda:	4620      	mov	r0, r4
 8014cdc:	f000 ffca 	bl	8015c74 <__i2b>
 8014ce0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	4606      	mov	r6, r0
 8014ce6:	f340 8088 	ble.w	8014dfa <_dtoa_r+0x8c2>
 8014cea:	461a      	mov	r2, r3
 8014cec:	4601      	mov	r1, r0
 8014cee:	4620      	mov	r0, r4
 8014cf0:	f001 f880 	bl	8015df4 <__pow5mult>
 8014cf4:	9b06      	ldr	r3, [sp, #24]
 8014cf6:	2b01      	cmp	r3, #1
 8014cf8:	4606      	mov	r6, r0
 8014cfa:	f340 8081 	ble.w	8014e00 <_dtoa_r+0x8c8>
 8014cfe:	f04f 0800 	mov.w	r8, #0
 8014d02:	6933      	ldr	r3, [r6, #16]
 8014d04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014d08:	6918      	ldr	r0, [r3, #16]
 8014d0a:	f000 ff63 	bl	8015bd4 <__hi0bits>
 8014d0e:	f1c0 0020 	rsb	r0, r0, #32
 8014d12:	9b05      	ldr	r3, [sp, #20]
 8014d14:	4418      	add	r0, r3
 8014d16:	f010 001f 	ands.w	r0, r0, #31
 8014d1a:	f000 8092 	beq.w	8014e42 <_dtoa_r+0x90a>
 8014d1e:	f1c0 0320 	rsb	r3, r0, #32
 8014d22:	2b04      	cmp	r3, #4
 8014d24:	f340 808a 	ble.w	8014e3c <_dtoa_r+0x904>
 8014d28:	f1c0 001c 	rsb	r0, r0, #28
 8014d2c:	9b04      	ldr	r3, [sp, #16]
 8014d2e:	4403      	add	r3, r0
 8014d30:	9304      	str	r3, [sp, #16]
 8014d32:	9b05      	ldr	r3, [sp, #20]
 8014d34:	4403      	add	r3, r0
 8014d36:	4405      	add	r5, r0
 8014d38:	9305      	str	r3, [sp, #20]
 8014d3a:	9b04      	ldr	r3, [sp, #16]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	dd07      	ble.n	8014d50 <_dtoa_r+0x818>
 8014d40:	ee18 1a10 	vmov	r1, s16
 8014d44:	461a      	mov	r2, r3
 8014d46:	4620      	mov	r0, r4
 8014d48:	f001 f8ae 	bl	8015ea8 <__lshift>
 8014d4c:	ee08 0a10 	vmov	s16, r0
 8014d50:	9b05      	ldr	r3, [sp, #20]
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	dd05      	ble.n	8014d62 <_dtoa_r+0x82a>
 8014d56:	4631      	mov	r1, r6
 8014d58:	461a      	mov	r2, r3
 8014d5a:	4620      	mov	r0, r4
 8014d5c:	f001 f8a4 	bl	8015ea8 <__lshift>
 8014d60:	4606      	mov	r6, r0
 8014d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d06e      	beq.n	8014e46 <_dtoa_r+0x90e>
 8014d68:	ee18 0a10 	vmov	r0, s16
 8014d6c:	4631      	mov	r1, r6
 8014d6e:	f001 f90b 	bl	8015f88 <__mcmp>
 8014d72:	2800      	cmp	r0, #0
 8014d74:	da67      	bge.n	8014e46 <_dtoa_r+0x90e>
 8014d76:	9b00      	ldr	r3, [sp, #0]
 8014d78:	3b01      	subs	r3, #1
 8014d7a:	ee18 1a10 	vmov	r1, s16
 8014d7e:	9300      	str	r3, [sp, #0]
 8014d80:	220a      	movs	r2, #10
 8014d82:	2300      	movs	r3, #0
 8014d84:	4620      	mov	r0, r4
 8014d86:	f000 fe95 	bl	8015ab4 <__multadd>
 8014d8a:	9b08      	ldr	r3, [sp, #32]
 8014d8c:	ee08 0a10 	vmov	s16, r0
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	f000 81b1 	beq.w	80150f8 <_dtoa_r+0xbc0>
 8014d96:	2300      	movs	r3, #0
 8014d98:	4639      	mov	r1, r7
 8014d9a:	220a      	movs	r2, #10
 8014d9c:	4620      	mov	r0, r4
 8014d9e:	f000 fe89 	bl	8015ab4 <__multadd>
 8014da2:	9b02      	ldr	r3, [sp, #8]
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	4607      	mov	r7, r0
 8014da8:	f300 808e 	bgt.w	8014ec8 <_dtoa_r+0x990>
 8014dac:	9b06      	ldr	r3, [sp, #24]
 8014dae:	2b02      	cmp	r3, #2
 8014db0:	dc51      	bgt.n	8014e56 <_dtoa_r+0x91e>
 8014db2:	e089      	b.n	8014ec8 <_dtoa_r+0x990>
 8014db4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014db6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014dba:	e74b      	b.n	8014c54 <_dtoa_r+0x71c>
 8014dbc:	9b03      	ldr	r3, [sp, #12]
 8014dbe:	1e5e      	subs	r6, r3, #1
 8014dc0:	9b07      	ldr	r3, [sp, #28]
 8014dc2:	42b3      	cmp	r3, r6
 8014dc4:	bfbf      	itttt	lt
 8014dc6:	9b07      	ldrlt	r3, [sp, #28]
 8014dc8:	9607      	strlt	r6, [sp, #28]
 8014dca:	1af2      	sublt	r2, r6, r3
 8014dcc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014dce:	bfb6      	itet	lt
 8014dd0:	189b      	addlt	r3, r3, r2
 8014dd2:	1b9e      	subge	r6, r3, r6
 8014dd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014dd6:	9b03      	ldr	r3, [sp, #12]
 8014dd8:	bfb8      	it	lt
 8014dda:	2600      	movlt	r6, #0
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	bfb7      	itett	lt
 8014de0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014de4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014de8:	1a9d      	sublt	r5, r3, r2
 8014dea:	2300      	movlt	r3, #0
 8014dec:	e734      	b.n	8014c58 <_dtoa_r+0x720>
 8014dee:	9e07      	ldr	r6, [sp, #28]
 8014df0:	9d04      	ldr	r5, [sp, #16]
 8014df2:	9f08      	ldr	r7, [sp, #32]
 8014df4:	e73b      	b.n	8014c6e <_dtoa_r+0x736>
 8014df6:	9a07      	ldr	r2, [sp, #28]
 8014df8:	e767      	b.n	8014cca <_dtoa_r+0x792>
 8014dfa:	9b06      	ldr	r3, [sp, #24]
 8014dfc:	2b01      	cmp	r3, #1
 8014dfe:	dc18      	bgt.n	8014e32 <_dtoa_r+0x8fa>
 8014e00:	f1ba 0f00 	cmp.w	sl, #0
 8014e04:	d115      	bne.n	8014e32 <_dtoa_r+0x8fa>
 8014e06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014e0a:	b993      	cbnz	r3, 8014e32 <_dtoa_r+0x8fa>
 8014e0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014e10:	0d1b      	lsrs	r3, r3, #20
 8014e12:	051b      	lsls	r3, r3, #20
 8014e14:	b183      	cbz	r3, 8014e38 <_dtoa_r+0x900>
 8014e16:	9b04      	ldr	r3, [sp, #16]
 8014e18:	3301      	adds	r3, #1
 8014e1a:	9304      	str	r3, [sp, #16]
 8014e1c:	9b05      	ldr	r3, [sp, #20]
 8014e1e:	3301      	adds	r3, #1
 8014e20:	9305      	str	r3, [sp, #20]
 8014e22:	f04f 0801 	mov.w	r8, #1
 8014e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	f47f af6a 	bne.w	8014d02 <_dtoa_r+0x7ca>
 8014e2e:	2001      	movs	r0, #1
 8014e30:	e76f      	b.n	8014d12 <_dtoa_r+0x7da>
 8014e32:	f04f 0800 	mov.w	r8, #0
 8014e36:	e7f6      	b.n	8014e26 <_dtoa_r+0x8ee>
 8014e38:	4698      	mov	r8, r3
 8014e3a:	e7f4      	b.n	8014e26 <_dtoa_r+0x8ee>
 8014e3c:	f43f af7d 	beq.w	8014d3a <_dtoa_r+0x802>
 8014e40:	4618      	mov	r0, r3
 8014e42:	301c      	adds	r0, #28
 8014e44:	e772      	b.n	8014d2c <_dtoa_r+0x7f4>
 8014e46:	9b03      	ldr	r3, [sp, #12]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	dc37      	bgt.n	8014ebc <_dtoa_r+0x984>
 8014e4c:	9b06      	ldr	r3, [sp, #24]
 8014e4e:	2b02      	cmp	r3, #2
 8014e50:	dd34      	ble.n	8014ebc <_dtoa_r+0x984>
 8014e52:	9b03      	ldr	r3, [sp, #12]
 8014e54:	9302      	str	r3, [sp, #8]
 8014e56:	9b02      	ldr	r3, [sp, #8]
 8014e58:	b96b      	cbnz	r3, 8014e76 <_dtoa_r+0x93e>
 8014e5a:	4631      	mov	r1, r6
 8014e5c:	2205      	movs	r2, #5
 8014e5e:	4620      	mov	r0, r4
 8014e60:	f000 fe28 	bl	8015ab4 <__multadd>
 8014e64:	4601      	mov	r1, r0
 8014e66:	4606      	mov	r6, r0
 8014e68:	ee18 0a10 	vmov	r0, s16
 8014e6c:	f001 f88c 	bl	8015f88 <__mcmp>
 8014e70:	2800      	cmp	r0, #0
 8014e72:	f73f adbb 	bgt.w	80149ec <_dtoa_r+0x4b4>
 8014e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e78:	9d01      	ldr	r5, [sp, #4]
 8014e7a:	43db      	mvns	r3, r3
 8014e7c:	9300      	str	r3, [sp, #0]
 8014e7e:	f04f 0800 	mov.w	r8, #0
 8014e82:	4631      	mov	r1, r6
 8014e84:	4620      	mov	r0, r4
 8014e86:	f000 fdf3 	bl	8015a70 <_Bfree>
 8014e8a:	2f00      	cmp	r7, #0
 8014e8c:	f43f aea4 	beq.w	8014bd8 <_dtoa_r+0x6a0>
 8014e90:	f1b8 0f00 	cmp.w	r8, #0
 8014e94:	d005      	beq.n	8014ea2 <_dtoa_r+0x96a>
 8014e96:	45b8      	cmp	r8, r7
 8014e98:	d003      	beq.n	8014ea2 <_dtoa_r+0x96a>
 8014e9a:	4641      	mov	r1, r8
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	f000 fde7 	bl	8015a70 <_Bfree>
 8014ea2:	4639      	mov	r1, r7
 8014ea4:	4620      	mov	r0, r4
 8014ea6:	f000 fde3 	bl	8015a70 <_Bfree>
 8014eaa:	e695      	b.n	8014bd8 <_dtoa_r+0x6a0>
 8014eac:	2600      	movs	r6, #0
 8014eae:	4637      	mov	r7, r6
 8014eb0:	e7e1      	b.n	8014e76 <_dtoa_r+0x93e>
 8014eb2:	9700      	str	r7, [sp, #0]
 8014eb4:	4637      	mov	r7, r6
 8014eb6:	e599      	b.n	80149ec <_dtoa_r+0x4b4>
 8014eb8:	40240000 	.word	0x40240000
 8014ebc:	9b08      	ldr	r3, [sp, #32]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	f000 80ca 	beq.w	8015058 <_dtoa_r+0xb20>
 8014ec4:	9b03      	ldr	r3, [sp, #12]
 8014ec6:	9302      	str	r3, [sp, #8]
 8014ec8:	2d00      	cmp	r5, #0
 8014eca:	dd05      	ble.n	8014ed8 <_dtoa_r+0x9a0>
 8014ecc:	4639      	mov	r1, r7
 8014ece:	462a      	mov	r2, r5
 8014ed0:	4620      	mov	r0, r4
 8014ed2:	f000 ffe9 	bl	8015ea8 <__lshift>
 8014ed6:	4607      	mov	r7, r0
 8014ed8:	f1b8 0f00 	cmp.w	r8, #0
 8014edc:	d05b      	beq.n	8014f96 <_dtoa_r+0xa5e>
 8014ede:	6879      	ldr	r1, [r7, #4]
 8014ee0:	4620      	mov	r0, r4
 8014ee2:	f000 fd85 	bl	80159f0 <_Balloc>
 8014ee6:	4605      	mov	r5, r0
 8014ee8:	b928      	cbnz	r0, 8014ef6 <_dtoa_r+0x9be>
 8014eea:	4b87      	ldr	r3, [pc, #540]	; (8015108 <_dtoa_r+0xbd0>)
 8014eec:	4602      	mov	r2, r0
 8014eee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014ef2:	f7ff bb3b 	b.w	801456c <_dtoa_r+0x34>
 8014ef6:	693a      	ldr	r2, [r7, #16]
 8014ef8:	3202      	adds	r2, #2
 8014efa:	0092      	lsls	r2, r2, #2
 8014efc:	f107 010c 	add.w	r1, r7, #12
 8014f00:	300c      	adds	r0, #12
 8014f02:	f7fd fb6e 	bl	80125e2 <memcpy>
 8014f06:	2201      	movs	r2, #1
 8014f08:	4629      	mov	r1, r5
 8014f0a:	4620      	mov	r0, r4
 8014f0c:	f000 ffcc 	bl	8015ea8 <__lshift>
 8014f10:	9b01      	ldr	r3, [sp, #4]
 8014f12:	f103 0901 	add.w	r9, r3, #1
 8014f16:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014f1a:	4413      	add	r3, r2
 8014f1c:	9305      	str	r3, [sp, #20]
 8014f1e:	f00a 0301 	and.w	r3, sl, #1
 8014f22:	46b8      	mov	r8, r7
 8014f24:	9304      	str	r3, [sp, #16]
 8014f26:	4607      	mov	r7, r0
 8014f28:	4631      	mov	r1, r6
 8014f2a:	ee18 0a10 	vmov	r0, s16
 8014f2e:	f7ff fa75 	bl	801441c <quorem>
 8014f32:	4641      	mov	r1, r8
 8014f34:	9002      	str	r0, [sp, #8]
 8014f36:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014f3a:	ee18 0a10 	vmov	r0, s16
 8014f3e:	f001 f823 	bl	8015f88 <__mcmp>
 8014f42:	463a      	mov	r2, r7
 8014f44:	9003      	str	r0, [sp, #12]
 8014f46:	4631      	mov	r1, r6
 8014f48:	4620      	mov	r0, r4
 8014f4a:	f001 f839 	bl	8015fc0 <__mdiff>
 8014f4e:	68c2      	ldr	r2, [r0, #12]
 8014f50:	f109 3bff 	add.w	fp, r9, #4294967295
 8014f54:	4605      	mov	r5, r0
 8014f56:	bb02      	cbnz	r2, 8014f9a <_dtoa_r+0xa62>
 8014f58:	4601      	mov	r1, r0
 8014f5a:	ee18 0a10 	vmov	r0, s16
 8014f5e:	f001 f813 	bl	8015f88 <__mcmp>
 8014f62:	4602      	mov	r2, r0
 8014f64:	4629      	mov	r1, r5
 8014f66:	4620      	mov	r0, r4
 8014f68:	9207      	str	r2, [sp, #28]
 8014f6a:	f000 fd81 	bl	8015a70 <_Bfree>
 8014f6e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014f72:	ea43 0102 	orr.w	r1, r3, r2
 8014f76:	9b04      	ldr	r3, [sp, #16]
 8014f78:	430b      	orrs	r3, r1
 8014f7a:	464d      	mov	r5, r9
 8014f7c:	d10f      	bne.n	8014f9e <_dtoa_r+0xa66>
 8014f7e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014f82:	d02a      	beq.n	8014fda <_dtoa_r+0xaa2>
 8014f84:	9b03      	ldr	r3, [sp, #12]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	dd02      	ble.n	8014f90 <_dtoa_r+0xa58>
 8014f8a:	9b02      	ldr	r3, [sp, #8]
 8014f8c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014f90:	f88b a000 	strb.w	sl, [fp]
 8014f94:	e775      	b.n	8014e82 <_dtoa_r+0x94a>
 8014f96:	4638      	mov	r0, r7
 8014f98:	e7ba      	b.n	8014f10 <_dtoa_r+0x9d8>
 8014f9a:	2201      	movs	r2, #1
 8014f9c:	e7e2      	b.n	8014f64 <_dtoa_r+0xa2c>
 8014f9e:	9b03      	ldr	r3, [sp, #12]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	db04      	blt.n	8014fae <_dtoa_r+0xa76>
 8014fa4:	9906      	ldr	r1, [sp, #24]
 8014fa6:	430b      	orrs	r3, r1
 8014fa8:	9904      	ldr	r1, [sp, #16]
 8014faa:	430b      	orrs	r3, r1
 8014fac:	d122      	bne.n	8014ff4 <_dtoa_r+0xabc>
 8014fae:	2a00      	cmp	r2, #0
 8014fb0:	ddee      	ble.n	8014f90 <_dtoa_r+0xa58>
 8014fb2:	ee18 1a10 	vmov	r1, s16
 8014fb6:	2201      	movs	r2, #1
 8014fb8:	4620      	mov	r0, r4
 8014fba:	f000 ff75 	bl	8015ea8 <__lshift>
 8014fbe:	4631      	mov	r1, r6
 8014fc0:	ee08 0a10 	vmov	s16, r0
 8014fc4:	f000 ffe0 	bl	8015f88 <__mcmp>
 8014fc8:	2800      	cmp	r0, #0
 8014fca:	dc03      	bgt.n	8014fd4 <_dtoa_r+0xa9c>
 8014fcc:	d1e0      	bne.n	8014f90 <_dtoa_r+0xa58>
 8014fce:	f01a 0f01 	tst.w	sl, #1
 8014fd2:	d0dd      	beq.n	8014f90 <_dtoa_r+0xa58>
 8014fd4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014fd8:	d1d7      	bne.n	8014f8a <_dtoa_r+0xa52>
 8014fda:	2339      	movs	r3, #57	; 0x39
 8014fdc:	f88b 3000 	strb.w	r3, [fp]
 8014fe0:	462b      	mov	r3, r5
 8014fe2:	461d      	mov	r5, r3
 8014fe4:	3b01      	subs	r3, #1
 8014fe6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014fea:	2a39      	cmp	r2, #57	; 0x39
 8014fec:	d071      	beq.n	80150d2 <_dtoa_r+0xb9a>
 8014fee:	3201      	adds	r2, #1
 8014ff0:	701a      	strb	r2, [r3, #0]
 8014ff2:	e746      	b.n	8014e82 <_dtoa_r+0x94a>
 8014ff4:	2a00      	cmp	r2, #0
 8014ff6:	dd07      	ble.n	8015008 <_dtoa_r+0xad0>
 8014ff8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014ffc:	d0ed      	beq.n	8014fda <_dtoa_r+0xaa2>
 8014ffe:	f10a 0301 	add.w	r3, sl, #1
 8015002:	f88b 3000 	strb.w	r3, [fp]
 8015006:	e73c      	b.n	8014e82 <_dtoa_r+0x94a>
 8015008:	9b05      	ldr	r3, [sp, #20]
 801500a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801500e:	4599      	cmp	r9, r3
 8015010:	d047      	beq.n	80150a2 <_dtoa_r+0xb6a>
 8015012:	ee18 1a10 	vmov	r1, s16
 8015016:	2300      	movs	r3, #0
 8015018:	220a      	movs	r2, #10
 801501a:	4620      	mov	r0, r4
 801501c:	f000 fd4a 	bl	8015ab4 <__multadd>
 8015020:	45b8      	cmp	r8, r7
 8015022:	ee08 0a10 	vmov	s16, r0
 8015026:	f04f 0300 	mov.w	r3, #0
 801502a:	f04f 020a 	mov.w	r2, #10
 801502e:	4641      	mov	r1, r8
 8015030:	4620      	mov	r0, r4
 8015032:	d106      	bne.n	8015042 <_dtoa_r+0xb0a>
 8015034:	f000 fd3e 	bl	8015ab4 <__multadd>
 8015038:	4680      	mov	r8, r0
 801503a:	4607      	mov	r7, r0
 801503c:	f109 0901 	add.w	r9, r9, #1
 8015040:	e772      	b.n	8014f28 <_dtoa_r+0x9f0>
 8015042:	f000 fd37 	bl	8015ab4 <__multadd>
 8015046:	4639      	mov	r1, r7
 8015048:	4680      	mov	r8, r0
 801504a:	2300      	movs	r3, #0
 801504c:	220a      	movs	r2, #10
 801504e:	4620      	mov	r0, r4
 8015050:	f000 fd30 	bl	8015ab4 <__multadd>
 8015054:	4607      	mov	r7, r0
 8015056:	e7f1      	b.n	801503c <_dtoa_r+0xb04>
 8015058:	9b03      	ldr	r3, [sp, #12]
 801505a:	9302      	str	r3, [sp, #8]
 801505c:	9d01      	ldr	r5, [sp, #4]
 801505e:	ee18 0a10 	vmov	r0, s16
 8015062:	4631      	mov	r1, r6
 8015064:	f7ff f9da 	bl	801441c <quorem>
 8015068:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801506c:	9b01      	ldr	r3, [sp, #4]
 801506e:	f805 ab01 	strb.w	sl, [r5], #1
 8015072:	1aea      	subs	r2, r5, r3
 8015074:	9b02      	ldr	r3, [sp, #8]
 8015076:	4293      	cmp	r3, r2
 8015078:	dd09      	ble.n	801508e <_dtoa_r+0xb56>
 801507a:	ee18 1a10 	vmov	r1, s16
 801507e:	2300      	movs	r3, #0
 8015080:	220a      	movs	r2, #10
 8015082:	4620      	mov	r0, r4
 8015084:	f000 fd16 	bl	8015ab4 <__multadd>
 8015088:	ee08 0a10 	vmov	s16, r0
 801508c:	e7e7      	b.n	801505e <_dtoa_r+0xb26>
 801508e:	9b02      	ldr	r3, [sp, #8]
 8015090:	2b00      	cmp	r3, #0
 8015092:	bfc8      	it	gt
 8015094:	461d      	movgt	r5, r3
 8015096:	9b01      	ldr	r3, [sp, #4]
 8015098:	bfd8      	it	le
 801509a:	2501      	movle	r5, #1
 801509c:	441d      	add	r5, r3
 801509e:	f04f 0800 	mov.w	r8, #0
 80150a2:	ee18 1a10 	vmov	r1, s16
 80150a6:	2201      	movs	r2, #1
 80150a8:	4620      	mov	r0, r4
 80150aa:	f000 fefd 	bl	8015ea8 <__lshift>
 80150ae:	4631      	mov	r1, r6
 80150b0:	ee08 0a10 	vmov	s16, r0
 80150b4:	f000 ff68 	bl	8015f88 <__mcmp>
 80150b8:	2800      	cmp	r0, #0
 80150ba:	dc91      	bgt.n	8014fe0 <_dtoa_r+0xaa8>
 80150bc:	d102      	bne.n	80150c4 <_dtoa_r+0xb8c>
 80150be:	f01a 0f01 	tst.w	sl, #1
 80150c2:	d18d      	bne.n	8014fe0 <_dtoa_r+0xaa8>
 80150c4:	462b      	mov	r3, r5
 80150c6:	461d      	mov	r5, r3
 80150c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80150cc:	2a30      	cmp	r2, #48	; 0x30
 80150ce:	d0fa      	beq.n	80150c6 <_dtoa_r+0xb8e>
 80150d0:	e6d7      	b.n	8014e82 <_dtoa_r+0x94a>
 80150d2:	9a01      	ldr	r2, [sp, #4]
 80150d4:	429a      	cmp	r2, r3
 80150d6:	d184      	bne.n	8014fe2 <_dtoa_r+0xaaa>
 80150d8:	9b00      	ldr	r3, [sp, #0]
 80150da:	3301      	adds	r3, #1
 80150dc:	9300      	str	r3, [sp, #0]
 80150de:	2331      	movs	r3, #49	; 0x31
 80150e0:	7013      	strb	r3, [r2, #0]
 80150e2:	e6ce      	b.n	8014e82 <_dtoa_r+0x94a>
 80150e4:	4b09      	ldr	r3, [pc, #36]	; (801510c <_dtoa_r+0xbd4>)
 80150e6:	f7ff ba95 	b.w	8014614 <_dtoa_r+0xdc>
 80150ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	f47f aa6e 	bne.w	80145ce <_dtoa_r+0x96>
 80150f2:	4b07      	ldr	r3, [pc, #28]	; (8015110 <_dtoa_r+0xbd8>)
 80150f4:	f7ff ba8e 	b.w	8014614 <_dtoa_r+0xdc>
 80150f8:	9b02      	ldr	r3, [sp, #8]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	dcae      	bgt.n	801505c <_dtoa_r+0xb24>
 80150fe:	9b06      	ldr	r3, [sp, #24]
 8015100:	2b02      	cmp	r3, #2
 8015102:	f73f aea8 	bgt.w	8014e56 <_dtoa_r+0x91e>
 8015106:	e7a9      	b.n	801505c <_dtoa_r+0xb24>
 8015108:	08017970 	.word	0x08017970
 801510c:	08017774 	.word	0x08017774
 8015110:	080178f1 	.word	0x080178f1

08015114 <__sflush_r>:
 8015114:	898a      	ldrh	r2, [r1, #12]
 8015116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801511a:	4605      	mov	r5, r0
 801511c:	0710      	lsls	r0, r2, #28
 801511e:	460c      	mov	r4, r1
 8015120:	d458      	bmi.n	80151d4 <__sflush_r+0xc0>
 8015122:	684b      	ldr	r3, [r1, #4]
 8015124:	2b00      	cmp	r3, #0
 8015126:	dc05      	bgt.n	8015134 <__sflush_r+0x20>
 8015128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801512a:	2b00      	cmp	r3, #0
 801512c:	dc02      	bgt.n	8015134 <__sflush_r+0x20>
 801512e:	2000      	movs	r0, #0
 8015130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015136:	2e00      	cmp	r6, #0
 8015138:	d0f9      	beq.n	801512e <__sflush_r+0x1a>
 801513a:	2300      	movs	r3, #0
 801513c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015140:	682f      	ldr	r7, [r5, #0]
 8015142:	602b      	str	r3, [r5, #0]
 8015144:	d032      	beq.n	80151ac <__sflush_r+0x98>
 8015146:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015148:	89a3      	ldrh	r3, [r4, #12]
 801514a:	075a      	lsls	r2, r3, #29
 801514c:	d505      	bpl.n	801515a <__sflush_r+0x46>
 801514e:	6863      	ldr	r3, [r4, #4]
 8015150:	1ac0      	subs	r0, r0, r3
 8015152:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015154:	b10b      	cbz	r3, 801515a <__sflush_r+0x46>
 8015156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015158:	1ac0      	subs	r0, r0, r3
 801515a:	2300      	movs	r3, #0
 801515c:	4602      	mov	r2, r0
 801515e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015160:	6a21      	ldr	r1, [r4, #32]
 8015162:	4628      	mov	r0, r5
 8015164:	47b0      	blx	r6
 8015166:	1c43      	adds	r3, r0, #1
 8015168:	89a3      	ldrh	r3, [r4, #12]
 801516a:	d106      	bne.n	801517a <__sflush_r+0x66>
 801516c:	6829      	ldr	r1, [r5, #0]
 801516e:	291d      	cmp	r1, #29
 8015170:	d82c      	bhi.n	80151cc <__sflush_r+0xb8>
 8015172:	4a2a      	ldr	r2, [pc, #168]	; (801521c <__sflush_r+0x108>)
 8015174:	40ca      	lsrs	r2, r1
 8015176:	07d6      	lsls	r6, r2, #31
 8015178:	d528      	bpl.n	80151cc <__sflush_r+0xb8>
 801517a:	2200      	movs	r2, #0
 801517c:	6062      	str	r2, [r4, #4]
 801517e:	04d9      	lsls	r1, r3, #19
 8015180:	6922      	ldr	r2, [r4, #16]
 8015182:	6022      	str	r2, [r4, #0]
 8015184:	d504      	bpl.n	8015190 <__sflush_r+0x7c>
 8015186:	1c42      	adds	r2, r0, #1
 8015188:	d101      	bne.n	801518e <__sflush_r+0x7a>
 801518a:	682b      	ldr	r3, [r5, #0]
 801518c:	b903      	cbnz	r3, 8015190 <__sflush_r+0x7c>
 801518e:	6560      	str	r0, [r4, #84]	; 0x54
 8015190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015192:	602f      	str	r7, [r5, #0]
 8015194:	2900      	cmp	r1, #0
 8015196:	d0ca      	beq.n	801512e <__sflush_r+0x1a>
 8015198:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801519c:	4299      	cmp	r1, r3
 801519e:	d002      	beq.n	80151a6 <__sflush_r+0x92>
 80151a0:	4628      	mov	r0, r5
 80151a2:	f001 f8fd 	bl	80163a0 <_free_r>
 80151a6:	2000      	movs	r0, #0
 80151a8:	6360      	str	r0, [r4, #52]	; 0x34
 80151aa:	e7c1      	b.n	8015130 <__sflush_r+0x1c>
 80151ac:	6a21      	ldr	r1, [r4, #32]
 80151ae:	2301      	movs	r3, #1
 80151b0:	4628      	mov	r0, r5
 80151b2:	47b0      	blx	r6
 80151b4:	1c41      	adds	r1, r0, #1
 80151b6:	d1c7      	bne.n	8015148 <__sflush_r+0x34>
 80151b8:	682b      	ldr	r3, [r5, #0]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d0c4      	beq.n	8015148 <__sflush_r+0x34>
 80151be:	2b1d      	cmp	r3, #29
 80151c0:	d001      	beq.n	80151c6 <__sflush_r+0xb2>
 80151c2:	2b16      	cmp	r3, #22
 80151c4:	d101      	bne.n	80151ca <__sflush_r+0xb6>
 80151c6:	602f      	str	r7, [r5, #0]
 80151c8:	e7b1      	b.n	801512e <__sflush_r+0x1a>
 80151ca:	89a3      	ldrh	r3, [r4, #12]
 80151cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151d0:	81a3      	strh	r3, [r4, #12]
 80151d2:	e7ad      	b.n	8015130 <__sflush_r+0x1c>
 80151d4:	690f      	ldr	r7, [r1, #16]
 80151d6:	2f00      	cmp	r7, #0
 80151d8:	d0a9      	beq.n	801512e <__sflush_r+0x1a>
 80151da:	0793      	lsls	r3, r2, #30
 80151dc:	680e      	ldr	r6, [r1, #0]
 80151de:	bf08      	it	eq
 80151e0:	694b      	ldreq	r3, [r1, #20]
 80151e2:	600f      	str	r7, [r1, #0]
 80151e4:	bf18      	it	ne
 80151e6:	2300      	movne	r3, #0
 80151e8:	eba6 0807 	sub.w	r8, r6, r7
 80151ec:	608b      	str	r3, [r1, #8]
 80151ee:	f1b8 0f00 	cmp.w	r8, #0
 80151f2:	dd9c      	ble.n	801512e <__sflush_r+0x1a>
 80151f4:	6a21      	ldr	r1, [r4, #32]
 80151f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80151f8:	4643      	mov	r3, r8
 80151fa:	463a      	mov	r2, r7
 80151fc:	4628      	mov	r0, r5
 80151fe:	47b0      	blx	r6
 8015200:	2800      	cmp	r0, #0
 8015202:	dc06      	bgt.n	8015212 <__sflush_r+0xfe>
 8015204:	89a3      	ldrh	r3, [r4, #12]
 8015206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801520a:	81a3      	strh	r3, [r4, #12]
 801520c:	f04f 30ff 	mov.w	r0, #4294967295
 8015210:	e78e      	b.n	8015130 <__sflush_r+0x1c>
 8015212:	4407      	add	r7, r0
 8015214:	eba8 0800 	sub.w	r8, r8, r0
 8015218:	e7e9      	b.n	80151ee <__sflush_r+0xda>
 801521a:	bf00      	nop
 801521c:	20400001 	.word	0x20400001

08015220 <_fflush_r>:
 8015220:	b538      	push	{r3, r4, r5, lr}
 8015222:	690b      	ldr	r3, [r1, #16]
 8015224:	4605      	mov	r5, r0
 8015226:	460c      	mov	r4, r1
 8015228:	b913      	cbnz	r3, 8015230 <_fflush_r+0x10>
 801522a:	2500      	movs	r5, #0
 801522c:	4628      	mov	r0, r5
 801522e:	bd38      	pop	{r3, r4, r5, pc}
 8015230:	b118      	cbz	r0, 801523a <_fflush_r+0x1a>
 8015232:	6983      	ldr	r3, [r0, #24]
 8015234:	b90b      	cbnz	r3, 801523a <_fflush_r+0x1a>
 8015236:	f7fd f90f 	bl	8012458 <__sinit>
 801523a:	4b14      	ldr	r3, [pc, #80]	; (801528c <_fflush_r+0x6c>)
 801523c:	429c      	cmp	r4, r3
 801523e:	d11b      	bne.n	8015278 <_fflush_r+0x58>
 8015240:	686c      	ldr	r4, [r5, #4]
 8015242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d0ef      	beq.n	801522a <_fflush_r+0xa>
 801524a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801524c:	07d0      	lsls	r0, r2, #31
 801524e:	d404      	bmi.n	801525a <_fflush_r+0x3a>
 8015250:	0599      	lsls	r1, r3, #22
 8015252:	d402      	bmi.n	801525a <_fflush_r+0x3a>
 8015254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015256:	f7fd f9c2 	bl	80125de <__retarget_lock_acquire_recursive>
 801525a:	4628      	mov	r0, r5
 801525c:	4621      	mov	r1, r4
 801525e:	f7ff ff59 	bl	8015114 <__sflush_r>
 8015262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015264:	07da      	lsls	r2, r3, #31
 8015266:	4605      	mov	r5, r0
 8015268:	d4e0      	bmi.n	801522c <_fflush_r+0xc>
 801526a:	89a3      	ldrh	r3, [r4, #12]
 801526c:	059b      	lsls	r3, r3, #22
 801526e:	d4dd      	bmi.n	801522c <_fflush_r+0xc>
 8015270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015272:	f7fd f9b5 	bl	80125e0 <__retarget_lock_release_recursive>
 8015276:	e7d9      	b.n	801522c <_fflush_r+0xc>
 8015278:	4b05      	ldr	r3, [pc, #20]	; (8015290 <_fflush_r+0x70>)
 801527a:	429c      	cmp	r4, r3
 801527c:	d101      	bne.n	8015282 <_fflush_r+0x62>
 801527e:	68ac      	ldr	r4, [r5, #8]
 8015280:	e7df      	b.n	8015242 <_fflush_r+0x22>
 8015282:	4b04      	ldr	r3, [pc, #16]	; (8015294 <_fflush_r+0x74>)
 8015284:	429c      	cmp	r4, r3
 8015286:	bf08      	it	eq
 8015288:	68ec      	ldreq	r4, [r5, #12]
 801528a:	e7da      	b.n	8015242 <_fflush_r+0x22>
 801528c:	08017720 	.word	0x08017720
 8015290:	08017740 	.word	0x08017740
 8015294:	08017700 	.word	0x08017700

08015298 <rshift>:
 8015298:	6903      	ldr	r3, [r0, #16]
 801529a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801529e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80152a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80152a6:	f100 0414 	add.w	r4, r0, #20
 80152aa:	dd45      	ble.n	8015338 <rshift+0xa0>
 80152ac:	f011 011f 	ands.w	r1, r1, #31
 80152b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80152b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80152b8:	d10c      	bne.n	80152d4 <rshift+0x3c>
 80152ba:	f100 0710 	add.w	r7, r0, #16
 80152be:	4629      	mov	r1, r5
 80152c0:	42b1      	cmp	r1, r6
 80152c2:	d334      	bcc.n	801532e <rshift+0x96>
 80152c4:	1a9b      	subs	r3, r3, r2
 80152c6:	009b      	lsls	r3, r3, #2
 80152c8:	1eea      	subs	r2, r5, #3
 80152ca:	4296      	cmp	r6, r2
 80152cc:	bf38      	it	cc
 80152ce:	2300      	movcc	r3, #0
 80152d0:	4423      	add	r3, r4
 80152d2:	e015      	b.n	8015300 <rshift+0x68>
 80152d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80152d8:	f1c1 0820 	rsb	r8, r1, #32
 80152dc:	40cf      	lsrs	r7, r1
 80152de:	f105 0e04 	add.w	lr, r5, #4
 80152e2:	46a1      	mov	r9, r4
 80152e4:	4576      	cmp	r6, lr
 80152e6:	46f4      	mov	ip, lr
 80152e8:	d815      	bhi.n	8015316 <rshift+0x7e>
 80152ea:	1a9a      	subs	r2, r3, r2
 80152ec:	0092      	lsls	r2, r2, #2
 80152ee:	3a04      	subs	r2, #4
 80152f0:	3501      	adds	r5, #1
 80152f2:	42ae      	cmp	r6, r5
 80152f4:	bf38      	it	cc
 80152f6:	2200      	movcc	r2, #0
 80152f8:	18a3      	adds	r3, r4, r2
 80152fa:	50a7      	str	r7, [r4, r2]
 80152fc:	b107      	cbz	r7, 8015300 <rshift+0x68>
 80152fe:	3304      	adds	r3, #4
 8015300:	1b1a      	subs	r2, r3, r4
 8015302:	42a3      	cmp	r3, r4
 8015304:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015308:	bf08      	it	eq
 801530a:	2300      	moveq	r3, #0
 801530c:	6102      	str	r2, [r0, #16]
 801530e:	bf08      	it	eq
 8015310:	6143      	streq	r3, [r0, #20]
 8015312:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015316:	f8dc c000 	ldr.w	ip, [ip]
 801531a:	fa0c fc08 	lsl.w	ip, ip, r8
 801531e:	ea4c 0707 	orr.w	r7, ip, r7
 8015322:	f849 7b04 	str.w	r7, [r9], #4
 8015326:	f85e 7b04 	ldr.w	r7, [lr], #4
 801532a:	40cf      	lsrs	r7, r1
 801532c:	e7da      	b.n	80152e4 <rshift+0x4c>
 801532e:	f851 cb04 	ldr.w	ip, [r1], #4
 8015332:	f847 cf04 	str.w	ip, [r7, #4]!
 8015336:	e7c3      	b.n	80152c0 <rshift+0x28>
 8015338:	4623      	mov	r3, r4
 801533a:	e7e1      	b.n	8015300 <rshift+0x68>

0801533c <__hexdig_fun>:
 801533c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015340:	2b09      	cmp	r3, #9
 8015342:	d802      	bhi.n	801534a <__hexdig_fun+0xe>
 8015344:	3820      	subs	r0, #32
 8015346:	b2c0      	uxtb	r0, r0
 8015348:	4770      	bx	lr
 801534a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801534e:	2b05      	cmp	r3, #5
 8015350:	d801      	bhi.n	8015356 <__hexdig_fun+0x1a>
 8015352:	3847      	subs	r0, #71	; 0x47
 8015354:	e7f7      	b.n	8015346 <__hexdig_fun+0xa>
 8015356:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801535a:	2b05      	cmp	r3, #5
 801535c:	d801      	bhi.n	8015362 <__hexdig_fun+0x26>
 801535e:	3827      	subs	r0, #39	; 0x27
 8015360:	e7f1      	b.n	8015346 <__hexdig_fun+0xa>
 8015362:	2000      	movs	r0, #0
 8015364:	4770      	bx	lr
	...

08015368 <__gethex>:
 8015368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801536c:	ed2d 8b02 	vpush	{d8}
 8015370:	b089      	sub	sp, #36	; 0x24
 8015372:	ee08 0a10 	vmov	s16, r0
 8015376:	9304      	str	r3, [sp, #16]
 8015378:	4bb4      	ldr	r3, [pc, #720]	; (801564c <__gethex+0x2e4>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	9301      	str	r3, [sp, #4]
 801537e:	4618      	mov	r0, r3
 8015380:	468b      	mov	fp, r1
 8015382:	4690      	mov	r8, r2
 8015384:	f7ea ff24 	bl	80001d0 <strlen>
 8015388:	9b01      	ldr	r3, [sp, #4]
 801538a:	f8db 2000 	ldr.w	r2, [fp]
 801538e:	4403      	add	r3, r0
 8015390:	4682      	mov	sl, r0
 8015392:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015396:	9305      	str	r3, [sp, #20]
 8015398:	1c93      	adds	r3, r2, #2
 801539a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801539e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80153a2:	32fe      	adds	r2, #254	; 0xfe
 80153a4:	18d1      	adds	r1, r2, r3
 80153a6:	461f      	mov	r7, r3
 80153a8:	f813 0b01 	ldrb.w	r0, [r3], #1
 80153ac:	9100      	str	r1, [sp, #0]
 80153ae:	2830      	cmp	r0, #48	; 0x30
 80153b0:	d0f8      	beq.n	80153a4 <__gethex+0x3c>
 80153b2:	f7ff ffc3 	bl	801533c <__hexdig_fun>
 80153b6:	4604      	mov	r4, r0
 80153b8:	2800      	cmp	r0, #0
 80153ba:	d13a      	bne.n	8015432 <__gethex+0xca>
 80153bc:	9901      	ldr	r1, [sp, #4]
 80153be:	4652      	mov	r2, sl
 80153c0:	4638      	mov	r0, r7
 80153c2:	f001 f9dd 	bl	8016780 <strncmp>
 80153c6:	4605      	mov	r5, r0
 80153c8:	2800      	cmp	r0, #0
 80153ca:	d168      	bne.n	801549e <__gethex+0x136>
 80153cc:	f817 000a 	ldrb.w	r0, [r7, sl]
 80153d0:	eb07 060a 	add.w	r6, r7, sl
 80153d4:	f7ff ffb2 	bl	801533c <__hexdig_fun>
 80153d8:	2800      	cmp	r0, #0
 80153da:	d062      	beq.n	80154a2 <__gethex+0x13a>
 80153dc:	4633      	mov	r3, r6
 80153de:	7818      	ldrb	r0, [r3, #0]
 80153e0:	2830      	cmp	r0, #48	; 0x30
 80153e2:	461f      	mov	r7, r3
 80153e4:	f103 0301 	add.w	r3, r3, #1
 80153e8:	d0f9      	beq.n	80153de <__gethex+0x76>
 80153ea:	f7ff ffa7 	bl	801533c <__hexdig_fun>
 80153ee:	2301      	movs	r3, #1
 80153f0:	fab0 f480 	clz	r4, r0
 80153f4:	0964      	lsrs	r4, r4, #5
 80153f6:	4635      	mov	r5, r6
 80153f8:	9300      	str	r3, [sp, #0]
 80153fa:	463a      	mov	r2, r7
 80153fc:	4616      	mov	r6, r2
 80153fe:	3201      	adds	r2, #1
 8015400:	7830      	ldrb	r0, [r6, #0]
 8015402:	f7ff ff9b 	bl	801533c <__hexdig_fun>
 8015406:	2800      	cmp	r0, #0
 8015408:	d1f8      	bne.n	80153fc <__gethex+0x94>
 801540a:	9901      	ldr	r1, [sp, #4]
 801540c:	4652      	mov	r2, sl
 801540e:	4630      	mov	r0, r6
 8015410:	f001 f9b6 	bl	8016780 <strncmp>
 8015414:	b980      	cbnz	r0, 8015438 <__gethex+0xd0>
 8015416:	b94d      	cbnz	r5, 801542c <__gethex+0xc4>
 8015418:	eb06 050a 	add.w	r5, r6, sl
 801541c:	462a      	mov	r2, r5
 801541e:	4616      	mov	r6, r2
 8015420:	3201      	adds	r2, #1
 8015422:	7830      	ldrb	r0, [r6, #0]
 8015424:	f7ff ff8a 	bl	801533c <__hexdig_fun>
 8015428:	2800      	cmp	r0, #0
 801542a:	d1f8      	bne.n	801541e <__gethex+0xb6>
 801542c:	1bad      	subs	r5, r5, r6
 801542e:	00ad      	lsls	r5, r5, #2
 8015430:	e004      	b.n	801543c <__gethex+0xd4>
 8015432:	2400      	movs	r4, #0
 8015434:	4625      	mov	r5, r4
 8015436:	e7e0      	b.n	80153fa <__gethex+0x92>
 8015438:	2d00      	cmp	r5, #0
 801543a:	d1f7      	bne.n	801542c <__gethex+0xc4>
 801543c:	7833      	ldrb	r3, [r6, #0]
 801543e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015442:	2b50      	cmp	r3, #80	; 0x50
 8015444:	d13b      	bne.n	80154be <__gethex+0x156>
 8015446:	7873      	ldrb	r3, [r6, #1]
 8015448:	2b2b      	cmp	r3, #43	; 0x2b
 801544a:	d02c      	beq.n	80154a6 <__gethex+0x13e>
 801544c:	2b2d      	cmp	r3, #45	; 0x2d
 801544e:	d02e      	beq.n	80154ae <__gethex+0x146>
 8015450:	1c71      	adds	r1, r6, #1
 8015452:	f04f 0900 	mov.w	r9, #0
 8015456:	7808      	ldrb	r0, [r1, #0]
 8015458:	f7ff ff70 	bl	801533c <__hexdig_fun>
 801545c:	1e43      	subs	r3, r0, #1
 801545e:	b2db      	uxtb	r3, r3
 8015460:	2b18      	cmp	r3, #24
 8015462:	d82c      	bhi.n	80154be <__gethex+0x156>
 8015464:	f1a0 0210 	sub.w	r2, r0, #16
 8015468:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801546c:	f7ff ff66 	bl	801533c <__hexdig_fun>
 8015470:	1e43      	subs	r3, r0, #1
 8015472:	b2db      	uxtb	r3, r3
 8015474:	2b18      	cmp	r3, #24
 8015476:	d91d      	bls.n	80154b4 <__gethex+0x14c>
 8015478:	f1b9 0f00 	cmp.w	r9, #0
 801547c:	d000      	beq.n	8015480 <__gethex+0x118>
 801547e:	4252      	negs	r2, r2
 8015480:	4415      	add	r5, r2
 8015482:	f8cb 1000 	str.w	r1, [fp]
 8015486:	b1e4      	cbz	r4, 80154c2 <__gethex+0x15a>
 8015488:	9b00      	ldr	r3, [sp, #0]
 801548a:	2b00      	cmp	r3, #0
 801548c:	bf14      	ite	ne
 801548e:	2700      	movne	r7, #0
 8015490:	2706      	moveq	r7, #6
 8015492:	4638      	mov	r0, r7
 8015494:	b009      	add	sp, #36	; 0x24
 8015496:	ecbd 8b02 	vpop	{d8}
 801549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801549e:	463e      	mov	r6, r7
 80154a0:	4625      	mov	r5, r4
 80154a2:	2401      	movs	r4, #1
 80154a4:	e7ca      	b.n	801543c <__gethex+0xd4>
 80154a6:	f04f 0900 	mov.w	r9, #0
 80154aa:	1cb1      	adds	r1, r6, #2
 80154ac:	e7d3      	b.n	8015456 <__gethex+0xee>
 80154ae:	f04f 0901 	mov.w	r9, #1
 80154b2:	e7fa      	b.n	80154aa <__gethex+0x142>
 80154b4:	230a      	movs	r3, #10
 80154b6:	fb03 0202 	mla	r2, r3, r2, r0
 80154ba:	3a10      	subs	r2, #16
 80154bc:	e7d4      	b.n	8015468 <__gethex+0x100>
 80154be:	4631      	mov	r1, r6
 80154c0:	e7df      	b.n	8015482 <__gethex+0x11a>
 80154c2:	1bf3      	subs	r3, r6, r7
 80154c4:	3b01      	subs	r3, #1
 80154c6:	4621      	mov	r1, r4
 80154c8:	2b07      	cmp	r3, #7
 80154ca:	dc0b      	bgt.n	80154e4 <__gethex+0x17c>
 80154cc:	ee18 0a10 	vmov	r0, s16
 80154d0:	f000 fa8e 	bl	80159f0 <_Balloc>
 80154d4:	4604      	mov	r4, r0
 80154d6:	b940      	cbnz	r0, 80154ea <__gethex+0x182>
 80154d8:	4b5d      	ldr	r3, [pc, #372]	; (8015650 <__gethex+0x2e8>)
 80154da:	4602      	mov	r2, r0
 80154dc:	21de      	movs	r1, #222	; 0xde
 80154de:	485d      	ldr	r0, [pc, #372]	; (8015654 <__gethex+0x2ec>)
 80154e0:	f001 f970 	bl	80167c4 <__assert_func>
 80154e4:	3101      	adds	r1, #1
 80154e6:	105b      	asrs	r3, r3, #1
 80154e8:	e7ee      	b.n	80154c8 <__gethex+0x160>
 80154ea:	f100 0914 	add.w	r9, r0, #20
 80154ee:	f04f 0b00 	mov.w	fp, #0
 80154f2:	f1ca 0301 	rsb	r3, sl, #1
 80154f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80154fa:	f8cd b000 	str.w	fp, [sp]
 80154fe:	9306      	str	r3, [sp, #24]
 8015500:	42b7      	cmp	r7, r6
 8015502:	d340      	bcc.n	8015586 <__gethex+0x21e>
 8015504:	9802      	ldr	r0, [sp, #8]
 8015506:	9b00      	ldr	r3, [sp, #0]
 8015508:	f840 3b04 	str.w	r3, [r0], #4
 801550c:	eba0 0009 	sub.w	r0, r0, r9
 8015510:	1080      	asrs	r0, r0, #2
 8015512:	0146      	lsls	r6, r0, #5
 8015514:	6120      	str	r0, [r4, #16]
 8015516:	4618      	mov	r0, r3
 8015518:	f000 fb5c 	bl	8015bd4 <__hi0bits>
 801551c:	1a30      	subs	r0, r6, r0
 801551e:	f8d8 6000 	ldr.w	r6, [r8]
 8015522:	42b0      	cmp	r0, r6
 8015524:	dd63      	ble.n	80155ee <__gethex+0x286>
 8015526:	1b87      	subs	r7, r0, r6
 8015528:	4639      	mov	r1, r7
 801552a:	4620      	mov	r0, r4
 801552c:	f000 ff00 	bl	8016330 <__any_on>
 8015530:	4682      	mov	sl, r0
 8015532:	b1a8      	cbz	r0, 8015560 <__gethex+0x1f8>
 8015534:	1e7b      	subs	r3, r7, #1
 8015536:	1159      	asrs	r1, r3, #5
 8015538:	f003 021f 	and.w	r2, r3, #31
 801553c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015540:	f04f 0a01 	mov.w	sl, #1
 8015544:	fa0a f202 	lsl.w	r2, sl, r2
 8015548:	420a      	tst	r2, r1
 801554a:	d009      	beq.n	8015560 <__gethex+0x1f8>
 801554c:	4553      	cmp	r3, sl
 801554e:	dd05      	ble.n	801555c <__gethex+0x1f4>
 8015550:	1eb9      	subs	r1, r7, #2
 8015552:	4620      	mov	r0, r4
 8015554:	f000 feec 	bl	8016330 <__any_on>
 8015558:	2800      	cmp	r0, #0
 801555a:	d145      	bne.n	80155e8 <__gethex+0x280>
 801555c:	f04f 0a02 	mov.w	sl, #2
 8015560:	4639      	mov	r1, r7
 8015562:	4620      	mov	r0, r4
 8015564:	f7ff fe98 	bl	8015298 <rshift>
 8015568:	443d      	add	r5, r7
 801556a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801556e:	42ab      	cmp	r3, r5
 8015570:	da4c      	bge.n	801560c <__gethex+0x2a4>
 8015572:	ee18 0a10 	vmov	r0, s16
 8015576:	4621      	mov	r1, r4
 8015578:	f000 fa7a 	bl	8015a70 <_Bfree>
 801557c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801557e:	2300      	movs	r3, #0
 8015580:	6013      	str	r3, [r2, #0]
 8015582:	27a3      	movs	r7, #163	; 0xa3
 8015584:	e785      	b.n	8015492 <__gethex+0x12a>
 8015586:	1e73      	subs	r3, r6, #1
 8015588:	9a05      	ldr	r2, [sp, #20]
 801558a:	9303      	str	r3, [sp, #12]
 801558c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015590:	4293      	cmp	r3, r2
 8015592:	d019      	beq.n	80155c8 <__gethex+0x260>
 8015594:	f1bb 0f20 	cmp.w	fp, #32
 8015598:	d107      	bne.n	80155aa <__gethex+0x242>
 801559a:	9b02      	ldr	r3, [sp, #8]
 801559c:	9a00      	ldr	r2, [sp, #0]
 801559e:	f843 2b04 	str.w	r2, [r3], #4
 80155a2:	9302      	str	r3, [sp, #8]
 80155a4:	2300      	movs	r3, #0
 80155a6:	9300      	str	r3, [sp, #0]
 80155a8:	469b      	mov	fp, r3
 80155aa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80155ae:	f7ff fec5 	bl	801533c <__hexdig_fun>
 80155b2:	9b00      	ldr	r3, [sp, #0]
 80155b4:	f000 000f 	and.w	r0, r0, #15
 80155b8:	fa00 f00b 	lsl.w	r0, r0, fp
 80155bc:	4303      	orrs	r3, r0
 80155be:	9300      	str	r3, [sp, #0]
 80155c0:	f10b 0b04 	add.w	fp, fp, #4
 80155c4:	9b03      	ldr	r3, [sp, #12]
 80155c6:	e00d      	b.n	80155e4 <__gethex+0x27c>
 80155c8:	9b03      	ldr	r3, [sp, #12]
 80155ca:	9a06      	ldr	r2, [sp, #24]
 80155cc:	4413      	add	r3, r2
 80155ce:	42bb      	cmp	r3, r7
 80155d0:	d3e0      	bcc.n	8015594 <__gethex+0x22c>
 80155d2:	4618      	mov	r0, r3
 80155d4:	9901      	ldr	r1, [sp, #4]
 80155d6:	9307      	str	r3, [sp, #28]
 80155d8:	4652      	mov	r2, sl
 80155da:	f001 f8d1 	bl	8016780 <strncmp>
 80155de:	9b07      	ldr	r3, [sp, #28]
 80155e0:	2800      	cmp	r0, #0
 80155e2:	d1d7      	bne.n	8015594 <__gethex+0x22c>
 80155e4:	461e      	mov	r6, r3
 80155e6:	e78b      	b.n	8015500 <__gethex+0x198>
 80155e8:	f04f 0a03 	mov.w	sl, #3
 80155ec:	e7b8      	b.n	8015560 <__gethex+0x1f8>
 80155ee:	da0a      	bge.n	8015606 <__gethex+0x29e>
 80155f0:	1a37      	subs	r7, r6, r0
 80155f2:	4621      	mov	r1, r4
 80155f4:	ee18 0a10 	vmov	r0, s16
 80155f8:	463a      	mov	r2, r7
 80155fa:	f000 fc55 	bl	8015ea8 <__lshift>
 80155fe:	1bed      	subs	r5, r5, r7
 8015600:	4604      	mov	r4, r0
 8015602:	f100 0914 	add.w	r9, r0, #20
 8015606:	f04f 0a00 	mov.w	sl, #0
 801560a:	e7ae      	b.n	801556a <__gethex+0x202>
 801560c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8015610:	42a8      	cmp	r0, r5
 8015612:	dd72      	ble.n	80156fa <__gethex+0x392>
 8015614:	1b45      	subs	r5, r0, r5
 8015616:	42ae      	cmp	r6, r5
 8015618:	dc36      	bgt.n	8015688 <__gethex+0x320>
 801561a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801561e:	2b02      	cmp	r3, #2
 8015620:	d02a      	beq.n	8015678 <__gethex+0x310>
 8015622:	2b03      	cmp	r3, #3
 8015624:	d02c      	beq.n	8015680 <__gethex+0x318>
 8015626:	2b01      	cmp	r3, #1
 8015628:	d11c      	bne.n	8015664 <__gethex+0x2fc>
 801562a:	42ae      	cmp	r6, r5
 801562c:	d11a      	bne.n	8015664 <__gethex+0x2fc>
 801562e:	2e01      	cmp	r6, #1
 8015630:	d112      	bne.n	8015658 <__gethex+0x2f0>
 8015632:	9a04      	ldr	r2, [sp, #16]
 8015634:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015638:	6013      	str	r3, [r2, #0]
 801563a:	2301      	movs	r3, #1
 801563c:	6123      	str	r3, [r4, #16]
 801563e:	f8c9 3000 	str.w	r3, [r9]
 8015642:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015644:	2762      	movs	r7, #98	; 0x62
 8015646:	601c      	str	r4, [r3, #0]
 8015648:	e723      	b.n	8015492 <__gethex+0x12a>
 801564a:	bf00      	nop
 801564c:	080179e8 	.word	0x080179e8
 8015650:	08017970 	.word	0x08017970
 8015654:	08017981 	.word	0x08017981
 8015658:	1e71      	subs	r1, r6, #1
 801565a:	4620      	mov	r0, r4
 801565c:	f000 fe68 	bl	8016330 <__any_on>
 8015660:	2800      	cmp	r0, #0
 8015662:	d1e6      	bne.n	8015632 <__gethex+0x2ca>
 8015664:	ee18 0a10 	vmov	r0, s16
 8015668:	4621      	mov	r1, r4
 801566a:	f000 fa01 	bl	8015a70 <_Bfree>
 801566e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015670:	2300      	movs	r3, #0
 8015672:	6013      	str	r3, [r2, #0]
 8015674:	2750      	movs	r7, #80	; 0x50
 8015676:	e70c      	b.n	8015492 <__gethex+0x12a>
 8015678:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801567a:	2b00      	cmp	r3, #0
 801567c:	d1f2      	bne.n	8015664 <__gethex+0x2fc>
 801567e:	e7d8      	b.n	8015632 <__gethex+0x2ca>
 8015680:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015682:	2b00      	cmp	r3, #0
 8015684:	d1d5      	bne.n	8015632 <__gethex+0x2ca>
 8015686:	e7ed      	b.n	8015664 <__gethex+0x2fc>
 8015688:	1e6f      	subs	r7, r5, #1
 801568a:	f1ba 0f00 	cmp.w	sl, #0
 801568e:	d131      	bne.n	80156f4 <__gethex+0x38c>
 8015690:	b127      	cbz	r7, 801569c <__gethex+0x334>
 8015692:	4639      	mov	r1, r7
 8015694:	4620      	mov	r0, r4
 8015696:	f000 fe4b 	bl	8016330 <__any_on>
 801569a:	4682      	mov	sl, r0
 801569c:	117b      	asrs	r3, r7, #5
 801569e:	2101      	movs	r1, #1
 80156a0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80156a4:	f007 071f 	and.w	r7, r7, #31
 80156a8:	fa01 f707 	lsl.w	r7, r1, r7
 80156ac:	421f      	tst	r7, r3
 80156ae:	4629      	mov	r1, r5
 80156b0:	4620      	mov	r0, r4
 80156b2:	bf18      	it	ne
 80156b4:	f04a 0a02 	orrne.w	sl, sl, #2
 80156b8:	1b76      	subs	r6, r6, r5
 80156ba:	f7ff fded 	bl	8015298 <rshift>
 80156be:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80156c2:	2702      	movs	r7, #2
 80156c4:	f1ba 0f00 	cmp.w	sl, #0
 80156c8:	d048      	beq.n	801575c <__gethex+0x3f4>
 80156ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80156ce:	2b02      	cmp	r3, #2
 80156d0:	d015      	beq.n	80156fe <__gethex+0x396>
 80156d2:	2b03      	cmp	r3, #3
 80156d4:	d017      	beq.n	8015706 <__gethex+0x39e>
 80156d6:	2b01      	cmp	r3, #1
 80156d8:	d109      	bne.n	80156ee <__gethex+0x386>
 80156da:	f01a 0f02 	tst.w	sl, #2
 80156de:	d006      	beq.n	80156ee <__gethex+0x386>
 80156e0:	f8d9 0000 	ldr.w	r0, [r9]
 80156e4:	ea4a 0a00 	orr.w	sl, sl, r0
 80156e8:	f01a 0f01 	tst.w	sl, #1
 80156ec:	d10e      	bne.n	801570c <__gethex+0x3a4>
 80156ee:	f047 0710 	orr.w	r7, r7, #16
 80156f2:	e033      	b.n	801575c <__gethex+0x3f4>
 80156f4:	f04f 0a01 	mov.w	sl, #1
 80156f8:	e7d0      	b.n	801569c <__gethex+0x334>
 80156fa:	2701      	movs	r7, #1
 80156fc:	e7e2      	b.n	80156c4 <__gethex+0x35c>
 80156fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015700:	f1c3 0301 	rsb	r3, r3, #1
 8015704:	9315      	str	r3, [sp, #84]	; 0x54
 8015706:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015708:	2b00      	cmp	r3, #0
 801570a:	d0f0      	beq.n	80156ee <__gethex+0x386>
 801570c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015710:	f104 0314 	add.w	r3, r4, #20
 8015714:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8015718:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801571c:	f04f 0c00 	mov.w	ip, #0
 8015720:	4618      	mov	r0, r3
 8015722:	f853 2b04 	ldr.w	r2, [r3], #4
 8015726:	f1b2 3fff 	cmp.w	r2, #4294967295
 801572a:	d01c      	beq.n	8015766 <__gethex+0x3fe>
 801572c:	3201      	adds	r2, #1
 801572e:	6002      	str	r2, [r0, #0]
 8015730:	2f02      	cmp	r7, #2
 8015732:	f104 0314 	add.w	r3, r4, #20
 8015736:	d13f      	bne.n	80157b8 <__gethex+0x450>
 8015738:	f8d8 2000 	ldr.w	r2, [r8]
 801573c:	3a01      	subs	r2, #1
 801573e:	42b2      	cmp	r2, r6
 8015740:	d10a      	bne.n	8015758 <__gethex+0x3f0>
 8015742:	1171      	asrs	r1, r6, #5
 8015744:	2201      	movs	r2, #1
 8015746:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801574a:	f006 061f 	and.w	r6, r6, #31
 801574e:	fa02 f606 	lsl.w	r6, r2, r6
 8015752:	421e      	tst	r6, r3
 8015754:	bf18      	it	ne
 8015756:	4617      	movne	r7, r2
 8015758:	f047 0720 	orr.w	r7, r7, #32
 801575c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801575e:	601c      	str	r4, [r3, #0]
 8015760:	9b04      	ldr	r3, [sp, #16]
 8015762:	601d      	str	r5, [r3, #0]
 8015764:	e695      	b.n	8015492 <__gethex+0x12a>
 8015766:	4299      	cmp	r1, r3
 8015768:	f843 cc04 	str.w	ip, [r3, #-4]
 801576c:	d8d8      	bhi.n	8015720 <__gethex+0x3b8>
 801576e:	68a3      	ldr	r3, [r4, #8]
 8015770:	459b      	cmp	fp, r3
 8015772:	db19      	blt.n	80157a8 <__gethex+0x440>
 8015774:	6861      	ldr	r1, [r4, #4]
 8015776:	ee18 0a10 	vmov	r0, s16
 801577a:	3101      	adds	r1, #1
 801577c:	f000 f938 	bl	80159f0 <_Balloc>
 8015780:	4681      	mov	r9, r0
 8015782:	b918      	cbnz	r0, 801578c <__gethex+0x424>
 8015784:	4b1a      	ldr	r3, [pc, #104]	; (80157f0 <__gethex+0x488>)
 8015786:	4602      	mov	r2, r0
 8015788:	2184      	movs	r1, #132	; 0x84
 801578a:	e6a8      	b.n	80154de <__gethex+0x176>
 801578c:	6922      	ldr	r2, [r4, #16]
 801578e:	3202      	adds	r2, #2
 8015790:	f104 010c 	add.w	r1, r4, #12
 8015794:	0092      	lsls	r2, r2, #2
 8015796:	300c      	adds	r0, #12
 8015798:	f7fc ff23 	bl	80125e2 <memcpy>
 801579c:	4621      	mov	r1, r4
 801579e:	ee18 0a10 	vmov	r0, s16
 80157a2:	f000 f965 	bl	8015a70 <_Bfree>
 80157a6:	464c      	mov	r4, r9
 80157a8:	6923      	ldr	r3, [r4, #16]
 80157aa:	1c5a      	adds	r2, r3, #1
 80157ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80157b0:	6122      	str	r2, [r4, #16]
 80157b2:	2201      	movs	r2, #1
 80157b4:	615a      	str	r2, [r3, #20]
 80157b6:	e7bb      	b.n	8015730 <__gethex+0x3c8>
 80157b8:	6922      	ldr	r2, [r4, #16]
 80157ba:	455a      	cmp	r2, fp
 80157bc:	dd0b      	ble.n	80157d6 <__gethex+0x46e>
 80157be:	2101      	movs	r1, #1
 80157c0:	4620      	mov	r0, r4
 80157c2:	f7ff fd69 	bl	8015298 <rshift>
 80157c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80157ca:	3501      	adds	r5, #1
 80157cc:	42ab      	cmp	r3, r5
 80157ce:	f6ff aed0 	blt.w	8015572 <__gethex+0x20a>
 80157d2:	2701      	movs	r7, #1
 80157d4:	e7c0      	b.n	8015758 <__gethex+0x3f0>
 80157d6:	f016 061f 	ands.w	r6, r6, #31
 80157da:	d0fa      	beq.n	80157d2 <__gethex+0x46a>
 80157dc:	4453      	add	r3, sl
 80157de:	f1c6 0620 	rsb	r6, r6, #32
 80157e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80157e6:	f000 f9f5 	bl	8015bd4 <__hi0bits>
 80157ea:	42b0      	cmp	r0, r6
 80157ec:	dbe7      	blt.n	80157be <__gethex+0x456>
 80157ee:	e7f0      	b.n	80157d2 <__gethex+0x46a>
 80157f0:	08017970 	.word	0x08017970

080157f4 <L_shift>:
 80157f4:	f1c2 0208 	rsb	r2, r2, #8
 80157f8:	0092      	lsls	r2, r2, #2
 80157fa:	b570      	push	{r4, r5, r6, lr}
 80157fc:	f1c2 0620 	rsb	r6, r2, #32
 8015800:	6843      	ldr	r3, [r0, #4]
 8015802:	6804      	ldr	r4, [r0, #0]
 8015804:	fa03 f506 	lsl.w	r5, r3, r6
 8015808:	432c      	orrs	r4, r5
 801580a:	40d3      	lsrs	r3, r2
 801580c:	6004      	str	r4, [r0, #0]
 801580e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015812:	4288      	cmp	r0, r1
 8015814:	d3f4      	bcc.n	8015800 <L_shift+0xc>
 8015816:	bd70      	pop	{r4, r5, r6, pc}

08015818 <__match>:
 8015818:	b530      	push	{r4, r5, lr}
 801581a:	6803      	ldr	r3, [r0, #0]
 801581c:	3301      	adds	r3, #1
 801581e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015822:	b914      	cbnz	r4, 801582a <__match+0x12>
 8015824:	6003      	str	r3, [r0, #0]
 8015826:	2001      	movs	r0, #1
 8015828:	bd30      	pop	{r4, r5, pc}
 801582a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801582e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8015832:	2d19      	cmp	r5, #25
 8015834:	bf98      	it	ls
 8015836:	3220      	addls	r2, #32
 8015838:	42a2      	cmp	r2, r4
 801583a:	d0f0      	beq.n	801581e <__match+0x6>
 801583c:	2000      	movs	r0, #0
 801583e:	e7f3      	b.n	8015828 <__match+0x10>

08015840 <__hexnan>:
 8015840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015844:	680b      	ldr	r3, [r1, #0]
 8015846:	115e      	asrs	r6, r3, #5
 8015848:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801584c:	f013 031f 	ands.w	r3, r3, #31
 8015850:	b087      	sub	sp, #28
 8015852:	bf18      	it	ne
 8015854:	3604      	addne	r6, #4
 8015856:	2500      	movs	r5, #0
 8015858:	1f37      	subs	r7, r6, #4
 801585a:	4690      	mov	r8, r2
 801585c:	6802      	ldr	r2, [r0, #0]
 801585e:	9301      	str	r3, [sp, #4]
 8015860:	4682      	mov	sl, r0
 8015862:	f846 5c04 	str.w	r5, [r6, #-4]
 8015866:	46b9      	mov	r9, r7
 8015868:	463c      	mov	r4, r7
 801586a:	9502      	str	r5, [sp, #8]
 801586c:	46ab      	mov	fp, r5
 801586e:	7851      	ldrb	r1, [r2, #1]
 8015870:	1c53      	adds	r3, r2, #1
 8015872:	9303      	str	r3, [sp, #12]
 8015874:	b341      	cbz	r1, 80158c8 <__hexnan+0x88>
 8015876:	4608      	mov	r0, r1
 8015878:	9205      	str	r2, [sp, #20]
 801587a:	9104      	str	r1, [sp, #16]
 801587c:	f7ff fd5e 	bl	801533c <__hexdig_fun>
 8015880:	2800      	cmp	r0, #0
 8015882:	d14f      	bne.n	8015924 <__hexnan+0xe4>
 8015884:	9904      	ldr	r1, [sp, #16]
 8015886:	9a05      	ldr	r2, [sp, #20]
 8015888:	2920      	cmp	r1, #32
 801588a:	d818      	bhi.n	80158be <__hexnan+0x7e>
 801588c:	9b02      	ldr	r3, [sp, #8]
 801588e:	459b      	cmp	fp, r3
 8015890:	dd13      	ble.n	80158ba <__hexnan+0x7a>
 8015892:	454c      	cmp	r4, r9
 8015894:	d206      	bcs.n	80158a4 <__hexnan+0x64>
 8015896:	2d07      	cmp	r5, #7
 8015898:	dc04      	bgt.n	80158a4 <__hexnan+0x64>
 801589a:	462a      	mov	r2, r5
 801589c:	4649      	mov	r1, r9
 801589e:	4620      	mov	r0, r4
 80158a0:	f7ff ffa8 	bl	80157f4 <L_shift>
 80158a4:	4544      	cmp	r4, r8
 80158a6:	d950      	bls.n	801594a <__hexnan+0x10a>
 80158a8:	2300      	movs	r3, #0
 80158aa:	f1a4 0904 	sub.w	r9, r4, #4
 80158ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80158b2:	f8cd b008 	str.w	fp, [sp, #8]
 80158b6:	464c      	mov	r4, r9
 80158b8:	461d      	mov	r5, r3
 80158ba:	9a03      	ldr	r2, [sp, #12]
 80158bc:	e7d7      	b.n	801586e <__hexnan+0x2e>
 80158be:	2929      	cmp	r1, #41	; 0x29
 80158c0:	d156      	bne.n	8015970 <__hexnan+0x130>
 80158c2:	3202      	adds	r2, #2
 80158c4:	f8ca 2000 	str.w	r2, [sl]
 80158c8:	f1bb 0f00 	cmp.w	fp, #0
 80158cc:	d050      	beq.n	8015970 <__hexnan+0x130>
 80158ce:	454c      	cmp	r4, r9
 80158d0:	d206      	bcs.n	80158e0 <__hexnan+0xa0>
 80158d2:	2d07      	cmp	r5, #7
 80158d4:	dc04      	bgt.n	80158e0 <__hexnan+0xa0>
 80158d6:	462a      	mov	r2, r5
 80158d8:	4649      	mov	r1, r9
 80158da:	4620      	mov	r0, r4
 80158dc:	f7ff ff8a 	bl	80157f4 <L_shift>
 80158e0:	4544      	cmp	r4, r8
 80158e2:	d934      	bls.n	801594e <__hexnan+0x10e>
 80158e4:	f1a8 0204 	sub.w	r2, r8, #4
 80158e8:	4623      	mov	r3, r4
 80158ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80158ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80158f2:	429f      	cmp	r7, r3
 80158f4:	d2f9      	bcs.n	80158ea <__hexnan+0xaa>
 80158f6:	1b3b      	subs	r3, r7, r4
 80158f8:	f023 0303 	bic.w	r3, r3, #3
 80158fc:	3304      	adds	r3, #4
 80158fe:	3401      	adds	r4, #1
 8015900:	3e03      	subs	r6, #3
 8015902:	42b4      	cmp	r4, r6
 8015904:	bf88      	it	hi
 8015906:	2304      	movhi	r3, #4
 8015908:	4443      	add	r3, r8
 801590a:	2200      	movs	r2, #0
 801590c:	f843 2b04 	str.w	r2, [r3], #4
 8015910:	429f      	cmp	r7, r3
 8015912:	d2fb      	bcs.n	801590c <__hexnan+0xcc>
 8015914:	683b      	ldr	r3, [r7, #0]
 8015916:	b91b      	cbnz	r3, 8015920 <__hexnan+0xe0>
 8015918:	4547      	cmp	r7, r8
 801591a:	d127      	bne.n	801596c <__hexnan+0x12c>
 801591c:	2301      	movs	r3, #1
 801591e:	603b      	str	r3, [r7, #0]
 8015920:	2005      	movs	r0, #5
 8015922:	e026      	b.n	8015972 <__hexnan+0x132>
 8015924:	3501      	adds	r5, #1
 8015926:	2d08      	cmp	r5, #8
 8015928:	f10b 0b01 	add.w	fp, fp, #1
 801592c:	dd06      	ble.n	801593c <__hexnan+0xfc>
 801592e:	4544      	cmp	r4, r8
 8015930:	d9c3      	bls.n	80158ba <__hexnan+0x7a>
 8015932:	2300      	movs	r3, #0
 8015934:	f844 3c04 	str.w	r3, [r4, #-4]
 8015938:	2501      	movs	r5, #1
 801593a:	3c04      	subs	r4, #4
 801593c:	6822      	ldr	r2, [r4, #0]
 801593e:	f000 000f 	and.w	r0, r0, #15
 8015942:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8015946:	6022      	str	r2, [r4, #0]
 8015948:	e7b7      	b.n	80158ba <__hexnan+0x7a>
 801594a:	2508      	movs	r5, #8
 801594c:	e7b5      	b.n	80158ba <__hexnan+0x7a>
 801594e:	9b01      	ldr	r3, [sp, #4]
 8015950:	2b00      	cmp	r3, #0
 8015952:	d0df      	beq.n	8015914 <__hexnan+0xd4>
 8015954:	f04f 32ff 	mov.w	r2, #4294967295
 8015958:	f1c3 0320 	rsb	r3, r3, #32
 801595c:	fa22 f303 	lsr.w	r3, r2, r3
 8015960:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015964:	401a      	ands	r2, r3
 8015966:	f846 2c04 	str.w	r2, [r6, #-4]
 801596a:	e7d3      	b.n	8015914 <__hexnan+0xd4>
 801596c:	3f04      	subs	r7, #4
 801596e:	e7d1      	b.n	8015914 <__hexnan+0xd4>
 8015970:	2004      	movs	r0, #4
 8015972:	b007      	add	sp, #28
 8015974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015978 <_localeconv_r>:
 8015978:	4800      	ldr	r0, [pc, #0]	; (801597c <_localeconv_r+0x4>)
 801597a:	4770      	bx	lr
 801597c:	2000016c 	.word	0x2000016c

08015980 <_lseek_r>:
 8015980:	b538      	push	{r3, r4, r5, lr}
 8015982:	4d07      	ldr	r5, [pc, #28]	; (80159a0 <_lseek_r+0x20>)
 8015984:	4604      	mov	r4, r0
 8015986:	4608      	mov	r0, r1
 8015988:	4611      	mov	r1, r2
 801598a:	2200      	movs	r2, #0
 801598c:	602a      	str	r2, [r5, #0]
 801598e:	461a      	mov	r2, r3
 8015990:	f7ef fae0 	bl	8004f54 <_lseek>
 8015994:	1c43      	adds	r3, r0, #1
 8015996:	d102      	bne.n	801599e <_lseek_r+0x1e>
 8015998:	682b      	ldr	r3, [r5, #0]
 801599a:	b103      	cbz	r3, 801599e <_lseek_r+0x1e>
 801599c:	6023      	str	r3, [r4, #0]
 801599e:	bd38      	pop	{r3, r4, r5, pc}
 80159a0:	20014b64 	.word	0x20014b64

080159a4 <malloc>:
 80159a4:	4b02      	ldr	r3, [pc, #8]	; (80159b0 <malloc+0xc>)
 80159a6:	4601      	mov	r1, r0
 80159a8:	6818      	ldr	r0, [r3, #0]
 80159aa:	f7fc be51 	b.w	8012650 <_malloc_r>
 80159ae:	bf00      	nop
 80159b0:	20000014 	.word	0x20000014

080159b4 <__ascii_mbtowc>:
 80159b4:	b082      	sub	sp, #8
 80159b6:	b901      	cbnz	r1, 80159ba <__ascii_mbtowc+0x6>
 80159b8:	a901      	add	r1, sp, #4
 80159ba:	b142      	cbz	r2, 80159ce <__ascii_mbtowc+0x1a>
 80159bc:	b14b      	cbz	r3, 80159d2 <__ascii_mbtowc+0x1e>
 80159be:	7813      	ldrb	r3, [r2, #0]
 80159c0:	600b      	str	r3, [r1, #0]
 80159c2:	7812      	ldrb	r2, [r2, #0]
 80159c4:	1e10      	subs	r0, r2, #0
 80159c6:	bf18      	it	ne
 80159c8:	2001      	movne	r0, #1
 80159ca:	b002      	add	sp, #8
 80159cc:	4770      	bx	lr
 80159ce:	4610      	mov	r0, r2
 80159d0:	e7fb      	b.n	80159ca <__ascii_mbtowc+0x16>
 80159d2:	f06f 0001 	mvn.w	r0, #1
 80159d6:	e7f8      	b.n	80159ca <__ascii_mbtowc+0x16>

080159d8 <__malloc_lock>:
 80159d8:	4801      	ldr	r0, [pc, #4]	; (80159e0 <__malloc_lock+0x8>)
 80159da:	f7fc be00 	b.w	80125de <__retarget_lock_acquire_recursive>
 80159de:	bf00      	nop
 80159e0:	20014b58 	.word	0x20014b58

080159e4 <__malloc_unlock>:
 80159e4:	4801      	ldr	r0, [pc, #4]	; (80159ec <__malloc_unlock+0x8>)
 80159e6:	f7fc bdfb 	b.w	80125e0 <__retarget_lock_release_recursive>
 80159ea:	bf00      	nop
 80159ec:	20014b58 	.word	0x20014b58

080159f0 <_Balloc>:
 80159f0:	b570      	push	{r4, r5, r6, lr}
 80159f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80159f4:	4604      	mov	r4, r0
 80159f6:	460d      	mov	r5, r1
 80159f8:	b976      	cbnz	r6, 8015a18 <_Balloc+0x28>
 80159fa:	2010      	movs	r0, #16
 80159fc:	f7ff ffd2 	bl	80159a4 <malloc>
 8015a00:	4602      	mov	r2, r0
 8015a02:	6260      	str	r0, [r4, #36]	; 0x24
 8015a04:	b920      	cbnz	r0, 8015a10 <_Balloc+0x20>
 8015a06:	4b18      	ldr	r3, [pc, #96]	; (8015a68 <_Balloc+0x78>)
 8015a08:	4818      	ldr	r0, [pc, #96]	; (8015a6c <_Balloc+0x7c>)
 8015a0a:	2166      	movs	r1, #102	; 0x66
 8015a0c:	f000 feda 	bl	80167c4 <__assert_func>
 8015a10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015a14:	6006      	str	r6, [r0, #0]
 8015a16:	60c6      	str	r6, [r0, #12]
 8015a18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015a1a:	68f3      	ldr	r3, [r6, #12]
 8015a1c:	b183      	cbz	r3, 8015a40 <_Balloc+0x50>
 8015a1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015a20:	68db      	ldr	r3, [r3, #12]
 8015a22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015a26:	b9b8      	cbnz	r0, 8015a58 <_Balloc+0x68>
 8015a28:	2101      	movs	r1, #1
 8015a2a:	fa01 f605 	lsl.w	r6, r1, r5
 8015a2e:	1d72      	adds	r2, r6, #5
 8015a30:	0092      	lsls	r2, r2, #2
 8015a32:	4620      	mov	r0, r4
 8015a34:	f000 fc9d 	bl	8016372 <_calloc_r>
 8015a38:	b160      	cbz	r0, 8015a54 <_Balloc+0x64>
 8015a3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015a3e:	e00e      	b.n	8015a5e <_Balloc+0x6e>
 8015a40:	2221      	movs	r2, #33	; 0x21
 8015a42:	2104      	movs	r1, #4
 8015a44:	4620      	mov	r0, r4
 8015a46:	f000 fc94 	bl	8016372 <_calloc_r>
 8015a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015a4c:	60f0      	str	r0, [r6, #12]
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d1e4      	bne.n	8015a1e <_Balloc+0x2e>
 8015a54:	2000      	movs	r0, #0
 8015a56:	bd70      	pop	{r4, r5, r6, pc}
 8015a58:	6802      	ldr	r2, [r0, #0]
 8015a5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015a5e:	2300      	movs	r3, #0
 8015a60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015a64:	e7f7      	b.n	8015a56 <_Balloc+0x66>
 8015a66:	bf00      	nop
 8015a68:	080178fe 	.word	0x080178fe
 8015a6c:	080179fc 	.word	0x080179fc

08015a70 <_Bfree>:
 8015a70:	b570      	push	{r4, r5, r6, lr}
 8015a72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015a74:	4605      	mov	r5, r0
 8015a76:	460c      	mov	r4, r1
 8015a78:	b976      	cbnz	r6, 8015a98 <_Bfree+0x28>
 8015a7a:	2010      	movs	r0, #16
 8015a7c:	f7ff ff92 	bl	80159a4 <malloc>
 8015a80:	4602      	mov	r2, r0
 8015a82:	6268      	str	r0, [r5, #36]	; 0x24
 8015a84:	b920      	cbnz	r0, 8015a90 <_Bfree+0x20>
 8015a86:	4b09      	ldr	r3, [pc, #36]	; (8015aac <_Bfree+0x3c>)
 8015a88:	4809      	ldr	r0, [pc, #36]	; (8015ab0 <_Bfree+0x40>)
 8015a8a:	218a      	movs	r1, #138	; 0x8a
 8015a8c:	f000 fe9a 	bl	80167c4 <__assert_func>
 8015a90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015a94:	6006      	str	r6, [r0, #0]
 8015a96:	60c6      	str	r6, [r0, #12]
 8015a98:	b13c      	cbz	r4, 8015aaa <_Bfree+0x3a>
 8015a9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015a9c:	6862      	ldr	r2, [r4, #4]
 8015a9e:	68db      	ldr	r3, [r3, #12]
 8015aa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015aa4:	6021      	str	r1, [r4, #0]
 8015aa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015aaa:	bd70      	pop	{r4, r5, r6, pc}
 8015aac:	080178fe 	.word	0x080178fe
 8015ab0:	080179fc 	.word	0x080179fc

08015ab4 <__multadd>:
 8015ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ab8:	690d      	ldr	r5, [r1, #16]
 8015aba:	4607      	mov	r7, r0
 8015abc:	460c      	mov	r4, r1
 8015abe:	461e      	mov	r6, r3
 8015ac0:	f101 0c14 	add.w	ip, r1, #20
 8015ac4:	2000      	movs	r0, #0
 8015ac6:	f8dc 3000 	ldr.w	r3, [ip]
 8015aca:	b299      	uxth	r1, r3
 8015acc:	fb02 6101 	mla	r1, r2, r1, r6
 8015ad0:	0c1e      	lsrs	r6, r3, #16
 8015ad2:	0c0b      	lsrs	r3, r1, #16
 8015ad4:	fb02 3306 	mla	r3, r2, r6, r3
 8015ad8:	b289      	uxth	r1, r1
 8015ada:	3001      	adds	r0, #1
 8015adc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015ae0:	4285      	cmp	r5, r0
 8015ae2:	f84c 1b04 	str.w	r1, [ip], #4
 8015ae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015aea:	dcec      	bgt.n	8015ac6 <__multadd+0x12>
 8015aec:	b30e      	cbz	r6, 8015b32 <__multadd+0x7e>
 8015aee:	68a3      	ldr	r3, [r4, #8]
 8015af0:	42ab      	cmp	r3, r5
 8015af2:	dc19      	bgt.n	8015b28 <__multadd+0x74>
 8015af4:	6861      	ldr	r1, [r4, #4]
 8015af6:	4638      	mov	r0, r7
 8015af8:	3101      	adds	r1, #1
 8015afa:	f7ff ff79 	bl	80159f0 <_Balloc>
 8015afe:	4680      	mov	r8, r0
 8015b00:	b928      	cbnz	r0, 8015b0e <__multadd+0x5a>
 8015b02:	4602      	mov	r2, r0
 8015b04:	4b0c      	ldr	r3, [pc, #48]	; (8015b38 <__multadd+0x84>)
 8015b06:	480d      	ldr	r0, [pc, #52]	; (8015b3c <__multadd+0x88>)
 8015b08:	21b5      	movs	r1, #181	; 0xb5
 8015b0a:	f000 fe5b 	bl	80167c4 <__assert_func>
 8015b0e:	6922      	ldr	r2, [r4, #16]
 8015b10:	3202      	adds	r2, #2
 8015b12:	f104 010c 	add.w	r1, r4, #12
 8015b16:	0092      	lsls	r2, r2, #2
 8015b18:	300c      	adds	r0, #12
 8015b1a:	f7fc fd62 	bl	80125e2 <memcpy>
 8015b1e:	4621      	mov	r1, r4
 8015b20:	4638      	mov	r0, r7
 8015b22:	f7ff ffa5 	bl	8015a70 <_Bfree>
 8015b26:	4644      	mov	r4, r8
 8015b28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015b2c:	3501      	adds	r5, #1
 8015b2e:	615e      	str	r6, [r3, #20]
 8015b30:	6125      	str	r5, [r4, #16]
 8015b32:	4620      	mov	r0, r4
 8015b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b38:	08017970 	.word	0x08017970
 8015b3c:	080179fc 	.word	0x080179fc

08015b40 <__s2b>:
 8015b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015b44:	460c      	mov	r4, r1
 8015b46:	4615      	mov	r5, r2
 8015b48:	461f      	mov	r7, r3
 8015b4a:	2209      	movs	r2, #9
 8015b4c:	3308      	adds	r3, #8
 8015b4e:	4606      	mov	r6, r0
 8015b50:	fb93 f3f2 	sdiv	r3, r3, r2
 8015b54:	2100      	movs	r1, #0
 8015b56:	2201      	movs	r2, #1
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	db09      	blt.n	8015b70 <__s2b+0x30>
 8015b5c:	4630      	mov	r0, r6
 8015b5e:	f7ff ff47 	bl	80159f0 <_Balloc>
 8015b62:	b940      	cbnz	r0, 8015b76 <__s2b+0x36>
 8015b64:	4602      	mov	r2, r0
 8015b66:	4b19      	ldr	r3, [pc, #100]	; (8015bcc <__s2b+0x8c>)
 8015b68:	4819      	ldr	r0, [pc, #100]	; (8015bd0 <__s2b+0x90>)
 8015b6a:	21ce      	movs	r1, #206	; 0xce
 8015b6c:	f000 fe2a 	bl	80167c4 <__assert_func>
 8015b70:	0052      	lsls	r2, r2, #1
 8015b72:	3101      	adds	r1, #1
 8015b74:	e7f0      	b.n	8015b58 <__s2b+0x18>
 8015b76:	9b08      	ldr	r3, [sp, #32]
 8015b78:	6143      	str	r3, [r0, #20]
 8015b7a:	2d09      	cmp	r5, #9
 8015b7c:	f04f 0301 	mov.w	r3, #1
 8015b80:	6103      	str	r3, [r0, #16]
 8015b82:	dd16      	ble.n	8015bb2 <__s2b+0x72>
 8015b84:	f104 0909 	add.w	r9, r4, #9
 8015b88:	46c8      	mov	r8, r9
 8015b8a:	442c      	add	r4, r5
 8015b8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015b90:	4601      	mov	r1, r0
 8015b92:	3b30      	subs	r3, #48	; 0x30
 8015b94:	220a      	movs	r2, #10
 8015b96:	4630      	mov	r0, r6
 8015b98:	f7ff ff8c 	bl	8015ab4 <__multadd>
 8015b9c:	45a0      	cmp	r8, r4
 8015b9e:	d1f5      	bne.n	8015b8c <__s2b+0x4c>
 8015ba0:	f1a5 0408 	sub.w	r4, r5, #8
 8015ba4:	444c      	add	r4, r9
 8015ba6:	1b2d      	subs	r5, r5, r4
 8015ba8:	1963      	adds	r3, r4, r5
 8015baa:	42bb      	cmp	r3, r7
 8015bac:	db04      	blt.n	8015bb8 <__s2b+0x78>
 8015bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015bb2:	340a      	adds	r4, #10
 8015bb4:	2509      	movs	r5, #9
 8015bb6:	e7f6      	b.n	8015ba6 <__s2b+0x66>
 8015bb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015bbc:	4601      	mov	r1, r0
 8015bbe:	3b30      	subs	r3, #48	; 0x30
 8015bc0:	220a      	movs	r2, #10
 8015bc2:	4630      	mov	r0, r6
 8015bc4:	f7ff ff76 	bl	8015ab4 <__multadd>
 8015bc8:	e7ee      	b.n	8015ba8 <__s2b+0x68>
 8015bca:	bf00      	nop
 8015bcc:	08017970 	.word	0x08017970
 8015bd0:	080179fc 	.word	0x080179fc

08015bd4 <__hi0bits>:
 8015bd4:	0c03      	lsrs	r3, r0, #16
 8015bd6:	041b      	lsls	r3, r3, #16
 8015bd8:	b9d3      	cbnz	r3, 8015c10 <__hi0bits+0x3c>
 8015bda:	0400      	lsls	r0, r0, #16
 8015bdc:	2310      	movs	r3, #16
 8015bde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015be2:	bf04      	itt	eq
 8015be4:	0200      	lsleq	r0, r0, #8
 8015be6:	3308      	addeq	r3, #8
 8015be8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015bec:	bf04      	itt	eq
 8015bee:	0100      	lsleq	r0, r0, #4
 8015bf0:	3304      	addeq	r3, #4
 8015bf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015bf6:	bf04      	itt	eq
 8015bf8:	0080      	lsleq	r0, r0, #2
 8015bfa:	3302      	addeq	r3, #2
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	db05      	blt.n	8015c0c <__hi0bits+0x38>
 8015c00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015c04:	f103 0301 	add.w	r3, r3, #1
 8015c08:	bf08      	it	eq
 8015c0a:	2320      	moveq	r3, #32
 8015c0c:	4618      	mov	r0, r3
 8015c0e:	4770      	bx	lr
 8015c10:	2300      	movs	r3, #0
 8015c12:	e7e4      	b.n	8015bde <__hi0bits+0xa>

08015c14 <__lo0bits>:
 8015c14:	6803      	ldr	r3, [r0, #0]
 8015c16:	f013 0207 	ands.w	r2, r3, #7
 8015c1a:	4601      	mov	r1, r0
 8015c1c:	d00b      	beq.n	8015c36 <__lo0bits+0x22>
 8015c1e:	07da      	lsls	r2, r3, #31
 8015c20:	d423      	bmi.n	8015c6a <__lo0bits+0x56>
 8015c22:	0798      	lsls	r0, r3, #30
 8015c24:	bf49      	itett	mi
 8015c26:	085b      	lsrmi	r3, r3, #1
 8015c28:	089b      	lsrpl	r3, r3, #2
 8015c2a:	2001      	movmi	r0, #1
 8015c2c:	600b      	strmi	r3, [r1, #0]
 8015c2e:	bf5c      	itt	pl
 8015c30:	600b      	strpl	r3, [r1, #0]
 8015c32:	2002      	movpl	r0, #2
 8015c34:	4770      	bx	lr
 8015c36:	b298      	uxth	r0, r3
 8015c38:	b9a8      	cbnz	r0, 8015c66 <__lo0bits+0x52>
 8015c3a:	0c1b      	lsrs	r3, r3, #16
 8015c3c:	2010      	movs	r0, #16
 8015c3e:	b2da      	uxtb	r2, r3
 8015c40:	b90a      	cbnz	r2, 8015c46 <__lo0bits+0x32>
 8015c42:	3008      	adds	r0, #8
 8015c44:	0a1b      	lsrs	r3, r3, #8
 8015c46:	071a      	lsls	r2, r3, #28
 8015c48:	bf04      	itt	eq
 8015c4a:	091b      	lsreq	r3, r3, #4
 8015c4c:	3004      	addeq	r0, #4
 8015c4e:	079a      	lsls	r2, r3, #30
 8015c50:	bf04      	itt	eq
 8015c52:	089b      	lsreq	r3, r3, #2
 8015c54:	3002      	addeq	r0, #2
 8015c56:	07da      	lsls	r2, r3, #31
 8015c58:	d403      	bmi.n	8015c62 <__lo0bits+0x4e>
 8015c5a:	085b      	lsrs	r3, r3, #1
 8015c5c:	f100 0001 	add.w	r0, r0, #1
 8015c60:	d005      	beq.n	8015c6e <__lo0bits+0x5a>
 8015c62:	600b      	str	r3, [r1, #0]
 8015c64:	4770      	bx	lr
 8015c66:	4610      	mov	r0, r2
 8015c68:	e7e9      	b.n	8015c3e <__lo0bits+0x2a>
 8015c6a:	2000      	movs	r0, #0
 8015c6c:	4770      	bx	lr
 8015c6e:	2020      	movs	r0, #32
 8015c70:	4770      	bx	lr
	...

08015c74 <__i2b>:
 8015c74:	b510      	push	{r4, lr}
 8015c76:	460c      	mov	r4, r1
 8015c78:	2101      	movs	r1, #1
 8015c7a:	f7ff feb9 	bl	80159f0 <_Balloc>
 8015c7e:	4602      	mov	r2, r0
 8015c80:	b928      	cbnz	r0, 8015c8e <__i2b+0x1a>
 8015c82:	4b05      	ldr	r3, [pc, #20]	; (8015c98 <__i2b+0x24>)
 8015c84:	4805      	ldr	r0, [pc, #20]	; (8015c9c <__i2b+0x28>)
 8015c86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015c8a:	f000 fd9b 	bl	80167c4 <__assert_func>
 8015c8e:	2301      	movs	r3, #1
 8015c90:	6144      	str	r4, [r0, #20]
 8015c92:	6103      	str	r3, [r0, #16]
 8015c94:	bd10      	pop	{r4, pc}
 8015c96:	bf00      	nop
 8015c98:	08017970 	.word	0x08017970
 8015c9c:	080179fc 	.word	0x080179fc

08015ca0 <__multiply>:
 8015ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ca4:	4691      	mov	r9, r2
 8015ca6:	690a      	ldr	r2, [r1, #16]
 8015ca8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015cac:	429a      	cmp	r2, r3
 8015cae:	bfb8      	it	lt
 8015cb0:	460b      	movlt	r3, r1
 8015cb2:	460c      	mov	r4, r1
 8015cb4:	bfbc      	itt	lt
 8015cb6:	464c      	movlt	r4, r9
 8015cb8:	4699      	movlt	r9, r3
 8015cba:	6927      	ldr	r7, [r4, #16]
 8015cbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015cc0:	68a3      	ldr	r3, [r4, #8]
 8015cc2:	6861      	ldr	r1, [r4, #4]
 8015cc4:	eb07 060a 	add.w	r6, r7, sl
 8015cc8:	42b3      	cmp	r3, r6
 8015cca:	b085      	sub	sp, #20
 8015ccc:	bfb8      	it	lt
 8015cce:	3101      	addlt	r1, #1
 8015cd0:	f7ff fe8e 	bl	80159f0 <_Balloc>
 8015cd4:	b930      	cbnz	r0, 8015ce4 <__multiply+0x44>
 8015cd6:	4602      	mov	r2, r0
 8015cd8:	4b44      	ldr	r3, [pc, #272]	; (8015dec <__multiply+0x14c>)
 8015cda:	4845      	ldr	r0, [pc, #276]	; (8015df0 <__multiply+0x150>)
 8015cdc:	f240 115d 	movw	r1, #349	; 0x15d
 8015ce0:	f000 fd70 	bl	80167c4 <__assert_func>
 8015ce4:	f100 0514 	add.w	r5, r0, #20
 8015ce8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015cec:	462b      	mov	r3, r5
 8015cee:	2200      	movs	r2, #0
 8015cf0:	4543      	cmp	r3, r8
 8015cf2:	d321      	bcc.n	8015d38 <__multiply+0x98>
 8015cf4:	f104 0314 	add.w	r3, r4, #20
 8015cf8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015cfc:	f109 0314 	add.w	r3, r9, #20
 8015d00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015d04:	9202      	str	r2, [sp, #8]
 8015d06:	1b3a      	subs	r2, r7, r4
 8015d08:	3a15      	subs	r2, #21
 8015d0a:	f022 0203 	bic.w	r2, r2, #3
 8015d0e:	3204      	adds	r2, #4
 8015d10:	f104 0115 	add.w	r1, r4, #21
 8015d14:	428f      	cmp	r7, r1
 8015d16:	bf38      	it	cc
 8015d18:	2204      	movcc	r2, #4
 8015d1a:	9201      	str	r2, [sp, #4]
 8015d1c:	9a02      	ldr	r2, [sp, #8]
 8015d1e:	9303      	str	r3, [sp, #12]
 8015d20:	429a      	cmp	r2, r3
 8015d22:	d80c      	bhi.n	8015d3e <__multiply+0x9e>
 8015d24:	2e00      	cmp	r6, #0
 8015d26:	dd03      	ble.n	8015d30 <__multiply+0x90>
 8015d28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d05a      	beq.n	8015de6 <__multiply+0x146>
 8015d30:	6106      	str	r6, [r0, #16]
 8015d32:	b005      	add	sp, #20
 8015d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d38:	f843 2b04 	str.w	r2, [r3], #4
 8015d3c:	e7d8      	b.n	8015cf0 <__multiply+0x50>
 8015d3e:	f8b3 a000 	ldrh.w	sl, [r3]
 8015d42:	f1ba 0f00 	cmp.w	sl, #0
 8015d46:	d024      	beq.n	8015d92 <__multiply+0xf2>
 8015d48:	f104 0e14 	add.w	lr, r4, #20
 8015d4c:	46a9      	mov	r9, r5
 8015d4e:	f04f 0c00 	mov.w	ip, #0
 8015d52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015d56:	f8d9 1000 	ldr.w	r1, [r9]
 8015d5a:	fa1f fb82 	uxth.w	fp, r2
 8015d5e:	b289      	uxth	r1, r1
 8015d60:	fb0a 110b 	mla	r1, sl, fp, r1
 8015d64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015d68:	f8d9 2000 	ldr.w	r2, [r9]
 8015d6c:	4461      	add	r1, ip
 8015d6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015d72:	fb0a c20b 	mla	r2, sl, fp, ip
 8015d76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015d7a:	b289      	uxth	r1, r1
 8015d7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015d80:	4577      	cmp	r7, lr
 8015d82:	f849 1b04 	str.w	r1, [r9], #4
 8015d86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015d8a:	d8e2      	bhi.n	8015d52 <__multiply+0xb2>
 8015d8c:	9a01      	ldr	r2, [sp, #4]
 8015d8e:	f845 c002 	str.w	ip, [r5, r2]
 8015d92:	9a03      	ldr	r2, [sp, #12]
 8015d94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015d98:	3304      	adds	r3, #4
 8015d9a:	f1b9 0f00 	cmp.w	r9, #0
 8015d9e:	d020      	beq.n	8015de2 <__multiply+0x142>
 8015da0:	6829      	ldr	r1, [r5, #0]
 8015da2:	f104 0c14 	add.w	ip, r4, #20
 8015da6:	46ae      	mov	lr, r5
 8015da8:	f04f 0a00 	mov.w	sl, #0
 8015dac:	f8bc b000 	ldrh.w	fp, [ip]
 8015db0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015db4:	fb09 220b 	mla	r2, r9, fp, r2
 8015db8:	4492      	add	sl, r2
 8015dba:	b289      	uxth	r1, r1
 8015dbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015dc0:	f84e 1b04 	str.w	r1, [lr], #4
 8015dc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015dc8:	f8be 1000 	ldrh.w	r1, [lr]
 8015dcc:	0c12      	lsrs	r2, r2, #16
 8015dce:	fb09 1102 	mla	r1, r9, r2, r1
 8015dd2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015dd6:	4567      	cmp	r7, ip
 8015dd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015ddc:	d8e6      	bhi.n	8015dac <__multiply+0x10c>
 8015dde:	9a01      	ldr	r2, [sp, #4]
 8015de0:	50a9      	str	r1, [r5, r2]
 8015de2:	3504      	adds	r5, #4
 8015de4:	e79a      	b.n	8015d1c <__multiply+0x7c>
 8015de6:	3e01      	subs	r6, #1
 8015de8:	e79c      	b.n	8015d24 <__multiply+0x84>
 8015dea:	bf00      	nop
 8015dec:	08017970 	.word	0x08017970
 8015df0:	080179fc 	.word	0x080179fc

08015df4 <__pow5mult>:
 8015df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015df8:	4615      	mov	r5, r2
 8015dfa:	f012 0203 	ands.w	r2, r2, #3
 8015dfe:	4606      	mov	r6, r0
 8015e00:	460f      	mov	r7, r1
 8015e02:	d007      	beq.n	8015e14 <__pow5mult+0x20>
 8015e04:	4c25      	ldr	r4, [pc, #148]	; (8015e9c <__pow5mult+0xa8>)
 8015e06:	3a01      	subs	r2, #1
 8015e08:	2300      	movs	r3, #0
 8015e0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015e0e:	f7ff fe51 	bl	8015ab4 <__multadd>
 8015e12:	4607      	mov	r7, r0
 8015e14:	10ad      	asrs	r5, r5, #2
 8015e16:	d03d      	beq.n	8015e94 <__pow5mult+0xa0>
 8015e18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015e1a:	b97c      	cbnz	r4, 8015e3c <__pow5mult+0x48>
 8015e1c:	2010      	movs	r0, #16
 8015e1e:	f7ff fdc1 	bl	80159a4 <malloc>
 8015e22:	4602      	mov	r2, r0
 8015e24:	6270      	str	r0, [r6, #36]	; 0x24
 8015e26:	b928      	cbnz	r0, 8015e34 <__pow5mult+0x40>
 8015e28:	4b1d      	ldr	r3, [pc, #116]	; (8015ea0 <__pow5mult+0xac>)
 8015e2a:	481e      	ldr	r0, [pc, #120]	; (8015ea4 <__pow5mult+0xb0>)
 8015e2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015e30:	f000 fcc8 	bl	80167c4 <__assert_func>
 8015e34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015e38:	6004      	str	r4, [r0, #0]
 8015e3a:	60c4      	str	r4, [r0, #12]
 8015e3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015e40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015e44:	b94c      	cbnz	r4, 8015e5a <__pow5mult+0x66>
 8015e46:	f240 2171 	movw	r1, #625	; 0x271
 8015e4a:	4630      	mov	r0, r6
 8015e4c:	f7ff ff12 	bl	8015c74 <__i2b>
 8015e50:	2300      	movs	r3, #0
 8015e52:	f8c8 0008 	str.w	r0, [r8, #8]
 8015e56:	4604      	mov	r4, r0
 8015e58:	6003      	str	r3, [r0, #0]
 8015e5a:	f04f 0900 	mov.w	r9, #0
 8015e5e:	07eb      	lsls	r3, r5, #31
 8015e60:	d50a      	bpl.n	8015e78 <__pow5mult+0x84>
 8015e62:	4639      	mov	r1, r7
 8015e64:	4622      	mov	r2, r4
 8015e66:	4630      	mov	r0, r6
 8015e68:	f7ff ff1a 	bl	8015ca0 <__multiply>
 8015e6c:	4639      	mov	r1, r7
 8015e6e:	4680      	mov	r8, r0
 8015e70:	4630      	mov	r0, r6
 8015e72:	f7ff fdfd 	bl	8015a70 <_Bfree>
 8015e76:	4647      	mov	r7, r8
 8015e78:	106d      	asrs	r5, r5, #1
 8015e7a:	d00b      	beq.n	8015e94 <__pow5mult+0xa0>
 8015e7c:	6820      	ldr	r0, [r4, #0]
 8015e7e:	b938      	cbnz	r0, 8015e90 <__pow5mult+0x9c>
 8015e80:	4622      	mov	r2, r4
 8015e82:	4621      	mov	r1, r4
 8015e84:	4630      	mov	r0, r6
 8015e86:	f7ff ff0b 	bl	8015ca0 <__multiply>
 8015e8a:	6020      	str	r0, [r4, #0]
 8015e8c:	f8c0 9000 	str.w	r9, [r0]
 8015e90:	4604      	mov	r4, r0
 8015e92:	e7e4      	b.n	8015e5e <__pow5mult+0x6a>
 8015e94:	4638      	mov	r0, r7
 8015e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015e9a:	bf00      	nop
 8015e9c:	08017b48 	.word	0x08017b48
 8015ea0:	080178fe 	.word	0x080178fe
 8015ea4:	080179fc 	.word	0x080179fc

08015ea8 <__lshift>:
 8015ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015eac:	460c      	mov	r4, r1
 8015eae:	6849      	ldr	r1, [r1, #4]
 8015eb0:	6923      	ldr	r3, [r4, #16]
 8015eb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015eb6:	68a3      	ldr	r3, [r4, #8]
 8015eb8:	4607      	mov	r7, r0
 8015eba:	4691      	mov	r9, r2
 8015ebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015ec0:	f108 0601 	add.w	r6, r8, #1
 8015ec4:	42b3      	cmp	r3, r6
 8015ec6:	db0b      	blt.n	8015ee0 <__lshift+0x38>
 8015ec8:	4638      	mov	r0, r7
 8015eca:	f7ff fd91 	bl	80159f0 <_Balloc>
 8015ece:	4605      	mov	r5, r0
 8015ed0:	b948      	cbnz	r0, 8015ee6 <__lshift+0x3e>
 8015ed2:	4602      	mov	r2, r0
 8015ed4:	4b2a      	ldr	r3, [pc, #168]	; (8015f80 <__lshift+0xd8>)
 8015ed6:	482b      	ldr	r0, [pc, #172]	; (8015f84 <__lshift+0xdc>)
 8015ed8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8015edc:	f000 fc72 	bl	80167c4 <__assert_func>
 8015ee0:	3101      	adds	r1, #1
 8015ee2:	005b      	lsls	r3, r3, #1
 8015ee4:	e7ee      	b.n	8015ec4 <__lshift+0x1c>
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	f100 0114 	add.w	r1, r0, #20
 8015eec:	f100 0210 	add.w	r2, r0, #16
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	4553      	cmp	r3, sl
 8015ef4:	db37      	blt.n	8015f66 <__lshift+0xbe>
 8015ef6:	6920      	ldr	r0, [r4, #16]
 8015ef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015efc:	f104 0314 	add.w	r3, r4, #20
 8015f00:	f019 091f 	ands.w	r9, r9, #31
 8015f04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015f08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8015f0c:	d02f      	beq.n	8015f6e <__lshift+0xc6>
 8015f0e:	f1c9 0e20 	rsb	lr, r9, #32
 8015f12:	468a      	mov	sl, r1
 8015f14:	f04f 0c00 	mov.w	ip, #0
 8015f18:	681a      	ldr	r2, [r3, #0]
 8015f1a:	fa02 f209 	lsl.w	r2, r2, r9
 8015f1e:	ea42 020c 	orr.w	r2, r2, ip
 8015f22:	f84a 2b04 	str.w	r2, [sl], #4
 8015f26:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f2a:	4298      	cmp	r0, r3
 8015f2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015f30:	d8f2      	bhi.n	8015f18 <__lshift+0x70>
 8015f32:	1b03      	subs	r3, r0, r4
 8015f34:	3b15      	subs	r3, #21
 8015f36:	f023 0303 	bic.w	r3, r3, #3
 8015f3a:	3304      	adds	r3, #4
 8015f3c:	f104 0215 	add.w	r2, r4, #21
 8015f40:	4290      	cmp	r0, r2
 8015f42:	bf38      	it	cc
 8015f44:	2304      	movcc	r3, #4
 8015f46:	f841 c003 	str.w	ip, [r1, r3]
 8015f4a:	f1bc 0f00 	cmp.w	ip, #0
 8015f4e:	d001      	beq.n	8015f54 <__lshift+0xac>
 8015f50:	f108 0602 	add.w	r6, r8, #2
 8015f54:	3e01      	subs	r6, #1
 8015f56:	4638      	mov	r0, r7
 8015f58:	612e      	str	r6, [r5, #16]
 8015f5a:	4621      	mov	r1, r4
 8015f5c:	f7ff fd88 	bl	8015a70 <_Bfree>
 8015f60:	4628      	mov	r0, r5
 8015f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015f66:	f842 0f04 	str.w	r0, [r2, #4]!
 8015f6a:	3301      	adds	r3, #1
 8015f6c:	e7c1      	b.n	8015ef2 <__lshift+0x4a>
 8015f6e:	3904      	subs	r1, #4
 8015f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f74:	f841 2f04 	str.w	r2, [r1, #4]!
 8015f78:	4298      	cmp	r0, r3
 8015f7a:	d8f9      	bhi.n	8015f70 <__lshift+0xc8>
 8015f7c:	e7ea      	b.n	8015f54 <__lshift+0xac>
 8015f7e:	bf00      	nop
 8015f80:	08017970 	.word	0x08017970
 8015f84:	080179fc 	.word	0x080179fc

08015f88 <__mcmp>:
 8015f88:	b530      	push	{r4, r5, lr}
 8015f8a:	6902      	ldr	r2, [r0, #16]
 8015f8c:	690c      	ldr	r4, [r1, #16]
 8015f8e:	1b12      	subs	r2, r2, r4
 8015f90:	d10e      	bne.n	8015fb0 <__mcmp+0x28>
 8015f92:	f100 0314 	add.w	r3, r0, #20
 8015f96:	3114      	adds	r1, #20
 8015f98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015f9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015fa0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015fa4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015fa8:	42a5      	cmp	r5, r4
 8015faa:	d003      	beq.n	8015fb4 <__mcmp+0x2c>
 8015fac:	d305      	bcc.n	8015fba <__mcmp+0x32>
 8015fae:	2201      	movs	r2, #1
 8015fb0:	4610      	mov	r0, r2
 8015fb2:	bd30      	pop	{r4, r5, pc}
 8015fb4:	4283      	cmp	r3, r0
 8015fb6:	d3f3      	bcc.n	8015fa0 <__mcmp+0x18>
 8015fb8:	e7fa      	b.n	8015fb0 <__mcmp+0x28>
 8015fba:	f04f 32ff 	mov.w	r2, #4294967295
 8015fbe:	e7f7      	b.n	8015fb0 <__mcmp+0x28>

08015fc0 <__mdiff>:
 8015fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fc4:	460c      	mov	r4, r1
 8015fc6:	4606      	mov	r6, r0
 8015fc8:	4611      	mov	r1, r2
 8015fca:	4620      	mov	r0, r4
 8015fcc:	4690      	mov	r8, r2
 8015fce:	f7ff ffdb 	bl	8015f88 <__mcmp>
 8015fd2:	1e05      	subs	r5, r0, #0
 8015fd4:	d110      	bne.n	8015ff8 <__mdiff+0x38>
 8015fd6:	4629      	mov	r1, r5
 8015fd8:	4630      	mov	r0, r6
 8015fda:	f7ff fd09 	bl	80159f0 <_Balloc>
 8015fde:	b930      	cbnz	r0, 8015fee <__mdiff+0x2e>
 8015fe0:	4b3a      	ldr	r3, [pc, #232]	; (80160cc <__mdiff+0x10c>)
 8015fe2:	4602      	mov	r2, r0
 8015fe4:	f240 2132 	movw	r1, #562	; 0x232
 8015fe8:	4839      	ldr	r0, [pc, #228]	; (80160d0 <__mdiff+0x110>)
 8015fea:	f000 fbeb 	bl	80167c4 <__assert_func>
 8015fee:	2301      	movs	r3, #1
 8015ff0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ff8:	bfa4      	itt	ge
 8015ffa:	4643      	movge	r3, r8
 8015ffc:	46a0      	movge	r8, r4
 8015ffe:	4630      	mov	r0, r6
 8016000:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016004:	bfa6      	itte	ge
 8016006:	461c      	movge	r4, r3
 8016008:	2500      	movge	r5, #0
 801600a:	2501      	movlt	r5, #1
 801600c:	f7ff fcf0 	bl	80159f0 <_Balloc>
 8016010:	b920      	cbnz	r0, 801601c <__mdiff+0x5c>
 8016012:	4b2e      	ldr	r3, [pc, #184]	; (80160cc <__mdiff+0x10c>)
 8016014:	4602      	mov	r2, r0
 8016016:	f44f 7110 	mov.w	r1, #576	; 0x240
 801601a:	e7e5      	b.n	8015fe8 <__mdiff+0x28>
 801601c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016020:	6926      	ldr	r6, [r4, #16]
 8016022:	60c5      	str	r5, [r0, #12]
 8016024:	f104 0914 	add.w	r9, r4, #20
 8016028:	f108 0514 	add.w	r5, r8, #20
 801602c:	f100 0e14 	add.w	lr, r0, #20
 8016030:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8016034:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016038:	f108 0210 	add.w	r2, r8, #16
 801603c:	46f2      	mov	sl, lr
 801603e:	2100      	movs	r1, #0
 8016040:	f859 3b04 	ldr.w	r3, [r9], #4
 8016044:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016048:	fa1f f883 	uxth.w	r8, r3
 801604c:	fa11 f18b 	uxtah	r1, r1, fp
 8016050:	0c1b      	lsrs	r3, r3, #16
 8016052:	eba1 0808 	sub.w	r8, r1, r8
 8016056:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801605a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801605e:	fa1f f888 	uxth.w	r8, r8
 8016062:	1419      	asrs	r1, r3, #16
 8016064:	454e      	cmp	r6, r9
 8016066:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801606a:	f84a 3b04 	str.w	r3, [sl], #4
 801606e:	d8e7      	bhi.n	8016040 <__mdiff+0x80>
 8016070:	1b33      	subs	r3, r6, r4
 8016072:	3b15      	subs	r3, #21
 8016074:	f023 0303 	bic.w	r3, r3, #3
 8016078:	3304      	adds	r3, #4
 801607a:	3415      	adds	r4, #21
 801607c:	42a6      	cmp	r6, r4
 801607e:	bf38      	it	cc
 8016080:	2304      	movcc	r3, #4
 8016082:	441d      	add	r5, r3
 8016084:	4473      	add	r3, lr
 8016086:	469e      	mov	lr, r3
 8016088:	462e      	mov	r6, r5
 801608a:	4566      	cmp	r6, ip
 801608c:	d30e      	bcc.n	80160ac <__mdiff+0xec>
 801608e:	f10c 0203 	add.w	r2, ip, #3
 8016092:	1b52      	subs	r2, r2, r5
 8016094:	f022 0203 	bic.w	r2, r2, #3
 8016098:	3d03      	subs	r5, #3
 801609a:	45ac      	cmp	ip, r5
 801609c:	bf38      	it	cc
 801609e:	2200      	movcc	r2, #0
 80160a0:	441a      	add	r2, r3
 80160a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80160a6:	b17b      	cbz	r3, 80160c8 <__mdiff+0x108>
 80160a8:	6107      	str	r7, [r0, #16]
 80160aa:	e7a3      	b.n	8015ff4 <__mdiff+0x34>
 80160ac:	f856 8b04 	ldr.w	r8, [r6], #4
 80160b0:	fa11 f288 	uxtah	r2, r1, r8
 80160b4:	1414      	asrs	r4, r2, #16
 80160b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80160ba:	b292      	uxth	r2, r2
 80160bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80160c0:	f84e 2b04 	str.w	r2, [lr], #4
 80160c4:	1421      	asrs	r1, r4, #16
 80160c6:	e7e0      	b.n	801608a <__mdiff+0xca>
 80160c8:	3f01      	subs	r7, #1
 80160ca:	e7ea      	b.n	80160a2 <__mdiff+0xe2>
 80160cc:	08017970 	.word	0x08017970
 80160d0:	080179fc 	.word	0x080179fc

080160d4 <__ulp>:
 80160d4:	b082      	sub	sp, #8
 80160d6:	ed8d 0b00 	vstr	d0, [sp]
 80160da:	9b01      	ldr	r3, [sp, #4]
 80160dc:	4912      	ldr	r1, [pc, #72]	; (8016128 <__ulp+0x54>)
 80160de:	4019      	ands	r1, r3
 80160e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80160e4:	2900      	cmp	r1, #0
 80160e6:	dd05      	ble.n	80160f4 <__ulp+0x20>
 80160e8:	2200      	movs	r2, #0
 80160ea:	460b      	mov	r3, r1
 80160ec:	ec43 2b10 	vmov	d0, r2, r3
 80160f0:	b002      	add	sp, #8
 80160f2:	4770      	bx	lr
 80160f4:	4249      	negs	r1, r1
 80160f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80160fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 80160fe:	f04f 0200 	mov.w	r2, #0
 8016102:	f04f 0300 	mov.w	r3, #0
 8016106:	da04      	bge.n	8016112 <__ulp+0x3e>
 8016108:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801610c:	fa41 f300 	asr.w	r3, r1, r0
 8016110:	e7ec      	b.n	80160ec <__ulp+0x18>
 8016112:	f1a0 0114 	sub.w	r1, r0, #20
 8016116:	291e      	cmp	r1, #30
 8016118:	bfda      	itte	le
 801611a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801611e:	fa20 f101 	lsrle.w	r1, r0, r1
 8016122:	2101      	movgt	r1, #1
 8016124:	460a      	mov	r2, r1
 8016126:	e7e1      	b.n	80160ec <__ulp+0x18>
 8016128:	7ff00000 	.word	0x7ff00000

0801612c <__b2d>:
 801612c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801612e:	6905      	ldr	r5, [r0, #16]
 8016130:	f100 0714 	add.w	r7, r0, #20
 8016134:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016138:	1f2e      	subs	r6, r5, #4
 801613a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801613e:	4620      	mov	r0, r4
 8016140:	f7ff fd48 	bl	8015bd4 <__hi0bits>
 8016144:	f1c0 0320 	rsb	r3, r0, #32
 8016148:	280a      	cmp	r0, #10
 801614a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80161c8 <__b2d+0x9c>
 801614e:	600b      	str	r3, [r1, #0]
 8016150:	dc14      	bgt.n	801617c <__b2d+0x50>
 8016152:	f1c0 0e0b 	rsb	lr, r0, #11
 8016156:	fa24 f10e 	lsr.w	r1, r4, lr
 801615a:	42b7      	cmp	r7, r6
 801615c:	ea41 030c 	orr.w	r3, r1, ip
 8016160:	bf34      	ite	cc
 8016162:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016166:	2100      	movcs	r1, #0
 8016168:	3015      	adds	r0, #21
 801616a:	fa04 f000 	lsl.w	r0, r4, r0
 801616e:	fa21 f10e 	lsr.w	r1, r1, lr
 8016172:	ea40 0201 	orr.w	r2, r0, r1
 8016176:	ec43 2b10 	vmov	d0, r2, r3
 801617a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801617c:	42b7      	cmp	r7, r6
 801617e:	bf3a      	itte	cc
 8016180:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016184:	f1a5 0608 	subcc.w	r6, r5, #8
 8016188:	2100      	movcs	r1, #0
 801618a:	380b      	subs	r0, #11
 801618c:	d017      	beq.n	80161be <__b2d+0x92>
 801618e:	f1c0 0c20 	rsb	ip, r0, #32
 8016192:	fa04 f500 	lsl.w	r5, r4, r0
 8016196:	42be      	cmp	r6, r7
 8016198:	fa21 f40c 	lsr.w	r4, r1, ip
 801619c:	ea45 0504 	orr.w	r5, r5, r4
 80161a0:	bf8c      	ite	hi
 80161a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80161a6:	2400      	movls	r4, #0
 80161a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80161ac:	fa01 f000 	lsl.w	r0, r1, r0
 80161b0:	fa24 f40c 	lsr.w	r4, r4, ip
 80161b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80161b8:	ea40 0204 	orr.w	r2, r0, r4
 80161bc:	e7db      	b.n	8016176 <__b2d+0x4a>
 80161be:	ea44 030c 	orr.w	r3, r4, ip
 80161c2:	460a      	mov	r2, r1
 80161c4:	e7d7      	b.n	8016176 <__b2d+0x4a>
 80161c6:	bf00      	nop
 80161c8:	3ff00000 	.word	0x3ff00000

080161cc <__d2b>:
 80161cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80161d0:	4689      	mov	r9, r1
 80161d2:	2101      	movs	r1, #1
 80161d4:	ec57 6b10 	vmov	r6, r7, d0
 80161d8:	4690      	mov	r8, r2
 80161da:	f7ff fc09 	bl	80159f0 <_Balloc>
 80161de:	4604      	mov	r4, r0
 80161e0:	b930      	cbnz	r0, 80161f0 <__d2b+0x24>
 80161e2:	4602      	mov	r2, r0
 80161e4:	4b25      	ldr	r3, [pc, #148]	; (801627c <__d2b+0xb0>)
 80161e6:	4826      	ldr	r0, [pc, #152]	; (8016280 <__d2b+0xb4>)
 80161e8:	f240 310a 	movw	r1, #778	; 0x30a
 80161ec:	f000 faea 	bl	80167c4 <__assert_func>
 80161f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80161f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80161f8:	bb35      	cbnz	r5, 8016248 <__d2b+0x7c>
 80161fa:	2e00      	cmp	r6, #0
 80161fc:	9301      	str	r3, [sp, #4]
 80161fe:	d028      	beq.n	8016252 <__d2b+0x86>
 8016200:	4668      	mov	r0, sp
 8016202:	9600      	str	r6, [sp, #0]
 8016204:	f7ff fd06 	bl	8015c14 <__lo0bits>
 8016208:	9900      	ldr	r1, [sp, #0]
 801620a:	b300      	cbz	r0, 801624e <__d2b+0x82>
 801620c:	9a01      	ldr	r2, [sp, #4]
 801620e:	f1c0 0320 	rsb	r3, r0, #32
 8016212:	fa02 f303 	lsl.w	r3, r2, r3
 8016216:	430b      	orrs	r3, r1
 8016218:	40c2      	lsrs	r2, r0
 801621a:	6163      	str	r3, [r4, #20]
 801621c:	9201      	str	r2, [sp, #4]
 801621e:	9b01      	ldr	r3, [sp, #4]
 8016220:	61a3      	str	r3, [r4, #24]
 8016222:	2b00      	cmp	r3, #0
 8016224:	bf14      	ite	ne
 8016226:	2202      	movne	r2, #2
 8016228:	2201      	moveq	r2, #1
 801622a:	6122      	str	r2, [r4, #16]
 801622c:	b1d5      	cbz	r5, 8016264 <__d2b+0x98>
 801622e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016232:	4405      	add	r5, r0
 8016234:	f8c9 5000 	str.w	r5, [r9]
 8016238:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801623c:	f8c8 0000 	str.w	r0, [r8]
 8016240:	4620      	mov	r0, r4
 8016242:	b003      	add	sp, #12
 8016244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801624c:	e7d5      	b.n	80161fa <__d2b+0x2e>
 801624e:	6161      	str	r1, [r4, #20]
 8016250:	e7e5      	b.n	801621e <__d2b+0x52>
 8016252:	a801      	add	r0, sp, #4
 8016254:	f7ff fcde 	bl	8015c14 <__lo0bits>
 8016258:	9b01      	ldr	r3, [sp, #4]
 801625a:	6163      	str	r3, [r4, #20]
 801625c:	2201      	movs	r2, #1
 801625e:	6122      	str	r2, [r4, #16]
 8016260:	3020      	adds	r0, #32
 8016262:	e7e3      	b.n	801622c <__d2b+0x60>
 8016264:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016268:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801626c:	f8c9 0000 	str.w	r0, [r9]
 8016270:	6918      	ldr	r0, [r3, #16]
 8016272:	f7ff fcaf 	bl	8015bd4 <__hi0bits>
 8016276:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801627a:	e7df      	b.n	801623c <__d2b+0x70>
 801627c:	08017970 	.word	0x08017970
 8016280:	080179fc 	.word	0x080179fc

08016284 <__ratio>:
 8016284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016288:	4688      	mov	r8, r1
 801628a:	4669      	mov	r1, sp
 801628c:	4681      	mov	r9, r0
 801628e:	f7ff ff4d 	bl	801612c <__b2d>
 8016292:	a901      	add	r1, sp, #4
 8016294:	4640      	mov	r0, r8
 8016296:	ec55 4b10 	vmov	r4, r5, d0
 801629a:	f7ff ff47 	bl	801612c <__b2d>
 801629e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80162a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80162a6:	eba3 0c02 	sub.w	ip, r3, r2
 80162aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 80162ae:	1a9b      	subs	r3, r3, r2
 80162b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80162b4:	ec51 0b10 	vmov	r0, r1, d0
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	bfd6      	itet	le
 80162bc:	460a      	movle	r2, r1
 80162be:	462a      	movgt	r2, r5
 80162c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80162c4:	468b      	mov	fp, r1
 80162c6:	462f      	mov	r7, r5
 80162c8:	bfd4      	ite	le
 80162ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80162ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80162d2:	4620      	mov	r0, r4
 80162d4:	ee10 2a10 	vmov	r2, s0
 80162d8:	465b      	mov	r3, fp
 80162da:	4639      	mov	r1, r7
 80162dc:	f7ea fab6 	bl	800084c <__aeabi_ddiv>
 80162e0:	ec41 0b10 	vmov	d0, r0, r1
 80162e4:	b003      	add	sp, #12
 80162e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080162ea <__copybits>:
 80162ea:	3901      	subs	r1, #1
 80162ec:	b570      	push	{r4, r5, r6, lr}
 80162ee:	1149      	asrs	r1, r1, #5
 80162f0:	6914      	ldr	r4, [r2, #16]
 80162f2:	3101      	adds	r1, #1
 80162f4:	f102 0314 	add.w	r3, r2, #20
 80162f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80162fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016300:	1f05      	subs	r5, r0, #4
 8016302:	42a3      	cmp	r3, r4
 8016304:	d30c      	bcc.n	8016320 <__copybits+0x36>
 8016306:	1aa3      	subs	r3, r4, r2
 8016308:	3b11      	subs	r3, #17
 801630a:	f023 0303 	bic.w	r3, r3, #3
 801630e:	3211      	adds	r2, #17
 8016310:	42a2      	cmp	r2, r4
 8016312:	bf88      	it	hi
 8016314:	2300      	movhi	r3, #0
 8016316:	4418      	add	r0, r3
 8016318:	2300      	movs	r3, #0
 801631a:	4288      	cmp	r0, r1
 801631c:	d305      	bcc.n	801632a <__copybits+0x40>
 801631e:	bd70      	pop	{r4, r5, r6, pc}
 8016320:	f853 6b04 	ldr.w	r6, [r3], #4
 8016324:	f845 6f04 	str.w	r6, [r5, #4]!
 8016328:	e7eb      	b.n	8016302 <__copybits+0x18>
 801632a:	f840 3b04 	str.w	r3, [r0], #4
 801632e:	e7f4      	b.n	801631a <__copybits+0x30>

08016330 <__any_on>:
 8016330:	f100 0214 	add.w	r2, r0, #20
 8016334:	6900      	ldr	r0, [r0, #16]
 8016336:	114b      	asrs	r3, r1, #5
 8016338:	4298      	cmp	r0, r3
 801633a:	b510      	push	{r4, lr}
 801633c:	db11      	blt.n	8016362 <__any_on+0x32>
 801633e:	dd0a      	ble.n	8016356 <__any_on+0x26>
 8016340:	f011 011f 	ands.w	r1, r1, #31
 8016344:	d007      	beq.n	8016356 <__any_on+0x26>
 8016346:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801634a:	fa24 f001 	lsr.w	r0, r4, r1
 801634e:	fa00 f101 	lsl.w	r1, r0, r1
 8016352:	428c      	cmp	r4, r1
 8016354:	d10b      	bne.n	801636e <__any_on+0x3e>
 8016356:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801635a:	4293      	cmp	r3, r2
 801635c:	d803      	bhi.n	8016366 <__any_on+0x36>
 801635e:	2000      	movs	r0, #0
 8016360:	bd10      	pop	{r4, pc}
 8016362:	4603      	mov	r3, r0
 8016364:	e7f7      	b.n	8016356 <__any_on+0x26>
 8016366:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801636a:	2900      	cmp	r1, #0
 801636c:	d0f5      	beq.n	801635a <__any_on+0x2a>
 801636e:	2001      	movs	r0, #1
 8016370:	e7f6      	b.n	8016360 <__any_on+0x30>

08016372 <_calloc_r>:
 8016372:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016374:	fba1 2402 	umull	r2, r4, r1, r2
 8016378:	b94c      	cbnz	r4, 801638e <_calloc_r+0x1c>
 801637a:	4611      	mov	r1, r2
 801637c:	9201      	str	r2, [sp, #4]
 801637e:	f7fc f967 	bl	8012650 <_malloc_r>
 8016382:	9a01      	ldr	r2, [sp, #4]
 8016384:	4605      	mov	r5, r0
 8016386:	b930      	cbnz	r0, 8016396 <_calloc_r+0x24>
 8016388:	4628      	mov	r0, r5
 801638a:	b003      	add	sp, #12
 801638c:	bd30      	pop	{r4, r5, pc}
 801638e:	220c      	movs	r2, #12
 8016390:	6002      	str	r2, [r0, #0]
 8016392:	2500      	movs	r5, #0
 8016394:	e7f8      	b.n	8016388 <_calloc_r+0x16>
 8016396:	4621      	mov	r1, r4
 8016398:	f7fc f931 	bl	80125fe <memset>
 801639c:	e7f4      	b.n	8016388 <_calloc_r+0x16>
	...

080163a0 <_free_r>:
 80163a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80163a2:	2900      	cmp	r1, #0
 80163a4:	d044      	beq.n	8016430 <_free_r+0x90>
 80163a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80163aa:	9001      	str	r0, [sp, #4]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	f1a1 0404 	sub.w	r4, r1, #4
 80163b2:	bfb8      	it	lt
 80163b4:	18e4      	addlt	r4, r4, r3
 80163b6:	f7ff fb0f 	bl	80159d8 <__malloc_lock>
 80163ba:	4a1e      	ldr	r2, [pc, #120]	; (8016434 <_free_r+0x94>)
 80163bc:	9801      	ldr	r0, [sp, #4]
 80163be:	6813      	ldr	r3, [r2, #0]
 80163c0:	b933      	cbnz	r3, 80163d0 <_free_r+0x30>
 80163c2:	6063      	str	r3, [r4, #4]
 80163c4:	6014      	str	r4, [r2, #0]
 80163c6:	b003      	add	sp, #12
 80163c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80163cc:	f7ff bb0a 	b.w	80159e4 <__malloc_unlock>
 80163d0:	42a3      	cmp	r3, r4
 80163d2:	d908      	bls.n	80163e6 <_free_r+0x46>
 80163d4:	6825      	ldr	r5, [r4, #0]
 80163d6:	1961      	adds	r1, r4, r5
 80163d8:	428b      	cmp	r3, r1
 80163da:	bf01      	itttt	eq
 80163dc:	6819      	ldreq	r1, [r3, #0]
 80163de:	685b      	ldreq	r3, [r3, #4]
 80163e0:	1949      	addeq	r1, r1, r5
 80163e2:	6021      	streq	r1, [r4, #0]
 80163e4:	e7ed      	b.n	80163c2 <_free_r+0x22>
 80163e6:	461a      	mov	r2, r3
 80163e8:	685b      	ldr	r3, [r3, #4]
 80163ea:	b10b      	cbz	r3, 80163f0 <_free_r+0x50>
 80163ec:	42a3      	cmp	r3, r4
 80163ee:	d9fa      	bls.n	80163e6 <_free_r+0x46>
 80163f0:	6811      	ldr	r1, [r2, #0]
 80163f2:	1855      	adds	r5, r2, r1
 80163f4:	42a5      	cmp	r5, r4
 80163f6:	d10b      	bne.n	8016410 <_free_r+0x70>
 80163f8:	6824      	ldr	r4, [r4, #0]
 80163fa:	4421      	add	r1, r4
 80163fc:	1854      	adds	r4, r2, r1
 80163fe:	42a3      	cmp	r3, r4
 8016400:	6011      	str	r1, [r2, #0]
 8016402:	d1e0      	bne.n	80163c6 <_free_r+0x26>
 8016404:	681c      	ldr	r4, [r3, #0]
 8016406:	685b      	ldr	r3, [r3, #4]
 8016408:	6053      	str	r3, [r2, #4]
 801640a:	4421      	add	r1, r4
 801640c:	6011      	str	r1, [r2, #0]
 801640e:	e7da      	b.n	80163c6 <_free_r+0x26>
 8016410:	d902      	bls.n	8016418 <_free_r+0x78>
 8016412:	230c      	movs	r3, #12
 8016414:	6003      	str	r3, [r0, #0]
 8016416:	e7d6      	b.n	80163c6 <_free_r+0x26>
 8016418:	6825      	ldr	r5, [r4, #0]
 801641a:	1961      	adds	r1, r4, r5
 801641c:	428b      	cmp	r3, r1
 801641e:	bf04      	itt	eq
 8016420:	6819      	ldreq	r1, [r3, #0]
 8016422:	685b      	ldreq	r3, [r3, #4]
 8016424:	6063      	str	r3, [r4, #4]
 8016426:	bf04      	itt	eq
 8016428:	1949      	addeq	r1, r1, r5
 801642a:	6021      	streq	r1, [r4, #0]
 801642c:	6054      	str	r4, [r2, #4]
 801642e:	e7ca      	b.n	80163c6 <_free_r+0x26>
 8016430:	b003      	add	sp, #12
 8016432:	bd30      	pop	{r4, r5, pc}
 8016434:	20014b5c 	.word	0x20014b5c

08016438 <_realloc_r>:
 8016438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801643c:	4680      	mov	r8, r0
 801643e:	4614      	mov	r4, r2
 8016440:	460e      	mov	r6, r1
 8016442:	b921      	cbnz	r1, 801644e <_realloc_r+0x16>
 8016444:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016448:	4611      	mov	r1, r2
 801644a:	f7fc b901 	b.w	8012650 <_malloc_r>
 801644e:	b92a      	cbnz	r2, 801645c <_realloc_r+0x24>
 8016450:	f7ff ffa6 	bl	80163a0 <_free_r>
 8016454:	4625      	mov	r5, r4
 8016456:	4628      	mov	r0, r5
 8016458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801645c:	f000 f9fc 	bl	8016858 <_malloc_usable_size_r>
 8016460:	4284      	cmp	r4, r0
 8016462:	4607      	mov	r7, r0
 8016464:	d802      	bhi.n	801646c <_realloc_r+0x34>
 8016466:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801646a:	d812      	bhi.n	8016492 <_realloc_r+0x5a>
 801646c:	4621      	mov	r1, r4
 801646e:	4640      	mov	r0, r8
 8016470:	f7fc f8ee 	bl	8012650 <_malloc_r>
 8016474:	4605      	mov	r5, r0
 8016476:	2800      	cmp	r0, #0
 8016478:	d0ed      	beq.n	8016456 <_realloc_r+0x1e>
 801647a:	42bc      	cmp	r4, r7
 801647c:	4622      	mov	r2, r4
 801647e:	4631      	mov	r1, r6
 8016480:	bf28      	it	cs
 8016482:	463a      	movcs	r2, r7
 8016484:	f7fc f8ad 	bl	80125e2 <memcpy>
 8016488:	4631      	mov	r1, r6
 801648a:	4640      	mov	r0, r8
 801648c:	f7ff ff88 	bl	80163a0 <_free_r>
 8016490:	e7e1      	b.n	8016456 <_realloc_r+0x1e>
 8016492:	4635      	mov	r5, r6
 8016494:	e7df      	b.n	8016456 <_realloc_r+0x1e>

08016496 <__ssputs_r>:
 8016496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801649a:	688e      	ldr	r6, [r1, #8]
 801649c:	429e      	cmp	r6, r3
 801649e:	4682      	mov	sl, r0
 80164a0:	460c      	mov	r4, r1
 80164a2:	4690      	mov	r8, r2
 80164a4:	461f      	mov	r7, r3
 80164a6:	d838      	bhi.n	801651a <__ssputs_r+0x84>
 80164a8:	898a      	ldrh	r2, [r1, #12]
 80164aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80164ae:	d032      	beq.n	8016516 <__ssputs_r+0x80>
 80164b0:	6825      	ldr	r5, [r4, #0]
 80164b2:	6909      	ldr	r1, [r1, #16]
 80164b4:	eba5 0901 	sub.w	r9, r5, r1
 80164b8:	6965      	ldr	r5, [r4, #20]
 80164ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80164be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80164c2:	3301      	adds	r3, #1
 80164c4:	444b      	add	r3, r9
 80164c6:	106d      	asrs	r5, r5, #1
 80164c8:	429d      	cmp	r5, r3
 80164ca:	bf38      	it	cc
 80164cc:	461d      	movcc	r5, r3
 80164ce:	0553      	lsls	r3, r2, #21
 80164d0:	d531      	bpl.n	8016536 <__ssputs_r+0xa0>
 80164d2:	4629      	mov	r1, r5
 80164d4:	f7fc f8bc 	bl	8012650 <_malloc_r>
 80164d8:	4606      	mov	r6, r0
 80164da:	b950      	cbnz	r0, 80164f2 <__ssputs_r+0x5c>
 80164dc:	230c      	movs	r3, #12
 80164de:	f8ca 3000 	str.w	r3, [sl]
 80164e2:	89a3      	ldrh	r3, [r4, #12]
 80164e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80164e8:	81a3      	strh	r3, [r4, #12]
 80164ea:	f04f 30ff 	mov.w	r0, #4294967295
 80164ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80164f2:	6921      	ldr	r1, [r4, #16]
 80164f4:	464a      	mov	r2, r9
 80164f6:	f7fc f874 	bl	80125e2 <memcpy>
 80164fa:	89a3      	ldrh	r3, [r4, #12]
 80164fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016504:	81a3      	strh	r3, [r4, #12]
 8016506:	6126      	str	r6, [r4, #16]
 8016508:	6165      	str	r5, [r4, #20]
 801650a:	444e      	add	r6, r9
 801650c:	eba5 0509 	sub.w	r5, r5, r9
 8016510:	6026      	str	r6, [r4, #0]
 8016512:	60a5      	str	r5, [r4, #8]
 8016514:	463e      	mov	r6, r7
 8016516:	42be      	cmp	r6, r7
 8016518:	d900      	bls.n	801651c <__ssputs_r+0x86>
 801651a:	463e      	mov	r6, r7
 801651c:	6820      	ldr	r0, [r4, #0]
 801651e:	4632      	mov	r2, r6
 8016520:	4641      	mov	r1, r8
 8016522:	f000 f97f 	bl	8016824 <memmove>
 8016526:	68a3      	ldr	r3, [r4, #8]
 8016528:	1b9b      	subs	r3, r3, r6
 801652a:	60a3      	str	r3, [r4, #8]
 801652c:	6823      	ldr	r3, [r4, #0]
 801652e:	4433      	add	r3, r6
 8016530:	6023      	str	r3, [r4, #0]
 8016532:	2000      	movs	r0, #0
 8016534:	e7db      	b.n	80164ee <__ssputs_r+0x58>
 8016536:	462a      	mov	r2, r5
 8016538:	f7ff ff7e 	bl	8016438 <_realloc_r>
 801653c:	4606      	mov	r6, r0
 801653e:	2800      	cmp	r0, #0
 8016540:	d1e1      	bne.n	8016506 <__ssputs_r+0x70>
 8016542:	6921      	ldr	r1, [r4, #16]
 8016544:	4650      	mov	r0, sl
 8016546:	f7ff ff2b 	bl	80163a0 <_free_r>
 801654a:	e7c7      	b.n	80164dc <__ssputs_r+0x46>

0801654c <_svfiprintf_r>:
 801654c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016550:	4698      	mov	r8, r3
 8016552:	898b      	ldrh	r3, [r1, #12]
 8016554:	061b      	lsls	r3, r3, #24
 8016556:	b09d      	sub	sp, #116	; 0x74
 8016558:	4607      	mov	r7, r0
 801655a:	460d      	mov	r5, r1
 801655c:	4614      	mov	r4, r2
 801655e:	d50e      	bpl.n	801657e <_svfiprintf_r+0x32>
 8016560:	690b      	ldr	r3, [r1, #16]
 8016562:	b963      	cbnz	r3, 801657e <_svfiprintf_r+0x32>
 8016564:	2140      	movs	r1, #64	; 0x40
 8016566:	f7fc f873 	bl	8012650 <_malloc_r>
 801656a:	6028      	str	r0, [r5, #0]
 801656c:	6128      	str	r0, [r5, #16]
 801656e:	b920      	cbnz	r0, 801657a <_svfiprintf_r+0x2e>
 8016570:	230c      	movs	r3, #12
 8016572:	603b      	str	r3, [r7, #0]
 8016574:	f04f 30ff 	mov.w	r0, #4294967295
 8016578:	e0d1      	b.n	801671e <_svfiprintf_r+0x1d2>
 801657a:	2340      	movs	r3, #64	; 0x40
 801657c:	616b      	str	r3, [r5, #20]
 801657e:	2300      	movs	r3, #0
 8016580:	9309      	str	r3, [sp, #36]	; 0x24
 8016582:	2320      	movs	r3, #32
 8016584:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016588:	f8cd 800c 	str.w	r8, [sp, #12]
 801658c:	2330      	movs	r3, #48	; 0x30
 801658e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016738 <_svfiprintf_r+0x1ec>
 8016592:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016596:	f04f 0901 	mov.w	r9, #1
 801659a:	4623      	mov	r3, r4
 801659c:	469a      	mov	sl, r3
 801659e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80165a2:	b10a      	cbz	r2, 80165a8 <_svfiprintf_r+0x5c>
 80165a4:	2a25      	cmp	r2, #37	; 0x25
 80165a6:	d1f9      	bne.n	801659c <_svfiprintf_r+0x50>
 80165a8:	ebba 0b04 	subs.w	fp, sl, r4
 80165ac:	d00b      	beq.n	80165c6 <_svfiprintf_r+0x7a>
 80165ae:	465b      	mov	r3, fp
 80165b0:	4622      	mov	r2, r4
 80165b2:	4629      	mov	r1, r5
 80165b4:	4638      	mov	r0, r7
 80165b6:	f7ff ff6e 	bl	8016496 <__ssputs_r>
 80165ba:	3001      	adds	r0, #1
 80165bc:	f000 80aa 	beq.w	8016714 <_svfiprintf_r+0x1c8>
 80165c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80165c2:	445a      	add	r2, fp
 80165c4:	9209      	str	r2, [sp, #36]	; 0x24
 80165c6:	f89a 3000 	ldrb.w	r3, [sl]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	f000 80a2 	beq.w	8016714 <_svfiprintf_r+0x1c8>
 80165d0:	2300      	movs	r3, #0
 80165d2:	f04f 32ff 	mov.w	r2, #4294967295
 80165d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80165da:	f10a 0a01 	add.w	sl, sl, #1
 80165de:	9304      	str	r3, [sp, #16]
 80165e0:	9307      	str	r3, [sp, #28]
 80165e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80165e6:	931a      	str	r3, [sp, #104]	; 0x68
 80165e8:	4654      	mov	r4, sl
 80165ea:	2205      	movs	r2, #5
 80165ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165f0:	4851      	ldr	r0, [pc, #324]	; (8016738 <_svfiprintf_r+0x1ec>)
 80165f2:	f7e9 fdf5 	bl	80001e0 <memchr>
 80165f6:	9a04      	ldr	r2, [sp, #16]
 80165f8:	b9d8      	cbnz	r0, 8016632 <_svfiprintf_r+0xe6>
 80165fa:	06d0      	lsls	r0, r2, #27
 80165fc:	bf44      	itt	mi
 80165fe:	2320      	movmi	r3, #32
 8016600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016604:	0711      	lsls	r1, r2, #28
 8016606:	bf44      	itt	mi
 8016608:	232b      	movmi	r3, #43	; 0x2b
 801660a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801660e:	f89a 3000 	ldrb.w	r3, [sl]
 8016612:	2b2a      	cmp	r3, #42	; 0x2a
 8016614:	d015      	beq.n	8016642 <_svfiprintf_r+0xf6>
 8016616:	9a07      	ldr	r2, [sp, #28]
 8016618:	4654      	mov	r4, sl
 801661a:	2000      	movs	r0, #0
 801661c:	f04f 0c0a 	mov.w	ip, #10
 8016620:	4621      	mov	r1, r4
 8016622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016626:	3b30      	subs	r3, #48	; 0x30
 8016628:	2b09      	cmp	r3, #9
 801662a:	d94e      	bls.n	80166ca <_svfiprintf_r+0x17e>
 801662c:	b1b0      	cbz	r0, 801665c <_svfiprintf_r+0x110>
 801662e:	9207      	str	r2, [sp, #28]
 8016630:	e014      	b.n	801665c <_svfiprintf_r+0x110>
 8016632:	eba0 0308 	sub.w	r3, r0, r8
 8016636:	fa09 f303 	lsl.w	r3, r9, r3
 801663a:	4313      	orrs	r3, r2
 801663c:	9304      	str	r3, [sp, #16]
 801663e:	46a2      	mov	sl, r4
 8016640:	e7d2      	b.n	80165e8 <_svfiprintf_r+0x9c>
 8016642:	9b03      	ldr	r3, [sp, #12]
 8016644:	1d19      	adds	r1, r3, #4
 8016646:	681b      	ldr	r3, [r3, #0]
 8016648:	9103      	str	r1, [sp, #12]
 801664a:	2b00      	cmp	r3, #0
 801664c:	bfbb      	ittet	lt
 801664e:	425b      	neglt	r3, r3
 8016650:	f042 0202 	orrlt.w	r2, r2, #2
 8016654:	9307      	strge	r3, [sp, #28]
 8016656:	9307      	strlt	r3, [sp, #28]
 8016658:	bfb8      	it	lt
 801665a:	9204      	strlt	r2, [sp, #16]
 801665c:	7823      	ldrb	r3, [r4, #0]
 801665e:	2b2e      	cmp	r3, #46	; 0x2e
 8016660:	d10c      	bne.n	801667c <_svfiprintf_r+0x130>
 8016662:	7863      	ldrb	r3, [r4, #1]
 8016664:	2b2a      	cmp	r3, #42	; 0x2a
 8016666:	d135      	bne.n	80166d4 <_svfiprintf_r+0x188>
 8016668:	9b03      	ldr	r3, [sp, #12]
 801666a:	1d1a      	adds	r2, r3, #4
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	9203      	str	r2, [sp, #12]
 8016670:	2b00      	cmp	r3, #0
 8016672:	bfb8      	it	lt
 8016674:	f04f 33ff 	movlt.w	r3, #4294967295
 8016678:	3402      	adds	r4, #2
 801667a:	9305      	str	r3, [sp, #20]
 801667c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016748 <_svfiprintf_r+0x1fc>
 8016680:	7821      	ldrb	r1, [r4, #0]
 8016682:	2203      	movs	r2, #3
 8016684:	4650      	mov	r0, sl
 8016686:	f7e9 fdab 	bl	80001e0 <memchr>
 801668a:	b140      	cbz	r0, 801669e <_svfiprintf_r+0x152>
 801668c:	2340      	movs	r3, #64	; 0x40
 801668e:	eba0 000a 	sub.w	r0, r0, sl
 8016692:	fa03 f000 	lsl.w	r0, r3, r0
 8016696:	9b04      	ldr	r3, [sp, #16]
 8016698:	4303      	orrs	r3, r0
 801669a:	3401      	adds	r4, #1
 801669c:	9304      	str	r3, [sp, #16]
 801669e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166a2:	4826      	ldr	r0, [pc, #152]	; (801673c <_svfiprintf_r+0x1f0>)
 80166a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80166a8:	2206      	movs	r2, #6
 80166aa:	f7e9 fd99 	bl	80001e0 <memchr>
 80166ae:	2800      	cmp	r0, #0
 80166b0:	d038      	beq.n	8016724 <_svfiprintf_r+0x1d8>
 80166b2:	4b23      	ldr	r3, [pc, #140]	; (8016740 <_svfiprintf_r+0x1f4>)
 80166b4:	bb1b      	cbnz	r3, 80166fe <_svfiprintf_r+0x1b2>
 80166b6:	9b03      	ldr	r3, [sp, #12]
 80166b8:	3307      	adds	r3, #7
 80166ba:	f023 0307 	bic.w	r3, r3, #7
 80166be:	3308      	adds	r3, #8
 80166c0:	9303      	str	r3, [sp, #12]
 80166c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80166c4:	4433      	add	r3, r6
 80166c6:	9309      	str	r3, [sp, #36]	; 0x24
 80166c8:	e767      	b.n	801659a <_svfiprintf_r+0x4e>
 80166ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80166ce:	460c      	mov	r4, r1
 80166d0:	2001      	movs	r0, #1
 80166d2:	e7a5      	b.n	8016620 <_svfiprintf_r+0xd4>
 80166d4:	2300      	movs	r3, #0
 80166d6:	3401      	adds	r4, #1
 80166d8:	9305      	str	r3, [sp, #20]
 80166da:	4619      	mov	r1, r3
 80166dc:	f04f 0c0a 	mov.w	ip, #10
 80166e0:	4620      	mov	r0, r4
 80166e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80166e6:	3a30      	subs	r2, #48	; 0x30
 80166e8:	2a09      	cmp	r2, #9
 80166ea:	d903      	bls.n	80166f4 <_svfiprintf_r+0x1a8>
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d0c5      	beq.n	801667c <_svfiprintf_r+0x130>
 80166f0:	9105      	str	r1, [sp, #20]
 80166f2:	e7c3      	b.n	801667c <_svfiprintf_r+0x130>
 80166f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80166f8:	4604      	mov	r4, r0
 80166fa:	2301      	movs	r3, #1
 80166fc:	e7f0      	b.n	80166e0 <_svfiprintf_r+0x194>
 80166fe:	ab03      	add	r3, sp, #12
 8016700:	9300      	str	r3, [sp, #0]
 8016702:	462a      	mov	r2, r5
 8016704:	4b0f      	ldr	r3, [pc, #60]	; (8016744 <_svfiprintf_r+0x1f8>)
 8016706:	a904      	add	r1, sp, #16
 8016708:	4638      	mov	r0, r7
 801670a:	f7fc f8b5 	bl	8012878 <_printf_float>
 801670e:	1c42      	adds	r2, r0, #1
 8016710:	4606      	mov	r6, r0
 8016712:	d1d6      	bne.n	80166c2 <_svfiprintf_r+0x176>
 8016714:	89ab      	ldrh	r3, [r5, #12]
 8016716:	065b      	lsls	r3, r3, #25
 8016718:	f53f af2c 	bmi.w	8016574 <_svfiprintf_r+0x28>
 801671c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801671e:	b01d      	add	sp, #116	; 0x74
 8016720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016724:	ab03      	add	r3, sp, #12
 8016726:	9300      	str	r3, [sp, #0]
 8016728:	462a      	mov	r2, r5
 801672a:	4b06      	ldr	r3, [pc, #24]	; (8016744 <_svfiprintf_r+0x1f8>)
 801672c:	a904      	add	r1, sp, #16
 801672e:	4638      	mov	r0, r7
 8016730:	f7fc fb46 	bl	8012dc0 <_printf_i>
 8016734:	e7eb      	b.n	801670e <_svfiprintf_r+0x1c2>
 8016736:	bf00      	nop
 8016738:	08017b54 	.word	0x08017b54
 801673c:	08017b5e 	.word	0x08017b5e
 8016740:	08012879 	.word	0x08012879
 8016744:	08016497 	.word	0x08016497
 8016748:	08017b5a 	.word	0x08017b5a

0801674c <_read_r>:
 801674c:	b538      	push	{r3, r4, r5, lr}
 801674e:	4d07      	ldr	r5, [pc, #28]	; (801676c <_read_r+0x20>)
 8016750:	4604      	mov	r4, r0
 8016752:	4608      	mov	r0, r1
 8016754:	4611      	mov	r1, r2
 8016756:	2200      	movs	r2, #0
 8016758:	602a      	str	r2, [r5, #0]
 801675a:	461a      	mov	r2, r3
 801675c:	f7ee fb9a 	bl	8004e94 <_read>
 8016760:	1c43      	adds	r3, r0, #1
 8016762:	d102      	bne.n	801676a <_read_r+0x1e>
 8016764:	682b      	ldr	r3, [r5, #0]
 8016766:	b103      	cbz	r3, 801676a <_read_r+0x1e>
 8016768:	6023      	str	r3, [r4, #0]
 801676a:	bd38      	pop	{r3, r4, r5, pc}
 801676c:	20014b64 	.word	0x20014b64

08016770 <nan>:
 8016770:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016778 <nan+0x8>
 8016774:	4770      	bx	lr
 8016776:	bf00      	nop
 8016778:	00000000 	.word	0x00000000
 801677c:	7ff80000 	.word	0x7ff80000

08016780 <strncmp>:
 8016780:	b510      	push	{r4, lr}
 8016782:	b17a      	cbz	r2, 80167a4 <strncmp+0x24>
 8016784:	4603      	mov	r3, r0
 8016786:	3901      	subs	r1, #1
 8016788:	1884      	adds	r4, r0, r2
 801678a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801678e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016792:	4290      	cmp	r0, r2
 8016794:	d101      	bne.n	801679a <strncmp+0x1a>
 8016796:	42a3      	cmp	r3, r4
 8016798:	d101      	bne.n	801679e <strncmp+0x1e>
 801679a:	1a80      	subs	r0, r0, r2
 801679c:	bd10      	pop	{r4, pc}
 801679e:	2800      	cmp	r0, #0
 80167a0:	d1f3      	bne.n	801678a <strncmp+0xa>
 80167a2:	e7fa      	b.n	801679a <strncmp+0x1a>
 80167a4:	4610      	mov	r0, r2
 80167a6:	e7f9      	b.n	801679c <strncmp+0x1c>

080167a8 <__ascii_wctomb>:
 80167a8:	b149      	cbz	r1, 80167be <__ascii_wctomb+0x16>
 80167aa:	2aff      	cmp	r2, #255	; 0xff
 80167ac:	bf85      	ittet	hi
 80167ae:	238a      	movhi	r3, #138	; 0x8a
 80167b0:	6003      	strhi	r3, [r0, #0]
 80167b2:	700a      	strbls	r2, [r1, #0]
 80167b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80167b8:	bf98      	it	ls
 80167ba:	2001      	movls	r0, #1
 80167bc:	4770      	bx	lr
 80167be:	4608      	mov	r0, r1
 80167c0:	4770      	bx	lr
	...

080167c4 <__assert_func>:
 80167c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167c6:	4614      	mov	r4, r2
 80167c8:	461a      	mov	r2, r3
 80167ca:	4b09      	ldr	r3, [pc, #36]	; (80167f0 <__assert_func+0x2c>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	4605      	mov	r5, r0
 80167d0:	68d8      	ldr	r0, [r3, #12]
 80167d2:	b14c      	cbz	r4, 80167e8 <__assert_func+0x24>
 80167d4:	4b07      	ldr	r3, [pc, #28]	; (80167f4 <__assert_func+0x30>)
 80167d6:	9100      	str	r1, [sp, #0]
 80167d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80167dc:	4906      	ldr	r1, [pc, #24]	; (80167f8 <__assert_func+0x34>)
 80167de:	462b      	mov	r3, r5
 80167e0:	f000 f80e 	bl	8016800 <fiprintf>
 80167e4:	f7fb fdd2 	bl	801238c <abort>
 80167e8:	4b04      	ldr	r3, [pc, #16]	; (80167fc <__assert_func+0x38>)
 80167ea:	461c      	mov	r4, r3
 80167ec:	e7f3      	b.n	80167d6 <__assert_func+0x12>
 80167ee:	bf00      	nop
 80167f0:	20000014 	.word	0x20000014
 80167f4:	08017b65 	.word	0x08017b65
 80167f8:	08017b72 	.word	0x08017b72
 80167fc:	08017ba0 	.word	0x08017ba0

08016800 <fiprintf>:
 8016800:	b40e      	push	{r1, r2, r3}
 8016802:	b503      	push	{r0, r1, lr}
 8016804:	4601      	mov	r1, r0
 8016806:	ab03      	add	r3, sp, #12
 8016808:	4805      	ldr	r0, [pc, #20]	; (8016820 <fiprintf+0x20>)
 801680a:	f853 2b04 	ldr.w	r2, [r3], #4
 801680e:	6800      	ldr	r0, [r0, #0]
 8016810:	9301      	str	r3, [sp, #4]
 8016812:	f000 f853 	bl	80168bc <_vfiprintf_r>
 8016816:	b002      	add	sp, #8
 8016818:	f85d eb04 	ldr.w	lr, [sp], #4
 801681c:	b003      	add	sp, #12
 801681e:	4770      	bx	lr
 8016820:	20000014 	.word	0x20000014

08016824 <memmove>:
 8016824:	4288      	cmp	r0, r1
 8016826:	b510      	push	{r4, lr}
 8016828:	eb01 0402 	add.w	r4, r1, r2
 801682c:	d902      	bls.n	8016834 <memmove+0x10>
 801682e:	4284      	cmp	r4, r0
 8016830:	4623      	mov	r3, r4
 8016832:	d807      	bhi.n	8016844 <memmove+0x20>
 8016834:	1e43      	subs	r3, r0, #1
 8016836:	42a1      	cmp	r1, r4
 8016838:	d008      	beq.n	801684c <memmove+0x28>
 801683a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801683e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016842:	e7f8      	b.n	8016836 <memmove+0x12>
 8016844:	4402      	add	r2, r0
 8016846:	4601      	mov	r1, r0
 8016848:	428a      	cmp	r2, r1
 801684a:	d100      	bne.n	801684e <memmove+0x2a>
 801684c:	bd10      	pop	{r4, pc}
 801684e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016856:	e7f7      	b.n	8016848 <memmove+0x24>

08016858 <_malloc_usable_size_r>:
 8016858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801685c:	1f18      	subs	r0, r3, #4
 801685e:	2b00      	cmp	r3, #0
 8016860:	bfbc      	itt	lt
 8016862:	580b      	ldrlt	r3, [r1, r0]
 8016864:	18c0      	addlt	r0, r0, r3
 8016866:	4770      	bx	lr

08016868 <__sfputc_r>:
 8016868:	6893      	ldr	r3, [r2, #8]
 801686a:	3b01      	subs	r3, #1
 801686c:	2b00      	cmp	r3, #0
 801686e:	b410      	push	{r4}
 8016870:	6093      	str	r3, [r2, #8]
 8016872:	da08      	bge.n	8016886 <__sfputc_r+0x1e>
 8016874:	6994      	ldr	r4, [r2, #24]
 8016876:	42a3      	cmp	r3, r4
 8016878:	db01      	blt.n	801687e <__sfputc_r+0x16>
 801687a:	290a      	cmp	r1, #10
 801687c:	d103      	bne.n	8016886 <__sfputc_r+0x1e>
 801687e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016882:	f000 b94b 	b.w	8016b1c <__swbuf_r>
 8016886:	6813      	ldr	r3, [r2, #0]
 8016888:	1c58      	adds	r0, r3, #1
 801688a:	6010      	str	r0, [r2, #0]
 801688c:	7019      	strb	r1, [r3, #0]
 801688e:	4608      	mov	r0, r1
 8016890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016894:	4770      	bx	lr

08016896 <__sfputs_r>:
 8016896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016898:	4606      	mov	r6, r0
 801689a:	460f      	mov	r7, r1
 801689c:	4614      	mov	r4, r2
 801689e:	18d5      	adds	r5, r2, r3
 80168a0:	42ac      	cmp	r4, r5
 80168a2:	d101      	bne.n	80168a8 <__sfputs_r+0x12>
 80168a4:	2000      	movs	r0, #0
 80168a6:	e007      	b.n	80168b8 <__sfputs_r+0x22>
 80168a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80168ac:	463a      	mov	r2, r7
 80168ae:	4630      	mov	r0, r6
 80168b0:	f7ff ffda 	bl	8016868 <__sfputc_r>
 80168b4:	1c43      	adds	r3, r0, #1
 80168b6:	d1f3      	bne.n	80168a0 <__sfputs_r+0xa>
 80168b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080168bc <_vfiprintf_r>:
 80168bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168c0:	460d      	mov	r5, r1
 80168c2:	b09d      	sub	sp, #116	; 0x74
 80168c4:	4614      	mov	r4, r2
 80168c6:	4698      	mov	r8, r3
 80168c8:	4606      	mov	r6, r0
 80168ca:	b118      	cbz	r0, 80168d4 <_vfiprintf_r+0x18>
 80168cc:	6983      	ldr	r3, [r0, #24]
 80168ce:	b90b      	cbnz	r3, 80168d4 <_vfiprintf_r+0x18>
 80168d0:	f7fb fdc2 	bl	8012458 <__sinit>
 80168d4:	4b89      	ldr	r3, [pc, #548]	; (8016afc <_vfiprintf_r+0x240>)
 80168d6:	429d      	cmp	r5, r3
 80168d8:	d11b      	bne.n	8016912 <_vfiprintf_r+0x56>
 80168da:	6875      	ldr	r5, [r6, #4]
 80168dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80168de:	07d9      	lsls	r1, r3, #31
 80168e0:	d405      	bmi.n	80168ee <_vfiprintf_r+0x32>
 80168e2:	89ab      	ldrh	r3, [r5, #12]
 80168e4:	059a      	lsls	r2, r3, #22
 80168e6:	d402      	bmi.n	80168ee <_vfiprintf_r+0x32>
 80168e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80168ea:	f7fb fe78 	bl	80125de <__retarget_lock_acquire_recursive>
 80168ee:	89ab      	ldrh	r3, [r5, #12]
 80168f0:	071b      	lsls	r3, r3, #28
 80168f2:	d501      	bpl.n	80168f8 <_vfiprintf_r+0x3c>
 80168f4:	692b      	ldr	r3, [r5, #16]
 80168f6:	b9eb      	cbnz	r3, 8016934 <_vfiprintf_r+0x78>
 80168f8:	4629      	mov	r1, r5
 80168fa:	4630      	mov	r0, r6
 80168fc:	f000 f960 	bl	8016bc0 <__swsetup_r>
 8016900:	b1c0      	cbz	r0, 8016934 <_vfiprintf_r+0x78>
 8016902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016904:	07dc      	lsls	r4, r3, #31
 8016906:	d50e      	bpl.n	8016926 <_vfiprintf_r+0x6a>
 8016908:	f04f 30ff 	mov.w	r0, #4294967295
 801690c:	b01d      	add	sp, #116	; 0x74
 801690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016912:	4b7b      	ldr	r3, [pc, #492]	; (8016b00 <_vfiprintf_r+0x244>)
 8016914:	429d      	cmp	r5, r3
 8016916:	d101      	bne.n	801691c <_vfiprintf_r+0x60>
 8016918:	68b5      	ldr	r5, [r6, #8]
 801691a:	e7df      	b.n	80168dc <_vfiprintf_r+0x20>
 801691c:	4b79      	ldr	r3, [pc, #484]	; (8016b04 <_vfiprintf_r+0x248>)
 801691e:	429d      	cmp	r5, r3
 8016920:	bf08      	it	eq
 8016922:	68f5      	ldreq	r5, [r6, #12]
 8016924:	e7da      	b.n	80168dc <_vfiprintf_r+0x20>
 8016926:	89ab      	ldrh	r3, [r5, #12]
 8016928:	0598      	lsls	r0, r3, #22
 801692a:	d4ed      	bmi.n	8016908 <_vfiprintf_r+0x4c>
 801692c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801692e:	f7fb fe57 	bl	80125e0 <__retarget_lock_release_recursive>
 8016932:	e7e9      	b.n	8016908 <_vfiprintf_r+0x4c>
 8016934:	2300      	movs	r3, #0
 8016936:	9309      	str	r3, [sp, #36]	; 0x24
 8016938:	2320      	movs	r3, #32
 801693a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801693e:	f8cd 800c 	str.w	r8, [sp, #12]
 8016942:	2330      	movs	r3, #48	; 0x30
 8016944:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016b08 <_vfiprintf_r+0x24c>
 8016948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801694c:	f04f 0901 	mov.w	r9, #1
 8016950:	4623      	mov	r3, r4
 8016952:	469a      	mov	sl, r3
 8016954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016958:	b10a      	cbz	r2, 801695e <_vfiprintf_r+0xa2>
 801695a:	2a25      	cmp	r2, #37	; 0x25
 801695c:	d1f9      	bne.n	8016952 <_vfiprintf_r+0x96>
 801695e:	ebba 0b04 	subs.w	fp, sl, r4
 8016962:	d00b      	beq.n	801697c <_vfiprintf_r+0xc0>
 8016964:	465b      	mov	r3, fp
 8016966:	4622      	mov	r2, r4
 8016968:	4629      	mov	r1, r5
 801696a:	4630      	mov	r0, r6
 801696c:	f7ff ff93 	bl	8016896 <__sfputs_r>
 8016970:	3001      	adds	r0, #1
 8016972:	f000 80aa 	beq.w	8016aca <_vfiprintf_r+0x20e>
 8016976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016978:	445a      	add	r2, fp
 801697a:	9209      	str	r2, [sp, #36]	; 0x24
 801697c:	f89a 3000 	ldrb.w	r3, [sl]
 8016980:	2b00      	cmp	r3, #0
 8016982:	f000 80a2 	beq.w	8016aca <_vfiprintf_r+0x20e>
 8016986:	2300      	movs	r3, #0
 8016988:	f04f 32ff 	mov.w	r2, #4294967295
 801698c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016990:	f10a 0a01 	add.w	sl, sl, #1
 8016994:	9304      	str	r3, [sp, #16]
 8016996:	9307      	str	r3, [sp, #28]
 8016998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801699c:	931a      	str	r3, [sp, #104]	; 0x68
 801699e:	4654      	mov	r4, sl
 80169a0:	2205      	movs	r2, #5
 80169a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80169a6:	4858      	ldr	r0, [pc, #352]	; (8016b08 <_vfiprintf_r+0x24c>)
 80169a8:	f7e9 fc1a 	bl	80001e0 <memchr>
 80169ac:	9a04      	ldr	r2, [sp, #16]
 80169ae:	b9d8      	cbnz	r0, 80169e8 <_vfiprintf_r+0x12c>
 80169b0:	06d1      	lsls	r1, r2, #27
 80169b2:	bf44      	itt	mi
 80169b4:	2320      	movmi	r3, #32
 80169b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80169ba:	0713      	lsls	r3, r2, #28
 80169bc:	bf44      	itt	mi
 80169be:	232b      	movmi	r3, #43	; 0x2b
 80169c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80169c4:	f89a 3000 	ldrb.w	r3, [sl]
 80169c8:	2b2a      	cmp	r3, #42	; 0x2a
 80169ca:	d015      	beq.n	80169f8 <_vfiprintf_r+0x13c>
 80169cc:	9a07      	ldr	r2, [sp, #28]
 80169ce:	4654      	mov	r4, sl
 80169d0:	2000      	movs	r0, #0
 80169d2:	f04f 0c0a 	mov.w	ip, #10
 80169d6:	4621      	mov	r1, r4
 80169d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169dc:	3b30      	subs	r3, #48	; 0x30
 80169de:	2b09      	cmp	r3, #9
 80169e0:	d94e      	bls.n	8016a80 <_vfiprintf_r+0x1c4>
 80169e2:	b1b0      	cbz	r0, 8016a12 <_vfiprintf_r+0x156>
 80169e4:	9207      	str	r2, [sp, #28]
 80169e6:	e014      	b.n	8016a12 <_vfiprintf_r+0x156>
 80169e8:	eba0 0308 	sub.w	r3, r0, r8
 80169ec:	fa09 f303 	lsl.w	r3, r9, r3
 80169f0:	4313      	orrs	r3, r2
 80169f2:	9304      	str	r3, [sp, #16]
 80169f4:	46a2      	mov	sl, r4
 80169f6:	e7d2      	b.n	801699e <_vfiprintf_r+0xe2>
 80169f8:	9b03      	ldr	r3, [sp, #12]
 80169fa:	1d19      	adds	r1, r3, #4
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	9103      	str	r1, [sp, #12]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	bfbb      	ittet	lt
 8016a04:	425b      	neglt	r3, r3
 8016a06:	f042 0202 	orrlt.w	r2, r2, #2
 8016a0a:	9307      	strge	r3, [sp, #28]
 8016a0c:	9307      	strlt	r3, [sp, #28]
 8016a0e:	bfb8      	it	lt
 8016a10:	9204      	strlt	r2, [sp, #16]
 8016a12:	7823      	ldrb	r3, [r4, #0]
 8016a14:	2b2e      	cmp	r3, #46	; 0x2e
 8016a16:	d10c      	bne.n	8016a32 <_vfiprintf_r+0x176>
 8016a18:	7863      	ldrb	r3, [r4, #1]
 8016a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8016a1c:	d135      	bne.n	8016a8a <_vfiprintf_r+0x1ce>
 8016a1e:	9b03      	ldr	r3, [sp, #12]
 8016a20:	1d1a      	adds	r2, r3, #4
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	9203      	str	r2, [sp, #12]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	bfb8      	it	lt
 8016a2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8016a2e:	3402      	adds	r4, #2
 8016a30:	9305      	str	r3, [sp, #20]
 8016a32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016b18 <_vfiprintf_r+0x25c>
 8016a36:	7821      	ldrb	r1, [r4, #0]
 8016a38:	2203      	movs	r2, #3
 8016a3a:	4650      	mov	r0, sl
 8016a3c:	f7e9 fbd0 	bl	80001e0 <memchr>
 8016a40:	b140      	cbz	r0, 8016a54 <_vfiprintf_r+0x198>
 8016a42:	2340      	movs	r3, #64	; 0x40
 8016a44:	eba0 000a 	sub.w	r0, r0, sl
 8016a48:	fa03 f000 	lsl.w	r0, r3, r0
 8016a4c:	9b04      	ldr	r3, [sp, #16]
 8016a4e:	4303      	orrs	r3, r0
 8016a50:	3401      	adds	r4, #1
 8016a52:	9304      	str	r3, [sp, #16]
 8016a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a58:	482c      	ldr	r0, [pc, #176]	; (8016b0c <_vfiprintf_r+0x250>)
 8016a5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016a5e:	2206      	movs	r2, #6
 8016a60:	f7e9 fbbe 	bl	80001e0 <memchr>
 8016a64:	2800      	cmp	r0, #0
 8016a66:	d03f      	beq.n	8016ae8 <_vfiprintf_r+0x22c>
 8016a68:	4b29      	ldr	r3, [pc, #164]	; (8016b10 <_vfiprintf_r+0x254>)
 8016a6a:	bb1b      	cbnz	r3, 8016ab4 <_vfiprintf_r+0x1f8>
 8016a6c:	9b03      	ldr	r3, [sp, #12]
 8016a6e:	3307      	adds	r3, #7
 8016a70:	f023 0307 	bic.w	r3, r3, #7
 8016a74:	3308      	adds	r3, #8
 8016a76:	9303      	str	r3, [sp, #12]
 8016a78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a7a:	443b      	add	r3, r7
 8016a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8016a7e:	e767      	b.n	8016950 <_vfiprintf_r+0x94>
 8016a80:	fb0c 3202 	mla	r2, ip, r2, r3
 8016a84:	460c      	mov	r4, r1
 8016a86:	2001      	movs	r0, #1
 8016a88:	e7a5      	b.n	80169d6 <_vfiprintf_r+0x11a>
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	3401      	adds	r4, #1
 8016a8e:	9305      	str	r3, [sp, #20]
 8016a90:	4619      	mov	r1, r3
 8016a92:	f04f 0c0a 	mov.w	ip, #10
 8016a96:	4620      	mov	r0, r4
 8016a98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a9c:	3a30      	subs	r2, #48	; 0x30
 8016a9e:	2a09      	cmp	r2, #9
 8016aa0:	d903      	bls.n	8016aaa <_vfiprintf_r+0x1ee>
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d0c5      	beq.n	8016a32 <_vfiprintf_r+0x176>
 8016aa6:	9105      	str	r1, [sp, #20]
 8016aa8:	e7c3      	b.n	8016a32 <_vfiprintf_r+0x176>
 8016aaa:	fb0c 2101 	mla	r1, ip, r1, r2
 8016aae:	4604      	mov	r4, r0
 8016ab0:	2301      	movs	r3, #1
 8016ab2:	e7f0      	b.n	8016a96 <_vfiprintf_r+0x1da>
 8016ab4:	ab03      	add	r3, sp, #12
 8016ab6:	9300      	str	r3, [sp, #0]
 8016ab8:	462a      	mov	r2, r5
 8016aba:	4b16      	ldr	r3, [pc, #88]	; (8016b14 <_vfiprintf_r+0x258>)
 8016abc:	a904      	add	r1, sp, #16
 8016abe:	4630      	mov	r0, r6
 8016ac0:	f7fb feda 	bl	8012878 <_printf_float>
 8016ac4:	4607      	mov	r7, r0
 8016ac6:	1c78      	adds	r0, r7, #1
 8016ac8:	d1d6      	bne.n	8016a78 <_vfiprintf_r+0x1bc>
 8016aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016acc:	07d9      	lsls	r1, r3, #31
 8016ace:	d405      	bmi.n	8016adc <_vfiprintf_r+0x220>
 8016ad0:	89ab      	ldrh	r3, [r5, #12]
 8016ad2:	059a      	lsls	r2, r3, #22
 8016ad4:	d402      	bmi.n	8016adc <_vfiprintf_r+0x220>
 8016ad6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016ad8:	f7fb fd82 	bl	80125e0 <__retarget_lock_release_recursive>
 8016adc:	89ab      	ldrh	r3, [r5, #12]
 8016ade:	065b      	lsls	r3, r3, #25
 8016ae0:	f53f af12 	bmi.w	8016908 <_vfiprintf_r+0x4c>
 8016ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ae6:	e711      	b.n	801690c <_vfiprintf_r+0x50>
 8016ae8:	ab03      	add	r3, sp, #12
 8016aea:	9300      	str	r3, [sp, #0]
 8016aec:	462a      	mov	r2, r5
 8016aee:	4b09      	ldr	r3, [pc, #36]	; (8016b14 <_vfiprintf_r+0x258>)
 8016af0:	a904      	add	r1, sp, #16
 8016af2:	4630      	mov	r0, r6
 8016af4:	f7fc f964 	bl	8012dc0 <_printf_i>
 8016af8:	e7e4      	b.n	8016ac4 <_vfiprintf_r+0x208>
 8016afa:	bf00      	nop
 8016afc:	08017720 	.word	0x08017720
 8016b00:	08017740 	.word	0x08017740
 8016b04:	08017700 	.word	0x08017700
 8016b08:	08017b54 	.word	0x08017b54
 8016b0c:	08017b5e 	.word	0x08017b5e
 8016b10:	08012879 	.word	0x08012879
 8016b14:	08016897 	.word	0x08016897
 8016b18:	08017b5a 	.word	0x08017b5a

08016b1c <__swbuf_r>:
 8016b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b1e:	460e      	mov	r6, r1
 8016b20:	4614      	mov	r4, r2
 8016b22:	4605      	mov	r5, r0
 8016b24:	b118      	cbz	r0, 8016b2e <__swbuf_r+0x12>
 8016b26:	6983      	ldr	r3, [r0, #24]
 8016b28:	b90b      	cbnz	r3, 8016b2e <__swbuf_r+0x12>
 8016b2a:	f7fb fc95 	bl	8012458 <__sinit>
 8016b2e:	4b21      	ldr	r3, [pc, #132]	; (8016bb4 <__swbuf_r+0x98>)
 8016b30:	429c      	cmp	r4, r3
 8016b32:	d12b      	bne.n	8016b8c <__swbuf_r+0x70>
 8016b34:	686c      	ldr	r4, [r5, #4]
 8016b36:	69a3      	ldr	r3, [r4, #24]
 8016b38:	60a3      	str	r3, [r4, #8]
 8016b3a:	89a3      	ldrh	r3, [r4, #12]
 8016b3c:	071a      	lsls	r2, r3, #28
 8016b3e:	d52f      	bpl.n	8016ba0 <__swbuf_r+0x84>
 8016b40:	6923      	ldr	r3, [r4, #16]
 8016b42:	b36b      	cbz	r3, 8016ba0 <__swbuf_r+0x84>
 8016b44:	6923      	ldr	r3, [r4, #16]
 8016b46:	6820      	ldr	r0, [r4, #0]
 8016b48:	1ac0      	subs	r0, r0, r3
 8016b4a:	6963      	ldr	r3, [r4, #20]
 8016b4c:	b2f6      	uxtb	r6, r6
 8016b4e:	4283      	cmp	r3, r0
 8016b50:	4637      	mov	r7, r6
 8016b52:	dc04      	bgt.n	8016b5e <__swbuf_r+0x42>
 8016b54:	4621      	mov	r1, r4
 8016b56:	4628      	mov	r0, r5
 8016b58:	f7fe fb62 	bl	8015220 <_fflush_r>
 8016b5c:	bb30      	cbnz	r0, 8016bac <__swbuf_r+0x90>
 8016b5e:	68a3      	ldr	r3, [r4, #8]
 8016b60:	3b01      	subs	r3, #1
 8016b62:	60a3      	str	r3, [r4, #8]
 8016b64:	6823      	ldr	r3, [r4, #0]
 8016b66:	1c5a      	adds	r2, r3, #1
 8016b68:	6022      	str	r2, [r4, #0]
 8016b6a:	701e      	strb	r6, [r3, #0]
 8016b6c:	6963      	ldr	r3, [r4, #20]
 8016b6e:	3001      	adds	r0, #1
 8016b70:	4283      	cmp	r3, r0
 8016b72:	d004      	beq.n	8016b7e <__swbuf_r+0x62>
 8016b74:	89a3      	ldrh	r3, [r4, #12]
 8016b76:	07db      	lsls	r3, r3, #31
 8016b78:	d506      	bpl.n	8016b88 <__swbuf_r+0x6c>
 8016b7a:	2e0a      	cmp	r6, #10
 8016b7c:	d104      	bne.n	8016b88 <__swbuf_r+0x6c>
 8016b7e:	4621      	mov	r1, r4
 8016b80:	4628      	mov	r0, r5
 8016b82:	f7fe fb4d 	bl	8015220 <_fflush_r>
 8016b86:	b988      	cbnz	r0, 8016bac <__swbuf_r+0x90>
 8016b88:	4638      	mov	r0, r7
 8016b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016b8c:	4b0a      	ldr	r3, [pc, #40]	; (8016bb8 <__swbuf_r+0x9c>)
 8016b8e:	429c      	cmp	r4, r3
 8016b90:	d101      	bne.n	8016b96 <__swbuf_r+0x7a>
 8016b92:	68ac      	ldr	r4, [r5, #8]
 8016b94:	e7cf      	b.n	8016b36 <__swbuf_r+0x1a>
 8016b96:	4b09      	ldr	r3, [pc, #36]	; (8016bbc <__swbuf_r+0xa0>)
 8016b98:	429c      	cmp	r4, r3
 8016b9a:	bf08      	it	eq
 8016b9c:	68ec      	ldreq	r4, [r5, #12]
 8016b9e:	e7ca      	b.n	8016b36 <__swbuf_r+0x1a>
 8016ba0:	4621      	mov	r1, r4
 8016ba2:	4628      	mov	r0, r5
 8016ba4:	f000 f80c 	bl	8016bc0 <__swsetup_r>
 8016ba8:	2800      	cmp	r0, #0
 8016baa:	d0cb      	beq.n	8016b44 <__swbuf_r+0x28>
 8016bac:	f04f 37ff 	mov.w	r7, #4294967295
 8016bb0:	e7ea      	b.n	8016b88 <__swbuf_r+0x6c>
 8016bb2:	bf00      	nop
 8016bb4:	08017720 	.word	0x08017720
 8016bb8:	08017740 	.word	0x08017740
 8016bbc:	08017700 	.word	0x08017700

08016bc0 <__swsetup_r>:
 8016bc0:	4b32      	ldr	r3, [pc, #200]	; (8016c8c <__swsetup_r+0xcc>)
 8016bc2:	b570      	push	{r4, r5, r6, lr}
 8016bc4:	681d      	ldr	r5, [r3, #0]
 8016bc6:	4606      	mov	r6, r0
 8016bc8:	460c      	mov	r4, r1
 8016bca:	b125      	cbz	r5, 8016bd6 <__swsetup_r+0x16>
 8016bcc:	69ab      	ldr	r3, [r5, #24]
 8016bce:	b913      	cbnz	r3, 8016bd6 <__swsetup_r+0x16>
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	f7fb fc41 	bl	8012458 <__sinit>
 8016bd6:	4b2e      	ldr	r3, [pc, #184]	; (8016c90 <__swsetup_r+0xd0>)
 8016bd8:	429c      	cmp	r4, r3
 8016bda:	d10f      	bne.n	8016bfc <__swsetup_r+0x3c>
 8016bdc:	686c      	ldr	r4, [r5, #4]
 8016bde:	89a3      	ldrh	r3, [r4, #12]
 8016be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016be4:	0719      	lsls	r1, r3, #28
 8016be6:	d42c      	bmi.n	8016c42 <__swsetup_r+0x82>
 8016be8:	06dd      	lsls	r5, r3, #27
 8016bea:	d411      	bmi.n	8016c10 <__swsetup_r+0x50>
 8016bec:	2309      	movs	r3, #9
 8016bee:	6033      	str	r3, [r6, #0]
 8016bf0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016bf4:	81a3      	strh	r3, [r4, #12]
 8016bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8016bfa:	e03e      	b.n	8016c7a <__swsetup_r+0xba>
 8016bfc:	4b25      	ldr	r3, [pc, #148]	; (8016c94 <__swsetup_r+0xd4>)
 8016bfe:	429c      	cmp	r4, r3
 8016c00:	d101      	bne.n	8016c06 <__swsetup_r+0x46>
 8016c02:	68ac      	ldr	r4, [r5, #8]
 8016c04:	e7eb      	b.n	8016bde <__swsetup_r+0x1e>
 8016c06:	4b24      	ldr	r3, [pc, #144]	; (8016c98 <__swsetup_r+0xd8>)
 8016c08:	429c      	cmp	r4, r3
 8016c0a:	bf08      	it	eq
 8016c0c:	68ec      	ldreq	r4, [r5, #12]
 8016c0e:	e7e6      	b.n	8016bde <__swsetup_r+0x1e>
 8016c10:	0758      	lsls	r0, r3, #29
 8016c12:	d512      	bpl.n	8016c3a <__swsetup_r+0x7a>
 8016c14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016c16:	b141      	cbz	r1, 8016c2a <__swsetup_r+0x6a>
 8016c18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016c1c:	4299      	cmp	r1, r3
 8016c1e:	d002      	beq.n	8016c26 <__swsetup_r+0x66>
 8016c20:	4630      	mov	r0, r6
 8016c22:	f7ff fbbd 	bl	80163a0 <_free_r>
 8016c26:	2300      	movs	r3, #0
 8016c28:	6363      	str	r3, [r4, #52]	; 0x34
 8016c2a:	89a3      	ldrh	r3, [r4, #12]
 8016c2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016c30:	81a3      	strh	r3, [r4, #12]
 8016c32:	2300      	movs	r3, #0
 8016c34:	6063      	str	r3, [r4, #4]
 8016c36:	6923      	ldr	r3, [r4, #16]
 8016c38:	6023      	str	r3, [r4, #0]
 8016c3a:	89a3      	ldrh	r3, [r4, #12]
 8016c3c:	f043 0308 	orr.w	r3, r3, #8
 8016c40:	81a3      	strh	r3, [r4, #12]
 8016c42:	6923      	ldr	r3, [r4, #16]
 8016c44:	b94b      	cbnz	r3, 8016c5a <__swsetup_r+0x9a>
 8016c46:	89a3      	ldrh	r3, [r4, #12]
 8016c48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016c4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016c50:	d003      	beq.n	8016c5a <__swsetup_r+0x9a>
 8016c52:	4621      	mov	r1, r4
 8016c54:	4630      	mov	r0, r6
 8016c56:	f000 f847 	bl	8016ce8 <__smakebuf_r>
 8016c5a:	89a0      	ldrh	r0, [r4, #12]
 8016c5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016c60:	f010 0301 	ands.w	r3, r0, #1
 8016c64:	d00a      	beq.n	8016c7c <__swsetup_r+0xbc>
 8016c66:	2300      	movs	r3, #0
 8016c68:	60a3      	str	r3, [r4, #8]
 8016c6a:	6963      	ldr	r3, [r4, #20]
 8016c6c:	425b      	negs	r3, r3
 8016c6e:	61a3      	str	r3, [r4, #24]
 8016c70:	6923      	ldr	r3, [r4, #16]
 8016c72:	b943      	cbnz	r3, 8016c86 <__swsetup_r+0xc6>
 8016c74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016c78:	d1ba      	bne.n	8016bf0 <__swsetup_r+0x30>
 8016c7a:	bd70      	pop	{r4, r5, r6, pc}
 8016c7c:	0781      	lsls	r1, r0, #30
 8016c7e:	bf58      	it	pl
 8016c80:	6963      	ldrpl	r3, [r4, #20]
 8016c82:	60a3      	str	r3, [r4, #8]
 8016c84:	e7f4      	b.n	8016c70 <__swsetup_r+0xb0>
 8016c86:	2000      	movs	r0, #0
 8016c88:	e7f7      	b.n	8016c7a <__swsetup_r+0xba>
 8016c8a:	bf00      	nop
 8016c8c:	20000014 	.word	0x20000014
 8016c90:	08017720 	.word	0x08017720
 8016c94:	08017740 	.word	0x08017740
 8016c98:	08017700 	.word	0x08017700

08016c9c <__swhatbuf_r>:
 8016c9c:	b570      	push	{r4, r5, r6, lr}
 8016c9e:	460e      	mov	r6, r1
 8016ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ca4:	2900      	cmp	r1, #0
 8016ca6:	b096      	sub	sp, #88	; 0x58
 8016ca8:	4614      	mov	r4, r2
 8016caa:	461d      	mov	r5, r3
 8016cac:	da08      	bge.n	8016cc0 <__swhatbuf_r+0x24>
 8016cae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	602a      	str	r2, [r5, #0]
 8016cb6:	061a      	lsls	r2, r3, #24
 8016cb8:	d410      	bmi.n	8016cdc <__swhatbuf_r+0x40>
 8016cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016cbe:	e00e      	b.n	8016cde <__swhatbuf_r+0x42>
 8016cc0:	466a      	mov	r2, sp
 8016cc2:	f000 f851 	bl	8016d68 <_fstat_r>
 8016cc6:	2800      	cmp	r0, #0
 8016cc8:	dbf1      	blt.n	8016cae <__swhatbuf_r+0x12>
 8016cca:	9a01      	ldr	r2, [sp, #4]
 8016ccc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016cd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016cd4:	425a      	negs	r2, r3
 8016cd6:	415a      	adcs	r2, r3
 8016cd8:	602a      	str	r2, [r5, #0]
 8016cda:	e7ee      	b.n	8016cba <__swhatbuf_r+0x1e>
 8016cdc:	2340      	movs	r3, #64	; 0x40
 8016cde:	2000      	movs	r0, #0
 8016ce0:	6023      	str	r3, [r4, #0]
 8016ce2:	b016      	add	sp, #88	; 0x58
 8016ce4:	bd70      	pop	{r4, r5, r6, pc}
	...

08016ce8 <__smakebuf_r>:
 8016ce8:	898b      	ldrh	r3, [r1, #12]
 8016cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016cec:	079d      	lsls	r5, r3, #30
 8016cee:	4606      	mov	r6, r0
 8016cf0:	460c      	mov	r4, r1
 8016cf2:	d507      	bpl.n	8016d04 <__smakebuf_r+0x1c>
 8016cf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016cf8:	6023      	str	r3, [r4, #0]
 8016cfa:	6123      	str	r3, [r4, #16]
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	6163      	str	r3, [r4, #20]
 8016d00:	b002      	add	sp, #8
 8016d02:	bd70      	pop	{r4, r5, r6, pc}
 8016d04:	ab01      	add	r3, sp, #4
 8016d06:	466a      	mov	r2, sp
 8016d08:	f7ff ffc8 	bl	8016c9c <__swhatbuf_r>
 8016d0c:	9900      	ldr	r1, [sp, #0]
 8016d0e:	4605      	mov	r5, r0
 8016d10:	4630      	mov	r0, r6
 8016d12:	f7fb fc9d 	bl	8012650 <_malloc_r>
 8016d16:	b948      	cbnz	r0, 8016d2c <__smakebuf_r+0x44>
 8016d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016d1c:	059a      	lsls	r2, r3, #22
 8016d1e:	d4ef      	bmi.n	8016d00 <__smakebuf_r+0x18>
 8016d20:	f023 0303 	bic.w	r3, r3, #3
 8016d24:	f043 0302 	orr.w	r3, r3, #2
 8016d28:	81a3      	strh	r3, [r4, #12]
 8016d2a:	e7e3      	b.n	8016cf4 <__smakebuf_r+0xc>
 8016d2c:	4b0d      	ldr	r3, [pc, #52]	; (8016d64 <__smakebuf_r+0x7c>)
 8016d2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016d30:	89a3      	ldrh	r3, [r4, #12]
 8016d32:	6020      	str	r0, [r4, #0]
 8016d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d38:	81a3      	strh	r3, [r4, #12]
 8016d3a:	9b00      	ldr	r3, [sp, #0]
 8016d3c:	6163      	str	r3, [r4, #20]
 8016d3e:	9b01      	ldr	r3, [sp, #4]
 8016d40:	6120      	str	r0, [r4, #16]
 8016d42:	b15b      	cbz	r3, 8016d5c <__smakebuf_r+0x74>
 8016d44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016d48:	4630      	mov	r0, r6
 8016d4a:	f000 f81f 	bl	8016d8c <_isatty_r>
 8016d4e:	b128      	cbz	r0, 8016d5c <__smakebuf_r+0x74>
 8016d50:	89a3      	ldrh	r3, [r4, #12]
 8016d52:	f023 0303 	bic.w	r3, r3, #3
 8016d56:	f043 0301 	orr.w	r3, r3, #1
 8016d5a:	81a3      	strh	r3, [r4, #12]
 8016d5c:	89a0      	ldrh	r0, [r4, #12]
 8016d5e:	4305      	orrs	r5, r0
 8016d60:	81a5      	strh	r5, [r4, #12]
 8016d62:	e7cd      	b.n	8016d00 <__smakebuf_r+0x18>
 8016d64:	080123f1 	.word	0x080123f1

08016d68 <_fstat_r>:
 8016d68:	b538      	push	{r3, r4, r5, lr}
 8016d6a:	4d07      	ldr	r5, [pc, #28]	; (8016d88 <_fstat_r+0x20>)
 8016d6c:	2300      	movs	r3, #0
 8016d6e:	4604      	mov	r4, r0
 8016d70:	4608      	mov	r0, r1
 8016d72:	4611      	mov	r1, r2
 8016d74:	602b      	str	r3, [r5, #0]
 8016d76:	f7ee f8d2 	bl	8004f1e <_fstat>
 8016d7a:	1c43      	adds	r3, r0, #1
 8016d7c:	d102      	bne.n	8016d84 <_fstat_r+0x1c>
 8016d7e:	682b      	ldr	r3, [r5, #0]
 8016d80:	b103      	cbz	r3, 8016d84 <_fstat_r+0x1c>
 8016d82:	6023      	str	r3, [r4, #0]
 8016d84:	bd38      	pop	{r3, r4, r5, pc}
 8016d86:	bf00      	nop
 8016d88:	20014b64 	.word	0x20014b64

08016d8c <_isatty_r>:
 8016d8c:	b538      	push	{r3, r4, r5, lr}
 8016d8e:	4d06      	ldr	r5, [pc, #24]	; (8016da8 <_isatty_r+0x1c>)
 8016d90:	2300      	movs	r3, #0
 8016d92:	4604      	mov	r4, r0
 8016d94:	4608      	mov	r0, r1
 8016d96:	602b      	str	r3, [r5, #0]
 8016d98:	f7ee f8d1 	bl	8004f3e <_isatty>
 8016d9c:	1c43      	adds	r3, r0, #1
 8016d9e:	d102      	bne.n	8016da6 <_isatty_r+0x1a>
 8016da0:	682b      	ldr	r3, [r5, #0]
 8016da2:	b103      	cbz	r3, 8016da6 <_isatty_r+0x1a>
 8016da4:	6023      	str	r3, [r4, #0]
 8016da6:	bd38      	pop	{r3, r4, r5, pc}
 8016da8:	20014b64 	.word	0x20014b64

08016dac <_init>:
 8016dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dae:	bf00      	nop
 8016db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016db2:	bc08      	pop	{r3}
 8016db4:	469e      	mov	lr, r3
 8016db6:	4770      	bx	lr

08016db8 <_fini>:
 8016db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dba:	bf00      	nop
 8016dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016dbe:	bc08      	pop	{r3}
 8016dc0:	469e      	mov	lr, r3
 8016dc2:	4770      	bx	lr
